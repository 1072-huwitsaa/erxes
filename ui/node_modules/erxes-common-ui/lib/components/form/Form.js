"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var validator_1 = __importDefault(require("validator"));
var helpers_1 = require("../helpers");
var styles_1 = require("./styles");
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        _this.formId = helpers_1.generateRandomString();
        _this.children = [];
        _this.registerChild = function (child) {
            _this.children.push(child);
        };
        _this.resetSubmit = function () {
            _this.setState({ isSubmitted: false });
        };
        _this.runValidations = function () {
            var errors = {};
            var values = {};
            for (var _i = 0, _a = _this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                errors[child.props.name] = _this.validate(child);
                values[child.props.name] = _this.getValue(child);
            }
            _this.setState({ errors: errors, values: values }, function () {
                var hasErrors = Object.values(errors).some(function (error) { return error !== null; });
                if (hasErrors) {
                    return;
                }
                if (_this.props.onSubmit) {
                    return _this.props.onSubmit(_this.state.values);
                }
                _this.setState({ isSubmitted: !_this.state.isSubmitted });
            });
        };
        _this.getSelector = function (name) {
            return document.querySelector("#" + _this.formId + " [name='" + name + "']");
        };
        _this.getValue = function (child) {
            var element = _this.getSelector(child.props.name);
            if (element) {
                return element.value;
            }
            return '';
        };
        _this.onSubmit = function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this.runValidations();
        };
        _this.validate = function (child) {
            var props = child.props;
            var element = _this.getSelector(props.name);
            var value = element ? element.value : '';
            if (props.required && !value) {
                return react_1.default.createElement(styles_1.Error, null, "Required field");
            }
            if (props.type === 'email' && !validator_1.default.isEmail(value)) {
                return (react_1.default.createElement(styles_1.Error, null, "Invalid email format! Please enter a valid email address"));
            }
            if (props.max &&
                !validator_1.default.isLength('description', { min: 0, max: props.max })) {
                return (react_1.default.createElement(styles_1.Error, null,
                    "Maximum length is ",
                    props.max,
                    " characters"));
            }
            if (value && props.type === 'url' && !validator_1.default.isURL(value)) {
                return react_1.default.createElement(styles_1.Error, null, "Invalid link");
            }
            if (value && props.type === 'number' && !validator_1.default.isFloat(value)) {
                return (react_1.default.createElement(styles_1.Error, null, "Invalid number format! Please enter a valid number"));
            }
            if (value && props.name === 'username' && !helpers_1.isValidUsername(value)) {
                return react_1.default.createElement(styles_1.Error, null, "Invalid Username");
            }
            return null;
        };
        _this.state = {
            errors: {},
            values: {},
            isSubmitted: false
        };
        return _this;
    }
    Form.prototype.render = function () {
        return (react_1.default.createElement("form", { id: this.formId, onSubmit: this.onSubmit, noValidate: true, autoComplete: this.props.autoComplete }, this.props.renderContent({
            errors: this.state.errors,
            values: this.state.values,
            registerChild: this.registerChild,
            runValidations: this.runValidations,
            isSubmitted: this.state.isSubmitted,
            resetSubmit: this.resetSubmit
        })));
    };
    return Form;
}(react_1.default.Component));
exports.default = Form;
//# sourceMappingURL=Form.js.map