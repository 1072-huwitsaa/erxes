import * as React from "react";
export * from "./CalendarContainer";
export declare const CalendarContainer: any;
export declare type ViewMode = "years" | "months" | "days" | "time";
export interface TimeConstraint {
    min: number;
    max: number;
    step: number;
}
export interface TimeConstraints {
    hours?: TimeConstraint;
    minutes?: TimeConstraint;
    seconds?: TimeConstraint;
    milliseconds?: TimeConstraint;
}
export declare type IsValidDateFunc = (currentDate: any, selectedDate?: Date) => boolean;
export declare type SetTimeFunc = (date: Date) => void;
export declare type SetViewTimestampFunc = (viewTimestamp: Date) => void;
export declare type ShiftFunc = (op: "sub" | "add", amount: number, type: "years" | "months") => (event: any) => void;
export declare type ShowFunc = (view: "years" | "months" | "days" | "time") => (event: any) => void;
export declare type SetDateFunc = (type: "years" | "months" | "days", newDate: Date, close?: boolean) => (event: any) => void;
interface DateTimeProps {
    value?: Date | string;
    defaultValue: Date | string;
    viewDate: Date | string;
    dateFormat: boolean | string;
    timeFormat: boolean | string;
    input?: boolean;
    open?: boolean;
    locale?: any;
    utc?: boolean;
    onChange?: (value?: Date | string) => void;
    onFocus?: (value?: Date | string) => void;
    onBlur?: (value?: Date | string) => void;
    onViewModeChange?: (viewMode: ViewMode) => void;
    onNavigateBack?: (amount: number, type: ViewMode) => void;
    onNavigateForward?: (amount: number, type: ViewMode) => void;
    viewMode?: ViewMode;
    className?: string;
    inputProps?: React.HTMLProps<HTMLInputElement>;
    isValidDate?: IsValidDateFunc;
    renderInput?: (props: any, openCalendar: any, closeCalendar: any) => JSX.Element;
    renderDay?: (props: any, currentDate: any, selectedDate?: Date) => JSX.Element;
    renderMonth?: (props: any, month: number, year: number, selectedDate?: Date) => JSX.Element;
    renderYear?: (props: any, year: number, selectedDate?: Date) => JSX.Element;
    closeOnSelect?: boolean;
    closeOnTab?: boolean;
    timeConstraints?: TimeConstraints;
    disableOnClickOutside?: boolean;
}
interface DateTimeState {
    currentView: ViewMode;
    updateOn: ViewMode;
    inputFormat: string;
    viewDate: Date;
    selectedDate?: Date;
    viewTimestamp: Date;
    inputValue: string;
    open: boolean;
}
declare class DateTime extends React.Component<DateTimeProps, DateTimeState> {
    static defaultProps: {
        className: string;
        defaultValue: string;
        viewDate: undefined;
        inputProps: {};
        input: boolean;
        onFocus: () => void;
        onBlur: () => void;
        onChange: () => void;
        onViewModeChange: () => void;
        onNavigateBack: () => void;
        onNavigateForward: () => void;
        timeFormat: boolean;
        timeConstraints: {};
        dateFormat: boolean;
        closeOnSelect: boolean;
        closeOnTab: boolean;
        utc: boolean;
    };
    constructor(props: any);
    componentDidUpdate(prevProps: DateTimeProps, prevState: DateTimeState): void;
    UNSAFE_componentWillReceiveProps(nextProps: DateTimeProps): void;
    onInputChange(e: React.FormEvent<HTMLInputElement>): void;
    onInputKey(e: React.KeyboardEvent<HTMLInputElement>): void;
    show: ShowFunc;
    shift: ShiftFunc;
    setTime: SetTimeFunc;
    setViewTimestamp: SetViewTimestampFunc;
    setDate: SetDateFunc;
    openCalendar(e: any): void;
    closeCalendar(): void;
    handleClickOutside(): void;
    getComponentProps(): {
        formatOptions: {
            locale: any;
        };
        dateFormat: any;
        timeFormat: any;
    };
    render(): JSX.Element;
}
export default DateTime;
