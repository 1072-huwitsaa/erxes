{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/AutoAndManualForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport { queries } from 'modules/settings/emailTemplates/graphql';\nimport { queries as integrationQueries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport AutoAndManualForm from '../components/AutoAndManualForm';\nimport FormBase from '../components/FormBase';\nimport withFormMutations from './withFormMutations';\n\nvar AutoAndManualFormContainer = function AutoAndManualFormContainer(props) {\n  var emailTemplatesQuery = props.emailTemplatesQuery,\n      integrationConfigsQuery = props.integrationConfigsQuery,\n      externalIntegrationsQuery = props.externalIntegrationsQuery,\n      integrationsQuery = props.integrationsQuery;\n\n  if (emailTemplatesQuery.loading || integrationConfigsQuery.loading || externalIntegrationsQuery.loading || integrationsQuery.loading) {\n    return null;\n  }\n\n  var configs = integrationConfigsQuery.integrationsFetchApi || [];\n  var externalIntegrations = externalIntegrationsQuery.integrationsFetchApi || [];\n  var integrations = integrationsQuery.integrations || [];\n  var mappedIntegrations = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var ext = _step.value;\n      var locals = integrations.filter(function (i) {\n        return i._id === ext.erxesApiId && i.isActive;\n      });\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = locals[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var local = _step2.value;\n          mappedIntegrations.push({\n            _id: local._id,\n            name: local.name,\n            phoneNumber: ext.telnyxPhoneNumber,\n            isActive: local.isActive\n          });\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    };\n\n    for (var _iterator = externalIntegrations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    templates: emailTemplatesQuery.emailTemplates || [],\n    smsConfig: configs.find(function (i) {\n      return i.code === 'TELNYX_API_KEY';\n    }),\n    integrations: mappedIntegrations\n  });\n\n  var content = function content(formProps) {\n    return React.createElement(AutoAndManualForm, Object.assign({}, updatedProps, formProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(FormBase, {\n    kind: props.kind || '',\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  });\n};\n\nvar withTemplatesQuery = withFormMutations(withProps(compose(graphql(gql(queries.emailTemplates), {\n  name: 'emailTemplatesQuery',\n  options: function options(_ref) {\n    var totalCountQuery = _ref.totalCountQuery;\n    return {\n      variables: {\n        perPage: totalCountQuery.emailTemplatesTotalCount\n      }\n    };\n  }\n}))(AutoAndManualFormContainer)));\nexport default withProps(compose(graphql(gql(queries.totalCount), {\n  name: 'totalCountQuery'\n}), graphql(gql(integrationQueries.fetchApi), {\n  name: 'integrationConfigsQuery',\n  options: function options() {\n    return {\n      variables: {\n        path: '/configs',\n        params: {}\n      }\n    };\n  }\n}), graphql(gql(integrationQueries.fetchApi), {\n  name: 'externalIntegrationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        path: '/integrations',\n        params: {\n          kind: 'telnyx'\n        }\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(integrationQueries.integrations), {\n  name: 'integrationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        kind: 'telnyx'\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(withTemplatesQuery));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/AutoAndManualForm.tsx"],"names":["gql","compose","withProps","queries","integrationQueries","React","graphql","AutoAndManualForm","FormBase","withFormMutations","AutoAndManualFormContainer","props","emailTemplatesQuery","integrationConfigsQuery","externalIntegrationsQuery","integrationsQuery","loading","configs","integrationsFetchApi","externalIntegrations","integrations","mappedIntegrations","ext","locals","filter","i","_id","erxesApiId","isActive","local","push","name","phoneNumber","telnyxPhoneNumber","updatedProps","templates","emailTemplates","smsConfig","find","code","content","formProps","kind","withTemplatesQuery","options","totalCountQuery","variables","perPage","emailTemplatesTotalCount","totalCount","fetchApi","path","params","fetchPolicy"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AAIA,SAASC,OAAT,QAAwB,yCAAxB;AAEA,SAASA,OAAO,IAAIC,kBAApB,QAA8C,uCAA9C;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAMA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAqBA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,KAAD,EAAuB;AAAA,MAEtDC,mBAFsD,GAMpDD,KANoD,CAEtDC,mBAFsD;AAAA,MAGtDC,uBAHsD,GAMpDF,KANoD,CAGtDE,uBAHsD;AAAA,MAItDC,yBAJsD,GAMpDH,KANoD,CAItDG,yBAJsD;AAAA,MAKtDC,iBALsD,GAMpDJ,KANoD,CAKtDI,iBALsD;;AAQxD,MACEH,mBAAmB,CAACI,OAApB,IACAH,uBAAuB,CAACG,OADxB,IAEAF,yBAAyB,CAACE,OAF1B,IAGAD,iBAAiB,CAACC,OAJpB,EAKE;AACA,WAAO,IAAP;AACD;;AAED,MAAMC,OAAO,GAAGJ,uBAAuB,CAACK,oBAAxB,IAAgD,EAAhE;AACA,MAAMC,oBAAoB,GACxBL,yBAAyB,CAACI,oBAA1B,IAAkD,EADpD;AAEA,MAAME,YAAY,GAAGL,iBAAiB,CAACK,YAAlB,IAAkC,EAAvD;AAEA,MAAMC,kBAA2C,GAAG,EAApD;AAtBwD;AAAA;AAAA;;AAAA;AAAA;AAAA,UAwB7CC,GAxB6C;AAyBtD,UAAMC,MAAM,GAAGH,YAAY,CAACI,MAAb,CACb,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,GAAF,KAAUJ,GAAG,CAACK,UAAd,IAA4BF,CAAC,CAACG,QAAlC;AAAA,OADY,CAAf;AAzBsD;AAAA;AAAA;;AAAA;AA6BtD,8BAAoBL,MAApB,mIAA4B;AAAA,cAAjBM,KAAiB;AAC1BR,UAAAA,kBAAkB,CAACS,IAAnB,CAAwB;AACtBJ,YAAAA,GAAG,EAAEG,KAAK,CAACH,GADW;AAEtBK,YAAAA,IAAI,EAAEF,KAAK,CAACE,IAFU;AAGtBC,YAAAA,WAAW,EAAEV,GAAG,CAACW,iBAHK;AAItBL,YAAAA,QAAQ,EAAEC,KAAK,CAACD;AAJM,WAAxB;AAMD;AApCqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBxD,yBAAkBT,oBAAlB,8HAAwC;AAAA;AAavC;AArCuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuCxD,MAAMe,YAAY,qBACbvB,KADa;AAEhBwB,IAAAA,SAAS,EAAEvB,mBAAmB,CAACwB,cAApB,IAAsC,EAFjC;AAGhBC,IAAAA,SAAS,EAAEpB,OAAO,CAACqB,IAAR,CAAa,UAAAb,CAAC;AAAA,aAAIA,CAAC,CAACc,IAAF,KAAW,gBAAf;AAAA,KAAd,CAHK;AAIhBnB,IAAAA,YAAY,EAAEC;AAJE,IAAlB;;AAOA,MAAMmB,OAAO,GAAG,SAAVA,OAAU,CAAAC,SAAS;AAAA,WACvB,oBAAC,iBAAD,oBAAuBP,YAAvB,EAAyCO,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADuB;AAAA,GAAzB;;AAIA,SAAO,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE9B,KAAK,CAAC+B,IAAN,IAAc,EAA9B;AAAkC,IAAA,OAAO,EAAEF,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAnDD;;AAqDA,IAAMG,kBAAkB,GAAGlC,iBAAiB,CAC1CP,SAAS,CACPD,OAAO,CACLK,OAAO,CAAqCN,GAAG,CAACG,OAAO,CAACiC,cAAT,CAAxC,EAAkE;AACvEL,EAAAA,IAAI,EAAE,qBADiE;AAEvEa,EAAAA,OAAO,EAAE;AAAA,QAAGC,eAAH,QAAGA,eAAH;AAAA,WAA0B;AACjCC,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAEF,eAAe,CAACG;AADhB;AADsB,KAA1B;AAAA;AAF8D,CAAlE,CADF,CAAP,CASEtC,0BATF,CADO,CADiC,CAA5C;AAeA,eAAeR,SAAS,CACtBD,OAAO,CACLK,OAAO,CAACN,GAAG,CAACG,OAAO,CAAC8C,UAAT,CAAJ,EAA0B;AAC/BlB,EAAAA,IAAI,EAAE;AADyB,CAA1B,CADF,EAILzB,OAAO,CAACN,GAAG,CAACI,kBAAkB,CAAC8C,QAApB,CAAJ,EAAmC;AACxCnB,EAAAA,IAAI,EAAE,yBADkC;AAExCa,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdE,MAAAA,SAAS,EAAE;AACTK,QAAAA,IAAI,EAAE,UADG;AAETC,QAAAA,MAAM,EAAE;AAFC;AADG,KAAP;AAAA;AAF+B,CAAnC,CAJF,EAaL9C,OAAO,CAACN,GAAG,CAACI,kBAAkB,CAAC8C,QAApB,CAAJ,EAAmC;AACxCnB,EAAAA,IAAI,EAAE,2BADkC;AAExCa,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdE,MAAAA,SAAS,EAAE;AAAEK,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,MAAM,EAAE;AAAEV,UAAAA,IAAI,EAAE;AAAR;AAAjC,OADG;AAEdW,MAAAA,WAAW,EAAE;AAFC,KAAP;AAAA;AAF+B,CAAnC,CAbF,EAoBL/C,OAAO,CACLN,GAAG,CAACI,kBAAkB,CAACgB,YAApB,CADE,EAEL;AACEW,EAAAA,IAAI,EAAE,mBADR;AAEEa,EAAAA,OAAO,EAAE,mBAAM;AACb,WAAO;AACLE,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OADN;AAELW,MAAAA,WAAW,EAAE;AAFR,KAAP;AAID;AAPH,CAFK,CApBF,CAAP,CAgCEV,kBAhCF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { withProps } from 'modules/common/utils';\nimport { AddMutationResponse } from 'modules/segments/types';\nimport { IBrand } from 'modules/settings/brands/types';\nimport { EmailTemplatesQueryResponse } from 'modules/settings/emailTemplates/containers/List';\nimport { queries } from 'modules/settings/emailTemplates/graphql';\nimport { IConfig } from 'modules/settings/general/types';\nimport { queries as integrationQueries } from 'modules/settings/integrations/graphql';\nimport { IntegrationsQueryResponse } from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport AutoAndManualForm from '../components/AutoAndManualForm';\nimport FormBase from '../components/FormBase';\nimport {\n  IEngageMessageDoc,\n  IEngageScheduleDate,\n  IIntegrationWithPhone\n} from '../types';\nimport withFormMutations from './withFormMutations';\n\ntype Props = {\n  kind?: string;\n  brands: IBrand[];\n  scheduleDate?: IEngageScheduleDate;\n  totalCountQuery?: any;\n};\n\ntype FinalProps = {\n  emailTemplatesQuery: EmailTemplatesQueryResponse;\n  integrationConfigsQuery: any;\n  externalIntegrationsQuery: any;\n  integrationsQuery: any;\n  users: IUser[];\n  isActionLoading: boolean;\n  save: (doc: IEngageMessageDoc) => Promise<any>;\n  smsConfig: IConfig;\n} & Props &\n  AddMutationResponse;\n\nconst AutoAndManualFormContainer = (props: FinalProps) => {\n  const {\n    emailTemplatesQuery,\n    integrationConfigsQuery,\n    externalIntegrationsQuery,\n    integrationsQuery\n  } = props;\n\n  if (\n    emailTemplatesQuery.loading ||\n    integrationConfigsQuery.loading ||\n    externalIntegrationsQuery.loading ||\n    integrationsQuery.loading\n  ) {\n    return null;\n  }\n\n  const configs = integrationConfigsQuery.integrationsFetchApi || [];\n  const externalIntegrations =\n    externalIntegrationsQuery.integrationsFetchApi || [];\n  const integrations = integrationsQuery.integrations || [];\n\n  const mappedIntegrations: IIntegrationWithPhone[] = [];\n\n  for (const ext of externalIntegrations) {\n    const locals = integrations.filter(\n      i => i._id === ext.erxesApiId && i.isActive\n    );\n\n    for (const local of locals) {\n      mappedIntegrations.push({\n        _id: local._id,\n        name: local.name,\n        phoneNumber: ext.telnyxPhoneNumber,\n        isActive: local.isActive\n      });\n    }\n  }\n\n  const updatedProps = {\n    ...props,\n    templates: emailTemplatesQuery.emailTemplates || [],\n    smsConfig: configs.find(i => i.code === 'TELNYX_API_KEY'),\n    integrations: mappedIntegrations\n  };\n\n  const content = formProps => (\n    <AutoAndManualForm {...updatedProps} {...formProps} />\n  );\n\n  return <FormBase kind={props.kind || ''} content={content} />;\n};\n\nconst withTemplatesQuery = withFormMutations<Props>(\n  withProps<Props>(\n    compose(\n      graphql<Props, EmailTemplatesQueryResponse>(gql(queries.emailTemplates), {\n        name: 'emailTemplatesQuery',\n        options: ({ totalCountQuery }) => ({\n          variables: {\n            perPage: totalCountQuery.emailTemplatesTotalCount\n          }\n        })\n      })\n    )(AutoAndManualFormContainer)\n  )\n);\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(queries.totalCount), {\n      name: 'totalCountQuery'\n    }),\n    graphql(gql(integrationQueries.fetchApi), {\n      name: 'integrationConfigsQuery',\n      options: () => ({\n        variables: {\n          path: '/configs',\n          params: {}\n        }\n      })\n    }),\n    graphql(gql(integrationQueries.fetchApi), {\n      name: 'externalIntegrationsQuery',\n      options: () => ({\n        variables: { path: '/integrations', params: { kind: 'telnyx' } },\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, IntegrationsQueryResponse>(\n      gql(integrationQueries.integrations),\n      {\n        name: 'integrationsQuery',\n        options: () => {\n          return {\n            variables: { kind: 'telnyx' },\n            fetchPolicy: 'network-only'\n          };\n        }\n      }\n    )\n  )(withTemplatesQuery)\n);\n"]},"metadata":{},"sourceType":"module"}