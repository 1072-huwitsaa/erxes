{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/conversationDetail/workarea/responseTemplate/Modal.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { __, Alert } from \"modules/common/utils\";\nimport React from \"react\";\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSave = function () {\n      var _this$props = _this.props,\n          content = _this$props.content,\n          files = _this$props.files;\n      var doc = {\n        content: content,\n        files: files,\n        brandId: document.getElementById(\"template-brand-id\").value,\n        name: document.getElementById(\"template-name\").value\n      };\n\n      _this.props.saveResponseTemplate(doc, function (error) {\n        if (error) {\n          return Alert.error(error.message);\n        }\n\n        var element = document.querySelector(\"button.close\");\n        return element.click();\n      });\n    };\n\n    _this.renderForm = function () {\n      var _this$props2 = _this.props,\n          brands = _this$props2.brands,\n          brandId = _this$props2.brandId;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Brand\"), React.createElement(FormControl, {\n        id: \"template-brand-id\",\n        componentClass: \"select\",\n        placeholder: __(\"Select Brand\"),\n        defaultValue: brandId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, brands.map(function (brand) {\n        return React.createElement(\"option\", {\n          key: brand._id,\n          value: brand._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, brand.name);\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Name\"), React.createElement(FormControl, {\n        id: \"template-name\",\n        type: \"text\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: _this.onSave,\n        btnStyle: \"success\",\n        icon: \"check-circle\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Save\")));\n    };\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"render\",\n    value: function render() {\n      var trigger = this.props.trigger;\n      return React.createElement(ModalTrigger, {\n        title: \"Create response template\",\n        trigger: trigger,\n        content: this.renderForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nexport default Modal;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/conversationDetail/workarea/responseTemplate/Modal.tsx"],"names":["Button","FormControl","FormGroup","ControlLabel","ModalTrigger","ModalFooter","__","Alert","React","Modal","onSave","props","content","files","doc","brandId","document","getElementById","value","name","saveResponseTemplate","error","message","element","querySelector","click","renderForm","brands","map","brand","_id","trigger","Component"],"mappings":"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","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { IAttachment } from \"modules/common/types\";\nimport { __, Alert } from \"modules/common/utils\";\nimport { IBrand } from \"modules/settings/brands/types\";\nimport { SaveResponseTemplateMutationVariables } from \"modules/settings/responseTemplates/types\";\nimport React from \"react\";\n\ntype Props = {\n  saveResponseTemplate: (\n    doc: SaveResponseTemplateMutationVariables,\n    callback: (error?: Error) => void\n  ) => void;\n  brands: IBrand[];\n  trigger: React.ReactNode;\n  brandId?: string;\n  files?: IAttachment[];\n  content?: string;\n};\n\nclass Modal extends React.Component<Props, {}> {\n  onSave = () => {\n    const { content, files } = this.props;\n\n    const doc = {\n      content,\n      files,\n      brandId: (document.getElementById(\n        \"template-brand-id\"\n      ) as HTMLInputElement).value,\n      name: (document.getElementById(\"template-name\") as HTMLInputElement)\n        .value,\n    };\n\n    this.props.saveResponseTemplate(doc, (error) => {\n      if (error) {\n        return Alert.error(error.message);\n      }\n\n      const element = document.querySelector(\"button.close\") as HTMLElement;\n\n      return element.click();\n    });\n  };\n\n  renderForm = () => {\n    const { brands, brandId } = this.props;\n\n    return (\n      <React.Fragment>\n        <FormGroup>\n          <ControlLabel>Brand</ControlLabel>\n\n          <FormControl\n            id=\"template-brand-id\"\n            componentClass=\"select\"\n            placeholder={__(\"Select Brand\") as string}\n            defaultValue={brandId}\n          >\n            {brands.map((brand) => (\n              <option key={brand._id} value={brand._id}>\n                {brand.name}\n              </option>\n            ))}\n          </FormControl>\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Name</ControlLabel>\n          <FormControl id=\"template-name\" type=\"text\" required={true} />\n        </FormGroup>\n\n        <ModalFooter>\n          <Button\n            onClick={this.onSave}\n            btnStyle=\"success\"\n            icon=\"check-circle\"\n            uppercase={false}\n          >\n            Save\n          </Button>\n        </ModalFooter>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    const { trigger } = this.props;\n\n    return (\n      <ModalTrigger\n        title=\"Create response template\"\n        trigger={trigger}\n        content={this.renderForm}\n      />\n    );\n  }\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}