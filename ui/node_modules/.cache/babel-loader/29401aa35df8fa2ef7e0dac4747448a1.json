{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/utils/commonListComposer.tsx\";\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { confirm, withProps } from 'modules/common/utils';\nimport { Alert } from 'modules/common/utils';\nimport React from 'react';\n\nfunction commonListComposer(options) {\n  var text = options.text,\n      label = options.label,\n      stringEditMutation = options.stringEditMutation,\n      stringAddMutation = options.stringAddMutation,\n      stringCopyMutation = options.stringCopyMutation,\n      copy = options.copy,\n      gqlListQuery = options.gqlListQuery,\n      gqlTotalCountQuery = options.gqlTotalCountQuery,\n      gqlRemoveMutation = options.gqlRemoveMutation,\n      gqlCopyMutation = options.gqlCopyMutation,\n      ListComponent = options.ListComponent,\n      gqlConfigsQuery = options.gqlConfigsQuery;\n\n  var ListContainer = function ListContainer(props) {\n    var copyMutation = props.copyMutation,\n        listQuery = props.listQuery,\n        totalCountQuery = props.totalCountQuery,\n        removeMutation = props.removeMutation,\n        history = props.history;\n    var totalCount = totalCountQuery[\"\".concat(label, \"TotalCount\")] || 0;\n    var objects = listQuery[label] || []; // remove action\n\n    var remove = function remove(id) {\n      confirm().then(function () {\n        removeMutation({\n          variables: {\n            _id: id\n          }\n        }).then(function () {\n          // update queries\n          listQuery.refetch();\n          totalCountQuery.refetch();\n          Alert.success(\"You successfully deleted a \".concat(text, \".\"));\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      });\n    };\n\n    var copyItem = function copyItem(id, key, list) {\n      if (copyMutation) {\n        copyMutation({\n          variables: _defineProperty({\n            _id: id\n          }, key, list)\n        }).then(function () {\n          listQuery.refetch();\n          totalCountQuery.refetch();\n          Alert.success(\"You successfully copied a \".concat(text));\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      }\n    };\n\n    var renderButton = function renderButton(_ref) {\n      var name = _ref.name,\n          values = _ref.values,\n          isSubmitted = _ref.isSubmitted,\n          callback = _ref.callback,\n          confirmationUpdate = _ref.confirmationUpdate,\n          object = _ref.object;\n\n      var afterMutate = function afterMutate() {\n        listQuery.refetch();\n        totalCountQuery.refetch();\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      var mutation = stringAddMutation;\n      var successAction = 'added';\n\n      if (object) {\n        mutation = stringEditMutation;\n        successAction = 'updated';\n      }\n\n      if (copy === true && stringCopyMutation && gqlCopyMutation) {\n        mutation = stringCopyMutation;\n        successAction = 'copied';\n      }\n\n      return React.createElement(ButtonMutate, {\n        mutation: mutation,\n        variables: values,\n        callback: afterMutate,\n        isSubmitted: isSubmitted,\n        type: \"submit\",\n        uppercase: false,\n        confirmationUpdate: confirmationUpdate,\n        successMessage: \"You successfully \".concat(successAction, \" a \").concat(name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    };\n\n    var updatedProps = _objectSpread({}, props, {\n      refetch: listQuery.refetch,\n      objects: objects,\n      totalCount: totalCount,\n      remove: remove,\n      history: history,\n      renderButton: renderButton,\n      loading: listQuery.loading,\n      copyItem: copyItem\n    });\n\n    return React.createElement(ListComponent, Object.assign({}, updatedProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }));\n  };\n\n  var composeAttr = [gqlListQuery, gqlTotalCountQuery];\n\n  if (gqlRemoveMutation) {\n    composeAttr.push(gqlRemoveMutation);\n  }\n\n  if (gqlConfigsQuery) {\n    composeAttr.push(gqlConfigsQuery);\n  }\n\n  if (gqlCopyMutation) {\n    composeAttr.push(gqlCopyMutation);\n  }\n\n  return withProps(compose.apply(void 0, composeAttr.concat([gqlListQuery, gqlTotalCountQuery]))(ListContainer));\n}\n\nexport default commonListComposer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/utils/commonListComposer.tsx"],"names":["compose","ButtonMutate","confirm","withProps","Alert","React","commonListComposer","options","text","label","stringEditMutation","stringAddMutation","stringCopyMutation","copy","gqlListQuery","gqlTotalCountQuery","gqlRemoveMutation","gqlCopyMutation","ListComponent","gqlConfigsQuery","ListContainer","props","copyMutation","listQuery","totalCountQuery","removeMutation","history","totalCount","objects","remove","id","then","variables","_id","refetch","success","catch","error","message","copyItem","key","list","renderButton","name","values","isSubmitted","callback","confirmationUpdate","object","afterMutate","mutation","successAction","updatedProps","loading","composeAttr","push"],"mappings":"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","sourcesContent":["import * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { confirm, withProps } from 'modules/common/utils';\nimport { Alert } from 'modules/common/utils';\nimport React from 'react';\n\ninterface IRemoveMutationVariables {\n  _id: string;\n}\n\ninterface ICopyMutationVariables extends IRemoveMutationVariables {\n  [key: string]: any;\n}\n\nfunction commonListComposer<ComponentProps>(options) {\n  const {\n    text,\n    label,\n    stringEditMutation,\n    stringAddMutation,\n    stringCopyMutation,\n    copy,\n    gqlListQuery,\n    gqlTotalCountQuery,\n    gqlRemoveMutation,\n    gqlCopyMutation,\n    ListComponent,\n    gqlConfigsQuery\n  } = options;\n\n  type Props = {\n    totalCountQuery: any;\n    listQuery: any;\n    history: any;\n    addMutation: ({ variables }: { variables: any }) => Promise<any>;\n    editMutation: ({ variables }: { variables: any }) => Promise<any>;\n    removeMutation: ({\n      variables: { _id }\n    }: {\n      variables: IRemoveMutationVariables;\n    }) => Promise<any>;\n    copyMutation: ({\n      variables: { _id, memberIds }\n    }: {\n      variables: ICopyMutationVariables;\n    }) => Promise<any>;\n    copy: boolean;\n  };\n\n  const ListContainer = (props: Props) => {\n    const {\n      copyMutation,\n      listQuery,\n      totalCountQuery,\n      removeMutation,\n      history\n    } = props;\n\n    const totalCount = totalCountQuery[`${label}TotalCount`] || 0;\n\n    const objects = listQuery[label] || [];\n\n    // remove action\n    const remove = id => {\n      confirm().then(() => {\n        removeMutation({\n          variables: { _id: id }\n        })\n          .then(() => {\n            // update queries\n            listQuery.refetch();\n            totalCountQuery.refetch();\n\n            Alert.success(`You successfully deleted a ${text}.`);\n          })\n          .catch(error => {\n            Alert.error(error.message);\n          });\n      });\n    };\n\n    const copyItem = (id: string, key: string, list: string[]) => {\n      if (copyMutation) {\n        copyMutation({ variables: { _id: id, [key]: list } })\n          .then(() => {\n            listQuery.refetch();\n            totalCountQuery.refetch();\n\n            Alert.success(`You successfully copied a ${text}`);\n          })\n          .catch(error => {\n            Alert.error(error.message);\n          });\n      }\n    };\n\n    const renderButton = ({\n      name,\n      values,\n      isSubmitted,\n      callback,\n      confirmationUpdate,\n      object\n    }: IButtonMutateProps) => {\n      const afterMutate = () => {\n        listQuery.refetch();\n        totalCountQuery.refetch();\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      let mutation = stringAddMutation;\n      let successAction = 'added';\n\n      if (object) {\n        mutation = stringEditMutation;\n        successAction = 'updated';\n      }\n\n      if (copy === true && stringCopyMutation && gqlCopyMutation) {\n        mutation = stringCopyMutation;\n        successAction = 'copied';\n      }\n\n      return (\n        <ButtonMutate\n          mutation={mutation}\n          variables={values}\n          callback={afterMutate}\n          isSubmitted={isSubmitted}\n          type=\"submit\"\n          uppercase={false}\n          confirmationUpdate={confirmationUpdate}\n          successMessage={`You successfully ${successAction} a ${name}`}\n        />\n      );\n    };\n\n    const updatedProps = {\n      ...props,\n      refetch: listQuery.refetch,\n      objects,\n      totalCount,\n      remove,\n      history,\n      renderButton,\n      loading: listQuery.loading,\n      copyItem\n    };\n\n    return <ListComponent {...updatedProps} />;\n  };\n\n  const composeAttr = [gqlListQuery, gqlTotalCountQuery];\n\n  if (gqlRemoveMutation) {\n    composeAttr.push(gqlRemoveMutation);\n  }\n\n  if (gqlConfigsQuery) {\n    composeAttr.push(gqlConfigsQuery);\n  }\n\n  if (gqlCopyMutation) {\n    composeAttr.push(gqlCopyMutation);\n  }\n\n  return withProps<ComponentProps>(\n    compose(...composeAttr, gqlListQuery, gqlTotalCountQuery)(ListContainer)\n  );\n}\n\nexport default commonListComposer;\n"]},"metadata":{},"sourceType":"module"}