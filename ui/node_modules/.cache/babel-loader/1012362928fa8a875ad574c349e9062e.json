{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomerDetails.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CustomerDetails from '../components/detail/CustomerDetails';\nimport { queries } from '../graphql';\n\nvar CustomerDetailsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomerDetailsContainer, _React$Component);\n\n  function CustomerDetailsContainer() {\n    _classCallCheck(this, CustomerDetailsContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomerDetailsContainer).apply(this, arguments));\n  }\n\n  _createClass(CustomerDetailsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          customerDetailQuery = _this$props.customerDetailQuery;\n\n      if (customerDetailQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      }\n\n      if (!customerDetailQuery.customerDetail) {\n        return React.createElement(EmptyState, {\n          text: \"Customer not found\",\n          image: \"/images/actions/17.svg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n      }\n\n      var taggerRefetchQueries = [{\n        query: gql(queries.customerDetail),\n        variables: {\n          _id: id\n        }\n      }];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        customer: customerDetailQuery.customerDetail || {},\n        taggerRefetchQueries: taggerRefetchQueries\n      });\n\n      return React.createElement(CustomerDetails, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CustomerDetailsContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.customerDetail), {\n  name: 'customerDetailQuery',\n  options: function options(_ref) {\n    var id = _ref.id;\n    return {\n      variables: {\n        _id: id\n      }\n    };\n  }\n}))(CustomerDetailsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomerDetails.tsx"],"names":["gql","compose","EmptyState","Spinner","withProps","React","graphql","CustomerDetails","queries","CustomerDetailsContainer","props","id","customerDetailQuery","loading","customerDetail","taggerRefetchQueries","query","variables","_id","updatedProps","customer","Component","name","options"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,SAASC,OAAT,QAAwB,YAAxB;;IAWMC,wB;;;;;;;;;;;;;6BACK;AAAA,wBAC6B,KAAKC,KADlC;AAAA,UACCC,EADD,eACCA,EADD;AAAA,UACKC,mBADL,eACKA,mBADL;;AAGP,UAAIA,mBAAmB,CAACC,OAAxB,EAAiC;AAC/B,eAAO,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAI,CAACD,mBAAmB,CAACE,cAAzB,EAAyC;AACvC,eACE,oBAAC,UAAD;AAAY,UAAA,IAAI,EAAC,oBAAjB;AAAsC,UAAA,KAAK,EAAC,wBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;AAED,UAAMC,oBAAoB,GAAG,CAC3B;AACEC,QAAAA,KAAK,EAAEhB,GAAG,CAACQ,OAAO,CAACM,cAAT,CADZ;AAEEG,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEP;AAAP;AAFb,OAD2B,CAA7B;;AAOA,UAAMQ,YAAY,qBACb,KAAKT,KADQ;AAEhBU,QAAAA,QAAQ,EAAER,mBAAmB,CAACE,cAApB,IAAsC,EAFhC;AAGhBC,QAAAA,oBAAoB,EAApBA;AAHgB,QAAlB;;AAMA,aAAO,oBAAC,eAAD,oBAAqBI,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA5BoCd,KAAK,CAACgB,S;;AA+B7C,eAAejB,SAAS,CACtBH,OAAO,CACLK,OAAO,CACLN,GAAG,CAACQ,OAAO,CAACM,cAAT,CADE,EAEL;AACEQ,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGZ,EAAH,QAAGA,EAAH;AAAA,WAA6B;AACpCM,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEP;AADI;AADyB,KAA7B;AAAA;AAFX,CAFK,CADF,CAAP,CAYEF,wBAZF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CustomerDetails from '../components/detail/CustomerDetails';\nimport { queries } from '../graphql';\nimport { CustomerDetailQueryResponse } from '../types';\n\ntype Props = {\n  id: string;\n};\n\ntype FinalProps = {\n  customerDetailQuery: CustomerDetailQueryResponse;\n} & Props;\n\nclass CustomerDetailsContainer extends React.Component<FinalProps, {}> {\n  render() {\n    const { id, customerDetailQuery } = this.props;\n\n    if (customerDetailQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    if (!customerDetailQuery.customerDetail) {\n      return (\n        <EmptyState text=\"Customer not found\" image=\"/images/actions/17.svg\" />\n      );\n    }\n\n    const taggerRefetchQueries = [\n      {\n        query: gql(queries.customerDetail),\n        variables: { _id: id }\n      }\n    ];\n\n    const updatedProps = {\n      ...this.props,\n      customer: customerDetailQuery.customerDetail || {},\n      taggerRefetchQueries\n    };\n\n    return <CustomerDetails {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, CustomerDetailQueryResponse, { _id: string }>(\n      gql(queries.customerDetail),\n      {\n        name: 'customerDetailQuery',\n        options: ({ id }: { id: string }) => ({\n          variables: {\n            _id: id\n          }\n        })\n      }\n    )\n  )(CustomerDetailsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}