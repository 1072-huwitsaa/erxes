{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/Widget.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { queries as templatesQuery } from 'modules/settings/emailTemplates/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Widget from '../components/Widget';\nimport { MESSAGE_KINDS, MESSENGER_KINDS, METHODS, SENT_AS_CHOICES } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport { crudMutationsOptions } from '../utils';\n\nvar WidgetContainer = function WidgetContainer(props) {\n  var currentUser = props.currentUser,\n      emailTemplatesQuery = props.emailTemplatesQuery,\n      brandsQuery = props.brandsQuery,\n      emptyBulk = props.emptyBulk,\n      messagesAddMutation = props.messagesAddMutation;\n\n  if (emailTemplatesQuery.loading || brandsQuery.loading) {\n    return null;\n  }\n\n  var emailTemplates = emailTemplatesQuery.emailTemplates;\n  var brands = brandsQuery.brands; // save\n\n  var save = function save(doc, callback) {\n    doc.kind = MESSAGE_KINDS.MANUAL;\n    doc.isLive = true;\n    doc.fromUserId = currentUser._id;\n\n    if (doc.method === METHODS.EMAIL && !doc.email.content) {\n      return Alert.warning('Please fill in email content');\n    }\n\n    if (doc.method === METHODS.MESSENGER && !doc.messenger.content) {\n      return Alert.warning('Please fill in message content');\n    }\n\n    messagesAddMutation({\n      variables: doc\n    }).then(function () {\n      callback();\n      Alert.success(\"You successfully added a engagement message\");\n\n      if (emptyBulk) {\n        emptyBulk();\n      }\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    emailTemplates: emailTemplates,\n    brands: brands,\n    save: save,\n    messengerKinds: MESSENGER_KINDS.SELECT_OPTIONS,\n    sentAsChoices: SENT_AS_CHOICES.SELECT_OPTIONS\n  });\n\n  return React.createElement(Widget, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }));\n};\n\nvar withQueries = withProps(compose(graphql(gql(templatesQuery.emailTemplates), {\n  name: 'emailTemplatesQuery',\n  options: function options(_ref) {\n    var totalCountQuery = _ref.totalCountQuery;\n    return {\n      variables: {\n        perPage: totalCountQuery.emailTemplatesTotalCount\n      }\n    };\n  }\n}), graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(mutations.messagesAdd), {\n  name: 'messagesAddMutation',\n  options: crudMutationsOptions\n}))(withCurrentUser(WidgetContainer)));\nexport default withProps(compose(graphql(gql(templatesQuery.totalCount), {\n  name: 'totalCountQuery'\n}))(withQueries));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/Widget.tsx"],"names":["gql","compose","withCurrentUser","Alert","withProps","queries","templatesQuery","React","graphql","Widget","MESSAGE_KINDS","MESSENGER_KINDS","METHODS","SENT_AS_CHOICES","mutations","crudMutationsOptions","WidgetContainer","props","currentUser","emailTemplatesQuery","brandsQuery","emptyBulk","messagesAddMutation","loading","emailTemplates","brands","save","doc","callback","kind","MANUAL","isLive","fromUserId","_id","method","EMAIL","email","content","warning","MESSENGER","messenger","variables","then","success","catch","error","message","updatedProps","messengerKinds","SELECT_OPTIONS","sentAsChoices","withQueries","name","options","totalCountQuery","perPage","emailTemplatesTotalCount","messagesAdd","totalCount"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { IUser } from 'modules/auth/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { ICustomer } from 'modules/customers/types';\nimport { AddMutationResponse, IEngageMessageDoc } from 'modules/engage/types';\nimport { queries as templatesQuery } from 'modules/settings/emailTemplates/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport { EmailTemplatesQueryResponse } from '../../settings/emailTemplates/containers/List';\nimport Widget from '../components/Widget';\nimport {\n  MESSAGE_KINDS,\n  MESSENGER_KINDS,\n  METHODS,\n  SENT_AS_CHOICES\n} from '../constants';\nimport { mutations, queries } from '../graphql';\nimport { crudMutationsOptions } from '../utils';\n\ntype Props = {\n  customers: ICustomer[];\n  emptyBulk?: () => void;\n  modalTrigger?: React.ReactNode;\n  channelType?: string;\n  totalCountQuery?: any;\n};\n\ntype FinalProps = {\n  currentUser: IUser;\n  emailTemplatesQuery: EmailTemplatesQueryResponse;\n  brandsQuery: BrandsQueryResponse;\n} & Props &\n  AddMutationResponse;\n\nconst WidgetContainer = (props: FinalProps) => {\n  const {\n    currentUser,\n    emailTemplatesQuery,\n    brandsQuery,\n    emptyBulk,\n    messagesAddMutation\n  } = props;\n\n  if (emailTemplatesQuery.loading || brandsQuery.loading) {\n    return null;\n  }\n\n  const emailTemplates = emailTemplatesQuery.emailTemplates;\n  const brands = brandsQuery.brands;\n\n  // save\n  const save = (doc, callback) => {\n    doc.kind = MESSAGE_KINDS.MANUAL;\n    doc.isLive = true;\n    doc.fromUserId = currentUser._id;\n\n    if (doc.method === METHODS.EMAIL && !doc.email.content) {\n      return Alert.warning('Please fill in email content');\n    }\n\n    if (doc.method === METHODS.MESSENGER && !doc.messenger.content) {\n      return Alert.warning('Please fill in message content');\n    }\n\n    messagesAddMutation({\n      variables: doc\n    })\n      .then(() => {\n        callback();\n\n        Alert.success(`You successfully added a engagement message`);\n\n        if (emptyBulk) {\n          emptyBulk();\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    emailTemplates,\n    brands,\n    save,\n    messengerKinds: MESSENGER_KINDS.SELECT_OPTIONS,\n    sentAsChoices: SENT_AS_CHOICES.SELECT_OPTIONS\n  };\n\n  return <Widget {...updatedProps} />;\n};\n\nconst withQueries = withProps<Props>(\n  compose(\n    graphql<Props, EmailTemplatesQueryResponse>(\n      gql(templatesQuery.emailTemplates),\n      {\n        name: 'emailTemplatesQuery',\n        options: ({ totalCountQuery }) => ({\n          variables: {\n            perPage: totalCountQuery.emailTemplatesTotalCount\n          }\n        })\n      }\n    ),\n    graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n      name: 'brandsQuery'\n    }),\n    graphql<Props, AddMutationResponse, IEngageMessageDoc>(\n      gql(mutations.messagesAdd),\n      {\n        name: 'messagesAddMutation',\n        options: crudMutationsOptions\n      }\n    )\n  )(withCurrentUser(WidgetContainer))\n);\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(templatesQuery.totalCount), {\n      name: 'totalCountQuery'\n    })\n  )(withQueries)\n);\n"]},"metadata":{},"sourceType":"module"}