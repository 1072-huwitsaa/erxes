{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as channelQueries } from '../../channels/graphql';\nimport { queries as usersGroupsQueries } from '../../permissions/graphql';\nimport UserForm from '../components/UserForm';\n\nvar UserFormContainer = function UserFormContainer(props) {\n  var channelsQuery = props.channelsQuery,\n      getEnvQuery = props.getEnvQuery,\n      groupsQuery = props.groupsQuery,\n      renderButton = props.renderButton;\n  var config = getEnvQuery.configsGetEnv || {};\n  var object = props.object || {};\n\n  if (channelsQuery.loading || groupsQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  }\n\n  var channels = channelsQuery.channels || [];\n  var groups = groupsQuery.usersGroups || [];\n  var selectedChannels = [];\n  var selectedGroups = [];\n\n  if (object._id) {\n    selectedChannels = channels.filter(function (c) {\n      return (c.memberIds || []).includes(object._id);\n    });\n    selectedGroups = groups.filter(function (g) {\n      return (object.groupIds || []).includes(g._id);\n    });\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    showBrands: config.USE_BRAND_RESTRICTIONS === 'true',\n    selectedChannels: selectedChannels,\n    selectedGroups: selectedGroups,\n    channels: channels,\n    groups: groups,\n    renderButton: renderButton\n  });\n\n  return React.createElement(UserForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(generalQueries.configsGetEnv), {\n  name: 'getEnvQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(channelQueries.channels), {\n  name: 'channelsQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(usersGroupsQueries.usersGroups), {\n  name: 'groupsQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(UserFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserForm.tsx"],"names":["gql","compose","Spinner","queries","generalQueries","React","graphql","withProps","channelQueries","usersGroupsQueries","UserForm","UserFormContainer","props","channelsQuery","getEnvQuery","groupsQuery","renderButton","config","configsGetEnv","object","loading","channels","groups","usersGroups","selectedChannels","selectedGroups","_id","filter","c","memberIds","includes","g","groupIds","updatedProps","showBrands","USE_BRAND_RESTRICTIONS","name","options","fetchPolicy"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { ICommonFormProps } from 'modules/settings/common/types';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport {\n  IUserGroup,\n  UsersGroupsQueryResponse\n} from 'modules/settings/permissions/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { IUser } from '../../../auth/types';\nimport { withProps } from '../../../common/utils';\nimport { queries as channelQueries } from '../../channels/graphql';\nimport { ChannelsQueryResponse, IChannel } from '../../channels/types';\nimport { queries as usersGroupsQueries } from '../../permissions/graphql';\nimport UserForm from '../components/UserForm';\n\ntype Props = {\n  channelsQuery: ChannelsQueryResponse;\n  groupsQuery: UsersGroupsQueryResponse;\n  getEnvQuery: any;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n};\n\nconst UserFormContainer = (props: Props & ICommonFormProps) => {\n  const { channelsQuery, getEnvQuery, groupsQuery, renderButton } = props;\n\n  const config = getEnvQuery.configsGetEnv || {};\n  const object = props.object || ({} as IUser);\n\n  if (channelsQuery.loading || groupsQuery.loading) {\n    return <Spinner />;\n  }\n\n  const channels = channelsQuery.channels || [];\n  const groups = groupsQuery.usersGroups || [];\n\n  let selectedChannels: IChannel[] = [];\n  let selectedGroups: IUserGroup[] = [];\n\n  if (object._id) {\n    selectedChannels = channels.filter(c =>\n      (c.memberIds || []).includes(object._id)\n    );\n    selectedGroups = groups.filter(g =>\n      (object.groupIds || []).includes(g._id)\n    );\n  }\n\n  const updatedProps = {\n    ...props,\n    showBrands: config.USE_BRAND_RESTRICTIONS === 'true',\n    selectedChannels,\n    selectedGroups,\n    channels,\n    groups,\n    renderButton\n  };\n\n  return <UserForm {...updatedProps} />;\n};\n\nexport default withProps<ICommonFormProps>(\n  compose(\n    graphql(gql(generalQueries.configsGetEnv), {\n      name: 'getEnvQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<{}, ChannelsQueryResponse>(gql(channelQueries.channels), {\n      name: 'channelsQuery',\n      options: () => ({ fetchPolicy: 'network-only' })\n    }),\n    graphql<{}, UsersGroupsQueryResponse>(gql(usersGroupsQueries.usersGroups), {\n      name: 'groupsQuery',\n      options: () => ({ fetchPolicy: 'network-only' })\n    })\n  )(UserFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}