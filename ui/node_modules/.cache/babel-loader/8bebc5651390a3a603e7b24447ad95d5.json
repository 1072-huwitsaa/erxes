{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/components/knowledge/KnowledgeForm.tsx\";\nimport { getEnv } from 'apolloClient';\nimport Button from 'modules/common/components/Button';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport Info from 'modules/common/components/Info';\nimport Uploader from 'modules/common/components/Uploader';\nimport colors from 'modules/common/styles/colors';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport { FlexContent } from 'modules/layout/styles';\nimport SelectBrand from 'modules/settings/integrations/containers/SelectBrand';\nimport { ColorPick, ColorPicker, ExpandWrapper, MarkdownWrapper } from 'modules/settings/styles';\nimport React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport TwitterPicker from 'react-color/lib/Twitter';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport ReactMarkdown from 'react-markdown';\n\nvar KnowledgeForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(KnowledgeForm, _React$Component);\n\n  _createClass(KnowledgeForm, null, [{\n    key: \"installCodeIncludeScript\",\n    value: function installCodeIncludeScript() {\n      var _getEnv = getEnv(),\n          REACT_APP_CDN_HOST = _getEnv.REACT_APP_CDN_HOST;\n\n      return \"\\n      (function() {\\n        var script = document.createElement('script');\\n        script.src = \\\"\".concat(REACT_APP_CDN_HOST, \"/build/knowledgebaseWidget.bundle.js\\\";\\n        script.async = true;\\n        var entry = document.getElementsByTagName('script')[0];\\n        entry.parentNode.insertBefore(script, entry);\\n      })();\\n    \");\n    }\n  }, {\n    key: \"getInstallCode\",\n    value: function getInstallCode(topicId) {\n      return \"\\n      <script>\\n        window.erxesSettings = {\\n          knowledgeBase: {\\n            topic_id: \\\"\".concat(topicId, \"\\\"\\n          },\\n        };\\n        \").concat(KnowledgeForm.installCodeIncludeScript(), \"\\n      </script>\\n    \");\n    }\n  }, {\n    key: \"getInstallTag\",\n    value: function getInstallTag() {\n      return \"\\n      <div data-erxes-kbase style=\\\"width:900px;height:300px\\\"></div>\\n    \";\n    }\n  }]);\n\n  function KnowledgeForm(props) {\n    var _this;\n\n    _classCallCheck(this, KnowledgeForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(KnowledgeForm).call(this, props));\n\n    _this.onColorChange = function (e) {\n      _this.setState({\n        color: e.hex\n      });\n    };\n\n    _this.onCopy = function (name) {\n      if (name === 'code') {\n        return _this.setState({\n          copied: true\n        });\n      }\n\n      return _this.setState({\n        tagCopied: true\n      });\n    };\n\n    _this.onBackgroundImageChange = function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          file = _ref2[0];\n\n      _this.setState({\n        backgroundImage: file ? file.url : ''\n      });\n    };\n\n    _this.remove = function () {\n      var _this$props = _this.props,\n          remove = _this$props.remove,\n          topic = _this$props.topic;\n\n      if (remove) {\n        remove(topic._id);\n      }\n    };\n\n    _this.handleBrandChange = function () {\n      if (_this.props.topic && _this.props.topic._id) {\n        var code = KnowledgeForm.getInstallCode(_this.props.topic._id);\n\n        _this.setState({\n          code: code,\n          copied: false\n        });\n      }\n    };\n\n    _this.generateDoc = function (values) {\n      var topic = _this.props.topic;\n      var _this$state = _this.state,\n          color = _this$state.color,\n          backgroundImage = _this$state.backgroundImage;\n      var finalValues = values;\n\n      if (topic) {\n        finalValues._id = topic._id;\n      }\n\n      return {\n        _id: finalValues._id,\n        doc: {\n          brandId: finalValues.brandId,\n          description: finalValues.description,\n          languageCode: finalValues.languageCode,\n          title: finalValues.title,\n          color: color,\n          backgroundImage: backgroundImage\n        }\n      };\n    };\n\n    _this.renderContent = function (formProps) {\n      var _this$props2 = _this.props,\n          topic = _this$props2.topic,\n          closeModal = _this$props2.closeModal,\n          renderButton = _this$props2.renderButton;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      return React.createElement(React.Fragment, null, _this.renderFormContent(topic || {\n        title: '',\n        description: '',\n        languageCode: '',\n        brand: {\n          _id: ''\n        }\n      }, _objectSpread({}, formProps)), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        type: \"button\",\n        onClick: closeModal,\n        icon: \"cancel-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, \"Cancel\"), topic && React.createElement(Button, {\n        btnStyle: \"danger\",\n        type: \"button\",\n        onClick: _this.remove,\n        icon: \"cancel-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"Delete\"), renderButton({\n        name: 'Knowledge Base',\n        values: _this.generateDoc(values),\n        isSubmitted: isSubmitted,\n        callback: closeModal,\n        object: topic\n      })));\n    };\n\n    var _code = '';\n    var tag = '';\n    var _color = colors.colorPrimary;\n    var _backgroundImage = '';\n    var _topic = props.topic; // showed install code automatically in edit mode\n\n    if (_topic) {\n      _code = KnowledgeForm.getInstallCode(_topic._id);\n      tag = KnowledgeForm.getInstallTag();\n      _color = _topic.color;\n      _backgroundImage = _topic.backgroundImage;\n    }\n\n    _this.state = {\n      copied: false,\n      tagCopied: false,\n      code: _code,\n      tag: tag,\n      color: _color,\n      backgroundImage: _backgroundImage\n    };\n    return _this;\n  }\n\n  _createClass(KnowledgeForm, [{\n    key: \"renderScript\",\n    value: function renderScript(code, copied, name) {\n      return React.createElement(MarkdownWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(ReactMarkdown, {\n        source: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), code ? React.createElement(CopyToClipboard, {\n        text: code,\n        onCopy: this.onCopy.bind(this, name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"primary\",\n        size: \"small\",\n        icon: \"copy-1\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, copied ? 'Copied' : 'Copy to clipboard')) : React.createElement(EmptyState, {\n        icon: \"copy\",\n        text: \"No copyable code\",\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderInstallCode\",\n    value: function renderInstallCode() {\n      if (this.props.topic && this.props.topic._id) {\n        var _this$state2 = this.state,\n            code = _this$state2.code,\n            tag = _this$state2.tag,\n            copied = _this$state2.copied,\n            tagCopied = _this$state2.tagCopied;\n        return React.createElement(React.Fragment, null, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(ControlLabel, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, \"Install code\"), this.renderScript(code, copied, 'code')), React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, React.createElement(Info, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, __('Paste the tag below where you want erxes knowledgebase to appear')), this.renderScript(tag, tagCopied, 'tag')));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderFormContent\",\n    value: function renderFormContent() {\n      var topic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var formProps = arguments.length > 1 ? arguments[1] : undefined;\n      var _this$state3 = this.state,\n          color = _this$state3.color,\n          backgroundImage = _this$state3.backgroundImage;\n      var brand = topic.brand;\n      var brandId = brand != null ? brand._id : '';\n      var popoverTop = React.createElement(Popover, {\n        id: \"kb-color-picker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(TwitterPicker, {\n        width: \"205px\",\n        triangle: \"hide\",\n        color: color,\n        onChange: this.onColorChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }));\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Title\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"title\",\n        defaultValue: topic.title,\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Description\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"description\",\n        defaultValue: topic.description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(SelectBrand, {\n        isRequired: true,\n        defaultValue: brandId,\n        formProps: formProps,\n        onChange: this.handleBrandChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      })), React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(ExpandWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"Language\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        componentClass: \"select\",\n        defaultValue: topic.languageCode || 'en',\n        name: \"languageCode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        value: \"mn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"\\u041C\\u043E\\u043D\\u0433\\u043E\\u043B\"), React.createElement(\"option\", {\n        value: \"en\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"English\")))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \"Custom color\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(OverlayTrigger, {\n        trigger: \"click\",\n        rootClose: true,\n        placement: \"bottom\",\n        overlay: popoverTop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(ColorPick, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(ColorPicker, {\n        style: {\n          backgroundColor: color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      })))))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, \"Background image: \"), React.createElement(Uploader, {\n        multiple: false,\n        single: true,\n        defaultFileList: backgroundImage ? [{\n          name: 'backgroundImage',\n          url: backgroundImage,\n          type: 'img'\n        }] : [],\n        onChange: this.onBackgroundImageChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      })), this.renderInstallCode());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return KnowledgeForm;\n}(React.Component);\n\nexport default KnowledgeForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/components/knowledge/KnowledgeForm.tsx"],"names":["getEnv","Button","EmptyState","FormControl","Form","FormGroup","ControlLabel","Info","Uploader","colors","ModalFooter","__","FlexContent","SelectBrand","ColorPick","ColorPicker","ExpandWrapper","MarkdownWrapper","React","OverlayTrigger","Popover","TwitterPicker","CopyToClipboard","ReactMarkdown","KnowledgeForm","REACT_APP_CDN_HOST","topicId","installCodeIncludeScript","props","onColorChange","e","setState","color","hex","onCopy","name","copied","tagCopied","onBackgroundImageChange","file","backgroundImage","url","remove","topic","_id","handleBrandChange","code","getInstallCode","generateDoc","values","state","finalValues","doc","brandId","description","languageCode","title","renderContent","formProps","closeModal","renderButton","isSubmitted","renderFormContent","brand","callback","object","tag","colorPrimary","getInstallTag","bind","renderScript","popoverTop","backgroundColor","type","renderInstallCode","Component"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport Button from 'modules/common/components/Button';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport Info from 'modules/common/components/Info';\nimport Uploader from 'modules/common/components/Uploader';\nimport colors from 'modules/common/styles/colors';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport {\n  IAttachment,\n  IButtonMutateProps,\n  IFormProps\n} from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport { FlexContent } from 'modules/layout/styles';\nimport { IBrand } from 'modules/settings/brands/types';\nimport SelectBrand from 'modules/settings/integrations/containers/SelectBrand';\nimport {\n  ColorPick,\n  ColorPicker,\n  ExpandWrapper,\n  MarkdownWrapper\n} from 'modules/settings/styles';\nimport React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport TwitterPicker from 'react-color/lib/Twitter';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport ReactMarkdown from 'react-markdown';\nimport { ITopic } from '../../types';\n\ntype Props = {\n  topic: ITopic;\n  brands: IBrand[];\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  remove?: (knowledgeBaseId: string) => void;\n  closeModal: () => void;\n};\n\ntype State = {\n  copied: boolean;\n  tagCopied: boolean;\n  code: string;\n  tag: string;\n  color: string;\n  backgroundImage: string;\n};\n\nclass KnowledgeForm extends React.Component<Props, State> {\n  static installCodeIncludeScript() {\n    const { REACT_APP_CDN_HOST } = getEnv();\n\n    return `\n      (function() {\n        var script = document.createElement('script');\n        script.src = \"${REACT_APP_CDN_HOST}/build/knowledgebaseWidget.bundle.js\";\n        script.async = true;\n        var entry = document.getElementsByTagName('script')[0];\n        entry.parentNode.insertBefore(script, entry);\n      })();\n    `;\n  }\n\n  static getInstallCode(topicId) {\n    return `\n      <script>\n        window.erxesSettings = {\n          knowledgeBase: {\n            topic_id: \"${topicId}\"\n          },\n        };\n        ${KnowledgeForm.installCodeIncludeScript()}\n      </script>\n    `;\n  }\n\n  static getInstallTag() {\n    return `\n      <div data-erxes-kbase style=\"width:900px;height:300px\"></div>\n    `;\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    let code = '';\n    let tag = '';\n    let color = colors.colorPrimary;\n    let backgroundImage = '';\n\n    const { topic } = props;\n\n    // showed install code automatically in edit mode\n    if (topic) {\n      code = KnowledgeForm.getInstallCode(topic._id);\n      tag = KnowledgeForm.getInstallTag();\n      color = topic.color;\n      backgroundImage = topic.backgroundImage;\n    }\n\n    this.state = {\n      copied: false,\n      tagCopied: false,\n      code,\n      tag,\n      color,\n      backgroundImage\n    };\n  }\n\n  onColorChange = e => {\n    this.setState({ color: e.hex });\n  };\n\n  onCopy = (name: string) => {\n    if (name === 'code') {\n      return this.setState({ copied: true });\n    }\n\n    return this.setState({ tagCopied: true });\n  };\n\n  onBackgroundImageChange = ([file]: IAttachment[]) => {\n    this.setState({ backgroundImage: file ? file.url : '' });\n  };\n\n  remove = () => {\n    const { remove, topic } = this.props;\n\n    if (remove) {\n      remove(topic._id);\n    }\n  };\n\n  renderScript(code: string, copied: boolean, name: string) {\n    return (\n      <MarkdownWrapper>\n        <ReactMarkdown source={code} />\n        {code ? (\n          <CopyToClipboard text={code} onCopy={this.onCopy.bind(this, name)}>\n            <Button\n              btnStyle=\"primary\"\n              size=\"small\"\n              icon=\"copy-1\"\n              uppercase={false}\n            >\n              {copied ? 'Copied' : 'Copy to clipboard'}\n            </Button>\n          </CopyToClipboard>\n        ) : (\n          <EmptyState icon=\"copy\" text=\"No copyable code\" size=\"small\" />\n        )}\n      </MarkdownWrapper>\n    );\n  }\n\n  renderInstallCode() {\n    if (this.props.topic && this.props.topic._id) {\n      const { code, tag, copied, tagCopied } = this.state;\n\n      return (\n        <>\n          <FormGroup>\n            <ControlLabel>Install code</ControlLabel>\n            {this.renderScript(code, copied, 'code')}\n          </FormGroup>\n\n          <FormGroup>\n            <Info>\n              {__(\n                'Paste the tag below where you want erxes knowledgebase to appear'\n              )}\n            </Info>\n            {this.renderScript(tag, tagCopied, 'tag')}\n          </FormGroup>\n        </>\n      );\n    }\n\n    return null;\n  }\n\n  handleBrandChange = () => {\n    if (this.props.topic && this.props.topic._id) {\n      const code = KnowledgeForm.getInstallCode(this.props.topic._id);\n      this.setState({ code, copied: false });\n    }\n  };\n\n  generateDoc = (values: {\n    _id?: string;\n    title: string;\n    description: string;\n    brandId: string;\n    languageCode: string;\n  }) => {\n    const { topic } = this.props;\n    const { color, backgroundImage } = this.state;\n    const finalValues = values;\n\n    if (topic) {\n      finalValues._id = topic._id;\n    }\n\n    return {\n      _id: finalValues._id,\n      doc: {\n        brandId: finalValues.brandId,\n        description: finalValues.description,\n        languageCode: finalValues.languageCode,\n        title: finalValues.title,\n        color,\n        backgroundImage\n      }\n    };\n  };\n\n  renderFormContent(topic = {} as ITopic, formProps: IFormProps) {\n    const { color, backgroundImage } = this.state;\n    const { brand } = topic;\n    const brandId = brand != null ? brand._id : '';\n\n    const popoverTop = (\n      <Popover id=\"kb-color-picker\">\n        <TwitterPicker\n          width=\"205px\"\n          triangle=\"hide\"\n          color={color}\n          onChange={this.onColorChange}\n        />\n      </Popover>\n    );\n\n    return (\n      <React.Fragment>\n        <FormGroup>\n          <ControlLabel required={true}>Title</ControlLabel>\n          <FormControl\n            {...formProps}\n            name=\"title\"\n            defaultValue={topic.title}\n            required={true}\n            autoFocus={true}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n          <FormControl\n            {...formProps}\n            name=\"description\"\n            defaultValue={topic.description}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <SelectBrand\n            isRequired={true}\n            defaultValue={brandId}\n            formProps={formProps}\n            onChange={this.handleBrandChange}\n          />\n        </FormGroup>\n        <FlexContent>\n          <ExpandWrapper>\n            <FormGroup>\n              <ControlLabel>Language</ControlLabel>\n\n              <FormControl\n                {...formProps}\n                componentClass=\"select\"\n                defaultValue={topic.languageCode || 'en'}\n                name=\"languageCode\"\n              >\n                <option />\n                <option value=\"mn\">Монгол</option>\n                <option value=\"en\">English</option>\n              </FormControl>\n            </FormGroup>\n          </ExpandWrapper>\n\n          <FormGroup>\n            <ControlLabel>Custom color</ControlLabel>\n            <div>\n              <OverlayTrigger\n                trigger=\"click\"\n                rootClose={true}\n                placement=\"bottom\"\n                overlay={popoverTop}\n              >\n                <ColorPick>\n                  <ColorPicker style={{ backgroundColor: color }} />\n                </ColorPick>\n              </OverlayTrigger>\n            </div>\n          </FormGroup>\n        </FlexContent>\n\n        <FormGroup>\n          <ControlLabel>Background image: </ControlLabel>\n          <Uploader\n            multiple={false}\n            single={true}\n            defaultFileList={\n              backgroundImage\n                ? [\n                    {\n                      name: 'backgroundImage',\n                      url: backgroundImage,\n                      type: 'img'\n                    }\n                  ]\n                : []\n            }\n            onChange={this.onBackgroundImageChange}\n          />\n        </FormGroup>\n\n        {this.renderInstallCode()}\n      </React.Fragment>\n    );\n  }\n\n  renderContent = (formProps: IFormProps) => {\n    const { topic, closeModal, renderButton } = this.props;\n    const { values, isSubmitted } = formProps;\n\n    return (\n      <>\n        {this.renderFormContent(\n          topic || {\n            title: '',\n            description: '',\n            languageCode: '',\n            brand: { _id: '' }\n          },\n          { ...formProps }\n        )}\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            type=\"button\"\n            onClick={closeModal}\n            icon=\"cancel-1\"\n          >\n            Cancel\n          </Button>\n          {topic && (\n            <Button\n              btnStyle=\"danger\"\n              type=\"button\"\n              onClick={this.remove}\n              icon=\"cancel-1\"\n            >\n              Delete\n            </Button>\n          )}\n          {renderButton({\n            name: 'Knowledge Base',\n            values: this.generateDoc(values),\n            isSubmitted,\n            callback: closeModal,\n            object: topic\n          })}\n        </ModalFooter>\n      </>\n    );\n  };\n\n  render() {\n    return <Form renderContent={this.renderContent} />;\n  }\n}\n\nexport default KnowledgeForm;\n"]},"metadata":{},"sourceType":"module"}