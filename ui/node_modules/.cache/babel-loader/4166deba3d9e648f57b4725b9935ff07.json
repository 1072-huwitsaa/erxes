{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/leftSidebar/Sidebar.tsx\";\nimport Button from 'erxes-common-ui/lib/components/button';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport asyncComponent from 'modules/common/components/AsyncComponent';\nimport { __ } from 'modules/common/utils';\nimport { ScrollContent } from 'modules/growthHacks/styles';\nimport { CONVERSATION_STATUSES } from 'modules/inbox/constants';\nimport FilterToggler from 'modules/inbox/containers/leftSidebar/FilterToggler';\nimport Resolver from 'modules/inbox/containers/Resolver';\nimport Tagger from 'modules/inbox/containers/Tagger';\nimport { queries } from 'modules/inbox/graphql';\nimport { PopoverButton } from 'modules/inbox/styles';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport { TAG_TYPES } from 'modules/tags/constants';\nimport React from 'react';\nimport RTG from 'react-transition-group';\nimport { InboxManagementActionConsumer } from '../../containers/Inbox';\nimport { StatusFilterPopover } from '../../containers/leftSidebar';\nimport { IntegrationModal } from './IntegrationModal';\nimport { AdditionalSidebar, DropdownWrapper, FlexRoot, LeftContent, RightItems, SidebarActions, SidebarContent, ToggleButton } from './styles';\nvar DateFilter = asyncComponent(function () {\n  return import(\n  /* webpackChunkName:\"Inbox-DateFilter\" */\n  'modules/common/components/DateFilter');\n}, {\n  height: '15px',\n  width: '70px'\n});\nvar AssignBoxPopover = asyncComponent(function () {\n  return import(\n  /* webpackChunkName:\"Inbox-AssignBoxPopover\" */\n  '../assignBox/AssignBoxPopover');\n});\nvar ConversationList = asyncComponent(function () {\n  return import(\n  /* webpackChunkName:\"Inbox-ConversationList\" */\n  'modules/inbox/containers/leftSidebar/ConversationList');\n});\nvar FilterList = asyncComponent(function () {\n  return import(\n  /* webpackChunkName: \"Inbox-FilterList\" */\n  'modules/inbox/containers/leftSidebar/FilterList');\n});\n\nvar LeftSidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LeftSidebar, _React$Component);\n\n  function LeftSidebar(props) {\n    var _this;\n\n    _classCallCheck(this, LeftSidebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeftSidebar).call(this, props));\n\n    _this.onToggleSidebar = function () {\n      var toggleSidebar = _this.props.toggleSidebar;\n      var isOpen = _this.state.isOpen;\n\n      _this.setState({\n        isOpen: !isOpen\n      });\n\n      toggleSidebar({\n        isOpen: !isOpen\n      });\n    };\n\n    _this.state = {\n      isOpen: props.config.showAddition\n    };\n    return _this;\n  }\n\n  _createClass(LeftSidebar, [{\n    key: \"renderTrigger\",\n    value: function renderTrigger(text) {\n      return React.createElement(PopoverButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, __(text), \" \", React.createElement(Icon, {\n        icon: \"angle-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderSidebarActions\",\n    value: function renderSidebarActions() {\n      var _this$props = this.props,\n          queryParams = _this$props.queryParams,\n          history = _this$props.history,\n          bulk = _this$props.bulk,\n          emptyBulk = _this$props.emptyBulk;\n\n      if (bulk.length > 0) {\n        return React.createElement(Sidebar.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(Resolver, {\n          conversations: bulk,\n          emptyBulk: emptyBulk,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }), React.createElement(RightItems, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(AssignBoxPopover, {\n          targets: bulk,\n          trigger: this.renderTrigger('Assign'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }), React.createElement(Tagger, {\n          targets: bulk,\n          trigger: this.renderTrigger('Tag'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(Sidebar.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(FlexRoot, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        id: \"btn-inbox-channel-visible\",\n        isActive: this.state.isOpen,\n        onClick: this.onToggleSidebar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"subject\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), queryParams.status !== CONVERSATION_STATUSES.CLOSED && React.createElement(Button, {\n        size: \"small\",\n        uppercase: false,\n        btnStyle: \"simple\",\n        onClick: this.props.resolveAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Resolve all\")), React.createElement(DropdownWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(DateFilter, {\n        queryParams: queryParams,\n        history: history,\n        countQuery: queries.totalConversationsCount,\n        countQueryParam: \"conversationsTotalCount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(StatusFilterPopover, {\n        queryParams: queryParams,\n        history: history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"renderSidebarHeader\",\n    value: function renderSidebarHeader() {\n      return React.createElement(SidebarActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, this.renderSidebarActions());\n    }\n  }, {\n    key: \"renderAdditionalSidebar\",\n    value: function renderAdditionalSidebar(refetchRequired) {\n      var _this$props2 = this.props,\n          queryParams = _this$props2.queryParams,\n          currentUser = _this$props2.currentUser;\n\n      if (!currentUser) {\n        return null;\n      }\n\n      return React.createElement(RTG.CSSTransition, {\n        in: this.state.isOpen,\n        appear: true,\n        timeout: 300,\n        classNames: \"fade-in\",\n        unmountOnExit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(SidebarContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(ScrollContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(FilterToggler, {\n        groupText: \"Channels\",\n        toggleName: \"showChannels\",\n        manageUrl: \"/settings/channels\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(FilterList, {\n        query: {\n          queryName: 'channelList',\n          variables: {\n            memberIds: [currentUser._id]\n          },\n          dataName: 'channels'\n        },\n        counts: \"byChannels\",\n        paramKey: \"channelId\",\n        queryParams: queryParams,\n        refetchRequired: refetchRequired,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })), React.createElement(FilterToggler, {\n        groupText: \"Brands\",\n        toggleName: \"showBrands\",\n        manageUrl: \"/settings/brands\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(FilterList, {\n        query: {\n          queryName: 'brandList',\n          dataName: 'brands'\n        },\n        counts: \"byBrands\",\n        queryParams: queryParams,\n        paramKey: \"brandId\",\n        refetchRequired: refetchRequired,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(FilterToggler, {\n        groupText: \"Integrations\",\n        toggleName: \"showIntegrations\",\n        manageUrl: \"/settings/integrations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(FilterList, {\n        query: {\n          queryName: 'integrationsGetUsedTypes',\n          dataName: 'integrationsGetUsedTypes'\n        },\n        queryParams: queryParams,\n        counts: \"byIntegrationTypes\",\n        paramKey: \"integrationType\",\n        refetchRequired: refetchRequired,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      })), React.createElement(FilterToggler, {\n        groupText: \"Tags\",\n        toggleName: \"showTags\",\n        manageUrl: \"/tags/conversation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(FilterList, {\n        query: {\n          queryName: 'tagList',\n          dataName: 'tags',\n          variables: {\n            type: TAG_TYPES.CONVERSATION\n          }\n        },\n        queryParams: queryParams,\n        counts: \"byTags\",\n        paramKey: \"tag\",\n        icon: \"tag-alt\",\n        refetchRequired: refetchRequired,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }))), React.createElement(IntegrationModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          currentUser = _this$props3.currentUser,\n          currentConversationId = _this$props3.currentConversationId,\n          history = _this$props3.history,\n          queryParams = _this$props3.queryParams,\n          bulk = _this$props3.bulk,\n          toggleBulk = _this$props3.toggleBulk;\n      return React.createElement(LeftContent, {\n        isOpen: this.state.isOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(InboxManagementActionConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, function (_ref) {\n        var refetchRequired = _ref.refetchRequired;\n        return React.createElement(AdditionalSidebar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, _this2.renderAdditionalSidebar(refetchRequired));\n      }), React.createElement(Sidebar, {\n        wide: true,\n        full: true,\n        header: this.renderSidebarHeader(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(ConversationList, {\n        currentUser: currentUser,\n        currentConversationId: currentConversationId,\n        history: history,\n        queryParams: queryParams,\n        toggleRowCheckbox: toggleBulk,\n        selectedConversations: bulk,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return LeftSidebar;\n}(React.Component);\n\nexport default LeftSidebar;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/leftSidebar/Sidebar.tsx"],"names":["Button","Icon","asyncComponent","__","ScrollContent","CONVERSATION_STATUSES","FilterToggler","Resolver","Tagger","queries","PopoverButton","Sidebar","TAG_TYPES","React","RTG","InboxManagementActionConsumer","StatusFilterPopover","IntegrationModal","AdditionalSidebar","DropdownWrapper","FlexRoot","LeftContent","RightItems","SidebarActions","SidebarContent","ToggleButton","DateFilter","height","width","AssignBoxPopover","ConversationList","FilterList","LeftSidebar","props","onToggleSidebar","toggleSidebar","isOpen","state","setState","config","showAddition","text","queryParams","history","bulk","emptyBulk","length","renderTrigger","status","CLOSED","resolveAll","totalConversationsCount","renderSidebarActions","refetchRequired","currentUser","queryName","variables","memberIds","_id","dataName","type","CONVERSATION","currentConversationId","toggleBulk","renderAdditionalSidebar","renderSidebarHeader","Component"],"mappings":"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","sourcesContent":["import Button from 'erxes-common-ui/lib/components/button';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { IUser } from 'modules/auth/types';\nimport asyncComponent from 'modules/common/components/AsyncComponent';\nimport { __ } from 'modules/common/utils';\nimport { ScrollContent } from 'modules/growthHacks/styles';\nimport { CONVERSATION_STATUSES } from 'modules/inbox/constants';\nimport FilterToggler from 'modules/inbox/containers/leftSidebar/FilterToggler';\nimport Resolver from 'modules/inbox/containers/Resolver';\nimport Tagger from 'modules/inbox/containers/Tagger';\nimport { queries } from 'modules/inbox/graphql';\nimport { PopoverButton } from 'modules/inbox/styles';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport { TAG_TYPES } from 'modules/tags/constants';\nimport React from 'react';\nimport RTG from 'react-transition-group';\nimport { InboxManagementActionConsumer } from '../../containers/Inbox';\nimport { StatusFilterPopover } from '../../containers/leftSidebar';\nimport { IConversation } from '../../types';\nimport { IntegrationModal } from './IntegrationModal';\nimport {\n  AdditionalSidebar,\n  DropdownWrapper,\n  FlexRoot,\n  LeftContent,\n  RightItems,\n  SidebarActions,\n  SidebarContent,\n  ToggleButton\n} from './styles';\n\nconst DateFilter = asyncComponent(\n  () =>\n    import(\n      /* webpackChunkName:\"Inbox-DateFilter\" */ 'modules/common/components/DateFilter'\n    ),\n  { height: '15px', width: '70px' }\n);\n\nconst AssignBoxPopover = asyncComponent(() =>\n  import(\n    /* webpackChunkName:\"Inbox-AssignBoxPopover\" */ '../assignBox/AssignBoxPopover'\n  )\n);\n\nconst ConversationList = asyncComponent(() =>\n  import(\n    /* webpackChunkName:\"Inbox-ConversationList\" */ 'modules/inbox/containers/leftSidebar/ConversationList'\n  )\n);\n\nconst FilterList = asyncComponent(() =>\n  import(\n    /* webpackChunkName: \"Inbox-FilterList\" */ 'modules/inbox/containers/leftSidebar/FilterList'\n  )\n);\n\ntype Props = {\n  currentUser?: IUser;\n  currentConversationId?: string;\n  queryParams: any;\n  history: any;\n  bulk: IConversation[];\n  toggleBulk: (target: IConversation[], toggleAdd: boolean) => void;\n  emptyBulk: () => void;\n  config: { [key: string]: boolean };\n  toggleSidebar: (params: { isOpen: boolean }) => void;\n  resolveAll: () => void;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass LeftSidebar extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.config.showAddition\n    };\n  }\n\n  renderTrigger(text: string) {\n    return (\n      <PopoverButton>\n        {__(text)} <Icon icon=\"angle-down\" />\n      </PopoverButton>\n    );\n  }\n\n  onToggleSidebar = () => {\n    const { toggleSidebar } = this.props;\n    const { isOpen } = this.state;\n\n    this.setState({ isOpen: !isOpen });\n    toggleSidebar({ isOpen: !isOpen });\n  };\n\n  renderSidebarActions() {\n    const { queryParams, history, bulk, emptyBulk } = this.props;\n\n    if (bulk.length > 0) {\n      return (\n        <Sidebar.Header>\n          <Resolver conversations={bulk} emptyBulk={emptyBulk} />\n          <RightItems>\n            <AssignBoxPopover\n              targets={bulk}\n              trigger={this.renderTrigger('Assign')}\n            />\n\n            <Tagger targets={bulk} trigger={this.renderTrigger('Tag')} />\n          </RightItems>\n        </Sidebar.Header>\n      );\n    }\n\n    return (\n      <Sidebar.Header>\n        <FlexRoot>\n          <ToggleButton\n            id=\"btn-inbox-channel-visible\"\n            isActive={this.state.isOpen}\n            onClick={this.onToggleSidebar}\n          >\n            <Icon icon=\"subject\" />\n          </ToggleButton>\n          {queryParams.status !== CONVERSATION_STATUSES.CLOSED && (\n            <Button\n              size=\"small\"\n              uppercase={false}\n              btnStyle=\"simple\"\n              onClick={this.props.resolveAll}\n            >\n              Resolve all\n            </Button>\n          )}\n        </FlexRoot>\n        <DropdownWrapper>\n          <DateFilter\n            queryParams={queryParams}\n            history={history}\n            countQuery={queries.totalConversationsCount}\n            countQueryParam=\"conversationsTotalCount\"\n          />\n          <StatusFilterPopover queryParams={queryParams} history={history} />\n        </DropdownWrapper>\n      </Sidebar.Header>\n    );\n  }\n\n  renderSidebarHeader() {\n    return <SidebarActions>{this.renderSidebarActions()}</SidebarActions>;\n  }\n\n  renderAdditionalSidebar(refetchRequired: string) {\n    const { queryParams, currentUser } = this.props;\n\n    if (!currentUser) {\n      return null;\n    }\n\n    return (\n      <RTG.CSSTransition\n        in={this.state.isOpen}\n        appear={true}\n        timeout={300}\n        classNames=\"fade-in\"\n        unmountOnExit={true}\n      >\n        <SidebarContent>\n          <ScrollContent>\n            <FilterToggler\n              groupText=\"Channels\"\n              toggleName=\"showChannels\"\n              manageUrl=\"/settings/channels\"\n            >\n              <FilterList\n                query={{\n                  queryName: 'channelList',\n                  variables: { memberIds: [currentUser._id] },\n                  dataName: 'channels'\n                }}\n                counts=\"byChannels\"\n                paramKey=\"channelId\"\n                queryParams={queryParams}\n                refetchRequired={refetchRequired}\n              />\n            </FilterToggler>\n\n            <FilterToggler\n              groupText=\"Brands\"\n              toggleName=\"showBrands\"\n              manageUrl=\"/settings/brands\"\n            >\n              <FilterList\n                query={{ queryName: 'brandList', dataName: 'brands' }}\n                counts=\"byBrands\"\n                queryParams={queryParams}\n                paramKey=\"brandId\"\n                refetchRequired={refetchRequired}\n              />\n            </FilterToggler>\n\n            <FilterToggler\n              groupText=\"Integrations\"\n              toggleName=\"showIntegrations\"\n              manageUrl=\"/settings/integrations\"\n            >\n              <FilterList\n                query={{\n                  queryName: 'integrationsGetUsedTypes',\n                  dataName: 'integrationsGetUsedTypes'\n                }}\n                queryParams={queryParams}\n                counts=\"byIntegrationTypes\"\n                paramKey=\"integrationType\"\n                refetchRequired={refetchRequired}\n              />\n            </FilterToggler>\n\n            <FilterToggler\n              groupText=\"Tags\"\n              toggleName=\"showTags\"\n              manageUrl=\"/tags/conversation\"\n            >\n              <FilterList\n                query={{\n                  queryName: 'tagList',\n                  dataName: 'tags',\n                  variables: {\n                    type: TAG_TYPES.CONVERSATION\n                  }\n                }}\n                queryParams={queryParams}\n                counts=\"byTags\"\n                paramKey=\"tag\"\n                icon=\"tag-alt\"\n                refetchRequired={refetchRequired}\n              />\n            </FilterToggler>\n          </ScrollContent>\n          <IntegrationModal />\n        </SidebarContent>\n      </RTG.CSSTransition>\n    );\n  }\n\n  render() {\n    const {\n      currentUser,\n      currentConversationId,\n      history,\n      queryParams,\n      bulk,\n      toggleBulk\n    } = this.props;\n\n    return (\n      <LeftContent isOpen={this.state.isOpen}>\n        <InboxManagementActionConsumer>\n          {({ refetchRequired }) => (\n            <AdditionalSidebar>\n              {this.renderAdditionalSidebar(refetchRequired)}\n            </AdditionalSidebar>\n          )}\n        </InboxManagementActionConsumer>\n        <Sidebar wide={true} full={true} header={this.renderSidebarHeader()}>\n          <ConversationList\n            currentUser={currentUser}\n            currentConversationId={currentConversationId}\n            history={history}\n            queryParams={queryParams}\n            toggleRowCheckbox={toggleBulk}\n            selectedConversations={bulk}\n          />\n        </Sidebar>\n      </LeftContent>\n    );\n  }\n}\n\nexport default LeftSidebar;\n"]},"metadata":{},"sourceType":"module"}