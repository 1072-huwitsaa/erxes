{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/components/CircularProgressBar.tsx\";\nimport React from 'react';\n\nfunction CircularProgressBar(_ref) {\n  var sqSize = _ref.sqSize,\n      strokeWidth = _ref.strokeWidth,\n      percentage = _ref.percentage;\n  var circleSize = sqSize || 100;\n  var borderWidth = strokeWidth || 5;\n  var radius = (circleSize - borderWidth) / 2;\n  var viewBox = \"0 0 \".concat(sqSize, \" \").concat(sqSize); // Arc length at 100% coverage is the circle circumference\n\n  var dashArray = radius * Math.PI * 2; // Scale 100% coverage overlay with the actual percent\n\n  var dashOffset = dashArray - dashArray * Number(percentage) / 100;\n\n  var renderText = function renderText(value) {\n    if (value === 100) {\n      return React.createElement(\"path\", {\n        className: \"checkmark\",\n        fill: \"none\",\n        stroke: \"#2cab28\",\n        strokeWidth: \"3\",\n        d: \"M22 30.2l5.1 6.2 12.7-12.8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"text\", {\n      x: \"50%\",\n      y: \"50%\",\n      dy: \".3em\",\n      textAnchor: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, value, \"%\");\n  };\n\n  var renderPercentage = function renderPercentage() {\n    if (percentage === 0) {\n      return React.createElement(React.Fragment, null, renderText(0), React.createElement(\"svg\", {\n        viewBox: \"0 0 \".concat(sqSize, \" \").concat(sqSize),\n        x: \"0\",\n        y: \"0\",\n        width: sqSize,\n        height: sqSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"circle\", {\n        className: \"svg-spinner-path\",\n        cx: circleSize / 2,\n        cy: circleSize / 2,\n        r: circleSize / 2 - 2,\n        fill: \"none\",\n        strokeWidth: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })));\n    }\n\n    return renderText(percentage);\n  };\n\n  return React.createElement(\"svg\", {\n    width: sqSize,\n    height: sqSize,\n    viewBox: viewBox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"circle\", {\n    className: \"circle-background\",\n    cx: circleSize / 2,\n    cy: circleSize / 2,\n    r: radius,\n    strokeWidth: \"\".concat(strokeWidth, \"px\"),\n    style: {\n      fill: 'none',\n      stroke: '#eee'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"circle\", {\n    className: \"circle-progress\",\n    cx: circleSize / 2,\n    cy: circleSize / 2,\n    r: radius,\n    strokeWidth: \"\".concat(strokeWidth, \"px\") // Start progress marker at 12 O'Clock\n    ,\n    transform: \"rotate(-90 \".concat(circleSize / 2, \" \").concat(circleSize / 2, \")\"),\n    style: {\n      strokeDasharray: dashArray,\n      strokeDashoffset: dashOffset,\n      stroke: \"\".concat(percentage === 100 ? '#3CCC38' : '#6569DF'),\n      strokeLinecap: 'round',\n      strokeLinejoin: 'round',\n      fill: 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), renderPercentage());\n}\n\nexport default CircularProgressBar;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/components/CircularProgressBar.tsx"],"names":["React","CircularProgressBar","sqSize","strokeWidth","percentage","circleSize","borderWidth","radius","viewBox","dashArray","Math","PI","dashOffset","Number","renderText","value","renderPercentage","fill","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin"],"mappings":"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","sourcesContent":["import React from 'react';\n\ntype Props = {\n  sqSize?: number;\n  strokeWidth?: number;\n  percentage: number;\n};\n\nfunction CircularProgressBar({ sqSize, strokeWidth, percentage }: Props) {\n  const circleSize = sqSize || 100;\n  const borderWidth = strokeWidth || 5;\n\n  const radius = (circleSize - borderWidth) / 2;\n  const viewBox = `0 0 ${sqSize} ${sqSize}`;\n  // Arc length at 100% coverage is the circle circumference\n  const dashArray = radius * Math.PI * 2;\n  // Scale 100% coverage overlay with the actual percent\n  const dashOffset = dashArray - (dashArray * Number(percentage)) / 100;\n\n  const renderText = value => {\n    if (value === 100) {\n      return (\n        <path\n          className=\"checkmark\"\n          fill=\"none\"\n          stroke=\"#2cab28\"\n          strokeWidth=\"3\"\n          d=\"M22 30.2l5.1 6.2 12.7-12.8\"\n        />\n      );\n    }\n\n    return (\n      <text x=\"50%\" y=\"50%\" dy=\".3em\" textAnchor=\"middle\">\n        {value}%\n      </text>\n    );\n  };\n\n  const renderPercentage = () => {\n    if (percentage === 0) {\n      return (\n        <>\n          {renderText(0)}\n          <svg\n            viewBox={`0 0 ${sqSize} ${sqSize}`}\n            x=\"0\"\n            y=\"0\"\n            width={sqSize}\n            height={sqSize}\n          >\n            <circle\n              className=\"svg-spinner-path\"\n              cx={circleSize / 2}\n              cy={circleSize / 2}\n              r={circleSize / 2 - 2}\n              fill=\"none\"\n              strokeWidth=\"2\"\n            />\n          </svg>\n        </>\n      );\n    }\n\n    return renderText(percentage);\n  };\n\n  return (\n    <svg width={sqSize} height={sqSize} viewBox={viewBox}>\n      <circle\n        className=\"circle-background\"\n        cx={circleSize / 2}\n        cy={circleSize / 2}\n        r={radius}\n        strokeWidth={`${strokeWidth}px`}\n        style={{\n          fill: 'none',\n          stroke: '#eee'\n        }}\n      />\n      <circle\n        className=\"circle-progress\"\n        cx={circleSize / 2}\n        cy={circleSize / 2}\n        r={radius}\n        strokeWidth={`${strokeWidth}px`}\n        // Start progress marker at 12 O'Clock\n        transform={`rotate(-90 ${circleSize / 2} ${circleSize / 2})`}\n        style={{\n          strokeDasharray: dashArray,\n          strokeDashoffset: dashOffset,\n          stroke: `${percentage === 100 ? '#3CCC38' : '#6569DF'}`,\n          strokeLinecap: 'round',\n          strokeLinejoin: 'round',\n          fill: 'none'\n        }}\n      />\n      {renderPercentage()}\n    </svg>\n  );\n}\n\nexport default CircularProgressBar;\n"]},"metadata":{},"sourceType":"module"}