{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/permissions/containers/PermissionList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport PermissionList from '../components/PermissionList';\nimport { mutations, queries } from '../graphql';\n\nvar List = function List(props) {\n  var history = props.history,\n      queryParams = props.queryParams,\n      permissionsQuery = props.permissionsQuery,\n      modulesQuery = props.modulesQuery,\n      actionsQuery = props.actionsQuery,\n      usersGroupsQuery = props.usersGroupsQuery,\n      totalCountQuery = props.totalCountQuery,\n      removeMutation = props.removeMutation; // remove action\n\n  var remove = function remove(id) {\n    confirm().then(function () {\n      removeMutation({\n        variables: {\n          ids: [id]\n        }\n      }).then(function () {\n        Alert.success('You successfully deleted a permission.');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var isLoading = permissionsQuery.loading || modulesQuery.loading || actionsQuery.loading || usersGroupsQuery.loading || totalCountQuery.loading;\n  var groups = usersGroupsQuery.usersGroups || [];\n  var currentGroup = groups.find(function (group) {\n    return queryParams.groupId === group._id;\n  }) || {};\n\n  var updatedProps = _objectSpread({}, props, {\n    queryParams: queryParams,\n    history: history,\n    remove: remove,\n    totalCount: totalCountQuery.permissionsTotalCount || 0,\n    modules: modulesQuery.permissionModules || [],\n    actions: actionsQuery.permissionActions || [],\n    permissions: permissionsQuery.permissions || [],\n    groups: groups,\n    isLoading: isLoading,\n    currentGroupName: currentGroup.name,\n    refetchQueries: commonOptions(queryParams)\n  });\n\n  return React.createElement(PermissionList, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};\n\nvar commonOptions = function commonOptions(queryParams) {\n  var variables = _objectSpread({\n    module: queryParams.module,\n    action: queryParams.action,\n    userId: queryParams.userId,\n    groupId: queryParams.groupId,\n    allowed: queryParams.allowed === 'notAllowed' ? false : true\n  }, generatePaginationParams(queryParams));\n\n  return [{\n    query: gql(queries.permissions),\n    variables: variables\n  }, {\n    query: gql(queries.totalCount),\n    variables: variables\n  }];\n};\n\nexport default compose(graphql(gql(queries.totalCount), {\n  name: 'totalCountQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      notifyOnNetworkStatusChange: true,\n      variables: {\n        module: queryParams.module,\n        action: queryParams.action,\n        userId: queryParams.userId,\n        groupId: queryParams.groupId,\n        allowed: queryParams.allowed === 'notAllowed' ? false : true\n      }\n    };\n  }\n}), graphql(gql(queries.permissions), {\n  name: 'permissionsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      notifyOnNetworkStatusChange: true,\n      variables: _objectSpread({\n        module: queryParams.module,\n        action: queryParams.action,\n        userId: queryParams.userId,\n        groupId: queryParams.groupId,\n        allowed: queryParams.allowed === 'notAllowed' ? false : true\n      }, generatePaginationParams(queryParams))\n    };\n  }\n}), graphql(gql(queries.modules), {\n  name: 'modulesQuery'\n}), graphql(gql(queries.actions), {\n  name: 'actionsQuery'\n}), graphql(gql(queries.usersGroups), {\n  name: 'usersGroupsQuery'\n}), // mutations\ngraphql(gql(mutations.permissionRemove), {\n  name: 'removeMutation',\n  options: function options(_ref3) {\n    var queryParams = _ref3.queryParams;\n    return {\n      refetchQueries: commonOptions(queryParams)\n    };\n  }\n}))(List);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/permissions/containers/PermissionList.tsx"],"names":["gql","compose","Alert","confirm","generatePaginationParams","React","graphql","PermissionList","mutations","queries","List","props","history","queryParams","permissionsQuery","modulesQuery","actionsQuery","usersGroupsQuery","totalCountQuery","removeMutation","remove","id","then","variables","ids","success","catch","error","message","isLoading","loading","groups","usersGroups","currentGroup","find","group","groupId","_id","updatedProps","totalCount","permissionsTotalCount","modules","permissionModules","actions","permissionActions","permissions","currentGroupName","name","refetchQueries","commonOptions","module","action","userId","allowed","query","options","notifyOnNetworkStatusChange","permissionRemove"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport PermissionList from '../components/PermissionList';\nimport { mutations, queries } from '../graphql';\nimport {\n  IUserGroup,\n  PermissionActionsQueryResponse,\n  PermissionModulesQueryResponse,\n  PermissionRemoveMutationResponse,\n  PermissionsQueryResponse,\n  PermissionTotalCountQueryResponse,\n  UsersGroupsQueryResponse\n} from '../types';\n\ntype FinalProps = {\n  can: (action: string) => boolean;\n} & Props;\n\nconst List = (props: FinalProps) => {\n  const {\n    history,\n    queryParams,\n    permissionsQuery,\n    modulesQuery,\n    actionsQuery,\n    usersGroupsQuery,\n    totalCountQuery,\n    removeMutation\n  } = props;\n\n  // remove action\n  const remove = (id: string) => {\n    confirm().then(() => {\n      removeMutation({\n        variables: { ids: [id] }\n      })\n        .then(() => {\n          Alert.success('You successfully deleted a permission.');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const isLoading =\n    permissionsQuery.loading ||\n    modulesQuery.loading ||\n    actionsQuery.loading ||\n    usersGroupsQuery.loading ||\n    totalCountQuery.loading;\n\n  const groups = usersGroupsQuery.usersGroups || [];\n  const currentGroup =\n    groups.find(group => queryParams.groupId === group._id) ||\n    ({} as IUserGroup);\n\n  const updatedProps = {\n    ...props,\n    queryParams,\n    history,\n    remove,\n    totalCount: totalCountQuery.permissionsTotalCount || 0,\n    modules: modulesQuery.permissionModules || [],\n    actions: actionsQuery.permissionActions || [],\n    permissions: permissionsQuery.permissions || [],\n    groups,\n    isLoading,\n    currentGroupName: currentGroup.name,\n    refetchQueries: commonOptions(queryParams)\n  };\n\n  return <PermissionList {...updatedProps} />;\n};\n\ntype Props = {\n  history: any;\n  queryParams: any;\n  permissionsQuery: PermissionsQueryResponse;\n  modulesQuery: PermissionModulesQueryResponse;\n  actionsQuery: PermissionActionsQueryResponse;\n  usersGroupsQuery: UsersGroupsQueryResponse;\n  totalCountQuery: PermissionTotalCountQueryResponse;\n  removeMutation: (params: { variables: { ids: string[] } }) => Promise<any>;\n};\n\nconst commonOptions = queryParams => {\n  const variables = {\n    module: queryParams.module,\n    action: queryParams.action,\n    userId: queryParams.userId,\n    groupId: queryParams.groupId,\n    allowed: queryParams.allowed === 'notAllowed' ? false : true,\n    ...generatePaginationParams(queryParams)\n  };\n\n  return [\n    { query: gql(queries.permissions), variables },\n    { query: gql(queries.totalCount), variables }\n  ];\n};\n\nexport default compose(\n  graphql<Props, PermissionTotalCountQueryResponse>(gql(queries.totalCount), {\n    name: 'totalCountQuery',\n    options: ({ queryParams }) => ({\n      notifyOnNetworkStatusChange: true,\n      variables: {\n        module: queryParams.module,\n        action: queryParams.action,\n        userId: queryParams.userId,\n        groupId: queryParams.groupId,\n        allowed: queryParams.allowed === 'notAllowed' ? false : true\n      }\n    })\n  }),\n  graphql<Props, PermissionsQueryResponse>(gql(queries.permissions), {\n    name: 'permissionsQuery',\n    options: ({ queryParams }) => ({\n      notifyOnNetworkStatusChange: true,\n      variables: {\n        module: queryParams.module,\n        action: queryParams.action,\n        userId: queryParams.userId,\n        groupId: queryParams.groupId,\n        allowed: queryParams.allowed === 'notAllowed' ? false : true,\n        ...generatePaginationParams(queryParams)\n      }\n    })\n  }),\n  graphql<Props, PermissionModulesQueryResponse>(gql(queries.modules), {\n    name: 'modulesQuery'\n  }),\n  graphql<Props, PermissionActionsQueryResponse>(gql(queries.actions), {\n    name: 'actionsQuery'\n  }),\n  graphql<{}, UsersGroupsQueryResponse>(gql(queries.usersGroups), {\n    name: 'usersGroupsQuery'\n  }),\n\n  // mutations\n  graphql<Props, PermissionRemoveMutationResponse>(\n    gql(mutations.permissionRemove),\n    {\n      name: 'removeMutation',\n      options: ({ queryParams }) => ({\n        refetchQueries: commonOptions(queryParams)\n      })\n    }\n  )\n)(List);\n"]},"metadata":{},"sourceType":"module"}