{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/Brands.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport DumbBrands from '../components/Brands';\nimport Empty from '../components/Empty';\nimport { queries } from '../graphql';\n\nvar Brands =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Brands, _React$Component);\n\n  function Brands() {\n    _classCallCheck(this, Brands);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Brands).apply(this, arguments));\n  }\n\n  _createClass(Brands, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          brandDetailQuery = _this$props.brandDetailQuery,\n          location = _this$props.location,\n          integrationsCountQuery = _this$props.integrationsCountQuery,\n          currentBrandId = _this$props.currentBrandId;\n      var integrationsCount = 0;\n\n      if (!integrationsCountQuery.loading) {\n        var byBrand = integrationsCountQuery.integrationsTotalCount.byBrand;\n        integrationsCount = byBrand[currentBrandId];\n      }\n\n      var extendedProps = _objectSpread({}, this.props, {\n        queryParams: queryString.parse(location.search),\n        currentBrand: brandDetailQuery.brandDetail || {},\n        loading: brandDetailQuery.loading,\n        integrationsCount: integrationsCount\n      });\n\n      return React.createElement(DumbBrands, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Brands;\n}(React.Component);\n\nvar BrandsContainer = withProps(compose(graphql(gql(queries.brandDetail), {\n  name: 'brandDetailQuery',\n  options: function options(_ref) {\n    var currentBrandId = _ref.currentBrandId;\n    return {\n      variables: {\n        _id: currentBrandId\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.integrationsCount), {\n  name: 'integrationsCountQuery',\n  options: function options(_ref2) {\n    var currentBrandId = _ref2.currentBrandId;\n    return {\n      variables: {\n        brandId: currentBrandId\n      }\n    };\n  }\n}))(Brands));\n\n// tslint:disable-next-line:max-classes-per-file\nvar WithCurrentId =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(WithCurrentId, _React$Component2);\n\n  function WithCurrentId() {\n    _classCallCheck(this, WithCurrentId);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WithCurrentId).apply(this, arguments));\n  }\n\n  _createClass(WithCurrentId, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var lastBrandQuery = nextProps.lastBrandQuery,\n          history = nextProps.history,\n          _id = nextProps.queryParams._id;\n\n      if (!history.location.hash && lastBrandQuery && !_id && lastBrandQuery.brandsGetLast && !lastBrandQuery.loading) {\n        routerUtils.setParams(history, {\n          _id: lastBrandQuery.brandsGetLast._id\n        }, true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _id = this.props.queryParams._id;\n\n      if (!_id) {\n        return React.createElement(Empty, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }));\n      }\n\n      var updatedProps = _objectSpread({}, this.props, {\n        currentBrandId: _id\n      });\n\n      return React.createElement(BrandsContainer, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WithCurrentId;\n}(React.Component);\n\nvar WithLastBrand = withProps(compose(graphql(gql(queries.brandsGetLast), {\n  name: 'lastBrandQuery',\n  skip: function skip(_ref3) {\n    var queryParams = _ref3.queryParams;\n    return queryParams._id;\n  },\n  options: function options(_ref4) {\n    var queryParams = _ref4.queryParams;\n    return {\n      variables: {\n        _id: queryParams._id\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(WithCurrentId));\n\nvar WithQueryParams = function WithQueryParams(props) {\n  var location = props.location;\n  var queryParams = queryString.parse(location.search);\n\n  var extendedProps = _objectSpread({}, props, {\n    queryParams: queryParams\n  });\n\n  return React.createElement(WithLastBrand, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }));\n};\n\nexport default withRouter(WithQueryParams);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/Brands.tsx"],"names":["gql","compose","router","routerUtils","withProps","queryString","React","graphql","withRouter","DumbBrands","Empty","queries","Brands","props","brandDetailQuery","location","integrationsCountQuery","currentBrandId","integrationsCount","loading","byBrand","integrationsTotalCount","extendedProps","queryParams","parse","search","currentBrand","brandDetail","Component","BrandsContainer","name","options","variables","_id","fetchPolicy","brandId","WithCurrentId","nextProps","lastBrandQuery","history","hash","brandsGetLast","setParams","updatedProps","WithLastBrand","skip","WithQueryParams"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport { IntegrationsCountQueryResponse } from 'modules/settings/integrations/types';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../../common/types';\nimport DumbBrands from '../components/Brands';\nimport Empty from '../components/Empty';\nimport { queries } from '../graphql';\nimport { BrandDetailQueryResponse, BrandsGetLastQueryResponse } from '../types';\n\ntype Props = {\n  currentBrandId: string;\n};\n\ntype FinalProps = {\n  integrationsCountQuery: IntegrationsCountQueryResponse;\n  brandDetailQuery: BrandDetailQueryResponse;\n} & Props &\n  IRouterProps;\n\nclass Brands extends React.Component<FinalProps> {\n  render() {\n    const {\n      brandDetailQuery,\n      location,\n      integrationsCountQuery,\n      currentBrandId\n    } = this.props;\n\n    let integrationsCount = 0;\n\n    if (!integrationsCountQuery.loading) {\n      const byBrand = integrationsCountQuery.integrationsTotalCount.byBrand;\n      integrationsCount = byBrand[currentBrandId];\n    }\n\n    const extendedProps = {\n      ...this.props,\n      queryParams: queryString.parse(location.search),\n      currentBrand: brandDetailQuery.brandDetail || {},\n      loading: brandDetailQuery.loading,\n      integrationsCount\n    };\n\n    return <DumbBrands {...extendedProps} />;\n  }\n}\n\nconst BrandsContainer = withProps<Props>(\n  compose(\n    graphql<Props, BrandDetailQueryResponse, { _id: string }>(\n      gql(queries.brandDetail),\n      {\n        name: 'brandDetailQuery',\n        options: ({ currentBrandId }: { currentBrandId: string }) => ({\n          variables: { _id: currentBrandId },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, IntegrationsCountQueryResponse, { brandId: string }>(\n      gql(queries.integrationsCount),\n      {\n        name: 'integrationsCountQuery',\n        options: ({ currentBrandId }: { currentBrandId: string }) => ({\n          variables: { brandId: currentBrandId }\n        })\n      }\n    )\n  )(Brands)\n);\n\ntype WithCurrentIdProps = {\n  history: any;\n  queryParams: any;\n};\n\ntype WithCurrentIdFinalProps = {\n  lastBrandQuery: BrandsGetLastQueryResponse;\n} & WithCurrentIdProps;\n\n// tslint:disable-next-line:max-classes-per-file\nclass WithCurrentId extends React.Component<WithCurrentIdFinalProps> {\n  componentWillReceiveProps(nextProps: WithCurrentIdFinalProps) {\n    const {\n      lastBrandQuery,\n      history,\n      queryParams: { _id }\n    } = nextProps;\n\n    if (\n      !history.location.hash &&\n      lastBrandQuery &&\n      !_id &&\n      lastBrandQuery.brandsGetLast &&\n      !lastBrandQuery.loading\n    ) {\n      routerUtils.setParams(\n        history,\n        { _id: lastBrandQuery.brandsGetLast._id },\n        true\n      );\n    }\n  }\n\n  render() {\n    const {\n      queryParams: { _id }\n    } = this.props;\n\n    if (!_id) {\n      return <Empty {...this.props} />;\n    }\n\n    const updatedProps = {\n      ...this.props,\n      currentBrandId: _id\n    };\n\n    return <BrandsContainer {...updatedProps} />;\n  }\n}\n\nconst WithLastBrand = withProps<WithCurrentIdProps>(\n  compose(\n    graphql<WithCurrentIdProps, BrandsGetLastQueryResponse, { _id: string }>(\n      gql(queries.brandsGetLast),\n      {\n        name: 'lastBrandQuery',\n        skip: ({ queryParams }: { queryParams: any }) => queryParams._id,\n        options: ({ queryParams }: { queryParams: any }) => ({\n          variables: { _id: queryParams._id },\n          fetchPolicy: 'network-only'\n        })\n      }\n    )\n  )(WithCurrentId)\n);\n\nconst WithQueryParams = (props: IRouterProps) => {\n  const { location } = props;\n  const queryParams = queryString.parse(location.search);\n\n  const extendedProps = { ...props, queryParams };\n\n  return <WithLastBrand {...extendedProps} />;\n};\n\nexport default withRouter<IRouterProps>(WithQueryParams);\n"]},"metadata":{},"sourceType":"module"}