{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/EngageStats.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport EngageStats from '../components/EngageStats';\nimport { queries } from '../graphql';\n\nvar EngageStatsContainer = function EngageStatsContainer(props) {\n  var engageMessageDetailQuery = props.engageMessageDetailQuery;\n\n  if (engageMessageDetailQuery.error) {\n    return React.createElement(EmptyState, {\n      size: \"full\",\n      text: \"Error\",\n      icon: \"ban\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n  if (engageMessageDetailQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }\n\n  if (!engageMessageDetailQuery.engageMessageDetail) {\n    return React.createElement(EmptyState, {\n      size: \"full\",\n      text: \"Message not found\",\n      icon: \"web-section-alt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  }\n\n  var message = engageMessageDetailQuery.engageMessageDetail;\n  return React.createElement(EngageStats, Object.assign({\n    message: message\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.engageMessageStats), {\n  name: 'engageMessageDetailQuery',\n  options: function options(_ref) {\n    var messageId = _ref.messageId;\n    return {\n      variables: {\n        _id: messageId\n      }\n    };\n  }\n}))(EngageStatsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/EngageStats.tsx"],"names":["gql","compose","EmptyState","Spinner","React","graphql","withProps","EngageStats","queries","EngageStatsContainer","props","engageMessageDetailQuery","error","loading","engageMessageDetail","message","engageMessageStats","name","options","messageId","variables","_id"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAWA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAuB;AAAA,MAC1CC,wBAD0C,GACbD,KADa,CAC1CC,wBAD0C;;AAGlD,MAAIA,wBAAwB,CAACC,KAA7B,EAAoC;AAClC,WAAO,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,MAAjB;AAAwB,MAAA,IAAI,EAAC,OAA7B;AAAqC,MAAA,IAAI,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAID,wBAAwB,CAACE,OAA7B,EAAsC;AACpC,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAI,CAACF,wBAAwB,CAACG,mBAA9B,EAAmD;AACjD,WACE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,MAAjB;AAAwB,MAAA,IAAI,EAAC,mBAA7B;AAAiD,MAAA,IAAI,EAAC,iBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,MAAMC,OAAO,GAAGJ,wBAAwB,CAACG,mBAAzC;AAEA,SAAO,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEC;AAAtB,KAAmCL,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CApBD;;AAsBA,eAAeJ,SAAS,CACtBL,OAAO,CACLI,OAAO,CACLL,GAAG,CAACQ,OAAO,CAACQ,kBAAT,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,0BADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,SAAH,QAAGA,SAAH;AAAA,WAAoB;AAC3BC,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEF;AADI;AADgB,KAApB;AAAA;AAFX,CAFK,CADF,CAAP,CAYEV,oBAZF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport EngageStats from '../components/EngageStats';\nimport { queries } from '../graphql';\nimport { EngageMessageDetailQueryResponse } from '../types';\n\ntype Props = {\n  messageId: string;\n};\n\ntype FinalProps = {\n  engageMessageDetailQuery: EngageMessageDetailQueryResponse;\n};\n\nconst EngageStatsContainer = (props: FinalProps) => {\n  const { engageMessageDetailQuery } = props;\n\n  if (engageMessageDetailQuery.error) {\n    return <EmptyState size=\"full\" text=\"Error\" icon=\"ban\" />;\n  }\n\n  if (engageMessageDetailQuery.loading) {\n    return <Spinner />;\n  }\n\n  if (!engageMessageDetailQuery.engageMessageDetail) {\n    return (\n      <EmptyState size=\"full\" text=\"Message not found\" icon=\"web-section-alt\" />\n    );\n  }\n\n  const message = engageMessageDetailQuery.engageMessageDetail;\n\n  return <EngageStats message={message} {...props} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, EngageMessageDetailQueryResponse, { _id: string }>(\n      gql(queries.engageMessageStats),\n      {\n        name: 'engageMessageDetailQuery',\n        options: ({ messageId }) => ({\n          variables: {\n            _id: messageId\n          }\n        })\n      }\n    )\n  )(EngageStatsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}