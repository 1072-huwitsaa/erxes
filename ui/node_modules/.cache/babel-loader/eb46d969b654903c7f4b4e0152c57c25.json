{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/LeadState.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { __, Alert } from 'modules/common/utils';\nimport { confirm } from 'modules/common/utils';\nimport LeadState from 'modules/customers/components/detail/LeadState';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations } from '../graphql';\n\nvar CustomerChooser =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomerChooser, _React$Component);\n\n  function CustomerChooser() {\n    _classCallCheck(this, CustomerChooser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomerChooser).apply(this, arguments));\n  }\n\n  _createClass(CustomerChooser, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          customersEdit = _this$props.customersEdit,\n          customer = _this$props.customer,\n          customersChangeState = _this$props.customersChangeState;\n\n      var changeState = function changeState(value) {\n        confirm(__('Are your sure you want to convert lead to customer?')).then(function () {\n          return customersChangeState({\n            variables: {\n              _id: customer._id,\n              value: value\n            }\n          }).then(function () {\n            Alert.success('You successfully converted to customer');\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        });\n      };\n\n      var saveState = function saveState(state) {\n        customersEdit({\n          variables: {\n            _id: customer._id,\n            leadStatus: state\n          }\n        }).then(function () {\n          Alert.success('You successfully updated state');\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      return React.createElement(LeadState, {\n        customer: customer,\n        saveState: saveState,\n        changeCustomerState: changeState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CustomerChooser;\n}(React.Component);\n\nexport default compose( // mutations\ngraphql(gql(mutations.customersEdit), {\n  name: 'customersEdit',\n  options: function options() {\n    return {\n      refetchQueries: ['customersMain', 'customers']\n    };\n  }\n}), graphql(gql(mutations.customersChangeState), {\n  name: 'customersChangeState',\n  options: {\n    refetchQueries: ['customersMain', 'customerCounts', 'customerDetail']\n  }\n}))(CustomerChooser);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/LeadState.tsx"],"names":["gql","compose","__","Alert","confirm","LeadState","React","graphql","mutations","CustomerChooser","props","customersEdit","customer","customersChangeState","changeState","value","then","variables","_id","success","catch","e","error","message","saveState","state","leadStatus","Component","name","options","refetchQueries"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,EAAT,EAAaC,KAAb,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,OAAOC,SAAP,MAAsB,+CAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;;IAoBMC,e;;;;;;;;;;;;;6BACK;AAAA,wBACmD,KAAKC,KADxD;AAAA,UACCC,aADD,eACCA,aADD;AAAA,UACgBC,QADhB,eACgBA,QADhB;AAAA,UAC0BC,oBAD1B,eAC0BA,oBAD1B;;AAGP,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAmB;AACrCX,QAAAA,OAAO,CAACF,EAAE,CAAC,qDAAD,CAAH,CAAP,CAAmEc,IAAnE,CACE;AAAA,iBACEH,oBAAoB,CAAC;AACnBI,YAAAA,SAAS,EAAE;AACTC,cAAAA,GAAG,EAAEN,QAAQ,CAACM,GADL;AAETH,cAAAA,KAAK,EAALA;AAFS;AADQ,WAAD,CAApB,CAMGC,IANH,CAMQ,YAAM;AACVb,YAAAA,KAAK,CAACgB,OAAN,CAAc,wCAAd;AACD,WARH,EASGC,KATH,CASS,UAAAC,CAAC,EAAI;AACVlB,YAAAA,KAAK,CAACmB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,WAXH,CADF;AAAA,SADF;AAeD,OAhBD;;AAkBA,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAmB;AACnCd,QAAAA,aAAa,CAAC;AACZM,UAAAA,SAAS,EAAE;AAAEC,YAAAA,GAAG,EAAEN,QAAQ,CAACM,GAAhB;AAAqBQ,YAAAA,UAAU,EAAED;AAAjC;AADC,SAAD,CAAb,CAGGT,IAHH,CAGQ,YAAM;AACVb,UAAAA,KAAK,CAACgB,OAAN,CAAc,gCAAd;AACD,SALH,EAMGC,KANH,CAMS,UAAAC,CAAC,EAAI;AACVlB,UAAAA,KAAK,CAACmB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,SARH;AASD,OAVD;;AAYA,aACE,oBAAC,SAAD;AACE,QAAA,QAAQ,EAAEX,QADZ;AAEE,QAAA,SAAS,EAAEY,SAFb;AAGE,QAAA,mBAAmB,EAAEV,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;;;EAzC2BR,KAAK,CAACqB,S;;AA4CpC,eAAe1B,OAAO,EACpB;AACAM,OAAO,CACLP,GAAG,CAACQ,SAAS,CAACG,aAAX,CADE,EAEL;AACEiB,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,OAAO,EAAE,mBAAM;AACb,WAAO;AACLC,MAAAA,cAAc,EAAE,CAAC,eAAD,EAAkB,WAAlB;AADX,KAAP;AAGD;AANH,CAFK,CAFa,EAapBvB,OAAO,CACLP,GAAG,CAACQ,SAAS,CAACK,oBAAX,CADE,EAEL;AACEe,EAAAA,IAAI,EAAE,sBADR;AAEEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAE,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,gBAApC;AADT;AAFX,CAFK,CAba,CAAP,CAsBbrB,eAtBa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { __, Alert } from 'modules/common/utils';\nimport { confirm } from 'modules/common/utils';\nimport LeadState from 'modules/customers/components/detail/LeadState';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations } from '../graphql';\nimport {\n  ChangeStateMutationResponse,\n  ChangeStateMutationVariables,\n  CustomersQueryResponse,\n  EditMutationResponse,\n  ICustomer,\n  ICustomerDoc\n} from '../types';\n\ntype Props = {\n  customer: ICustomer;\n};\n\ntype FinalProps = {\n  customersQuery: CustomersQueryResponse;\n} & Props &\n  EditMutationResponse &\n  ChangeStateMutationResponse;\n\nclass CustomerChooser extends React.Component<FinalProps> {\n  render() {\n    const { customersEdit, customer, customersChangeState } = this.props;\n\n    const changeState = (value: string) => {\n      confirm(__('Are your sure you want to convert lead to customer?')).then(\n        () =>\n          customersChangeState({\n            variables: {\n              _id: customer._id,\n              value\n            }\n          })\n            .then(() => {\n              Alert.success('You successfully converted to customer');\n            })\n            .catch(e => {\n              Alert.error(e.message);\n            })\n      );\n    };\n\n    const saveState = (state: string) => {\n      customersEdit({\n        variables: { _id: customer._id, leadStatus: state }\n      })\n        .then(() => {\n          Alert.success('You successfully updated state');\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    return (\n      <LeadState\n        customer={customer}\n        saveState={saveState}\n        changeCustomerState={changeState}\n      />\n    );\n  }\n}\n\nexport default compose(\n  // mutations\n  graphql<Props, EditMutationResponse, ICustomerDoc>(\n    gql(mutations.customersEdit),\n    {\n      name: 'customersEdit',\n      options: () => {\n        return {\n          refetchQueries: ['customersMain', 'customers']\n        };\n      }\n    }\n  ),\n  graphql<Props, ChangeStateMutationResponse, ChangeStateMutationVariables>(\n    gql(mutations.customersChangeState),\n    {\n      name: 'customersChangeState',\n      options: {\n        refetchQueries: ['customersMain', 'customerCounts', 'customerDetail']\n      }\n    }\n  )\n)(CustomerChooser);\n"]},"metadata":{},"sourceType":"module"}