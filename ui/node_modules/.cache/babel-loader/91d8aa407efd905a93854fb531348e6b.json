{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/line/Line.tsx\";\nimport Button from 'modules/common/components/Button';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport SelectBrand from '../../containers/SelectBrand';\nimport SelectChannels from '../../containers/SelectChannels';\n\nvar Line =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Line, _React$Component);\n\n  function Line(props) {\n    var _this;\n\n    _classCallCheck(this, Line);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Line).call(this, props));\n\n    _this.onChangeChannel = function (values) {\n      _this.setState({\n        channelIds: values\n      });\n    };\n\n    _this.generateDoc = function (values) {\n      return {\n        name: values.name,\n        brandId: values.brandId,\n        kind: 'smooch-line',\n        channelIds: _this.state.channelIds,\n        data: {\n          displayName: values.name,\n          channelId: values.channelId,\n          channelSecret: values.channelSecret\n        }\n      };\n    };\n\n    _this.renderContent = function (formProps) {\n      var _this$props = _this.props,\n          renderButton = _this$props.renderButton,\n          onSave = _this$props.onSave,\n          webhookUrl = _this$props.webhookUrl,\n          closeModal = _this$props.closeModal;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      return React.createElement(React.Fragment, null, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Name\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"name\",\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Line Channel ID\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        type: \"text\",\n        name: \"channelId\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Line Channel Secret\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        type: \"text\",\n        name: \"channelSecret\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, __('Copy and paste the webhook URL provided below into your LINE settings'), \".\", React.createElement(\"a\", {\n        href: \"https://docs.erxes.io/administrator/system-config#line\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, __('Learn more about LINE'))), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Webhook url\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        type: \"text\",\n        placeholder: \"Url will appear after save\",\n        value: webhookUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))), React.createElement(SelectBrand, {\n        isRequired: true,\n        formProps: formProps,\n        description: __('Which specific Brand does this integration belong to?'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(SelectChannels, {\n        defaultValue: _this.state.channelIds,\n        isRequired: true,\n        onChange: _this.onChangeChannel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        type: \"button\",\n        onClick: closeModal,\n        icon: \"times-circle\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Cancel\"), renderButton({\n        name: 'integration',\n        values: _this.generateDoc(values),\n        isSubmitted: isSubmitted,\n        callback: onSave\n      })));\n    };\n\n    _this.state = {\n      channelIds: []\n    };\n    return _this;\n  }\n\n  _createClass(Line, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Line;\n}(React.Component);\n\nexport default Line;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/line/Line.tsx"],"names":["Button","FormControl","Form","FormGroup","ControlLabel","ModalFooter","__","React","SelectBrand","SelectChannels","Line","props","onChangeChannel","values","setState","channelIds","generateDoc","name","brandId","kind","state","data","displayName","channelId","channelSecret","renderContent","formProps","renderButton","onSave","webhookUrl","closeModal","isSubmitted","callback","Component"],"mappings":"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","sourcesContent":["import Button from 'modules/common/components/Button';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { IButtonMutateProps, IFormProps } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport SelectBrand from '../../containers/SelectBrand';\nimport SelectChannels from '../../containers/SelectChannels';\n\ntype Props = {\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  onSave: (integration?) => void;\n  webhookUrl?: string;\n  closeModal: () => void;\n};\n\ntype State = {\n  channelIds: string[];\n};\n\nclass Line extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      channelIds: []\n    };\n  }\n\n  onChangeChannel = (values: string[]) => {\n    this.setState({ channelIds: values });\n  };\n\n  generateDoc = (values: {\n    name: string;\n    channelId: string;\n    channelSecret: string;\n    brandId: string;\n  }) => {\n    return {\n      name: values.name,\n      brandId: values.brandId,\n      kind: 'smooch-line',\n      channelIds: this.state.channelIds,\n      data: {\n        displayName: values.name,\n        channelId: values.channelId,\n        channelSecret: values.channelSecret\n      }\n    };\n  };\n\n  renderContent = (formProps: IFormProps) => {\n    const { renderButton, onSave, webhookUrl, closeModal } = this.props;\n    const { values, isSubmitted } = formProps;\n\n    return (\n      <>\n        <FormGroup>\n          <ControlLabel required={true}>Name</ControlLabel>\n          <FormControl\n            {...formProps}\n            name=\"name\"\n            required={true}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel required={true}>Line Channel ID</ControlLabel>\n          <FormControl\n            {...formProps}\n            type=\"text\"\n            name=\"channelId\"\n            required={true}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel required={true}>Line Channel Secret</ControlLabel>\n          <FormControl\n            {...formProps}\n            type=\"text\"\n            name=\"channelSecret\"\n            required={true}\n          />\n        </FormGroup>\n        <FormGroup>\n          <p>\n            {__(\n              'Copy and paste the webhook URL provided below into your LINE settings'\n            )}\n            .\n            <a\n              href=\"https://docs.erxes.io/administrator/system-config#line\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {__('Learn more about LINE')}\n            </a>\n          </p>\n          <ControlLabel>Webhook url</ControlLabel>\n          <FormControl\n            {...formProps}\n            type=\"text\"\n            placeholder=\"Url will appear after save\"\n            value={webhookUrl}\n          />\n        </FormGroup>\n        <SelectBrand\n          isRequired={true}\n          formProps={formProps}\n          description={__(\n            'Which specific Brand does this integration belong to?'\n          )}\n        />\n\n        <SelectChannels\n          defaultValue={this.state.channelIds}\n          isRequired={true}\n          onChange={this.onChangeChannel}\n        />\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            type=\"button\"\n            onClick={closeModal}\n            icon=\"times-circle\"\n            uppercase={false}\n          >\n            Cancel\n          </Button>\n          {renderButton({\n            name: 'integration',\n            values: this.generateDoc(values),\n            isSubmitted,\n            callback: onSave\n          })}\n        </ModalFooter>\n      </>\n    );\n  };\n\n  render() {\n    return <Form renderContent={this.renderContent} />;\n  }\n}\n\nexport default Line;\n"]},"metadata":{},"sourceType":"module"}