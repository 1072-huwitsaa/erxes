{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomerChooser.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { renderFullName, withProps } from 'modules/common/utils';\nimport ConformityChooser from 'modules/conformity/containers/ConformityChooser';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CustomerForm from '../containers/CustomerForm';\nimport { mutations, queries } from '../graphql';\n\nvar CustomerChooser =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomerChooser, _React$Component);\n\n  function CustomerChooser(props) {\n    var _this;\n\n    _classCallCheck(this, CustomerChooser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomerChooser).call(this, props));\n\n    _this.resetAssociatedItem = function () {\n      return _this.setState({\n        newCustomer: undefined\n      });\n    };\n\n    _this.state = {\n      newCustomer: undefined\n    };\n    return _this;\n  }\n\n  _createClass(CustomerChooser, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          customersQuery = _this$props.customersQuery,\n          search = _this$props.search;\n\n      var getAssociatedCustomer = function getAssociatedCustomer(newCustomer) {\n        _this2.setState({\n          newCustomer: newCustomer\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        data: {\n          _id: data._id,\n          name: data.name,\n          datas: data.customers,\n          mainTypeId: data.mainTypeId,\n          mainType: data.mainType,\n          relType: 'customer'\n        },\n        search: search,\n        clearState: function clearState() {\n          return search('');\n        },\n        title: 'Customer',\n        renderName: renderFullName,\n        renderForm: function renderForm(formProps) {\n          return React.createElement(CustomerForm, Object.assign({}, formProps, {\n            getAssociatedCustomer: getAssociatedCustomer,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }));\n        },\n        newItem: this.state.newCustomer,\n        resetAssociatedItem: this.resetAssociatedItem,\n        datas: customersQuery.customers || [],\n        refetchQuery: queries.customers\n      });\n\n      return React.createElement(ConformityChooser, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CustomerChooser;\n}(React.Component);\n\nvar WithQuery = withProps(compose(graphql(gql(queries.customers), {\n  name: 'customersQuery',\n  options: function options(_ref) {\n    var searchValue = _ref.searchValue,\n        perPage = _ref.perPage,\n        data = _ref.data;\n    return {\n      variables: {\n        searchValue: searchValue,\n        perPage: perPage,\n        mainType: data.mainType,\n        mainTypeId: data.mainTypeId,\n        isRelated: data.isRelated,\n        sortField: 'createdAt',\n        sortDirection: -1\n      },\n      fetchPolicy: data.isRelated ? 'network-only' : 'cache-first'\n    };\n  }\n}), // mutations\ngraphql(gql(mutations.customersAdd), {\n  name: 'customersAdd',\n  options: function options() {\n    return {\n      refetchQueries: ['customersMain', 'customers', 'customerCounts']\n    };\n  }\n}))(CustomerChooser));\n\nvar Wrapper =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Wrapper, _React$Component2);\n\n  function Wrapper(props) {\n    var _this3;\n\n    _classCallCheck(this, Wrapper);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Wrapper).call(this, props));\n\n    _this3.search = function (value, loadmore) {\n      var perPage = 20;\n\n      if (loadmore) {\n        perPage = _this3.state.perPage + 20;\n      }\n\n      return _this3.setState({\n        perPage: perPage,\n        searchValue: value\n      });\n    };\n\n    _this3.state = {\n      perPage: 20,\n      searchValue: ''\n    };\n    return _this3;\n  }\n\n  _createClass(Wrapper, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          perPage = _this$state.perPage;\n      return React.createElement(WithQuery, Object.assign({}, this.props, {\n        search: this.search,\n        searchValue: searchValue,\n        perPage: perPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Wrapper;\n}(React.Component);\n\nexport { Wrapper as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomerChooser.tsx"],"names":["gql","compose","renderFullName","withProps","ConformityChooser","React","graphql","CustomerForm","mutations","queries","CustomerChooser","props","resetAssociatedItem","setState","newCustomer","undefined","state","data","customersQuery","search","getAssociatedCustomer","updatedProps","_id","name","datas","customers","mainTypeId","mainType","relType","clearState","title","renderName","renderForm","formProps","newItem","refetchQuery","Component","WithQuery","options","searchValue","perPage","variables","isRelated","sortField","sortDirection","fetchPolicy","customersAdd","refetchQueries","Wrapper","value","loadmore"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { renderFullName, withProps } from 'modules/common/utils';\nimport ConformityChooser from 'modules/conformity/containers/ConformityChooser';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CustomerForm from '../containers/CustomerForm';\nimport { mutations, queries } from '../graphql';\nimport {\n  AddMutationResponse,\n  CustomersQueryResponse,\n  ICustomer,\n  ICustomerDoc\n} from '../types';\n\ntype Props = {\n  search: (value: string, loadMore?: boolean) => void;\n  searchValue: string;\n  perPage: number;\n};\n\ntype FinalProps = {\n  customersQuery: CustomersQueryResponse;\n} & Props &\n  AddMutationResponse;\nclass CustomerChooser extends React.Component<\n  WrapperProps & FinalProps,\n  { newCustomer?: ICustomer }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newCustomer: undefined\n    };\n  }\n\n  resetAssociatedItem = () => {\n    return this.setState({ newCustomer: undefined });\n  };\n\n  render() {\n    const { data, customersQuery, search } = this.props;\n\n    const getAssociatedCustomer = (newCustomer: ICustomer) => {\n      this.setState({ newCustomer });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      data: {\n        _id: data._id,\n        name: data.name,\n        datas: data.customers,\n        mainTypeId: data.mainTypeId,\n        mainType: data.mainType,\n        relType: 'customer'\n      },\n      search,\n      clearState: () => search(''),\n      title: 'Customer',\n      renderName: renderFullName,\n      renderForm: formProps => (\n        <CustomerForm\n          {...formProps}\n          getAssociatedCustomer={getAssociatedCustomer}\n        />\n      ),\n      newItem: this.state.newCustomer,\n      resetAssociatedItem: this.resetAssociatedItem,\n      datas: customersQuery.customers || [],\n      refetchQuery: queries.customers\n    };\n\n    return <ConformityChooser {...updatedProps} />;\n  }\n}\n\nconst WithQuery = withProps<Props>(\n  compose(\n    graphql<\n      Props & WrapperProps,\n      CustomersQueryResponse,\n      { searchValue: string; perPage: number }\n    >(gql(queries.customers), {\n      name: 'customersQuery',\n      options: ({ searchValue, perPage, data }) => {\n        return {\n          variables: {\n            searchValue,\n            perPage,\n            mainType: data.mainType,\n            mainTypeId: data.mainTypeId,\n            isRelated: data.isRelated,\n            sortField: 'createdAt',\n            sortDirection: -1\n          },\n          fetchPolicy: data.isRelated ? 'network-only' : 'cache-first'\n        };\n      }\n    }),\n    // mutations\n    graphql<Props, AddMutationResponse, ICustomerDoc>(\n      gql(mutations.customersAdd),\n      {\n        name: 'customersAdd',\n        options: () => {\n          return {\n            refetchQueries: ['customersMain', 'customers', 'customerCounts']\n          };\n        }\n      }\n    )\n  )(CustomerChooser)\n);\n\ntype WrapperProps = {\n  data: {\n    _id?: string;\n    name: string;\n    customers: ICustomer[];\n    mainTypeId?: string;\n    mainType?: string;\n    isRelated?: boolean;\n  };\n  onSelect: (datas: ICustomer[]) => void;\n  closeModal: () => void;\n};\n\nexport default class Wrapper extends React.Component<\n  WrapperProps,\n  {\n    perPage: number;\n    searchValue: string;\n  }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = { perPage: 20, searchValue: '' };\n  }\n\n  search = (value, loadmore) => {\n    let perPage = 20;\n\n    if (loadmore) {\n      perPage = this.state.perPage + 20;\n    }\n\n    return this.setState({ perPage, searchValue: value });\n  };\n\n  render() {\n    const { searchValue, perPage } = this.state;\n    return (\n      <WithQuery\n        {...this.props}\n        search={this.search}\n        searchValue={searchValue}\n        perPage={perPage}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}