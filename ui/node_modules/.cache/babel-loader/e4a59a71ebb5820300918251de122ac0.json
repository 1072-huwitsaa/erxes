{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n/**\n * Shorthand empty object checker\n * @param {Object} obj Object to check\n */\nexport var isObjectEmpty = function isObjectEmpty() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return typeof obj === 'object' && obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\n/**\n * Removes null, undefined, empty attributes from given object\n * @param {Object} obj Object to check\n * @returns {Object} Flattened object\n */\n\nexport var flattenObject = function flattenObject() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var flatObject = _objectSpread({}, obj);\n\n  var names = obj ? Object.getOwnPropertyNames(obj) : [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var name = _step.value;\n      var field = obj[name];\n      var empty = false;\n\n      if (typeof field !== 'object') {\n        if (field === null || field === undefined || field === '') {\n          empty = true;\n        }\n      }\n\n      if (Array.isArray(field) && field.length === 0) {\n        empty = true;\n      } // checked array above\n\n\n      if (typeof field === 'object' && !Array.isArray(field)) {\n        if (isObjectEmpty(field)) {\n          empty = true;\n        }\n      }\n\n      if (empty) {\n        delete flatObject[name];\n      }\n    } // end for loop\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return flatObject;\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/utils.ts"],"names":["isObjectEmpty","obj","Object","keys","length","constructor","flattenObject","flatObject","names","getOwnPropertyNames","name","field","empty","undefined","Array","isArray"],"mappings":";;AAAA;;;;AAIA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAuB;AAAA,MAAtBC,GAAsB,uEAAhB,EAAgB;AAClD,SACE,OAAOA,GAAP,KAAe,QAAf,IACAA,GADA,IAEAC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,KAA4B,CAF5B,IAGAH,GAAG,CAACI,WAAJ,KAAoBH,MAJtB;AAMD,CAPM;AASP;;;;;;AAKA,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,GAAsB;AAAA,MAArBL,GAAqB,uEAAf,EAAe;;AACjD,MAAMM,UAAU,qBAAQN,GAAR,CAAhB;;AACA,MAAMO,KAAK,GAAGP,GAAG,GAAGC,MAAM,CAACO,mBAAP,CAA2BR,GAA3B,CAAH,GAAqC,EAAtD;AAFiD;AAAA;AAAA;;AAAA;AAIjD,yBAAmBO,KAAnB,8HAA0B;AAAA,UAAfE,IAAe;AACxB,UAAMC,KAAK,GAAGV,GAAG,CAACS,IAAD,CAAjB;AACA,UAAIE,KAAK,GAAG,KAAZ;;AAEA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAA5B,IAAyCF,KAAK,KAAK,EAAvD,EAA2D;AACzDC,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,UAAIE,KAAK,CAACC,OAAN,CAAcJ,KAAd,KAAwBA,KAAK,CAACP,MAAN,KAAiB,CAA7C,EAAgD;AAC9CQ,QAAAA,KAAK,GAAG,IAAR;AACD,OAZuB,CAcxB;;;AACA,UAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAlC,EAAwD;AACtD,YAAIX,aAAa,CAACW,KAAD,CAAjB,EAA0B;AACxBC,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,UAAIA,KAAJ,EAAW;AACT,eAAOL,UAAU,CAACG,IAAD,CAAjB;AACD;AACF,KA5BgD,CA4B/C;;AA5B+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BjD,SAAOH,UAAP;AACD,CA/BM","sourcesContent":["/**\n * Shorthand empty object checker\n * @param {Object} obj Object to check\n */\nexport const isObjectEmpty = (obj = {}): boolean => {\n  return (\n    typeof obj === 'object' &&\n    obj &&\n    Object.keys(obj).length === 0 &&\n    obj.constructor === Object\n  );\n};\n\n/**\n * Removes null, undefined, empty attributes from given object\n * @param {Object} obj Object to check\n * @returns {Object} Flattened object\n */\nexport const flattenObject = (obj = {}): object => {\n  const flatObject = { ...obj };\n  const names = obj ? Object.getOwnPropertyNames(obj) : [];\n\n  for (const name of names) {\n    const field = obj[name];\n    let empty = false;\n\n    if (typeof field !== 'object') {\n      if (field === null || field === undefined || field === '') {\n        empty = true;\n      }\n    }\n\n    if (Array.isArray(field) && field.length === 0) {\n      empty = true;\n    }\n\n    // checked array above\n    if (typeof field === 'object' && !Array.isArray(field)) {\n      if (isObjectEmpty(field)) {\n        empty = true;\n      }\n    }\n\n    if (empty) {\n      delete flatObject[name];\n    }\n  } // end for loop\n\n  return flatObject;\n};\n"]},"metadata":{},"sourceType":"module"}