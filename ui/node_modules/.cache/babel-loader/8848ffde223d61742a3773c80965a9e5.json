{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/DealVolumeReport.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport DealVolumeReport from '../components/DealVolumeReport';\nimport { queries } from '../graphql';\n\nvar DealVolumeReportContainer = function DealVolumeReportContainer(props) {\n  var history = props.history,\n      mainQuery = props.mainQuery,\n      queryParams = props.queryParams,\n      punchCardQuery = props.punchCardQuery,\n      status = props.status,\n      insightsByTeamMemberQuery = props.insightsByTeamMemberQuery;\n  var data = mainQuery.dealInsightsMain || {};\n  var teamMembers;\n\n  if (status) {\n    teamMembers = insightsByTeamMemberQuery.dealInsightsByTeamMember || [];\n  }\n\n  var extendedProps = {\n    history: history,\n    queryParams: queryParams,\n    trend: data.trend || [],\n    summary: data.summary || [],\n    punch: punchCardQuery.dealInsightsPunchCard || [],\n    teamMembers: teamMembers,\n    loading: {\n      main: mainQuery.loading,\n      punch: punchCardQuery.loading,\n      teamMember: insightsByTeamMemberQuery.dealInsightsByTeamMember && insightsByTeamMemberQuery.loading\n    }\n  };\n  return React.createElement(DealVolumeReport, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n};\n\nvar options = function options(_ref) {\n  var queryParams = _ref.queryParams,\n      status = _ref.status;\n  return {\n    variables: {\n      boardId: queryParams.boardId,\n      pipelineIds: queryParams.pipelineIds,\n      startDate: queryParams.startDate,\n      endDate: queryParams.endDate,\n      status: status\n    }\n  };\n};\n\nexport default compose(graphql(gql(queries.dealInsightsByTeamMember), {\n  name: 'insightsByTeamMemberQuery',\n  options: options\n}), graphql(gql(queries.dealInsightsPunchCard), {\n  name: 'punchCardQuery',\n  options: options\n}), graphql(gql(queries.dealInsightsMain), {\n  name: 'mainQuery',\n  options: options\n}))(DealVolumeReportContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/DealVolumeReport.tsx"],"names":["gql","compose","React","graphql","DealVolumeReport","queries","DealVolumeReportContainer","props","history","mainQuery","queryParams","punchCardQuery","status","insightsByTeamMemberQuery","data","dealInsightsMain","teamMembers","dealInsightsByTeamMember","extendedProps","trend","summary","punch","dealInsightsPunchCard","loading","main","teamMember","options","variables","boardId","pipelineIds","startDate","endDate","name"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAqBA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAuB;AAAA,MAErDC,OAFqD,GAQnDD,KARmD,CAErDC,OAFqD;AAAA,MAGrDC,SAHqD,GAQnDF,KARmD,CAGrDE,SAHqD;AAAA,MAIrDC,WAJqD,GAQnDH,KARmD,CAIrDG,WAJqD;AAAA,MAKrDC,cALqD,GAQnDJ,KARmD,CAKrDI,cALqD;AAAA,MAMrDC,MANqD,GAQnDL,KARmD,CAMrDK,MANqD;AAAA,MAOrDC,yBAPqD,GAQnDN,KARmD,CAOrDM,yBAPqD;AAUvD,MAAMC,IAAI,GAAGL,SAAS,CAACM,gBAAV,IAA8B,EAA3C;AACA,MAAIC,WAAJ;;AAEA,MAAIJ,MAAJ,EAAY;AACVI,IAAAA,WAAW,GAAGH,yBAAyB,CAACI,wBAA1B,IAAsD,EAApE;AACD;;AAED,MAAMC,aAAa,GAAG;AACpBV,IAAAA,OAAO,EAAPA,OADoB;AAEpBE,IAAAA,WAAW,EAAXA,WAFoB;AAGpBS,IAAAA,KAAK,EAAEL,IAAI,CAACK,KAAL,IAAc,EAHD;AAIpBC,IAAAA,OAAO,EAAEN,IAAI,CAACM,OAAL,IAAgB,EAJL;AAKpBC,IAAAA,KAAK,EAAEV,cAAc,CAACW,qBAAf,IAAwC,EAL3B;AAMpBN,IAAAA,WAAW,EAAXA,WANoB;AAOpBO,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAEf,SAAS,CAACc,OADT;AAEPF,MAAAA,KAAK,EAAEV,cAAc,CAACY,OAFf;AAGPE,MAAAA,UAAU,EACRZ,yBAAyB,CAACI,wBAA1B,IACAJ,yBAAyB,CAACU;AALrB;AAPW,GAAtB;AAgBA,SAAO,oBAAC,gBAAD,oBAAsBL,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAlCD;;AAoCA,IAAMQ,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAGhB,WAAH,QAAGA,WAAH;AAAA,MAAgBE,MAAhB,QAAgBA,MAAhB;AAAA,SAA2C;AACzDe,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAElB,WAAW,CAACkB,OADZ;AAETC,MAAAA,WAAW,EAAEnB,WAAW,CAACmB,WAFhB;AAGTC,MAAAA,SAAS,EAAEpB,WAAW,CAACoB,SAHd;AAITC,MAAAA,OAAO,EAAErB,WAAW,CAACqB,OAJZ;AAKTnB,MAAAA,MAAM,EAANA;AALS;AAD8C,GAA3C;AAAA,CAAhB;;AAUA,eAAeX,OAAO,CACpBE,OAAO,CAACH,GAAG,CAACK,OAAO,CAACY,wBAAT,CAAJ,EAAwC;AAC7Ce,EAAAA,IAAI,EAAE,2BADuC;AAE7CN,EAAAA,OAAO,EAAPA;AAF6C,CAAxC,CADa,EAKpBvB,OAAO,CAACH,GAAG,CAACK,OAAO,CAACiB,qBAAT,CAAJ,EAAqC;AAC1CU,EAAAA,IAAI,EAAE,gBADoC;AAE1CN,EAAAA,OAAO,EAAPA;AAF0C,CAArC,CALa,EASpBvB,OAAO,CAACH,GAAG,CAACK,OAAO,CAACU,gBAAT,CAAJ,EAAgC;AACrCiB,EAAAA,IAAI,EAAE,WAD+B;AAErCN,EAAAA,OAAO,EAAPA;AAFqC,CAAhC,CATa,CAAP,CAabpB,yBAba,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport DealVolumeReport from '../components/DealVolumeReport';\nimport { queries } from '../graphql';\nimport {\n  DealMainQueryResponse,\n  DealPunchCardQueryResponse,\n  DealTeamMemberResponse,\n  IDealParams,\n  IQueryParams\n} from '../types';\n\ntype Props = {\n  history: any;\n  queryParams: IQueryParams;\n};\n\ntype FinalProps = {\n  mainQuery: DealMainQueryResponse;\n  punchCardQuery: DealPunchCardQueryResponse;\n  insightsByTeamMemberQuery: DealTeamMemberResponse;\n  status?: string;\n} & Props;\n\nconst DealVolumeReportContainer = (props: FinalProps) => {\n  const {\n    history,\n    mainQuery,\n    queryParams,\n    punchCardQuery,\n    status,\n    insightsByTeamMemberQuery\n  } = props;\n\n  const data = mainQuery.dealInsightsMain || {};\n  let teamMembers;\n\n  if (status) {\n    teamMembers = insightsByTeamMemberQuery.dealInsightsByTeamMember || [];\n  }\n\n  const extendedProps = {\n    history,\n    queryParams,\n    trend: data.trend || [],\n    summary: data.summary || [],\n    punch: punchCardQuery.dealInsightsPunchCard || [],\n    teamMembers,\n    loading: {\n      main: mainQuery.loading,\n      punch: punchCardQuery.loading,\n      teamMember:\n        insightsByTeamMemberQuery.dealInsightsByTeamMember &&\n        insightsByTeamMemberQuery.loading\n    }\n  };\n\n  return <DealVolumeReport {...extendedProps} />;\n};\n\nconst options = ({ queryParams, status }: IDealParams) => ({\n  variables: {\n    boardId: queryParams.boardId,\n    pipelineIds: queryParams.pipelineIds,\n    startDate: queryParams.startDate,\n    endDate: queryParams.endDate,\n    status\n  }\n});\n\nexport default compose(\n  graphql(gql(queries.dealInsightsByTeamMember), {\n    name: 'insightsByTeamMemberQuery',\n    options\n  }),\n  graphql(gql(queries.dealInsightsPunchCard), {\n    name: 'punchCardQuery',\n    options\n  }),\n  graphql(gql(queries.dealInsightsMain), {\n    name: 'mainQuery',\n    options\n  })\n)(DealVolumeReportContainer);\n"]},"metadata":{},"sourceType":"module"}