{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/components/VolumeReport.tsx\";\nimport Spinner from 'modules/common/components/Spinner';\nimport { __ } from 'modules/common/utils';\nimport { menuInbox } from 'modules/common/utils/menus';\nimport Wrapper from 'modules/layout/components/Wrapper';\nimport React from 'react';\nimport { FlexRow, InsightContent, InsightRow, InsightTitle, InsightWrapper, LoaderWrapper } from '../styles';\nimport Chart from './Chart';\nimport InboxFilter from './filter/InboxFilter';\nimport Insights from './Insights';\nimport PunchCard from './PunchCard';\nimport Sidebar from './Sidebar';\nimport Summary from './Summary';\n\nvar VolumeReport =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VolumeReport, _React$Component);\n\n  function VolumeReport(props) {\n    var _this;\n\n    _classCallCheck(this, VolumeReport);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VolumeReport).call(this, props));\n    _this.wrapper = void 0;\n    _this.state = {\n      width: 600\n    };\n    return _this;\n  }\n\n  _createClass(VolumeReport, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.loading.trend && !this.props.loading.trend) {\n        this.calculateWidth();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.calculateWidth();\n    }\n  }, {\n    key: \"calculateWidth\",\n    value: function calculateWidth() {\n      var width = this.wrapper.clientWidth;\n      this.setState({\n        width: width\n      });\n    }\n  }, {\n    key: \"renderTitle\",\n    value: function renderTitle(title, time) {\n      return React.createElement(InsightTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, __(title), time ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"(\", time, \")\") : null);\n    }\n  }, {\n    key: \"renderTrend\",\n    value: function renderTrend(name, loading, data) {\n      return React.createElement(InsightRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.renderTitle(name), React.createElement(Chart, {\n        loading: loading,\n        height: 360,\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderPunchCard\",\n    value: function renderPunchCard(loading, data, width) {\n      var content = React.createElement(LoaderWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        objective: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }));\n\n      if (!loading.punchCard) {\n        content = React.createElement(PunchCard, {\n          data: data,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(InsightRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.renderTitle('Punch card'), content);\n    }\n  }, {\n    key: \"renderCharts\",\n    value: function renderCharts() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          trend = _this$props.trend,\n          punchCard = _this$props.punchCard,\n          integrationChart = _this$props.integrationChart,\n          tagChart = _this$props.tagChart,\n          summaryData = _this$props.summaryData,\n          loading = _this$props.loading;\n      var width = this.state.width;\n\n      var innerRef = function innerRef(node) {\n        _this2.wrapper = node;\n      };\n\n      return React.createElement(InsightContent, {\n        innerRef: innerRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(InsightRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.renderTitle('Volume summary'), React.createElement(Summary, {\n        loading: loading.summaryData,\n        data: summaryData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), this.renderTrend('Volume Trend', loading.trend, trend), this.renderPunchCard(loading, punchCard, width), React.createElement(InsightRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Insights, {\n        title: \"Integrations\",\n        loading: loading.integrationChart,\n        data: integrationChart || [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(Insights, {\n        title: \"Tags\",\n        loading: loading.tagChart,\n        data: tagChart || [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this$props2 = this.props,\n          brands = _this$props2.brands,\n          history = _this$props2.history,\n          queryParams = _this$props2.queryParams;\n      return React.createElement(InsightWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(InboxFilter, {\n        history: history,\n        brands: brands,\n        queryParams: queryParams,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), this.renderCharts());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Wrapper, {\n        header: React.createElement(Wrapper.Header, {\n          title: __('Volume Report'),\n          submenu: menuInbox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }),\n        leftSidebar: React.createElement(Sidebar, {\n          queryParams: this.props.queryParams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }),\n        content: this.renderContent(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return VolumeReport;\n}(React.Component);\n\nexport default VolumeReport;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/components/VolumeReport.tsx"],"names":["Spinner","__","menuInbox","Wrapper","React","FlexRow","InsightContent","InsightRow","InsightTitle","InsightWrapper","LoaderWrapper","Chart","InboxFilter","Insights","PunchCard","Sidebar","Summary","VolumeReport","props","wrapper","state","width","prevProps","loading","trend","calculateWidth","clientWidth","setState","title","time","name","data","renderTitle","content","punchCard","integrationChart","tagChart","summaryData","innerRef","node","renderTrend","renderPunchCard","brands","history","queryParams","renderCharts","renderContent","Component"],"mappings":"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","sourcesContent":["import Spinner from 'modules/common/components/Spinner';\nimport { __ } from 'modules/common/utils';\nimport { menuInbox } from 'modules/common/utils/menus';\nimport Wrapper from 'modules/layout/components/Wrapper';\nimport React from 'react';\nimport { IBrand } from '../../settings/brands/types';\nimport {\n  FlexRow,\n  InsightContent,\n  InsightRow,\n  InsightTitle,\n  InsightWrapper,\n  LoaderWrapper\n} from '../styles';\nimport {\n  IChartParams,\n  IPieChartData,\n  IPunchCardData,\n  IQueryParams,\n  SummaryData\n} from '../types';\nimport Chart from './Chart';\nimport InboxFilter from './filter/InboxFilter';\nimport Insights from './Insights';\nimport PunchCard from './PunchCard';\nimport Sidebar from './Sidebar';\nimport Summary from './Summary';\n\ntype loadingType = {\n  punchCard: boolean;\n  summaryData: boolean;\n  trend: boolean;\n  integrationChart: boolean;\n  tagChart: boolean;\n};\n\ntype Props = {\n  brands: IBrand[];\n  queryParams: IQueryParams;\n  history: any;\n  loading: loadingType;\n  summaryData: SummaryData[];\n  trend: IChartParams[];\n  punchCard: IPunchCardData[];\n  integrationChart: IPieChartData[];\n  tagChart: IPieChartData[];\n};\n\nclass VolumeReport extends React.Component<Props, { width: number }> {\n  private wrapper;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: 600\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.loading.trend && !this.props.loading.trend) {\n      this.calculateWidth();\n    }\n  }\n\n  componentDidMount() {\n    this.calculateWidth();\n  }\n\n  calculateWidth() {\n    const width = this.wrapper.clientWidth;\n    this.setState({ width });\n  }\n\n  renderTitle(title: string, time?: string) {\n    return (\n      <InsightTitle>\n        {__(title)}\n        {time ? <span>({time})</span> : null}\n      </InsightTitle>\n    );\n  }\n\n  renderTrend(name: string, loading: boolean, data: IChartParams[]) {\n    return (\n      <InsightRow>\n        {this.renderTitle(name)}\n        <Chart loading={loading} height={360} data={data} />\n      </InsightRow>\n    );\n  }\n\n  renderPunchCard(loading: loadingType, data: IPunchCardData[], width: number) {\n    let content = (\n      <LoaderWrapper>\n        <Spinner objective={true} />\n      </LoaderWrapper>\n    );\n\n    if (!loading.punchCard) {\n      content = <PunchCard data={data} width={width} />;\n    }\n\n    return (\n      <InsightRow>\n        {this.renderTitle('Punch card')}\n        {content}\n      </InsightRow>\n    );\n  }\n\n  renderCharts() {\n    const {\n      trend,\n      punchCard,\n      integrationChart,\n      tagChart,\n      summaryData,\n      loading\n    } = this.props;\n\n    const width = this.state.width;\n\n    const innerRef = node => {\n      this.wrapper = node;\n    };\n\n    return (\n      <InsightContent innerRef={innerRef}>\n        <InsightRow>\n          {this.renderTitle('Volume summary')}\n          <Summary loading={loading.summaryData} data={summaryData} />\n        </InsightRow>\n\n        {this.renderTrend('Volume Trend', loading.trend, trend)}\n\n        {this.renderPunchCard(loading, punchCard, width)}\n\n        <InsightRow>\n          <FlexRow>\n            <Insights\n              title=\"Integrations\"\n              loading={loading.integrationChart}\n              data={integrationChart || []}\n            />\n            <Insights\n              title=\"Tags\"\n              loading={loading.tagChart}\n              data={tagChart || []}\n            />\n          </FlexRow>\n        </InsightRow>\n      </InsightContent>\n    );\n  }\n\n  renderContent() {\n    const { brands, history, queryParams } = this.props;\n\n    return (\n      <InsightWrapper>\n        <InboxFilter\n          history={history}\n          brands={brands}\n          queryParams={queryParams}\n        />\n        {this.renderCharts()}\n      </InsightWrapper>\n    );\n  }\n\n  render() {\n    return (\n      <Wrapper\n        header={\n          <Wrapper.Header title={__('Volume Report')} submenu={menuInbox} />\n        }\n        leftSidebar={<Sidebar queryParams={this.props.queryParams} />}\n        content={this.renderContent()}\n      />\n    );\n  }\n}\n\nexport default VolumeReport;\n"]},"metadata":{},"sourceType":"module"}