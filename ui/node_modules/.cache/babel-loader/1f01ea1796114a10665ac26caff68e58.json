{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/filters/TagFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport CountsByTag from 'modules/common/components/CountsByTag';\nimport { TAG_TYPES } from 'modules/tags/constants';\nimport { queries as tagQueries } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as companyQueries } from '../../graphql';\n\nvar TagFilterContainer = function TagFilterContainer(props) {\n  var companyCountsQuery = props.companyCountsQuery,\n      tagsQuery = props.tagsQuery;\n  var counts = (companyCountsQuery ? companyCountsQuery.companyCounts : null) || {\n    byTag: {}\n  };\n  return React.createElement(CountsByTag, {\n    tags: (tagsQuery ? tagsQuery.tags : null) || [],\n    counts: counts.byTag || {},\n    manageUrl: \"/tags/company\",\n    loading: (tagsQuery ? tagsQuery.loading : null) || false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n};\n\nexport default withProps(compose(graphql(gql(companyQueries.companyCounts), {\n  name: 'companyCountsQuery',\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: {\n    variables: {\n      only: 'byTag'\n    }\n  }\n}), graphql(gql(tagQueries.tags), {\n  name: 'tagsQuery',\n  skip: function skip(_ref2) {\n    var loadingMainQuery = _ref2.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: function options() {\n    return {\n      variables: {\n        type: TAG_TYPES.COMPANY\n      }\n    };\n  }\n}))(TagFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/filters/TagFilter.tsx"],"names":["gql","compose","CountsByTag","TAG_TYPES","queries","tagQueries","React","graphql","withProps","companyQueries","TagFilterContainer","props","companyCountsQuery","tagsQuery","counts","companyCounts","byTag","tags","loading","name","skip","loadingMainQuery","options","variables","only","type","COMPANY"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,OAAO,IAAIC,UAApB,QAAsC,sBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASJ,OAAO,IAAIK,cAApB,QAA0C,eAA1C;;AAGA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAGrB;AAAA,MACIC,kBADJ,GACsCD,KADtC,CACIC,kBADJ;AAAA,MACwBC,SADxB,GACsCF,KADtC,CACwBE,SADxB;AAGJ,MAAMC,MAAM,GAAG,CAACF,kBAAkB,GAC9BA,kBAAkB,CAACG,aADW,GAE9B,IAFW,KAEF;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFb;AAIA,SACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAE,CAACH,SAAS,GAAGA,SAAS,CAACI,IAAb,GAAoB,IAA9B,KAAuC,EAD/C;AAEE,IAAA,MAAM,EAAEH,MAAM,CAACE,KAAP,IAAgB,EAF1B;AAGE,IAAA,SAAS,EAAC,eAHZ;AAIE,IAAA,OAAO,EAAE,CAACH,SAAS,GAAGA,SAAS,CAACK,OAAb,GAAuB,IAAjC,KAA0C,KAJrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAlBD;;AAoBA,eAAeV,SAAS,CACtBP,OAAO,CACLM,OAAO,CAILP,GAAG,CAACS,cAAc,CAACM,aAAhB,CAJE,EAI8B;AACnCI,EAAAA,IAAI,EAAE,oBAD6B;AAEnCC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAF6B;AAGnCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADJ;AAH0B,CAJ9B,CADF,EAYLjB,OAAO,CACLP,GAAG,CAACK,UAAU,CAACY,IAAZ,CADE,EAEL;AACEE,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,SAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,SAAS,EAAE;AACTE,QAAAA,IAAI,EAAEtB,SAAS,CAACuB;AADP;AADG,KAAP;AAAA;AAHX,CAFK,CAZF,CAAP,CAwBEhB,kBAxBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport CountsByTag from 'modules/common/components/CountsByTag';\nimport { TAG_TYPES } from 'modules/tags/constants';\nimport { queries as tagQueries } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { TagsQueryResponse } from '../../../tags/types';\nimport { queries as companyQueries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\nconst TagFilterContainer = (props: {\n  companyCountsQuery?: CountQueryResponse;\n  tagsQuery?: TagsQueryResponse;\n}) => {\n  const { companyCountsQuery, tagsQuery } = props;\n\n  const counts = (companyCountsQuery\n    ? companyCountsQuery.companyCounts\n    : null) || { byTag: {} };\n\n  return (\n    <CountsByTag\n      tags={(tagsQuery ? tagsQuery.tags : null) || []}\n      counts={counts.byTag || {}}\n      manageUrl=\"/tags/company\"\n      loading={(tagsQuery ? tagsQuery.loading : null) || false}\n    />\n  );\n};\n\nexport default withProps<{ loadingMainQuery: boolean }>(\n  compose(\n    graphql<\n      { loadingMainQuery: boolean },\n      CountQueryResponse,\n      { only: string }\n    >(gql(companyQueries.companyCounts), {\n      name: 'companyCountsQuery',\n      skip: ({ loadingMainQuery }) => loadingMainQuery,\n      options: {\n        variables: { only: 'byTag' }\n      }\n    }),\n    graphql<{ loadingMainQuery: boolean }, TagsQueryResponse, { type: string }>(\n      gql(tagQueries.tags),\n      {\n        name: 'tagsQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: () => ({\n          variables: {\n            type: TAG_TYPES.COMPANY\n          }\n        })\n      }\n    )\n  )(TagFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}