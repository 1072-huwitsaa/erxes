{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/editForm/EditForm.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { queries as userQueries } from 'modules/settings/team/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ErrorMsg from '../../../common/components/ErrorMsg';\nimport { queries, subscriptions } from '../../graphql';\nimport { invalidateCache } from '../../utils';\nimport { PipelineConsumer } from '../PipelineContext';\n\nvar EditFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditFormContainer, _React$Component);\n\n  function EditFormContainer(props) {\n    var _this;\n\n    _classCallCheck(this, EditFormContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditFormContainer).call(this, props));\n    _this.unsubcribe = void 0;\n\n    _this.saveItem = function (doc, callback) {\n      var _this$props = _this.props,\n          itemId = _this$props.itemId,\n          editMutation = _this$props.editMutation,\n          options = _this$props.options;\n      var proccessId = Math.random().toString();\n      localStorage.setItem('proccessId', proccessId);\n      doc.proccessId = proccessId;\n      editMutation({\n        variables: _objectSpread({\n          _id: itemId\n        }, doc)\n      }).then(function (_ref) {\n        var data = _ref.data;\n\n        if (callback) {\n          callback(data[options.mutationsName.editMutation]);\n        }\n\n        invalidateCache();\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.removeItem = function (itemId, callback) {\n      var _this$props2 = _this.props,\n          removeMutation = _this$props2.removeMutation,\n          onRemove = _this$props2.onRemove,\n          stageId = _this$props2.stageId,\n          options = _this$props2.options;\n      confirm().then(function () {\n        return removeMutation({\n          variables: {\n            _id: itemId\n          }\n        }).then(function () {\n          callback();\n\n          if (options.texts.deleteSuccessText) {\n            Alert.success(options.texts.deleteSuccessText);\n          }\n\n          if (onRemove) {\n            invalidateCache();\n            onRemove(itemId, stageId);\n          }\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      });\n    };\n\n    _this.updateTimeTrack = function (doc, callback) {\n      var options = _this.props.options;\n      client.mutate({\n        variables: doc,\n        mutation: gql(options.mutations.updateTimeTrackMutation)\n      }).then(function () {\n        if (callback) {\n          callback();\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.addItem = _this.addItem.bind(_assertThisInitialized(_this));\n    _this.saveItem = _this.saveItem.bind(_assertThisInitialized(_this));\n    _this.removeItem = _this.removeItem.bind(_assertThisInitialized(_this));\n    _this.copyItem = _this.copyItem.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditFormContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          detailQuery = _this$props3.detailQuery,\n          itemId = _this$props3.itemId;\n      this.unsubcribe = detailQuery.subscribeToMore({\n        document: gql(subscriptions.pipelinesChanged),\n        variables: {\n          _id: itemId\n        },\n        updateQuery: function updateQuery(prev, _ref2) {\n          var pipelinesChanged = _ref2.subscriptionData.data.pipelinesChanged;\n\n          if (!pipelinesChanged || !pipelinesChanged.data) {\n            return;\n          }\n\n          var proccessId = pipelinesChanged.proccessId;\n\n          if (proccessId === localStorage.getItem('proccessId')) {\n            return;\n          }\n\n          if (document.querySelectorAll('.modal').length < 2) {\n            _this2.props.detailQuery.refetch();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubcribe();\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(doc, callback) {\n      var _this$props4 = this.props,\n          onAdd = _this$props4.onAdd,\n          addMutation = _this$props4.addMutation,\n          stageId = _this$props4.stageId,\n          options = _this$props4.options;\n      addMutation({\n        variables: doc\n      }).then(function (_ref3) {\n        var data = _ref3.data;\n        callback();\n\n        if (onAdd) {\n          onAdd(stageId, data[options.mutationsName.addMutation]);\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    }\n  }, {\n    key: \"copyItem\",\n    value: function copyItem(itemId, callback) {\n      var _this$props5 = this.props,\n          copyMutation = _this$props5.copyMutation,\n          onAdd = _this$props5.onAdd,\n          options = _this$props5.options,\n          stageId = _this$props5.stageId;\n      var proccessId = Math.random().toString();\n      localStorage.setItem('proccessId', proccessId);\n      copyMutation({\n        variables: {\n          _id: itemId,\n          proccessId: proccessId\n        }\n      }).then(function (_ref4) {\n        var data = _ref4.data;\n        callback();\n\n        if (onAdd) {\n          onAdd(stageId, data[options.mutationsName.copyMutation], itemId);\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          usersQuery = _this$props6.usersQuery,\n          detailQuery = _this$props6.detailQuery,\n          options = _this$props6.options;\n\n      if (usersQuery.loading || detailQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        });\n      }\n\n      if (detailQuery.error) {\n        return React.createElement(ErrorMsg, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, detailQuery.error.message);\n      }\n\n      var users = usersQuery.allUsers;\n      var item = detailQuery[options.queriesName.detailQuery];\n\n      if (!item) {\n        return null;\n      }\n\n      var extendedProps = _objectSpread({}, this.props, {\n        item: item,\n        addItem: this.addItem,\n        removeItem: this.removeItem,\n        saveItem: this.saveItem,\n        copyItem: this.copyItem,\n        updateTimeTrack: this.updateTimeTrack,\n        users: users\n      });\n\n      var EditForm = options.EditForm;\n      return React.createElement(EditForm, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditFormContainer;\n}(React.Component);\n\nvar withQuery = function withQuery(props) {\n  var options = props.options;\n\n  var refetchOptions = function refetchOptions(_ref5) {\n    var stageId = _ref5.stageId;\n    return {\n      refetchQueries: [{\n        query: gql(queries.stageDetail),\n        variables: {\n          _id: stageId\n        }\n      }]\n    };\n  };\n\n  return withProps(compose(graphql(gql(options.queries.detailQuery), {\n    name: 'detailQuery',\n    options: function options(_ref6) {\n      var itemId = _ref6.itemId;\n      return {\n        variables: {\n          _id: itemId\n        },\n        fetchPolicy: 'network-only'\n      };\n    }\n  }), graphql(gql(userQueries.allUsers), {\n    name: 'usersQuery'\n  }), graphql(gql(options.mutations.addMutation), {\n    name: 'addMutation',\n    options: refetchOptions\n  }), graphql(gql(options.mutations.copyMutation), {\n    name: 'copyMutation',\n    options: refetchOptions\n  }), graphql(gql(options.mutations.editMutation), {\n    name: 'editMutation'\n  }), graphql(gql(options.mutations.removeMutation), {\n    name: 'removeMutation',\n    options: refetchOptions\n  }))(EditFormContainer));\n};\n\nvar WithData =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(WithData, _React$Component2);\n\n  function WithData(props) {\n    var _this3;\n\n    _classCallCheck(this, WithData);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props));\n    _this3.withQuery = void 0;\n    _this3.withQuery = withQuery(props);\n    return _this3;\n  }\n\n  _createClass(WithData, [{\n    key: \"render\",\n    value: function render() {\n      var Component = this.withQuery;\n      return React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WithData;\n}(React.Component);\n\nexport default (function (props) {\n  return React.createElement(PipelineConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, function (_ref7) {\n    var onAddItem = _ref7.onAddItem,\n        onRemoveItem = _ref7.onRemoveItem,\n        onUpdateItem = _ref7.onUpdateItem,\n        options = _ref7.options;\n    return React.createElement(WithData, Object.assign({}, props, {\n      onAdd: onAddItem || props.onAdd,\n      onRemove: onRemoveItem || props.onRemove,\n      onUpdate: onUpdateItem || props.onUpdate,\n      options: props.options || options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }));\n  });\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/editForm/EditForm.tsx"],"names":["client","gql","compose","Spinner","Alert","confirm","withProps","queries","userQueries","React","graphql","ErrorMsg","subscriptions","invalidateCache","PipelineConsumer","EditFormContainer","props","unsubcribe","saveItem","doc","callback","itemId","editMutation","options","proccessId","Math","random","toString","localStorage","setItem","variables","_id","then","data","mutationsName","catch","error","message","removeItem","removeMutation","onRemove","stageId","texts","deleteSuccessText","success","updateTimeTrack","mutate","mutation","mutations","updateTimeTrackMutation","addItem","bind","copyItem","detailQuery","subscribeToMore","document","pipelinesChanged","updateQuery","prev","subscriptionData","getItem","querySelectorAll","length","refetch","onAdd","addMutation","copyMutation","usersQuery","loading","users","allUsers","item","queriesName","extendedProps","EditForm","Component","withQuery","refetchOptions","refetchQueries","query","stageDetail","name","fetchPolicy","WithData","onAddItem","onRemoveItem","onUpdateItem","onUpdate"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { queries as userQueries } from 'modules/settings/team/graphql';\nimport { AllUsersQueryResponse } from 'modules/settings/team/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ErrorMsg from '../../../common/components/ErrorMsg';\nimport { queries, subscriptions } from '../../graphql';\nimport {\n  CopyMutation,\n  DetailQueryResponse,\n  IItem,\n  IItemParams,\n  IOptions,\n  RemoveMutation,\n  SaveMutation\n} from '../../types';\nimport { invalidateCache } from '../../utils';\nimport { PipelineConsumer } from '../PipelineContext';\n\ntype WrapperProps = {\n  itemId: string;\n  stageId: string;\n  options?: IOptions;\n  isPopupVisible: boolean;\n  beforePopupClose?: () => void;\n  onAdd?: (stageId: string, item: IItem, aboveItemId?: string) => void;\n  onRemove?: (itemId: string, stageId: string) => void;\n  onUpdate?: (item: IItem, prevStageId: string) => void;\n  hideHeader?: boolean;\n};\n\ntype ContainerProps = {\n  onAdd: (stageId: string, item: IItem, aboveItemId?: string) => void;\n  onRemove: (itemId: string, stageId: string) => void;\n  onUpdate: (item: IItem, prevStageId: string) => void;\n  options: IOptions;\n} & WrapperProps;\n\ntype FinalProps = {\n  detailQuery: DetailQueryResponse;\n  usersQuery: AllUsersQueryResponse;\n  // Using this mutation to copy item in edit form\n  addMutation: SaveMutation;\n  editMutation: SaveMutation;\n  removeMutation: RemoveMutation;\n  copyMutation: CopyMutation;\n} & ContainerProps;\n\nclass EditFormContainer extends React.Component<FinalProps> {\n  private unsubcribe;\n\n  constructor(props) {\n    super(props);\n\n    this.addItem = this.addItem.bind(this);\n    this.saveItem = this.saveItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.copyItem = this.copyItem.bind(this);\n  }\n\n  componentDidMount() {\n    const { detailQuery, itemId } = this.props;\n\n    this.unsubcribe = detailQuery.subscribeToMore({\n      document: gql(subscriptions.pipelinesChanged),\n      variables: { _id: itemId },\n      updateQuery: (\n        prev,\n        {\n          subscriptionData: {\n            data: { pipelinesChanged }\n          }\n        }\n      ) => {\n        if (!pipelinesChanged || !pipelinesChanged.data) {\n          return;\n        }\n\n        const { proccessId } = pipelinesChanged;\n\n        if (proccessId === localStorage.getItem('proccessId')) {\n          return;\n        }\n\n        if (document.querySelectorAll('.modal').length < 2) {\n          this.props.detailQuery.refetch();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubcribe();\n  }\n\n  addItem(doc: IItemParams, callback: () => void) {\n    const { onAdd, addMutation, stageId, options } = this.props;\n\n    addMutation({ variables: doc })\n      .then(({ data }) => {\n        callback();\n\n        if (onAdd) {\n          onAdd(stageId, data[options.mutationsName.addMutation]);\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  }\n\n  copyItem(itemId: string, callback: () => void) {\n    const { copyMutation, onAdd, options, stageId } = this.props;\n\n    const proccessId = Math.random().toString();\n\n    localStorage.setItem('proccessId', proccessId);\n\n    copyMutation({ variables: { _id: itemId, proccessId } })\n      .then(({ data }) => {\n        callback();\n\n        if (onAdd) {\n          onAdd(stageId, data[options.mutationsName.copyMutation], itemId);\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  }\n\n  saveItem = (doc: IItemParams, callback: (item) => void) => {\n    const { itemId, editMutation, options } = this.props;\n\n    const proccessId = Math.random().toString();\n\n    localStorage.setItem('proccessId', proccessId);\n\n    doc.proccessId = proccessId;\n\n    editMutation({ variables: { _id: itemId, ...doc } })\n      .then(({ data }) => {\n        if (callback) {\n          callback(data[options.mutationsName.editMutation]);\n        }\n\n        invalidateCache();\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  removeItem = (itemId: string, callback) => {\n    const { removeMutation, onRemove, stageId, options } = this.props;\n\n    confirm().then(() =>\n      removeMutation({ variables: { _id: itemId } })\n        .then(() => {\n          callback();\n\n          if (options.texts.deleteSuccessText) {\n            Alert.success(options.texts.deleteSuccessText);\n          }\n\n          if (onRemove) {\n            invalidateCache();\n\n            onRemove(itemId, stageId);\n          }\n        })\n\n        .catch(error => {\n          Alert.error(error.message);\n        })\n    );\n  };\n\n  updateTimeTrack = (\n    doc: { _id: string; status: string; timeSpent: number },\n    callback?\n  ) => {\n    const { options } = this.props;\n\n    client\n      .mutate({\n        variables: doc,\n        mutation: gql(options.mutations.updateTimeTrackMutation)\n      })\n      .then(() => {\n        if (callback) {\n          callback();\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  render() {\n    const { usersQuery, detailQuery, options } = this.props;\n\n    if (usersQuery.loading || detailQuery.loading) {\n      return <Spinner />;\n    }\n\n    if (detailQuery.error) {\n      return <ErrorMsg>{detailQuery.error.message}</ErrorMsg>;\n    }\n\n    const users = usersQuery.allUsers;\n    const item = detailQuery[options.queriesName.detailQuery];\n\n    if (!item) {\n      return null;\n    }\n\n    const extendedProps = {\n      ...this.props,\n      item,\n      addItem: this.addItem,\n      removeItem: this.removeItem,\n      saveItem: this.saveItem,\n      copyItem: this.copyItem,\n      updateTimeTrack: this.updateTimeTrack,\n      users\n    };\n\n    const EditForm = options.EditForm;\n\n    return <EditForm {...extendedProps} />;\n  }\n}\n\nconst withQuery = (props: ContainerProps) => {\n  const { options } = props;\n\n  const refetchOptions = ({ stageId }: { stageId: string }) => ({\n    refetchQueries: [\n      {\n        query: gql(queries.stageDetail),\n        variables: { _id: stageId }\n      }\n    ]\n  });\n\n  return withProps<ContainerProps>(\n    compose(\n      graphql<ContainerProps, DetailQueryResponse, { _id: string }>(\n        gql(options.queries.detailQuery),\n        {\n          name: 'detailQuery',\n          options: ({ itemId }: { itemId: string }) => {\n            return {\n              variables: {\n                _id: itemId\n              },\n              fetchPolicy: 'network-only'\n            };\n          }\n        }\n      ),\n      graphql<ContainerProps, AllUsersQueryResponse>(\n        gql(userQueries.allUsers),\n        {\n          name: 'usersQuery'\n        }\n      ),\n      graphql<ContainerProps, SaveMutation, IItemParams>(\n        gql(options.mutations.addMutation),\n        {\n          name: 'addMutation',\n          options: refetchOptions\n        }\n      ),\n      graphql<ContainerProps, SaveMutation, IItemParams>(\n        gql(options.mutations.copyMutation),\n        {\n          name: 'copyMutation',\n          options: refetchOptions\n        }\n      ),\n      graphql<ContainerProps, SaveMutation, IItemParams>(\n        gql(options.mutations.editMutation),\n        {\n          name: 'editMutation'\n        }\n      ),\n      graphql<ContainerProps, RemoveMutation, { _id: string }>(\n        gql(options.mutations.removeMutation),\n        {\n          name: 'removeMutation',\n          options: refetchOptions\n        }\n      )\n    )(EditFormContainer)\n  );\n};\n\nclass WithData extends React.Component<ContainerProps> {\n  private withQuery;\n\n  constructor(props) {\n    super(props);\n\n    this.withQuery = withQuery(props);\n  }\n\n  render() {\n    const Component = this.withQuery;\n\n    return <Component {...this.props} />;\n  }\n}\n\nexport default (props: WrapperProps) => {\n  return (\n    <PipelineConsumer>\n      {({ onAddItem, onRemoveItem, onUpdateItem, options }) => {\n        return (\n          <WithData\n            {...props}\n            onAdd={onAddItem || props.onAdd}\n            onRemove={onRemoveItem || props.onRemove}\n            onUpdate={onUpdateItem || props.onUpdate}\n            options={props.options || options}\n          />\n        );\n      }}\n    </PipelineConsumer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}