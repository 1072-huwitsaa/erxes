{"ast":null,"code":"import _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/conversationDetail/workarea/mail/MailHeader.tsx\";\nimport dayjs from 'dayjs';\nimport DropdownToggle from 'modules/common/components/DropdownToggle';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Avatar from 'modules/common/components/nameCard/Avatar';\nimport Tip from 'modules/common/components/Tip';\nimport { __ } from 'modules/common/utils';\nimport * as React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { ActionButton, AddressContainer, Addresses, AddressItem, Date, Details, From, Meta, RightSide, Title } from './style';\n\nvar MailHeader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MailHeader, _React$Component);\n\n  function MailHeader(props) {\n    var _this;\n\n    _classCallCheck(this, MailHeader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MailHeader).call(this, props));\n\n    _this.toggleDateFormat = function (e) {\n      e.stopPropagation();\n\n      _this.setState({\n        dateFormat: _this.state.dateFormat === 'lll' ? 'MMM D, h:mm A' : 'lll'\n      });\n    };\n\n    _this.toggleExpand = function (e) {\n      if (_this.props.isContentCollapsed) {\n        return;\n      }\n\n      e.stopPropagation();\n\n      _this.setState({\n        isDetailExpanded: !_this.state.isDetailExpanded\n      });\n    };\n\n    _this.onToggleMailForm = function (_ref) {\n      var event = _ref.event,\n          _ref$replyToAll = _ref.replyToAll,\n          replyToAll = _ref$replyToAll === void 0 ? false : _ref$replyToAll,\n          _ref$isForward = _ref.isForward,\n          isForward = _ref$isForward === void 0 ? false : _ref$isForward;\n      event.stopPropagation();\n\n      _this.props.onToggleMailForm(event, replyToAll, isForward);\n    };\n\n    _this.renderTopButton = function () {\n      if (_this.props.isContentCollapsed) {\n        return null;\n      }\n\n      var onToggleReply = function onToggleReply(event) {\n        return _this.onToggleMailForm({\n          event: event\n        });\n      };\n\n      var onToggleReplyAll = function onToggleReplyAll(event) {\n        return _this.onToggleMailForm({\n          event: event,\n          replyToAll: true\n        });\n      };\n\n      var onToggleForward = function onToggleForward(event) {\n        return _this.onToggleMailForm({\n          event: event,\n          isForward: true\n        });\n      };\n\n      return React.createElement(React.Fragment, null, React.createElement(Tip, {\n        text: __('Reply'),\n        placement: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(ActionButton, {\n        onClick: onToggleReply,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"reply\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }))), React.createElement(Dropdown, {\n        alignRight: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        as: DropdownToggle,\n        id: \"dropdown-engage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(ActionButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"ellipsis-v\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#action\",\n        onClick: onToggleReply,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Reply\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#action\",\n        onClick: onToggleReplyAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Reply all\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#action\",\n        onClick: onToggleForward,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Forward\")))));\n    };\n\n    _this.renderCustomer = function (fromEmail) {\n      var _this$props$message$c = _this.props.message.customer,\n          customer = _this$props$message$c === void 0 ? {} : _this$props$message$c;\n\n      if (!customer) {\n        return null;\n      }\n\n      if (customer.firstName === fromEmail) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, fromEmail));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, customer.firstName), ' ', React.createElement(From, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, '<', fromEmail, '>'));\n    };\n\n    _this.renderSubject = function (subject) {\n      if (!_this.state.isDetailExpanded) {\n        return null;\n      }\n\n      return React.createElement(AddressItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, __('Subject'), \":\"), React.createElement(Addresses, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, subject));\n    };\n\n    _this.renderSecondaryContent = function (mailData) {\n      var _this$props = _this.props,\n          message = _this$props.message,\n          isContentCollapsed = _this$props.isContentCollapsed;\n\n      if (isContentCollapsed) {\n        // remove all tags and convert plain text\n        var plainContent = (message.content || '').trim();\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, plainContent.substring(0, 100), \"...\");\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(AddressContainer, {\n        isExpanded: _this.state.isDetailExpanded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, _this.renderAddress('To:', mailData.to), _this.renderAddress('Cc:', mailData.cc), _this.renderAddress('Bcc:', mailData.bcc)), _this.renderSubject(mailData.subject || ''));\n    };\n\n    _this.state = {\n      dateFormat: 'MMM D, h:mm A',\n      isDetailExpanded: false\n    };\n    return _this;\n  }\n\n  _createClass(MailHeader, [{\n    key: \"renderRightSide\",\n    value: function renderRightSide(hasAttachments, createdAt) {\n      return React.createElement(RightSide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Date, {\n        onClick: this.toggleDateFormat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, dayjs(createdAt).format(this.state.dateFormat)), hasAttachments && React.createElement(Icon, {\n        icon: \"paperclip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), this.renderTopButton());\n    }\n  }, {\n    key: \"renderAddress\",\n    value: function renderAddress(title, values) {\n      if (!values || values.length === 0) {\n        return null;\n      }\n\n      var length = values.length;\n      var emails = values.map(function (val, idx) {\n        return React.createElement(React.Fragment, {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, val.email), length - 1 !== idx && \",\".concat(' '));\n      });\n      return React.createElement(AddressItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, title), React.createElement(Addresses, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, emails));\n    }\n  }, {\n    key: \"renderDetails\",\n    value: function renderDetails(mailData) {\n      var _ref2 = mailData.from || [{}],\n          _ref3 = _slicedToArray(_ref2, 1),\n          from = _ref3[0];\n\n      return React.createElement(Details, {\n        onClick: this.toggleExpand,\n        clickable: !this.props.isContentCollapsed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.renderCustomer(from.email || ''), this.renderSecondaryContent(mailData));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          message = _this$props2.message,\n          isContentCollapsed = _this$props2.isContentCollapsed,\n          onToggleContent = _this$props2.onToggleContent;\n      var customer = message.customer,\n          createdAt = message.createdAt,\n          _message$mailData = message.mailData,\n          mailData = _message$mailData === void 0 ? {} : _message$mailData;\n      var hasAttachments = mailData ? (mailData.attachments || []).length > 0 : false;\n      return React.createElement(Meta, {\n        toggle: isContentCollapsed,\n        onClick: onToggleContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        customer: customer,\n        size: 32,\n        letterCount: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), this.renderDetails(mailData), this.renderRightSide(hasAttachments, createdAt));\n    }\n  }]);\n\n  return MailHeader;\n}(React.Component);\n\nexport default MailHeader;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/conversationDetail/workarea/mail/MailHeader.tsx"],"names":["dayjs","DropdownToggle","Icon","Avatar","Tip","__","React","Dropdown","ActionButton","AddressContainer","Addresses","AddressItem","Date","Details","From","Meta","RightSide","Title","MailHeader","props","toggleDateFormat","e","stopPropagation","setState","dateFormat","state","toggleExpand","isContentCollapsed","isDetailExpanded","onToggleMailForm","event","replyToAll","isForward","renderTopButton","onToggleReply","onToggleReplyAll","onToggleForward","renderCustomer","fromEmail","message","customer","firstName","renderSubject","subject","renderSecondaryContent","mailData","plainContent","content","trim","substring","renderAddress","to","cc","bcc","hasAttachments","createdAt","format","title","values","length","emails","map","val","idx","email","from","onToggleContent","attachments","renderDetails","renderRightSide","Component"],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport DropdownToggle from 'modules/common/components/DropdownToggle';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Avatar from 'modules/common/components/nameCard/Avatar';\nimport Tip from 'modules/common/components/Tip';\nimport { __ } from 'modules/common/utils';\nimport { ICustomer } from 'modules/customers/types';\nimport { IMail, IMessage } from 'modules/inbox/types';\nimport * as React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport {\n  ActionButton,\n  AddressContainer,\n  Addresses,\n  AddressItem,\n  Date,\n  Details,\n  From,\n  Meta,\n  RightSide,\n  Title\n} from './style';\n\ntype Props = {\n  message: IMessage;\n  isContentCollapsed: boolean;\n  onToggleContent: () => void;\n  onToggleMailForm: (event, replyToAll?: boolean, isForward?: boolean) => void;\n};\n\ntype State = {\n  dateFormat: string;\n  isDetailExpanded: boolean;\n};\n\nclass MailHeader extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dateFormat: 'MMM D, h:mm A',\n      isDetailExpanded: false\n    };\n  }\n\n  toggleDateFormat = e => {\n    e.stopPropagation();\n\n    this.setState({\n      dateFormat: this.state.dateFormat === 'lll' ? 'MMM D, h:mm A' : 'lll'\n    });\n  };\n\n  toggleExpand = e => {\n    if (this.props.isContentCollapsed) {\n      return;\n    }\n\n    e.stopPropagation();\n    this.setState({ isDetailExpanded: !this.state.isDetailExpanded });\n  };\n\n  onToggleMailForm = ({\n    event,\n    replyToAll = false,\n    isForward = false\n  }: {\n    event: any;\n    replyToAll?: boolean;\n    isForward?: boolean;\n  }) => {\n    event.stopPropagation();\n\n    this.props.onToggleMailForm(event, replyToAll, isForward);\n  };\n\n  renderTopButton = () => {\n    if (this.props.isContentCollapsed) {\n      return null;\n    }\n\n    const onToggleReply = event => this.onToggleMailForm({ event });\n    const onToggleReplyAll = event =>\n      this.onToggleMailForm({ event, replyToAll: true });\n    const onToggleForward = event =>\n      this.onToggleMailForm({ event, isForward: true });\n\n    return (\n      <>\n        <Tip text={__('Reply')} placement=\"bottom\">\n          <ActionButton onClick={onToggleReply}>\n            <Icon icon=\"reply\" />\n          </ActionButton>\n        </Tip>\n        <Dropdown alignRight={true}>\n          <Dropdown.Toggle as={DropdownToggle} id=\"dropdown-engage\">\n            <ActionButton>\n              <Icon icon=\"ellipsis-v\" />\n            </ActionButton>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <li>\n              <a href=\"#action\" onClick={onToggleReply}>\n                Reply\n              </a>\n            </li>\n            <li>\n              <a href=\"#action\" onClick={onToggleReplyAll}>\n                Reply all\n              </a>\n            </li>\n            <li>\n              <a href=\"#action\" onClick={onToggleForward}>\n                Forward\n              </a>\n            </li>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  };\n\n  renderRightSide(hasAttachments: boolean, createdAt: Date) {\n    return (\n      <RightSide>\n        <Date onClick={this.toggleDateFormat}>\n          {dayjs(createdAt).format(this.state.dateFormat)}\n        </Date>\n        {hasAttachments && <Icon icon=\"paperclip\" />}\n        {this.renderTopButton()}\n      </RightSide>\n    );\n  }\n\n  renderAddress(title: string, values: any) {\n    if (!values || values.length === 0) {\n      return null;\n    }\n\n    const { length } = values;\n\n    const emails = values.map((val, idx) => (\n      <React.Fragment key={idx}>\n        <span>{val.email}</span>\n        {length - 1 !== idx && `,${' '}`}\n      </React.Fragment>\n    ));\n\n    return (\n      <AddressItem>\n        <Title>{title}</Title>\n        <Addresses>{emails}</Addresses>\n      </AddressItem>\n    );\n  }\n\n  renderCustomer = (fromEmail: string) => {\n    const { customer = {} as ICustomer } = this.props.message;\n\n    if (!customer) {\n      return null;\n    }\n\n    if (customer.firstName === fromEmail) {\n      return (\n        <div>\n          <strong>{fromEmail}</strong>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <strong>{customer.firstName}</strong>{' '}\n        <From>\n          {'<'}\n          {fromEmail}\n          {'>'}\n        </From>\n      </div>\n    );\n  };\n\n  renderSubject = (subject: string) => {\n    if (!this.state.isDetailExpanded) {\n      return null;\n    }\n\n    return (\n      <AddressItem>\n        <Title>{__('Subject')}:</Title>\n        <Addresses>{subject}</Addresses>\n      </AddressItem>\n    );\n  };\n\n  renderSecondaryContent = mailData => {\n    const { message, isContentCollapsed } = this.props;\n\n    if (isContentCollapsed) {\n      // remove all tags and convert plain text\n      const plainContent = (message.content || '').trim();\n\n      return <div>{plainContent.substring(0, 100)}...</div>;\n    }\n\n    return (\n      <>\n        <AddressContainer isExpanded={this.state.isDetailExpanded}>\n          {this.renderAddress('To:', mailData.to)}\n          {this.renderAddress('Cc:', mailData.cc)}\n          {this.renderAddress('Bcc:', mailData.bcc)}\n        </AddressContainer>\n        {this.renderSubject(mailData.subject || '')}\n      </>\n    );\n  };\n\n  renderDetails(mailData) {\n    const [from] = mailData.from || [{}];\n\n    return (\n      <Details\n        onClick={this.toggleExpand}\n        clickable={!this.props.isContentCollapsed}\n      >\n        {this.renderCustomer(from.email || '')}\n        {this.renderSecondaryContent(mailData)}\n      </Details>\n    );\n  }\n\n  render() {\n    const { message, isContentCollapsed, onToggleContent } = this.props;\n    const { customer, createdAt, mailData = {} as IMail } = message;\n    const hasAttachments = mailData\n      ? (mailData.attachments || []).length > 0\n      : false;\n\n    return (\n      <Meta toggle={isContentCollapsed} onClick={onToggleContent}>\n        <Avatar customer={customer} size={32} letterCount={1} />\n        {this.renderDetails(mailData)}\n        {this.renderRightSide(hasAttachments, createdAt)}\n      </Meta>\n    );\n  }\n}\n\nexport default MailHeader;\n"]},"metadata":{},"sourceType":"module"}