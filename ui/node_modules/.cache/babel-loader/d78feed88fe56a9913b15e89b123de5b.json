{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/telnyx/SmsForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport SmsForm from '../../components/telnyx/SmsForm';\n\nvar SmsFormContainer = function SmsFormContainer(props) {\n  var integrationsQuery = props.integrationsQuery,\n      integrationsFetchApiQuery = props.integrationsFetchApiQuery,\n      closeModal = props.closeModal,\n      sendSmsMutation = props.sendSmsMutation;\n\n  if (integrationsFetchApiQuery.loading || integrationsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  }\n\n  var integrations = integrationsQuery.integrations || [];\n  var externalIntegrations = integrationsFetchApiQuery.integrationsFetchApi || [];\n  var mappedIntegrations = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var e = _step.value;\n      var local = integrations.find(function (i) {\n        return i._id === e.erxesApiId;\n      });\n\n      if (local) {\n        mappedIntegrations.push({\n          _id: local._id,\n          name: local.name,\n          phoneNumber: e.telnyxPhoneNumber,\n          isActive: local.isActive\n        });\n      }\n    };\n\n    for (var _iterator = externalIntegrations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var sendSms = function sendSms(integrationId, content, to) {\n    if (!integrationId) {\n      return Alert.warning('Please choose phone number');\n    }\n\n    if (!content) {\n      return Alert.warning('Please type sms text');\n    }\n\n    if (!to) {\n      return Alert.warning('Customer or company does not have primary phone');\n    }\n\n    sendSmsMutation({\n      variables: {\n        integrationId: integrationId,\n        content: content,\n        to: to\n      }\n    }).then(function (_ref) {\n      var data = _ref.data;\n      var status = data.integrationsSendSms.status;\n\n      if (status === 'ok') {\n        Alert.success('SMS successfully sent');\n      }\n\n      closeModal();\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    sendSms: sendSms,\n    integrations: mappedIntegrations,\n    closeModal: closeModal\n  });\n\n  return React.createElement(SmsForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.fetchApi), {\n  name: 'integrationsFetchApiQuery',\n  options: function options() {\n    return {\n      variables: {\n        path: '/integrations',\n        params: {\n          kind: 'telnyx'\n        }\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.integrations), {\n  name: 'integrationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        kind: 'telnyx'\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.integrationsSendSms), {\n  name: 'sendSmsMutation'\n}))(SmsFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/telnyx/SmsForm.tsx"],"names":["gql","compose","Spinner","Alert","withProps","mutations","queries","React","graphql","SmsForm","SmsFormContainer","props","integrationsQuery","integrationsFetchApiQuery","closeModal","sendSmsMutation","loading","integrations","externalIntegrations","integrationsFetchApi","mappedIntegrations","e","local","find","i","_id","erxesApiId","push","name","phoneNumber","telnyxPhoneNumber","isActive","sendSms","integrationId","content","to","warning","variables","then","data","status","integrationsSendSms","success","catch","error","message","updatedProps","fetchApi","options","path","params","kind","fetchPolicy"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport {\n  IntegrationsQueryResponse,\n  SendSmsMutationResponse\n} from 'modules/settings/integrations/types';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport SmsForm from '../../components/telnyx/SmsForm';\n\ntype Props = {\n  closeModal: () => void;\n  primaryPhone: string;\n};\n\ntype FinalProps = {\n  sendSmsMutation: SendSmsMutationResponse;\n  integrationsFetchApiQuery: any;\n  integrationsQuery: IntegrationsQueryResponse;\n} & Props;\n\nconst SmsFormContainer = (props: FinalProps) => {\n  const {\n    integrationsQuery,\n    integrationsFetchApiQuery,\n    closeModal,\n    sendSmsMutation\n  } = props;\n\n  if (integrationsFetchApiQuery.loading || integrationsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const integrations = integrationsQuery.integrations || [];\n  const externalIntegrations =\n    integrationsFetchApiQuery.integrationsFetchApi || [];\n\n  const mappedIntegrations: any[] = [];\n\n  for (const e of externalIntegrations) {\n    const local = integrations.find(i => i._id === e.erxesApiId);\n\n    if (local) {\n      mappedIntegrations.push({\n        _id: local._id,\n        name: local.name,\n        phoneNumber: e.telnyxPhoneNumber,\n        isActive: local.isActive\n      });\n    }\n  }\n\n  const sendSms = (integrationId: string, content: string, to: string) => {\n    if (!integrationId) {\n      return Alert.warning('Please choose phone number');\n    }\n    if (!content) {\n      return Alert.warning('Please type sms text');\n    }\n    if (!to) {\n      return Alert.warning('Customer or company does not have primary phone');\n    }\n\n    sendSmsMutation({\n      variables: { integrationId, content, to }\n    })\n      .then(({ data }) => {\n        const { status } = data.integrationsSendSms;\n\n        if (status === 'ok') {\n          Alert.success('SMS successfully sent');\n        }\n\n        closeModal();\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    sendSms,\n    integrations: mappedIntegrations,\n    closeModal\n  };\n\n  return <SmsForm {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(queries.fetchApi), {\n      name: 'integrationsFetchApiQuery',\n      options: () => ({\n        variables: { path: '/integrations', params: { kind: 'telnyx' } },\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, IntegrationsQueryResponse>(gql(queries.integrations), {\n      name: 'integrationsQuery',\n      options: () => {\n        return {\n          variables: { kind: 'telnyx' },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<Props>(gql(mutations.integrationsSendSms), {\n      name: 'sendSmsMutation'\n    })\n  )(SmsFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}