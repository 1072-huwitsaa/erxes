{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/label/Form.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport { COLORS } from \"modules/boards/constants\";\nimport { ControlLabel, FormControl, FormGroup } from \"modules/common/components/form\";\nimport Form from \"modules/common/components/form/Form\";\nimport { BackgroundSelector } from \"modules/leads/components/step/style\";\nimport * as React from \"react\";\nimport { ChooseColor } from \"../../styles/label\";\n\nvar FormComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FormComponent, _React$Component);\n\n  _createClass(FormComponent, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var label = nextProps.label;\n      var prevLabel = prevState.label;\n      var defaultLabel = {\n        colorCode: COLORS[0],\n        name: \"\"\n      };\n\n      if (label && label._id !== prevLabel._id || !label && prevLabel === defaultLabel) {\n        return {\n          label: nextProps.label || {\n            colorCode: COLORS[0],\n            name: \"\"\n          }\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  function FormComponent(props) {\n    var _this;\n\n    _classCallCheck(this, FormComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormComponent).call(this, props));\n\n    _this.onChangeColorCode = function (colorCode) {\n      var label = _this.state.label;\n      label.colorCode = colorCode;\n\n      _this.setState({\n        label: label\n      });\n    };\n\n    _this.onNameChange = function (e) {\n      var label = _objectSpread({}, _this.state.label);\n\n      label.name = e.currentTarget.value;\n\n      _this.setState({\n        label: label\n      });\n    };\n\n    _this.onRemove = function () {\n      var _this$props = _this.props,\n          remove = _this$props.remove,\n          label = _this$props.label;\n\n      if (label && label._id) {\n        remove(label._id);\n      }\n    };\n\n    _this.renderContent = function (formProps) {\n      var _this$props2 = _this.props,\n          renderButton = _this$props2.renderButton,\n          afterSave = _this$props2.afterSave;\n      var label = _this.state.label;\n      var isSubmitted = formProps.isSubmitted;\n      return React.createElement(React.Fragment, null, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Name\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"name\",\n        value: label ? label.name : \"\",\n        onChange: _this.onNameChange,\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Select a color\"), React.createElement(ChooseColor, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, COLORS.map(function (colorCode) {\n        return _this.renderColors(colorCode);\n      }))), label._id && React.createElement(Button, {\n        btnStyle: \"danger\",\n        type: \"button\",\n        size: \"small\",\n        icon: \"cancel-1\",\n        onClick: _this.onRemove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Delete\"), renderButton({\n        name: \"label\",\n        values: {\n          name: label.name,\n          colorCode: label.colorCode\n        },\n        isSubmitted: isSubmitted,\n        callback: afterSave,\n        object: label || {}\n      }));\n    };\n\n    var _label = props.label;\n    _this.state = {\n      label: _label ? _objectSpread({}, _label) : _this.getDefaultLabel()\n    };\n    return _this;\n  }\n\n  _createClass(FormComponent, [{\n    key: \"getDefaultLabel\",\n    value: function getDefaultLabel() {\n      return {\n        colorCode: COLORS[0],\n        name: \"\"\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var label = this.props.label;\n\n      if (prevProps.label !== label && label) {\n        this.setState({\n          label: label\n        });\n      } // clear form if form hide\n\n\n      if (prevProps.showForm !== this.props.showForm) {\n        this.setState({\n          label: this.getDefaultLabel()\n        });\n      }\n    }\n  }, {\n    key: \"renderColors\",\n    value: function renderColors(colorCode) {\n      var _this2 = this;\n\n      var onClick = function onClick() {\n        return _this2.onChangeColorCode(colorCode);\n      };\n\n      var label = this.state.label;\n      return React.createElement(BackgroundSelector, {\n        key: colorCode,\n        selected: label.colorCode === colorCode,\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          backgroundColor: colorCode\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"check-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return FormComponent;\n}(React.Component);\n\nexport default FormComponent;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/label/Form.tsx"],"names":["Button","Icon","COLORS","ControlLabel","FormControl","FormGroup","Form","BackgroundSelector","React","ChooseColor","FormComponent","nextProps","prevState","label","prevLabel","defaultLabel","colorCode","name","_id","props","onChangeColorCode","state","setState","onNameChange","e","currentTarget","value","onRemove","remove","renderContent","formProps","renderButton","afterSave","isSubmitted","map","renderColors","values","callback","object","getDefaultLabel","prevProps","showForm","onClick","backgroundColor","Component"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,uCAAnB;AACA,OAAOC,IAAP,MAAiB,qCAAjB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SACEC,YADF,EAEEC,WAFF,EAGEC,SAHF,QAIO,gCAJP;AAKA,OAAOC,IAAP,MAAiB,qCAAjB;AAEA,SAASC,kBAAT,QAAmC,qCAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;IAeMC,a;;;;;;;6CAC4BC,S,EAAWC,S,EAAW;AAAA,UAC5CC,KAD4C,GAClCF,SADkC,CAC5CE,KAD4C;AAEpD,UAAMC,SAAS,GAAGF,SAAS,CAACC,KAA5B;AAEA,UAAME,YAAY,GAAG;AAAEC,QAAAA,SAAS,EAAEd,MAAM,CAAC,CAAD,CAAnB;AAAwBe,QAAAA,IAAI,EAAE;AAA9B,OAArB;;AAEA,UACGJ,KAAK,IAAIA,KAAK,CAACK,GAAN,KAAcJ,SAAS,CAACI,GAAlC,IACC,CAACL,KAAD,IAAUC,SAAS,KAAKC,YAF3B,EAGE;AACA,eAAO;AACLF,UAAAA,KAAK,EAAEF,SAAS,CAACE,KAAV,IAAmB;AACxBG,YAAAA,SAAS,EAAEd,MAAM,CAAC,CAAD,CADO;AAExBe,YAAAA,IAAI,EAAE;AAFkB;AADrB,SAAP;AAMD;;AAED,aAAO,IAAP;AACD;;;AAED,yBAAYE,KAAZ,EAA2B;AAAA;;AAAA;;AACzB,uFAAMA,KAAN;;AADyB,UA2B3BC,iBA3B2B,GA2BP,UAACJ,SAAD,EAAuB;AAAA,UACjCH,KADiC,GACvB,MAAKQ,KADkB,CACjCR,KADiC;AAGzCA,MAAAA,KAAK,CAACG,SAAN,GAAkBA,SAAlB;;AAEA,YAAKM,QAAL,CAAc;AAAET,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD,KAjC0B;;AAAA,UAmC3BU,YAnC2B,GAmCZ,UAACC,CAAD,EAAqC;AAClD,UAAMX,KAAK,qBAAQ,MAAKQ,KAAL,CAAWR,KAAnB,CAAX;;AAEAA,MAAAA,KAAK,CAACI,IAAN,GAAcO,CAAC,CAACC,aAAH,CAAuCC,KAApD;;AAEA,YAAKJ,QAAL,CAAc;AAAET,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD,KAzC0B;;AAAA,UA2C3Bc,QA3C2B,GA2ChB,YAAM;AAAA,wBACW,MAAKR,KADhB;AAAA,UACPS,MADO,eACPA,MADO;AAAA,UACCf,KADD,eACCA,KADD;;AAGf,UAAIA,KAAK,IAAIA,KAAK,CAACK,GAAnB,EAAwB;AACtBU,QAAAA,MAAM,CAACf,KAAK,CAACK,GAAP,CAAN;AACD;AACF,KAjD0B;;AAAA,UAoE3BW,aApE2B,GAoEX,UAACC,SAAD,EAA2B;AAAA,yBACL,MAAKX,KADA;AAAA,UACjCY,YADiC,gBACjCA,YADiC;AAAA,UACnBC,SADmB,gBACnBA,SADmB;AAAA,UAEjCnB,KAFiC,GAEvB,MAAKQ,KAFkB,CAEjCR,KAFiC;AAAA,UAGjCoB,WAHiC,GAGjBH,SAHiB,CAGjCG,WAHiC;AAKzC,aACE,0CACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AAAc,QAAA,QAAQ,EAAE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,WAAD,oBACMH,SADN;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAEjB,KAAK,GAAGA,KAAK,CAACI,IAAT,GAAgB,EAH9B;AAIE,QAAA,QAAQ,EAAE,MAAKM,YAJjB;AAKE,QAAA,QAAQ,EAAE,IALZ;AAME,QAAA,SAAS,EAAE,IANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF,EAYE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AAAc,QAAA,QAAQ,EAAE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGrB,MAAM,CAACgC,GAAP,CAAW,UAAClB,SAAD;AAAA,eAAe,MAAKmB,YAAL,CAAkBnB,SAAlB,CAAf;AAAA,OAAX,CADH,CAFF,CAZF,EAkBGH,KAAK,CAACK,GAAN,IACC,oBAAC,MAAD;AACE,QAAA,QAAQ,EAAC,QADX;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,OAAO,EAAE,MAAKS,QALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBJ,EA8BGI,YAAY,CAAC;AACZd,QAAAA,IAAI,EAAE,OADM;AAEZmB,QAAAA,MAAM,EAAE;AACNnB,UAAAA,IAAI,EAAEJ,KAAK,CAACI,IADN;AAEND,UAAAA,SAAS,EAAEH,KAAK,CAACG;AAFX,SAFI;AAMZiB,QAAAA,WAAW,EAAXA,WANY;AAOZI,QAAAA,QAAQ,EAAEL,SAPE;AAQZM,QAAAA,MAAM,EAAEzB,KAAK,IAAI;AARL,OAAD,CA9Bf,CADF;AA2CD,KApH0B;;AAAA,QAGjBA,MAHiB,GAGPM,KAHO,CAGjBN,KAHiB;AAKzB,UAAKQ,KAAL,GAAa;AACXR,MAAAA,KAAK,EAAEA,MAAK,qBAAQA,MAAR,IAAkB,MAAK0B,eAAL;AADnB,KAAb;AALyB;AAQ1B;;;;sCAEiB;AAChB,aAAO;AAAEvB,QAAAA,SAAS,EAAEd,MAAM,CAAC,CAAD,CAAnB;AAAwBe,QAAAA,IAAI,EAAE;AAA9B,OAAP;AACD;;;uCAEkBuB,S,EAAW;AAAA,UACpB3B,KADoB,GACV,KAAKM,KADK,CACpBN,KADoB;;AAG5B,UAAI2B,SAAS,CAAC3B,KAAV,KAAoBA,KAApB,IAA6BA,KAAjC,EAAwC;AACtC,aAAKS,QAAL,CAAc;AAAET,UAAAA,KAAK,EAALA;AAAF,SAAd;AACD,OAL2B,CAO5B;;;AACA,UAAI2B,SAAS,CAACC,QAAV,KAAuB,KAAKtB,KAAL,CAAWsB,QAAtC,EAAgD;AAC9C,aAAKnB,QAAL,CAAc;AAAET,UAAAA,KAAK,EAAE,KAAK0B,eAAL;AAAT,SAAd;AACD;AACF;;;iCA0BYvB,S,EAAmB;AAAA;;AAC9B,UAAM0B,OAAO,GAAG,SAAVA,OAAU;AAAA,eAAM,MAAI,CAACtB,iBAAL,CAAuBJ,SAAvB,CAAN;AAAA,OAAhB;;AAD8B,UAEtBH,KAFsB,GAEZ,KAAKQ,KAFO,CAEtBR,KAFsB;AAI9B,aACE,oBAAC,kBAAD;AACE,QAAA,GAAG,EAAEG,SADP;AAEE,QAAA,QAAQ,EAAEH,KAAK,CAACG,SAAN,KAAoBA,SAFhC;AAGE,QAAA,OAAO,EAAE0B,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE3B;AAAnB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALF,CADF;AAWD;;;6BAoDQ;AACP,aAAO,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAE,KAAKa,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EA9IyBrB,KAAK,CAACoC,S;;AAiJlC,eAAelC,aAAf","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport { COLORS } from \"modules/boards/constants\";\nimport {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n} from \"modules/common/components/form\";\nimport Form from \"modules/common/components/form/Form\";\nimport { IButtonMutateProps, IFormProps } from \"modules/common/types\";\nimport { BackgroundSelector } from \"modules/leads/components/step/style\";\nimport * as React from \"react\";\nimport { ChooseColor } from \"../../styles/label\";\nimport { IPipelineLabel } from \"../../types\";\n\ntype IProps = {\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  afterSave: () => void;\n  remove: (id: string) => void;\n  label?: IPipelineLabel;\n  showForm: boolean;\n};\n\ntype State = {\n  label: IPipelineLabel;\n};\n\nclass FormComponent extends React.Component<IProps, State> {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { label } = nextProps;\n    const prevLabel = prevState.label;\n\n    const defaultLabel = { colorCode: COLORS[0], name: \"\" };\n\n    if (\n      (label && label._id !== prevLabel._id) ||\n      (!label && prevLabel === defaultLabel)\n    ) {\n      return {\n        label: nextProps.label || {\n          colorCode: COLORS[0],\n          name: \"\",\n        },\n      };\n    }\n\n    return null;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    const { label } = props;\n\n    this.state = {\n      label: label ? { ...label } : this.getDefaultLabel(),\n    };\n  }\n\n  getDefaultLabel() {\n    return { colorCode: COLORS[0], name: \"\" };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { label } = this.props;\n\n    if (prevProps.label !== label && label) {\n      this.setState({ label });\n    }\n\n    // clear form if form hide\n    if (prevProps.showForm !== this.props.showForm) {\n      this.setState({ label: this.getDefaultLabel() });\n    }\n  }\n\n  onChangeColorCode = (colorCode: string) => {\n    const { label } = this.state;\n\n    label.colorCode = colorCode;\n\n    this.setState({ label });\n  };\n\n  onNameChange = (e: React.FormEvent<HTMLElement>) => {\n    const label = { ...this.state.label };\n\n    label.name = (e.currentTarget as HTMLButtonElement).value;\n\n    this.setState({ label });\n  };\n\n  onRemove = () => {\n    const { remove, label } = this.props;\n\n    if (label && label._id) {\n      remove(label._id);\n    }\n  };\n\n  renderColors(colorCode: string) {\n    const onClick = () => this.onChangeColorCode(colorCode);\n    const { label } = this.state;\n\n    return (\n      <BackgroundSelector\n        key={colorCode}\n        selected={label.colorCode === colorCode}\n        onClick={onClick}\n      >\n        <div style={{ backgroundColor: colorCode }}>\n          <Icon icon=\"check-1\" />\n        </div>\n      </BackgroundSelector>\n    );\n  }\n\n  renderContent = (formProps: IFormProps) => {\n    const { renderButton, afterSave } = this.props;\n    const { label } = this.state;\n    const { isSubmitted } = formProps;\n\n    return (\n      <>\n        <FormGroup>\n          <ControlLabel required={true}>Name</ControlLabel>\n          <FormControl\n            {...formProps}\n            name=\"name\"\n            value={label ? label.name : \"\"}\n            onChange={this.onNameChange}\n            required={true}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel required={true}>Select a color</ControlLabel>\n          <ChooseColor>\n            {COLORS.map((colorCode) => this.renderColors(colorCode))}\n          </ChooseColor>\n        </FormGroup>\n        {label._id && (\n          <Button\n            btnStyle=\"danger\"\n            type=\"button\"\n            size=\"small\"\n            icon=\"cancel-1\"\n            onClick={this.onRemove}\n          >\n            Delete\n          </Button>\n        )}\n\n        {renderButton({\n          name: \"label\",\n          values: {\n            name: label.name,\n            colorCode: label.colorCode,\n          },\n          isSubmitted,\n          callback: afterSave,\n          object: label || {},\n        })}\n      </>\n    );\n  };\n\n  render() {\n    return <Form renderContent={this.renderContent} />;\n  }\n}\n\nexport default FormComponent;\n"]},"metadata":{},"sourceType":"module"}