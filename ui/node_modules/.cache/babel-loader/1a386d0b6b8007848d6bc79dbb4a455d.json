{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/containers/items/Email.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Email from 'modules/activityLogs/components/items/email/Email';\nimport EngageEmail from 'modules/activityLogs/components/items/email/EngageEmail';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport { withProps } from 'modules/common/utils';\nimport { queries as engageQueries } from 'modules/engage/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../../graphql';\n\nvar EmailContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EmailContainer, _React$Component);\n\n  function EmailContainer() {\n    _classCallCheck(this, EmailContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EmailContainer).apply(this, arguments));\n  }\n\n  _createClass(EmailContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          engageMessageDetailQuery = _this$props.engageMessageDetailQuery,\n          emailDeliveryDetailQuery = _this$props.emailDeliveryDetailQuery,\n          emailType = _this$props.emailType;\n\n      if (engageMessageDetailQuery && engageMessageDetailQuery.loading) {\n        return null;\n      }\n\n      if (emailDeliveryDetailQuery && emailDeliveryDetailQuery.loading) {\n        return null;\n      }\n\n      if (emailType === 'engage') {\n        if (!engageMessageDetailQuery.engageMessageDetail) {\n          return React.createElement(EmptyState, {\n            icon: \"email-4\",\n            text: \"Email not found\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(EngageEmail, Object.assign({}, this.props, {\n          email: engageMessageDetailQuery.engageMessageDetail,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(Email, Object.assign({}, this.props, {\n        email: emailDeliveryDetailQuery.emailDeliveryDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EmailContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(engageQueries.engageMessageDetail), {\n  name: 'engageMessageDetailQuery',\n  skip: function skip(_ref) {\n    var emailType = _ref.emailType;\n    return emailType === 'email';\n  },\n  options: function options(_ref2) {\n    var emailId = _ref2.emailId;\n    return {\n      variables: {\n        _id: emailId\n      }\n    };\n  }\n}), graphql(gql(queries.emailDeliveryDetail), {\n  name: 'emailDeliveryDetailQuery',\n  skip: function skip(_ref3) {\n    var emailType = _ref3.emailType;\n    return emailType === 'engage';\n  },\n  options: function options(_ref4) {\n    var emailId = _ref4.emailId;\n    return {\n      variables: {\n        _id: emailId\n      }\n    };\n  }\n}))(EmailContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/containers/items/Email.tsx"],"names":["gql","compose","Email","EngageEmail","EmptyState","withProps","queries","engageQueries","React","graphql","EmailContainer","props","engageMessageDetailQuery","emailDeliveryDetailQuery","emailType","loading","engageMessageDetail","emailDeliveryDetail","Component","name","skip","options","emailId","variables","_id"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,mDAAlB;AACA,OAAOC,WAAP,MAAwB,yDAAxB;AAEA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAO,IAAIC,aAApB,QAAyC,wBAAzC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASH,OAAT,QAAwB,eAAxB;;IAaMI,c;;;;;;;;;;;;;6BACK;AAAA,wBAKH,KAAKC,KALF;AAAA,UAELC,wBAFK,eAELA,wBAFK;AAAA,UAGLC,wBAHK,eAGLA,wBAHK;AAAA,UAILC,SAJK,eAILA,SAJK;;AAOP,UAAIF,wBAAwB,IAAIA,wBAAwB,CAACG,OAAzD,EAAkE;AAChE,eAAO,IAAP;AACD;;AAED,UAAIF,wBAAwB,IAAIA,wBAAwB,CAACE,OAAzD,EAAkE;AAChE,eAAO,IAAP;AACD;;AAED,UAAID,SAAS,KAAK,QAAlB,EAA4B;AAC1B,YAAI,CAACF,wBAAwB,CAACI,mBAA9B,EAAmD;AACjD,iBAAO,oBAAC,UAAD;AAAY,YAAA,IAAI,EAAC,SAAjB;AAA2B,YAAA,IAAI,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,eACE,oBAAC,WAAD,oBACM,KAAKL,KADX;AAEE,UAAA,KAAK,EAAEC,wBAAwB,CAACI,mBAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAMD;;AAED,aACE,oBAAC,KAAD,oBACM,KAAKL,KADX;AAEE,QAAA,KAAK,EAAEE,wBAAwB,CAACI,mBAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAMD;;;;EAnC0BT,KAAK,CAACU,S;;AAsCnC,eAAeb,SAAS,CACtBJ,OAAO,CACLQ,OAAO,CACLT,GAAG,CAACO,aAAa,CAACS,mBAAf,CADE,EAEL;AACEG,EAAAA,IAAI,EAAE,0BADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGN,SAAH,QAAGA,SAAH;AAAA,WAAmBA,SAAS,KAAK,OAAjC;AAAA,GAFR;AAGEO,EAAAA,OAAO,EAAE;AAAA,QAAGC,OAAH,SAAGA,OAAH;AAAA,WAAkB;AACzBC,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEF;AADI;AADc,KAAlB;AAAA;AAHX,CAFK,CADF,EAaLb,OAAO,CACLT,GAAG,CAACM,OAAO,CAACW,mBAAT,CADE,EAEL;AACEE,EAAAA,IAAI,EAAE,0BADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGN,SAAH,SAAGA,SAAH;AAAA,WAAmBA,SAAS,KAAK,QAAjC;AAAA,GAFR;AAGEO,EAAAA,OAAO,EAAE;AAAA,QAAGC,OAAH,SAAGA,OAAH;AAAA,WAAkB;AACzBC,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEF;AADI;AADc,KAAlB;AAAA;AAHX,CAFK,CAbF,CAAP,CAyBEZ,cAzBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Email from 'modules/activityLogs/components/items/email/Email';\nimport EngageEmail from 'modules/activityLogs/components/items/email/EngageEmail';\nimport { EmailDeliveryDetailQueryResponse } from 'modules/activityLogs/types';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport { withProps } from 'modules/common/utils';\nimport { queries as engageQueries } from 'modules/engage/graphql';\nimport { EngageMessageDetailQueryResponse } from 'modules/engage/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../../graphql';\n\ntype Props = {\n  activity: any;\n  emailId: string;\n  emailType: string;\n};\n\ntype FinalProps = {\n  engageMessageDetailQuery: EngageMessageDetailQueryResponse;\n  emailDeliveryDetailQuery: EmailDeliveryDetailQueryResponse;\n} & Props;\n\nclass EmailContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      engageMessageDetailQuery,\n      emailDeliveryDetailQuery,\n      emailType\n    } = this.props;\n\n    if (engageMessageDetailQuery && engageMessageDetailQuery.loading) {\n      return null;\n    }\n\n    if (emailDeliveryDetailQuery && emailDeliveryDetailQuery.loading) {\n      return null;\n    }\n\n    if (emailType === 'engage') {\n      if (!engageMessageDetailQuery.engageMessageDetail) {\n        return <EmptyState icon=\"email-4\" text=\"Email not found\" />;\n      }\n\n      return (\n        <EngageEmail\n          {...this.props}\n          email={engageMessageDetailQuery.engageMessageDetail}\n        />\n      );\n    }\n\n    return (\n      <Email\n        {...this.props}\n        email={emailDeliveryDetailQuery.emailDeliveryDetail}\n      />\n    );\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, EngageMessageDetailQueryResponse>(\n      gql(engageQueries.engageMessageDetail),\n      {\n        name: 'engageMessageDetailQuery',\n        skip: ({ emailType }) => emailType === 'email',\n        options: ({ emailId }) => ({\n          variables: {\n            _id: emailId\n          }\n        })\n      }\n    ),\n    graphql<Props, EngageMessageDetailQueryResponse>(\n      gql(queries.emailDeliveryDetail),\n      {\n        name: 'emailDeliveryDetailQuery',\n        skip: ({ emailType }) => emailType === 'engage',\n        options: ({ emailId }) => ({\n          variables: {\n            _id: emailId\n          }\n        })\n      }\n    )\n  )(EmailContainer)\n);\n"]},"metadata":{},"sourceType":"module"}