{"ast":null,"code":"import { createElement, Fragment, useRef as useRef$1, useState as useState$1, useEffect as useEffect$1, useCallback as useCallback$1 } from 'react';\nimport cc from 'classcat';\nimport Popover from '@reach/popover';\nimport useOnClickOutside from 'use-onclickoutside';\nimport format from 'date-fns/format';\nimport rawParse from 'date-fns/parse';\nimport isEqual from 'date-fns/isEqual';\nimport toDate from 'date-fns/toDate';\nimport isDateValid from 'date-fns/isValid';\nimport startOfDay from 'date-fns/startOfDay';\nimport getHours from 'date-fns/getHours';\nimport addHours from 'date-fns/addHours';\nimport addMinutes from 'date-fns/addMinutes';\nimport addSeconds from 'date-fns/addSeconds';\nimport addMilliseconds from 'date-fns/addMilliseconds';\nimport setHours from 'date-fns/setHours';\nimport addDays from 'date-fns/addDays';\nimport differenceInDays from 'date-fns/differenceInDays';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isBefore from 'date-fns/isBefore';\nimport addMonths from 'date-fns/addMonths';\nimport getDate from 'date-fns/getDate';\nimport addYears from 'date-fns/addYears';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport setMonth from 'date-fns/setMonth';\nimport getDaysInMonth from 'date-fns/getDaysInMonth';\nimport setDate from 'date-fns/setDate';\nimport getYear from 'date-fns/getYear';\nimport setYear from 'date-fns/setYear';\nimport getDaysInYear from 'date-fns/getDaysInYear';\nimport setDayOfYear from 'date-fns/setDayOfYear';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar allCounters = [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\nvar defaultTimeConstraints = {\n  hours: {\n    min: 0,\n    max: 23,\n    step: 1\n  },\n  minutes: {\n    min: 0,\n    max: 59,\n    step: 1\n  },\n  seconds: {\n    min: 0,\n    max: 59,\n    step: 1\n  },\n  milliseconds: {\n    min: 0,\n    max: 999,\n    step: 1\n  }\n};\n\nvar TimePart = function TimePart(props) {\n  var showPrefix = props.showPrefix,\n      onUp = props.onUp,\n      onDown = props.onDown,\n      value = props.value;\n  return value !== null && value !== undefined ? createElement(Fragment, null, showPrefix && createElement(\"div\", {\n    className: \"rdtCounterSeparator\"\n  }, \":\"), createElement(\"div\", {\n    className: \"rdtCounter\"\n  }, createElement(\"span\", {\n    className: \"rdtBtn\",\n    onMouseDown: onUp\n  }, \"\\u25B2\"), createElement(\"div\", {\n    className: \"rdtCount\"\n  }, value), createElement(\"span\", {\n    className: \"rdtBtn\",\n    onMouseDown: onDown\n  }, \"\\u25BC\"))) : null;\n};\n\nfunction getStepSize(type, timeConstraints) {\n  var step = defaultTimeConstraints[type].step;\n  var config = timeConstraints ? timeConstraints[type] : undefined;\n\n  if (config && config.step) {\n    step = config.step;\n  }\n\n  return step;\n}\n\nfunction change(op, type, timestamp, timeConstraints) {\n  var mult = op === \"sub\" ? -1 : 1;\n  var step = getStepSize(type, timeConstraints) * mult;\n\n  if (type === \"hours\") {\n    return addHours(timestamp, step);\n  } else if (type === \"minutes\") {\n    return addMinutes(timestamp, step);\n  } else if (type === \"seconds\") {\n    return addSeconds(timestamp, step);\n  } else {\n    return addMilliseconds(timestamp, step);\n  }\n}\n\nfunction getFormatted(type, timestamp, timeFormat, formatOptions) {\n  var fmt = typeof timeFormat === \"string\" ? timeFormat : \"\";\n\n  function has(f, val) {\n    return f.indexOf(val) !== -1;\n  }\n\n  var hasHours = has(fmt.toLowerCase(), \"h\");\n  var hasMinutes = has(fmt, \"m\");\n  var hasSeconds = has(fmt, \"s\");\n  var hasMilliseconds = has(fmt, \"S\");\n  var hasDayPart = has(fmt, \"a\");\n  var typeFormat = type === \"hours\" && hasHours ? hasDayPart ? \"h\" : \"H\" : type === \"minutes\" && hasMinutes ? \"mm\" : type === \"seconds\" && hasSeconds ? \"ss\" : type === \"milliseconds\" && hasMilliseconds ? \"SSS\" : type === \"daypart\" && hasDayPart ? \"a\" : undefined;\n\n  if (typeFormat) {\n    return format(timestamp, typeFormat, formatOptions);\n  }\n\n  return undefined;\n}\n\nfunction toggleDayPart(timestamp, setSelectedDate) {\n  return function () {\n    var hours = getHours(timestamp);\n    var newHours = hours >= 12 ? hours - 12 : hours + 12;\n    setSelectedDate(setHours(timestamp, newHours));\n  };\n}\n\nvar timer;\nvar increaseTimer;\n\nvar _mouseUpListener;\n\nfunction onStartClicking(op, type, props) {\n  return function () {\n    var readonly = props.readonly,\n        _props$viewTimestamp = props.viewTimestamp,\n        origViewTimestamp = _props$viewTimestamp === void 0 ? new Date() : _props$viewTimestamp,\n        timeConstraints = props.timeConstraints,\n        setViewTimestamp = props.setViewTimestamp,\n        setSelectedDate = props.setSelectedDate;\n\n    if (!readonly) {\n      var viewTimestamp = change(op, type, origViewTimestamp, timeConstraints);\n      setViewTimestamp(viewTimestamp);\n      timer = setTimeout(function () {\n        increaseTimer = setInterval(function () {\n          viewTimestamp = change(op, type, viewTimestamp, timeConstraints);\n          setViewTimestamp(viewTimestamp);\n        }, 70);\n      }, 500);\n\n      _mouseUpListener = function mouseUpListener() {\n        clearTimeout(timer);\n        clearInterval(increaseTimer);\n        setSelectedDate(viewTimestamp);\n        document.body.removeEventListener(\"mouseup\", _mouseUpListener);\n        document.body.removeEventListener(\"touchend\", _mouseUpListener);\n      };\n\n      document.body.addEventListener(\"mouseup\", _mouseUpListener);\n      document.body.addEventListener(\"touchend\", _mouseUpListener);\n    }\n  };\n}\n\nfunction TimeView(props) {\n  var _props$viewTimestamp2 = props.viewTimestamp,\n      viewTimestamp = _props$viewTimestamp2 === void 0 ? new Date() : _props$viewTimestamp2,\n      _props$dateFormat = props.dateFormat,\n      dateFormat = _props$dateFormat === void 0 ? false : _props$dateFormat,\n      setViewMode = props.setViewMode,\n      timeFormat = props.timeFormat,\n      formatOptions = props.formatOptions,\n      setSelectedDate = props.setSelectedDate;\n  var numCounters = 0;\n  return createElement(\"div\", {\n    className: \"rdtTime\"\n  }, createElement(\"table\", null, dateFormat ? createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n    className: \"rdtSwitch\",\n    colSpan: 4,\n    onClick: function onClick() {\n      return setViewMode(\"days\");\n    }\n  }, format(viewTimestamp, dateFormat)))) : null, createElement(\"tbody\", null, createElement(\"tr\", null, createElement(\"td\", null, createElement(\"div\", {\n    className: \"rdtCounters\"\n  }, allCounters.map(function (type) {\n    var val = getFormatted(type, viewTimestamp, timeFormat, formatOptions);\n\n    if (val) {\n      numCounters++;\n    }\n\n    return createElement(TimePart, {\n      key: type,\n      showPrefix: numCounters > 1,\n      onUp: onStartClicking(\"add\", type, props),\n      onDown: onStartClicking(\"sub\", type, props),\n      value: val\n    });\n  }), createElement(TimePart, {\n    onUp: toggleDayPart(viewTimestamp, setSelectedDate),\n    onDown: toggleDayPart(viewTimestamp, setSelectedDate),\n    value: getFormatted(\"daypart\", viewTimestamp, timeFormat, formatOptions)\n  })))))));\n}\n\nfunction DaysView(props) {\n  var _props$timeFormat = props.timeFormat,\n      timeFormat = _props$timeFormat === void 0 ? false : _props$timeFormat,\n      _props$viewDate = props.viewDate,\n      viewDate = _props$viewDate === void 0 ? new Date() : _props$viewDate,\n      setViewDate = props.setViewDate,\n      selectedDate = props.selectedDate,\n      setSelectedDate = props.setSelectedDate,\n      formatOptions = props.formatOptions,\n      setViewMode = props.setViewMode,\n      isValidDate = props.isValidDate;\n  var sunday = startOfWeek(viewDate);\n  var prevMonth = addMonths(viewDate, -1);\n  var daysSincePrevMonthLastWeekStart = differenceInDays(startOfWeek(endOfMonth(prevMonth)), viewDate);\n  var prevMonthLastWeekStart = addDays(viewDate, daysSincePrevMonthLastWeekStart);\n  return createElement(\"div\", {\n    className: \"rdtDays\"\n  }, createElement(\"table\", null, createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n    className: \"rdtPrev\",\n    onClick: function onClick() {\n      return setViewDate(addMonths(viewDate, -1));\n    }\n  }, createElement(\"span\", null, \"\\u2039\")), createElement(\"th\", {\n    className: \"rdtSwitch\",\n    onClick: function onClick() {\n      return setViewMode(\"months\");\n    },\n    colSpan: 5\n  }, format(viewDate, \"LLLL yyyy\", formatOptions)), createElement(\"th\", {\n    className: \"rdtNext\",\n    onClick: function onClick() {\n      return setViewDate(addMonths(viewDate, 1));\n    }\n  }, createElement(\"span\", null, \"\\u203A\"))), createElement(\"tr\", null, [0, 1, 2, 3, 4, 5, 6].map(function (colNum) {\n    return createElement(\"th\", {\n      key: colNum,\n      className: \"dow\"\n    }, format(addDays(sunday, colNum), \"iiiiii\", formatOptions));\n  }))), createElement(\"tbody\", null, [0, 1, 2, 3, 4, 5].map(function (rowNum) {\n    // Use 7 columns per row\n    var rowStartDay = rowNum * 7;\n    return createElement(\"tr\", {\n      key: format(addDays(prevMonthLastWeekStart, rowStartDay), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n    }, [0, 1, 2, 3, 4, 5, 6].map(function (d) {\n      var i = d + rowStartDay;\n      var workingDate = addDays(prevMonthLastWeekStart, i);\n      var isDisabled = typeof isValidDate === \"function\" && !isValidDate(workingDate);\n      return createElement(\"td\", {\n        key: getDate(workingDate),\n        className: cc([\"rdtDay\", {\n          rdtOld: isBefore(workingDate, startOfMonth(viewDate)),\n          rdtNew: isBefore(endOfMonth(viewDate), workingDate),\n          rdtActive: selectedDate && isSameDay(workingDate, selectedDate),\n          rdtToday: isSameDay(workingDate, new Date()),\n          rdtDisabled: isDisabled\n        }]),\n        onClick: function onClick() {\n          if (!isDisabled) {\n            setSelectedDate(workingDate);\n          }\n        }\n      }, format(workingDate, \"d\", formatOptions));\n    }));\n  })), typeof timeFormat === \"string\" && timeFormat.trim() && createElement(\"tfoot\", null, createElement(\"tr\", null, createElement(\"td\", {\n    onClick: function onClick() {\n      return setViewMode(\"time\");\n    },\n    colSpan: 7,\n    className: \"rdtTimeToggle\"\n  }, format(viewDate, timeFormat, formatOptions))))));\n}\n\nfunction MonthsView(props) {\n  var _props$viewDate = props.viewDate,\n      viewDate = _props$viewDate === void 0 ? new Date() : _props$viewDate,\n      setViewDate = props.setViewDate,\n      selectedDate = props.selectedDate,\n      setSelectedDate = props.setSelectedDate,\n      formatOptions = props.formatOptions,\n      setViewMode = props.setViewMode,\n      isValidDate = props.isValidDate;\n  return createElement(\"div\", {\n    className: \"rdtMonths\"\n  }, createElement(\"table\", null, createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n    className: \"rdtPrev\",\n    onClick: function onClick() {\n      return setViewDate(addYears(viewDate, -1));\n    }\n  }, createElement(\"span\", null, \"\\u2039\")), createElement(\"th\", {\n    className: \"rdtSwitch\",\n    onClick: function onClick() {\n      return setViewMode(\"years\");\n    },\n    colSpan: 2\n  }, format(viewDate, \"yyyy\", formatOptions)), createElement(\"th\", {\n    className: \"rdtNext\",\n    onClick: function onClick() {\n      return setViewDate(addYears(viewDate, 1));\n    }\n  }, createElement(\"span\", null, \"\\u203A\"))))), createElement(\"table\", null, createElement(\"tbody\", null, [0, 1, 2].map(function (rowNum) {\n    // Use 4 columns per row\n    var rowStartMonth = rowNum * 4;\n    return createElement(\"tr\", {\n      key: rowStartMonth\n    }, [0, 1, 2, 3].map(function (m) {\n      var month = m + rowStartMonth;\n      var currentMonth = setMonth(viewDate, month);\n      var daysInMonths = Array.from({\n        length: getDaysInMonth(currentMonth)\n      }, function (e, i) {\n        return setDate(currentMonth, i + 1);\n      });\n      var isDisabled = daysInMonths.every(function (d) {\n        return typeof isValidDate === \"function\" && !isValidDate(d);\n      });\n      var monthDate = setMonth(new Date(), month);\n      return createElement(\"td\", {\n        key: month,\n        className: cc([\"rdtMonth\", {\n          rdtDisabled: isDisabled,\n          rdtActive: selectedDate && isSameMonth(selectedDate, currentMonth)\n        }]),\n        onClick: function onClick() {\n          if (!isDisabled) {\n            setSelectedDate(setMonth(viewDate, month));\n          }\n        }\n      }, format(monthDate, \"LLL\", formatOptions));\n    }));\n  }))));\n}\n\nfunction YearsView(props) {\n  var _props$viewDate = props.viewDate,\n      viewDate = _props$viewDate === void 0 ? new Date() : _props$viewDate,\n      setViewDate = props.setViewDate,\n      selectedDate = props.selectedDate,\n      setSelectedDate = props.setSelectedDate,\n      formatOptions = props.formatOptions,\n      setViewMode = props.setViewMode,\n      isValidDate = props.isValidDate;\n  var startYear = Math.floor(getYear(viewDate) / 10) * 10;\n  return createElement(\"div\", {\n    className: \"rdtYears\"\n  }, createElement(\"table\", null, createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n    className: \"rdtPrev\",\n    onClick: function onClick() {\n      return setViewDate(addYears(viewDate, -10));\n    }\n  }, createElement(\"span\", null, \"\\u2039\")), createElement(\"th\", {\n    className: \"rdtSwitch\",\n    onClick: function onClick() {\n      return setViewMode(\"years\");\n    },\n    colSpan: 2\n  }, startYear, \"-\", startYear + 9), createElement(\"th\", {\n    className: \"rdtNext\",\n    onClick: function onClick() {\n      return setViewDate(addYears(viewDate, 10));\n    }\n  }, createElement(\"span\", null, \"\\u203A\"))))), createElement(\"table\", null, createElement(\"tbody\", null, [0, 1, 2].map(function (rowNum) {\n    // Use 4 columns per row\n    var rowStartYear = startYear - 1 + rowNum * 4;\n    return createElement(\"tr\", {\n      key: rowStartYear\n    }, [0, 1, 2, 3].map(function (y) {\n      var year = y + rowStartYear;\n      var currentYear = setYear(viewDate, year);\n      var daysInYear = Array.from({\n        length: getDaysInYear(viewDate)\n      }, function (e, i) {\n        return setDayOfYear(currentYear, i + 1);\n      });\n      var isDisabled = daysInYear.every(function (d) {\n        return typeof isValidDate === \"function\" && !isValidDate(d);\n      });\n      return createElement(\"td\", {\n        key: year,\n        className: cc([\"rdtYear\", {\n          rdtDisabled: isDisabled,\n          rdtActive: selectedDate && getYear(selectedDate) === year\n        }]),\n        onClick: function onClick() {\n          if (!isDisabled) {\n            setSelectedDate(setYear(viewDate, year));\n          }\n        }\n      }, format(currentYear, \"yyyy\", formatOptions));\n    }));\n  }))));\n}\n\nfunction CalendarContainer(props) {\n  var viewMode = props.viewMode,\n      rest = _objectWithoutPropertiesLoose(props, [\"viewMode\"]);\n\n  switch (viewMode) {\n    case \"time\":\n      return createElement(TimeView, Object.assign({}, rest));\n\n    case \"days\":\n      return createElement(DaysView, Object.assign({}, rest));\n\n    case \"months\":\n      return createElement(MonthsView, Object.assign({}, rest));\n\n    case \"years\":\n      return createElement(YearsView, Object.assign({}, rest));\n  }\n\n  throw new Error(\"Unsupported view mode.\");\n}\n\nvar useRef = useRef$1,\n    useState = useState$1,\n    useEffect = useEffect$1,\n    useCallback = useCallback$1;\n\nfunction tryGetAsTime(date) {\n  var asDate = toDate(date);\n\n  if (asDate && isDateValid(asDate)) {\n    return asDate.getTime();\n  }\n\n  return date;\n}\n\nfunction useDefaultStateWithOverride(defaultValue, maybeDate) {\n  if (maybeDate === void 0) {\n    maybeDate = true;\n  }\n\n  var _useState = useState(undefined),\n      override = _useState[0],\n      setOverride = _useState[1];\n\n  var value = override || defaultValue; // Clear the override if the default changes\n\n  var changeVal = maybeDate ? tryGetAsTime(defaultValue) : defaultValue;\n  useEffect(function () {\n    setOverride(undefined);\n  }, [changeVal]);\n  return [value, setOverride];\n}\n\nfunction parse(date, fullFormat, formatOptions) {\n  if (typeof date === \"string\") {\n    var asDate = rawParse(date, fullFormat, new Date(), formatOptions);\n\n    if (isDateValid(asDate)) {\n      var formatted = format(asDate, fullFormat, formatOptions);\n\n      if (date === formatted) {\n        return asDate;\n      }\n    }\n  } else if (date) {\n    var _asDate = toDate(date);\n\n    if (isDateValid(_asDate)) {\n      return _asDate;\n    }\n  }\n\n  return undefined;\n}\n\nvar nextViewModes = {\n  days: \"days\",\n  months: \"days\",\n  years: \"months\"\n};\n\nfunction getViewMode(dateFormat, timeFormat) {\n  if (typeof dateFormat === \"string\" && dateFormat) {\n    if (dateFormat.match(/[d]/)) {\n      return \"days\";\n    } else if (dateFormat.indexOf(\"L\") !== -1) {\n      return \"months\";\n    } else if (dateFormat.indexOf(\"y\") !== -1) {\n      return \"years\";\n    }\n  }\n\n  if (typeof timeFormat === \"string\" && timeFormat) {\n    return \"time\";\n  }\n\n  return undefined;\n}\n\nfunction DateTime(props) {\n  var isValidDate = props.isValidDate,\n      rawDateTypeMode = props.dateTypeMode,\n      value = props.value,\n      rawOnChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      _props$dateFormat = props.dateFormat,\n      rawDateFormat = _props$dateFormat === void 0 ? true : _props$dateFormat,\n      _props$timeFormat = props.timeFormat,\n      rawTimeFormat = _props$timeFormat === void 0 ? true : _props$timeFormat,\n      locale = props.locale,\n      rest = _objectWithoutPropertiesLoose(props, [\"isValidDate\", \"dateTypeMode\", \"value\", \"onChange\", \"onBlur\", \"onFocus\", \"dateFormat\", \"timeFormat\", \"locale\"]); //\n  // Formats\n  //\n\n\n  var dateFormat = rawDateFormat === true ? \"LL/dd/yyyy\" : rawDateFormat;\n  var timeFormat = rawTimeFormat === true ? \"h:mm a\" : rawTimeFormat;\n  var fullFormat = dateFormat && timeFormat ? dateFormat + \" \" + timeFormat : dateFormat || timeFormat || \"\";\n  var formatOptions = {\n    locale: locale\n  };\n  var valueAsDate = parse(value, fullFormat, formatOptions);\n  var dateTypeMode = typeof rawDateTypeMode === \"string\" ? rawDateTypeMode.toLowerCase() === \"utc-ms-timestamp\" ? \"utc-ms-timestamp\" : rawDateTypeMode.toLowerCase() === \"input-format\" ? \"input-format\" : \"Date\" : value && typeof value === \"number\" ? \"utc-ms-timestamp\" : \"Date\";\n  var getChangedValue = useCallback(function (newValue) {\n    if (typeof newValue === \"string\") {\n      return newValue;\n    }\n\n    if (!newValue) {\n      return newValue;\n    }\n\n    switch (dateTypeMode) {\n      case \"utc-ms-timestamp\":\n        return newValue.getTime();\n\n      case \"input-format\":\n        return format(newValue, fullFormat, formatOptions);\n    }\n\n    return newValue;\n  }, [dateTypeMode, formatOptions, fullFormat]); //\n  // On Change\n  // string -> string\n  // falsy -> raw onChange\n  // Date -> if numeric, number (ms)\n  // Date -> if not numeric, Date\n  //\n\n  var onChange = useCallback(function (newValue) {\n    if (typeof rawOnChange !== \"function\") {\n      return;\n    }\n\n    var changedValue = getChangedValue(newValue); //\n    // Suppress change event when the value didn't change!\n    //\n\n    if (value instanceof Date && changedValue instanceof Date && isEqual(value, changedValue)) {\n      return;\n    }\n\n    if (value === changedValue) {\n      return;\n    }\n\n    rawOnChange(changedValue);\n  }, [getChangedValue, rawOnChange, value]); //\n  // ViewDate\n  //\n\n  var _useDefaultStateWithO = useDefaultStateWithOverride(valueAsDate || startOfDay(new Date())),\n      viewDate = _useDefaultStateWithO[0],\n      setViewDate = _useDefaultStateWithO[1]; //\n  // ViewMode\n  //\n\n\n  var defaultViewMode = getViewMode(dateFormat, timeFormat);\n\n  var _useDefaultStateWithO2 = useDefaultStateWithOverride(defaultViewMode, false),\n      viewMode = _useDefaultStateWithO2[0],\n      setViewMode = _useDefaultStateWithO2[1]; //\n  // ViewTimestamp\n  //\n\n\n  var _useDefaultStateWithO3 = useDefaultStateWithOverride(valueAsDate || viewDate),\n      viewTimestamp = _useDefaultStateWithO3[0],\n      setViewTimestamp = _useDefaultStateWithO3[1]; //\n  // IsOpen\n  //\n\n\n  var _useState2 = useState(false),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  function open() {\n    if (viewMode) {\n      setIsOpen(true);\n\n      if (typeof onFocus === \"function\") {\n        onFocus();\n      }\n    }\n  }\n\n  function closeWith(newValue) {\n    setIsOpen(false);\n\n    if (typeof onBlur === \"function\") {\n      var changedValue = getChangedValue(newValue);\n      onBlur(changedValue);\n    }\n  }\n\n  function close() {\n    return closeWith(valueAsDate);\n  } //\n  // SetSelectedDate\n  //\n\n\n  function setSelectedDate(newDate, tryClose) {\n    if (tryClose === void 0) {\n      tryClose = true;\n    }\n\n    var asDate = toDate(newDate);\n    setViewDate(asDate);\n    setViewTimestamp(asDate); // Time switches value but stays open\n\n    if (viewMode === \"time\") {\n      onChange(newDate);\n    } // When view mode is the default, switch and try to close\n    else if (viewMode === defaultViewMode) {\n        onChange(newDate);\n\n        if (tryClose) {\n          closeWith(newDate);\n        }\n      } // When view mode is not the default, switch to the next view mode\n      else {\n          var newViewMode = viewMode ? nextViewModes[viewMode] : undefined;\n          setViewMode(newViewMode);\n        }\n  } //\n  // Trigger change when important props change\n  //\n\n\n  useEffect(function () {\n    if (valueAsDate) {\n      setSelectedDate(valueAsDate);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [dateTypeMode, fullFormat]);\n\n  function onInputChange(e) {\n    var newValue = e.target.value;\n    var newValueAsDate = parse(newValue, fullFormat, formatOptions);\n\n    if (newValueAsDate) {\n      setSelectedDate(newValueAsDate, false);\n    } else {\n      onChange(newValue);\n    }\n  }\n\n  function onInputKeyDown(e) {\n    if (isOpen) {\n      switch (e.which) {\n        // Enter key\n        case 13: // Escape key\n\n        case 27: // Tab key\n\n        case 9:\n          close();\n          break;\n      }\n    } else {\n      switch (e.which) {\n        // Down arrow\n        case 40:\n          open();\n          break;\n      }\n    }\n  }\n\n  var inputRef = useRef(null);\n  var contentRef = useRef(null);\n  useOnClickOutside(contentRef, close);\n  var valueStr = valueAsDate && fullFormat ? format(valueAsDate, fullFormat, formatOptions) : typeof value === \"string\" ? value : \"\"; //\n  // Input Props\n  //\n\n  var finalInputProps = _extends({}, rest, {\n    type: \"text\",\n    onClick: open,\n    onFocus: open,\n    onChange: onInputChange,\n    onKeyDown: onInputKeyDown,\n    value: valueStr\n  }); //\n  // Calendar props\n  //\n\n\n  var calendarProps = {\n    dateFormat: dateFormat,\n    timeFormat: timeFormat,\n    viewDate: viewDate,\n    setViewDate: setViewDate,\n    selectedDate: valueAsDate,\n    setSelectedDate: setSelectedDate,\n    viewTimestamp: viewTimestamp,\n    setViewTimestamp: setViewTimestamp,\n    formatOptions: formatOptions,\n    viewMode: viewMode,\n    setViewMode: setViewMode,\n    isValidDate: isValidDate\n  };\n  return createElement(\"div\", {\n    className: cc([\"rdt\", {\n      rdtOpen: isOpen\n    }])\n  }, createElement(\"input\", Object.assign({\n    ref: inputRef,\n    key: \"i\"\n  }, finalInputProps)), isOpen && createElement(Popover, {\n    targetRef: inputRef\n  }, createElement(\"div\", {\n    ref: contentRef,\n    className: \"rdtPicker\"\n  }, createElement(CalendarContainer, Object.assign({}, calendarProps)))));\n}\n\nexport default DateTime;","map":null,"metadata":{},"sourceType":"module"}