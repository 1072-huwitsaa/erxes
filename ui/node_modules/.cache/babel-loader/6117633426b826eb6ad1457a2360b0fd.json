{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/ButtonMutate.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 13px;\\n  height: 13px;\\n  animation: \", \" 0.75s linear infinite;\\n  border: 1px solid \", \";\\n  border-top-color: \", \";\\n  border-right-color: \", \";\\n  border-radius: 100%;\\n  float: left;\\n  position: relative;\\n  top: 2px;\\n  margin-right: 5px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport client from \"apolloClient\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport gql from \"graphql-tag\";\nimport { colors } from \"modules/common/styles\";\nimport { __, Alert, confirm } from \"modules/common/utils\";\nimport { rotate } from \"modules/common/utils/animations\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nexport var SmallLoader = styled.i(_templateObject(), rotate, colors.borderDarker, colors.colorSecondary, colors.colorSecondary);\n\nvar ButtonMutate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ButtonMutate, _React$Component);\n\n  function ButtonMutate(props) {\n    var _this;\n\n    _classCallCheck(this, ButtonMutate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ButtonMutate).call(this, props));\n\n    _this.componentDidUpdate = function (prevProps) {\n      if (prevProps.isSubmitted !== _this.props.isSubmitted) {\n        _this.mutate();\n      }\n    };\n\n    _this.invokeMutate = function () {\n      var _this$props = _this.props,\n          mutation = _this$props.mutation,\n          callback = _this$props.callback,\n          variables = _this$props.variables,\n          _this$props$successMe = _this$props.successMessage,\n          successMessage = _this$props$successMe === void 0 ? \"\" : _this$props$successMe,\n          refetchQueries = _this$props.refetchQueries,\n          beforeSubmit = _this$props.beforeSubmit,\n          disableLoading = _this$props.disableLoading,\n          resetSubmit = _this$props.resetSubmit;\n\n      if (beforeSubmit) {\n        beforeSubmit();\n      }\n\n      if (!disableLoading) {\n        _this.setState({\n          isLoading: true\n        });\n      }\n\n      client.mutate({\n        mutation: gql(mutation),\n        variables: variables,\n        refetchQueries: refetchQueries\n      }).then(function (_ref) {\n        var data = _ref.data;\n\n        if (successMessage) {\n          Alert.success(successMessage);\n        }\n\n        if (callback) {\n          callback(data);\n        }\n\n        if (!disableLoading) {\n          _this.setState({\n            isLoading: false\n          });\n        }\n      }).catch(function (error) {\n        if (error.message.includes(\"Invalid login\")) {\n          Alert.error(\"The email address or password you entered is incorrect.\");\n        } else {\n          Alert.error(error.message);\n        }\n\n        if (resetSubmit) {\n          resetSubmit();\n        }\n\n        if (!disableLoading) {\n          _this.setState({\n            isLoading: false\n          });\n        }\n      });\n    };\n\n    _this.mutate = function () {\n      var confirmationUpdate = _this.props.confirmationUpdate;\n\n      if (confirmationUpdate) {\n        return confirm(\"This will permanently update are you absolutely sure?\", {\n          hasUpdateConfirm: true\n        }).then(function () {\n          _this.invokeMutate();\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      }\n\n      return _this.invokeMutate();\n    };\n\n    _this.state = {\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(ButtonMutate, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _this$props2$children = _this$props2.children,\n          children = _this$props2$children === void 0 ? __(\"Save\") : _this$props2$children,\n          btnSize = _this$props2.btnSize,\n          icon = _this$props2.icon,\n          type = _this$props2.type,\n          _this$props2$btnStyle = _this$props2.btnStyle,\n          btnStyle = _this$props2$btnStyle === void 0 ? \"success\" : _this$props2$btnStyle,\n          disabled = _this$props2.disabled,\n          block = _this$props2.block,\n          uppercase = _this$props2.uppercase;\n      var isLoading = this.state.isLoading;\n      return React.createElement(Button, {\n        uppercase: uppercase,\n        disabled: disabled || isLoading,\n        btnStyle: btnStyle,\n        size: btnSize,\n        type: type,\n        onClick: type ? undefined : this.mutate,\n        icon: isLoading ? undefined : icon,\n        block: block,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, isLoading && React.createElement(SmallLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), children);\n    }\n  }]);\n\n  return ButtonMutate;\n}(React.Component);\n\nButtonMutate.defaultProps = {\n  btnSize: \"medium\",\n  icon: \"check-circle\"\n};\nexport default ButtonMutate;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/ButtonMutate.tsx"],"names":["client","Button","gql","colors","__","Alert","confirm","rotate","React","styled","SmallLoader","i","borderDarker","colorSecondary","ButtonMutate","props","componentDidUpdate","prevProps","isSubmitted","mutate","invokeMutate","mutation","callback","variables","successMessage","refetchQueries","beforeSubmit","disableLoading","resetSubmit","setState","isLoading","then","data","success","catch","error","message","includes","confirmationUpdate","hasUpdateConfirm","state","children","btnSize","icon","type","btnStyle","disabled","block","uppercase","undefined","Component","defaultProps"],"mappings":"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","sourcesContent":["import client from \"apolloClient\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport gql from \"graphql-tag\";\nimport { colors } from \"modules/common/styles\";\nimport { __, Alert, confirm } from \"modules/common/utils\";\nimport { rotate } from \"modules/common/utils/animations\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nexport const SmallLoader = styled.i`\n  width: 13px;\n  height: 13px;\n  animation: ${rotate} 0.75s linear infinite;\n  border: 1px solid ${colors.borderDarker};\n  border-top-color: ${colors.colorSecondary};\n  border-right-color: ${colors.colorSecondary};\n  border-radius: 100%;\n  float: left;\n  position: relative;\n  top: 2px;\n  margin-right: 5px;\n`;\n\ntype Props = {\n  mutation: string;\n  variables: any;\n  btnSize?: string;\n  uppercase?: boolean;\n  successMessage?: string;\n  btnStyle?: string;\n  icon?: string;\n  callback?: (data?: any) => void;\n  children?: React.ReactNode;\n  refetchQueries?: any;\n  isSubmitted?: boolean;\n  type?: string;\n  disabled?: boolean;\n  disableLoading?: boolean;\n  block?: boolean;\n  confirmationUpdate?: boolean;\n  beforeSubmit?: () => void;\n  resetSubmit?: () => void;\n};\n\nclass ButtonMutate extends React.Component<Props, { isLoading: boolean }> {\n  static defaultProps = {\n    btnSize: \"medium\",\n    icon: \"check-circle\",\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidUpdate = (prevProps: Props) => {\n    if (prevProps.isSubmitted !== this.props.isSubmitted) {\n      this.mutate();\n    }\n  };\n\n  invokeMutate = () => {\n    const {\n      mutation,\n      callback,\n      variables,\n      successMessage = \"\",\n      refetchQueries,\n      beforeSubmit,\n      disableLoading,\n      resetSubmit,\n    } = this.props;\n\n    if (beforeSubmit) {\n      beforeSubmit();\n    }\n\n    if (!disableLoading) {\n      this.setState({ isLoading: true });\n    }\n\n    client\n      .mutate({\n        mutation: gql(mutation),\n        variables,\n        refetchQueries,\n      })\n\n      .then(({ data }) => {\n        if (successMessage) {\n          Alert.success(successMessage);\n        }\n\n        if (callback) {\n          callback(data);\n        }\n\n        if (!disableLoading) {\n          this.setState({ isLoading: false });\n        }\n      })\n      .catch((error) => {\n        if (error.message.includes(\"Invalid login\")) {\n          Alert.error(\n            \"The email address or password you entered is incorrect.\"\n          );\n        } else {\n          Alert.error(error.message);\n        }\n\n        if (resetSubmit) {\n          resetSubmit();\n        }\n\n        if (!disableLoading) {\n          this.setState({ isLoading: false });\n        }\n      });\n  };\n\n  mutate = () => {\n    const { confirmationUpdate } = this.props;\n\n    if (confirmationUpdate) {\n      return confirm(\"This will permanently update are you absolutely sure?\", {\n        hasUpdateConfirm: true,\n      })\n        .then(() => {\n          this.invokeMutate();\n        })\n        .catch((error) => {\n          Alert.error(error.message);\n        });\n    }\n\n    return this.invokeMutate();\n  };\n\n  render() {\n    const {\n      children = __(\"Save\"),\n      btnSize,\n      icon,\n      type,\n      btnStyle = \"success\",\n      disabled,\n      block,\n      uppercase,\n    } = this.props;\n\n    const { isLoading } = this.state;\n\n    return (\n      <Button\n        uppercase={uppercase}\n        disabled={disabled || isLoading}\n        btnStyle={btnStyle}\n        size={btnSize}\n        type={type}\n        onClick={type ? undefined : this.mutate}\n        icon={isLoading ? undefined : icon}\n        block={block}\n      >\n        {isLoading && <SmallLoader />}\n        {children}\n      </Button>\n    );\n  }\n}\n\nexport default ButtonMutate;\n"]},"metadata":{},"sourceType":"module"}