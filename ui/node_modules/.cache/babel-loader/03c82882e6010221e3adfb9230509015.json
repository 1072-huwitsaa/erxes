{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/forms/containers/CreateForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Form from '../components/Form';\nimport { mutations } from '../graphql';\n\nvar CreateFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateFormContainer, _React$Component);\n\n  function CreateFormContainer() {\n    _classCallCheck(this, CreateFormContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CreateFormContainer).apply(this, arguments));\n  }\n\n  _createClass(CreateFormContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          addFormMutation = _this$props.addFormMutation,\n          addFieldsMutation = _this$props.addFieldsMutation,\n          afterDbSave = _this$props.afterDbSave,\n          showMessage = _this$props.showMessage;\n\n      var saveForm = function saveForm(doc) {\n        var formId;\n        var title = doc.title,\n            desc = doc.desc,\n            btnText = doc.btnText,\n            fields = doc.fields,\n            type = doc.type;\n        addFormMutation({\n          variables: {\n            title: title,\n            description: desc,\n            buttonText: btnText,\n            type: type\n          }\n        }).then(function (_ref) {\n          var data = _ref.data;\n          formId = data.formsAdd._id;\n          afterDbSave(formId);\n        }).then(function () {\n          var promises = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = fields.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _ref4 = _step.value;\n\n              var _ref3 = _slicedToArray(_ref4, 2);\n\n              var i = _ref3[0];\n              var field = _ref3[1];\n              promises.push(addFieldsMutation({\n                variables: _objectSpread({\n                  order: i,\n                  contentTypeId: formId\n                }, field)\n              }));\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return Promise.all(promises);\n        }).then(function () {\n          if (showMessage) {\n            Alert.success('You successfully added a form');\n          }\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        fields: [],\n        saveForm: saveForm\n      });\n\n      return React.createElement(Form, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CreateFormContainer;\n}(React.Component);\n\nCreateFormContainer.defaultProps = {\n  showMessage: true\n};\nexport default withProps(compose(graphql(gql(mutations.addForm), {\n  name: 'addFormMutation',\n  options: {\n    refetchQueries: ['fields']\n  }\n}), graphql(gql(mutations.fieldsAdd), {\n  name: 'addFieldsMutation'\n}))(withRouter(CreateFormContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/forms/containers/CreateForm.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","withRouter","Form","mutations","CreateFormContainer","props","addFormMutation","addFieldsMutation","afterDbSave","showMessage","saveForm","doc","formId","title","desc","btnText","fields","type","variables","description","buttonText","then","data","formsAdd","_id","promises","entries","i","field","push","order","contentTypeId","Promise","all","success","catch","error","message","updatedProps","Component","defaultProps","addForm","name","options","refetchQueries","fieldsAdd"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport {\n  AddFieldsMutationResponse,\n  AddFieldsMutationVariables,\n  IField\n} from 'modules/settings/properties/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../common/types';\nimport Form from '../components/Form';\nimport { mutations } from '../graphql';\nimport {\n  AddFormMutationResponse,\n  AddFormMutationVariables,\n  IFormData\n} from '../types';\n\ntype Props = {\n  renderPreviewWrapper: (previewRenderer, fields: IField[]) => void;\n  afterDbSave: (formId: string) => void;\n  onDocChange?: (doc: IFormData) => void;\n  type: string;\n  isReadyToSave: boolean;\n  showMessage?: boolean;\n};\n\ntype FinalProps = {} & Props &\n  IRouterProps &\n  AddFieldsMutationResponse &\n  AddFormMutationResponse;\n\nclass CreateFormContainer extends React.Component<FinalProps, {}> {\n  static defaultProps = {\n    showMessage: true\n  };\n\n  render() {\n    const {\n      addFormMutation,\n      addFieldsMutation,\n      afterDbSave,\n      showMessage\n    } = this.props;\n\n    const saveForm = doc => {\n      let formId;\n      const { title, desc, btnText, fields, type } = doc;\n\n      addFormMutation({\n        variables: {\n          title,\n          description: desc,\n          buttonText: btnText,\n          type\n        }\n      })\n        .then(({ data }) => {\n          formId = data.formsAdd._id;\n\n          afterDbSave(formId);\n        })\n\n        .then(() => {\n          const promises: any[] = [];\n\n          for (const [i, field] of fields.entries()) {\n            promises.push(\n              addFieldsMutation({\n                variables: {\n                  order: i,\n                  contentTypeId: formId,\n                  ...field\n                }\n              })\n            );\n          }\n\n          return Promise.all(promises);\n        })\n\n        .then(() => {\n          if (showMessage) {\n            Alert.success('You successfully added a form');\n          }\n        })\n\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      fields: [],\n      saveForm\n    };\n\n    return <Form {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, AddFormMutationResponse, AddFormMutationVariables>(\n      gql(mutations.addForm),\n      {\n        name: 'addFormMutation',\n        options: {\n          refetchQueries: ['fields']\n        }\n      }\n    ),\n    graphql<Props, AddFieldsMutationResponse, AddFieldsMutationVariables>(\n      gql(mutations.fieldsAdd),\n      {\n        name: 'addFieldsMutation'\n      }\n    )\n  )(withRouter<FinalProps>(CreateFormContainer))\n);\n"]},"metadata":{},"sourceType":"module"}