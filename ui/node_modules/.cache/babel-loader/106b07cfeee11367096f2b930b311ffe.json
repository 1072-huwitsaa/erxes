{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/robot/containers/AssistantContent.tsx\";\nimport apolloClient from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport AssistantContent from '../components/AssistantContent';\nimport { FEATURE_DETAILS } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport { orderArray } from '../utils';\n\nvar AssistantContentContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AssistantContentContainer, _React$Component);\n\n  function AssistantContentContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AssistantContentContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AssistantContentContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.changeStep = function (route) {\n      var getAvailableFeaturesQuery = _this.props.getAvailableFeaturesQuery;\n\n      if (route === 'todoList' && getAvailableFeaturesQuery) {\n        getAvailableFeaturesQuery.refetch();\n      }\n\n      _this.props.changeRoute(route);\n    };\n\n    _this.forceComplete = function () {\n      _this.props.forceCompleteMutation().then(function () {\n        _this.props.toggleContent(false);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AssistantContentContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (window.location.href.includes('signedIn=true')) {\n        setTimeout(function () {\n          apolloClient.mutate({\n            mutation: gql(mutations.checkStatus)\n          }).then(function (_ref) {\n            var data = _ref.data;\n            var onboardStatus = data.onboardingCheckStatus;\n\n            if (onboardStatus === 'completed') {\n              return _this2.props.toggleContent(false);\n            }\n\n            if (onboardStatus === 'inComplete' || onboardStatus === 'initial') {\n              _this2.props.toggleContent(true);\n\n              _this2.props.changeRoute(onboardStatus);\n            }\n\n            if (onboardStatus === 'initial' && localStorage.getItem('erxes_customization_features')) {\n              _this2.props.changeRoute('todoList');\n            }\n          });\n        }, 3000);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getAvailableFeaturesQuery = this.props.getAvailableFeaturesQuery;\n      var allFeatures = getAvailableFeaturesQuery ? getAvailableFeaturesQuery.onboardingGetAvailableFeatures || [] : []; // get feature categories\n\n      var savedFeatures = localStorage.getItem('erxes_customization_features');\n      var sortedFeatures = allFeatures;\n\n      if (savedFeatures && savedFeatures.length > 2) {\n        var chosenFeatures = JSON.parse(savedFeatures); // order by selected order\n\n        sortedFeatures = orderArray(allFeatures.filter(function (feature) {\n          return chosenFeatures.includes(feature.name);\n        }), chosenFeatures);\n      }\n\n      var features = sortedFeatures.map(function (feature) {\n        var details = FEATURE_DETAILS[feature.name] || {};\n        return _objectSpread({}, feature, details);\n      });\n      return React.createElement(AssistantContent, Object.assign({}, this.props, {\n        savedFeatures: savedFeatures,\n        changeRoute: this.changeStep,\n        forceComplete: this.forceComplete,\n        availableFeatures: features,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AssistantContentContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.getAvailableFeatures), {\n  name: 'getAvailableFeaturesQuery'\n}), graphql(gql(mutations.forceComplete), {\n  name: 'forceCompleteMutation'\n}))(withCurrentUser(AssistantContentContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/robot/containers/AssistantContent.tsx"],"names":["apolloClient","gql","compose","withCurrentUser","React","graphql","withProps","AssistantContent","FEATURE_DETAILS","mutations","queries","orderArray","AssistantContentContainer","changeStep","route","getAvailableFeaturesQuery","props","refetch","changeRoute","forceComplete","forceCompleteMutation","then","toggleContent","window","location","href","includes","setTimeout","mutate","mutation","checkStatus","data","onboardStatus","onboardingCheckStatus","localStorage","getItem","allFeatures","onboardingGetAvailableFeatures","savedFeatures","sortedFeatures","length","chosenFeatures","JSON","parse","filter","feature","name","features","map","details","Component","getAvailableFeatures"],"mappings":"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","sourcesContent":["import apolloClient from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { IUser } from 'modules/auth/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport AssistantContent from '../components/AssistantContent';\nimport { FEATURE_DETAILS } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport {\n  ForceCompleteMutationResponse,\n  GetAvailableFeaturesQueryResponse,\n  IFeature\n} from '../types';\nimport { orderArray } from '../utils';\n\ntype Props = {\n  changeRoute: (route: string) => void;\n  currentUser: IUser;\n  currentRoute?: string;\n  showContent: boolean;\n  toggleContent: (isShow: boolean) => void;\n};\n\ntype FinalProps = Props &\n  ForceCompleteMutationResponse & {\n    getAvailableFeaturesQuery?: GetAvailableFeaturesQueryResponse;\n  };\n\nclass AssistantContentContainer extends React.Component<FinalProps> {\n  changeStep = (route: string) => {\n    const { getAvailableFeaturesQuery } = this.props;\n\n    if (route === 'todoList' && getAvailableFeaturesQuery) {\n      getAvailableFeaturesQuery.refetch();\n    }\n\n    this.props.changeRoute(route);\n  };\n\n  forceComplete = () => {\n    this.props.forceCompleteMutation().then(() => {\n      this.props.toggleContent(false);\n    });\n  };\n\n  componentDidMount() {\n    if (window.location.href.includes('signedIn=true')) {\n      setTimeout(() => {\n        apolloClient\n          .mutate({\n            mutation: gql(mutations.checkStatus)\n          })\n          .then(({ data }) => {\n            const onboardStatus = data.onboardingCheckStatus;\n            if (onboardStatus === 'completed') {\n              return this.props.toggleContent(false);\n            }\n\n            if (onboardStatus === 'inComplete' || onboardStatus === 'initial') {\n              this.props.toggleContent(true);\n              this.props.changeRoute(onboardStatus);\n            }\n\n            if (\n              onboardStatus === 'initial' &&\n              localStorage.getItem('erxes_customization_features')\n            ) {\n              this.props.changeRoute('todoList');\n            }\n          });\n      }, 3000);\n    }\n  }\n\n  render() {\n    const { getAvailableFeaturesQuery } = this.props;\n\n    const allFeatures: IFeature[] = getAvailableFeaturesQuery\n      ? getAvailableFeaturesQuery.onboardingGetAvailableFeatures || []\n      : [];\n\n    // get feature categories\n    const savedFeatures = localStorage.getItem('erxes_customization_features');\n    let sortedFeatures = allFeatures;\n\n    if (savedFeatures && savedFeatures.length > 2) {\n      const chosenFeatures = JSON.parse(savedFeatures);\n\n      // order by selected order\n      sortedFeatures = orderArray(\n        allFeatures.filter(feature => chosenFeatures.includes(feature.name)),\n        chosenFeatures\n      );\n    }\n\n    const features = sortedFeatures.map(feature => {\n      const details = FEATURE_DETAILS[feature.name] || {};\n\n      return {\n        ...feature,\n        ...details\n      };\n    });\n\n    return (\n      <AssistantContent\n        {...this.props}\n        savedFeatures={savedFeatures}\n        changeRoute={this.changeStep}\n        forceComplete={this.forceComplete}\n        availableFeatures={features}\n      />\n    );\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<{}>(gql(queries.getAvailableFeatures), {\n      name: 'getAvailableFeaturesQuery'\n    }),\n    graphql<{}>(gql(mutations.forceComplete), {\n      name: 'forceCompleteMutation'\n    })\n  )(withCurrentUser(AssistantContentContainer))\n);\n"]},"metadata":{},"sourceType":"module"}