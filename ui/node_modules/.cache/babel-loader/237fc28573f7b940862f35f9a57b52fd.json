{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/leftSidebar/Sidebar.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport DumbSidebar from 'modules/inbox/components/leftSidebar/Sidebar';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { mutations } from '../../graphql';\nimport { getConfig, setConfig } from '../../utils';\nimport { refetchSidebarConversationsOptions } from '../../utils';\nimport { InboxManagementActionConsumer } from '../Inbox';\nvar STORAGE_KEY = 'erxes_additional_sidebar_config';\n\nvar Sidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n\n  function Sidebar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.toggle = function (_ref) {\n      var isOpen = _ref.isOpen;\n      var config = getConfig(STORAGE_KEY);\n      config.showAddition = isOpen;\n      setConfig(STORAGE_KEY, config);\n    };\n\n    _this.resolveAll = function (notifyHandler) {\n      return function () {\n        var message = 'Are you sure you want to resolve all conversations?';\n        confirm(message).then(function () {\n          _this.props.resolveAllMutation({\n            variables: _this.props.queryParams\n          }).then(function () {\n            if (notifyHandler) {\n              notifyHandler();\n            }\n\n            Alert.success('The conversation has been resolved!');\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        });\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!localStorage.getItem(STORAGE_KEY)) {\n        setConfig(STORAGE_KEY, {\n          showAddition: false,\n          showChannels: true,\n          showBrands: false,\n          showIntegrations: false,\n          showTags: false\n        });\n      }\n\n      var _this$props = this.props,\n          currentConversationId = _this$props.currentConversationId,\n          queryParams = _this$props.queryParams,\n          history = _this$props.history;\n\n      var content = function content(_ref2) {\n        var bulk = _ref2.bulk,\n            toggleBulk = _ref2.toggleBulk,\n            emptyBulk = _ref2.emptyBulk;\n        return React.createElement(AppConsumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, function (_ref3) {\n          var currentUser = _ref3.currentUser;\n          return React.createElement(InboxManagementActionConsumer, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, function (_ref4) {\n            var notifyConsumersOfManagementAction = _ref4.notifyConsumersOfManagementAction;\n            return React.createElement(DumbSidebar, {\n              currentUser: currentUser,\n              currentConversationId: currentConversationId,\n              queryParams: queryParams,\n              history: history,\n              bulk: bulk,\n              emptyBulk: emptyBulk,\n              toggleBulk: toggleBulk,\n              config: getConfig(STORAGE_KEY),\n              toggleSidebar: _this2.toggle,\n              resolveAll: _this2.resolveAll(notifyConsumersOfManagementAction),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 77\n              },\n              __self: this\n            });\n          });\n        });\n      };\n\n      return React.createElement(Bulk, {\n        content: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Sidebar;\n}(React.Component);\n\nexport default withRouter(withProps(compose(graphql(gql(mutations.resolveAll), {\n  name: 'resolveAllMutation',\n  options: function options() {\n    return refetchSidebarConversationsOptions();\n  }\n}))(Sidebar)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/leftSidebar/Sidebar.tsx"],"names":["AppConsumer","gql","compose","Bulk","Alert","confirm","withProps","DumbSidebar","React","graphql","withRouter","mutations","getConfig","setConfig","refetchSidebarConversationsOptions","InboxManagementActionConsumer","STORAGE_KEY","Sidebar","toggle","isOpen","config","showAddition","resolveAll","notifyHandler","message","then","props","resolveAllMutation","variables","queryParams","success","catch","e","error","localStorage","getItem","showChannels","showBrands","showIntegrations","showTags","currentConversationId","history","content","bulk","toggleBulk","emptyBulk","currentUser","notifyConsumersOfManagementAction","Component","name","options"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { IBulkContentProps } from 'modules/common/components/Bulk';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport DumbSidebar from 'modules/inbox/components/leftSidebar/Sidebar';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../../common/types';\nimport { mutations } from '../../graphql';\nimport {\n  ResolveAllMutationResponse,\n  ResolveAllMutationVariables\n} from '../../types';\nimport { getConfig, setConfig } from '../../utils';\nimport { refetchSidebarConversationsOptions } from '../../utils';\nimport { InboxManagementActionConsumer } from '../Inbox';\n\ntype Props = {\n  queryParams: any;\n  currentConversationId?: string;\n} & IRouterProps;\n\ntype FinalProps = Props & ResolveAllMutationResponse;\n\nconst STORAGE_KEY = 'erxes_additional_sidebar_config';\n\nclass Sidebar extends React.Component<FinalProps> {\n  toggle = ({ isOpen }: { isOpen: boolean }) => {\n    const config = getConfig(STORAGE_KEY);\n\n    config.showAddition = isOpen;\n\n    setConfig(STORAGE_KEY, config);\n  };\n\n  // resolve all conversation\n  resolveAll = notifyHandler => () => {\n    const message = 'Are you sure you want to resolve all conversations?';\n\n    confirm(message).then(() => {\n      this.props\n        .resolveAllMutation({ variables: this.props.queryParams })\n        .then(() => {\n          if (notifyHandler) {\n            notifyHandler();\n          }\n\n          Alert.success('The conversation has been resolved!');\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    });\n  };\n\n  render() {\n    if (!localStorage.getItem(STORAGE_KEY)) {\n      setConfig(STORAGE_KEY, {\n        showAddition: false,\n        showChannels: true,\n        showBrands: false,\n        showIntegrations: false,\n        showTags: false\n      });\n    }\n\n    const { currentConversationId, queryParams, history } = this.props;\n    const content = ({ bulk, toggleBulk, emptyBulk }: IBulkContentProps) => {\n      return (\n        <AppConsumer>\n          {({ currentUser }) => (\n            <InboxManagementActionConsumer>\n              {({ notifyConsumersOfManagementAction }) => (\n                <DumbSidebar\n                  currentUser={currentUser}\n                  currentConversationId={currentConversationId}\n                  queryParams={queryParams}\n                  history={history}\n                  bulk={bulk}\n                  emptyBulk={emptyBulk}\n                  toggleBulk={toggleBulk}\n                  config={getConfig(STORAGE_KEY)}\n                  toggleSidebar={this.toggle}\n                  resolveAll={this.resolveAll(\n                    notifyConsumersOfManagementAction\n                  )}\n                />\n              )}\n            </InboxManagementActionConsumer>\n          )}\n        </AppConsumer>\n      );\n    };\n\n    return <Bulk content={content} />;\n  }\n}\n\nexport default withRouter<Props>(\n  withProps<Props>(\n    compose(\n      graphql<Props, ResolveAllMutationResponse, ResolveAllMutationVariables>(\n        gql(mutations.resolveAll),\n        {\n          name: 'resolveAllMutation',\n          options: () => refetchSidebarConversationsOptions()\n        }\n      )\n    )(Sidebar)\n  )\n);\n"]},"metadata":{},"sourceType":"module"}