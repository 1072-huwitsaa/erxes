{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/common/ManageIntegrations.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ManageIntegrations from 'modules/settings/integrations/components/common/ManageIntegrations';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../../common/utils';\n\nvar ManageIntegrationsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ManageIntegrationsContainer, _React$Component);\n\n  function ManageIntegrationsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ManageIntegrationsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ManageIntegrationsContainer).call(this, props));\n\n    _this.search = function (value, loadmore) {\n      var allIntegrationsQuery = _this.props.allIntegrationsQuery;\n\n      if (!loadmore) {\n        _this.setState({\n          perPage: 0\n        });\n      }\n\n      _this.setState({\n        perPage: _this.state.perPage + 20\n      }, function () {\n        allIntegrationsQuery.refetch({\n          searchValue: value,\n          perPage: _this.state.perPage\n        });\n      });\n    };\n\n    _this.state = {\n      perPage: 20\n    };\n    return _this;\n  }\n\n  _createClass(ManageIntegrationsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          allIntegrationsQuery = _this$props.allIntegrationsQuery,\n          save = _this$props.save;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        search: this.search,\n        save: save,\n        perPage: this.state.perPage,\n        allIntegrations: allIntegrationsQuery.integrations || []\n      });\n\n      return React.createElement(ManageIntegrations, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ManageIntegrationsContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.integrations), {\n  name: 'allIntegrationsQuery',\n  options: {\n    variables: {\n      perPage: 20\n    },\n    fetchPolicy: 'network-only'\n  }\n}))(ManageIntegrationsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/common/ManageIntegrations.tsx"],"names":["gql","compose","ManageIntegrations","queries","React","graphql","withProps","ManageIntegrationsContainer","props","search","value","loadmore","allIntegrationsQuery","setState","perPage","state","refetch","searchValue","save","updatedProps","allIntegrations","integrations","Component","name","options","variables","fetchPolicy"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAGA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;;IAiBMC,2B;;;;;AACJ,uCAAYC,KAAZ,EAA+B;AAAA;;AAAA;;AAC7B,qGAAMA,KAAN;;AAD6B,UAM/BC,MAN+B,GAMtB,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAAA,UACpBC,oBADoB,GACK,MAAKJ,KADV,CACpBI,oBADoB;;AAG5B,UAAI,CAACD,QAAL,EAAe;AACb,cAAKE,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;;AAED,YAAKD,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE,MAAKC,KAAL,CAAWD,OAAX,GAAqB;AAAhC,OAAd,EAAoD,YAAM;AACxDF,QAAAA,oBAAoB,CAACI,OAArB,CAA6B;AAC3BC,UAAAA,WAAW,EAAEP,KADc;AAE3BI,UAAAA,OAAO,EAAE,MAAKC,KAAL,CAAWD;AAFO,SAA7B;AAID,OALD;AAMD,KAnB8B;;AAG7B,UAAKC,KAAL,GAAa;AAAED,MAAAA,OAAO,EAAE;AAAX,KAAb;AAH6B;AAI9B;;;;6BAiBQ;AAAA,wBACgC,KAAKN,KADrC;AAAA,UACCI,oBADD,eACCA,oBADD;AAAA,UACuBM,IADvB,eACuBA,IADvB;;AAGP,UAAMC,YAAY,qBACb,KAAKX,KADQ;AAEhBC,QAAAA,MAAM,EAAE,KAAKA,MAFG;AAGhBS,QAAAA,IAAI,EAAJA,IAHgB;AAIhBJ,QAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,OAJJ;AAKhBM,QAAAA,eAAe,EAAER,oBAAoB,CAACS,YAArB,IAAqC;AALtC,QAAlB;;AAQA,aAAO,oBAAC,kBAAD,oBAAwBF,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAlCuCf,KAAK,CAACkB,S;;AAqChD,eAAehB,SAAS,CACtBL,OAAO,CACLI,OAAO,CACLL,GAAG,CAACG,OAAO,CAACkB,YAAT,CADE,EAEL;AACEE,EAAAA,IAAI,EAAE,sBADR;AAEEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AACTX,MAAAA,OAAO,EAAE;AADA,KADJ;AAIPY,IAAAA,WAAW,EAAE;AAJN;AAFX,CAFK,CADF,CAAP,CAaEnB,2BAbF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IBrandDoc } from 'modules/settings/brands/types';\nimport { IChannelDoc } from 'modules/settings/channels/types';\nimport ManageIntegrations from 'modules/settings/integrations/components/common/ManageIntegrations';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../../common/utils';\nimport { IntegrationsQueryResponse } from '../../types';\n\ntype Props = {\n  current: IChannelDoc | IBrandDoc;\n  save: (ids: string[]) => Promise<any>;\n  closeModal?: () => void;\n};\n\ntype FinalProps = {\n  allIntegrationsQuery: IntegrationsQueryResponse;\n} & Props;\n\ntype State = {\n  perPage: number;\n};\n\nclass ManageIntegrationsContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = { perPage: 20 };\n  }\n\n  search = (value, loadmore) => {\n    const { allIntegrationsQuery } = this.props;\n\n    if (!loadmore) {\n      this.setState({ perPage: 0 });\n    }\n\n    this.setState({ perPage: this.state.perPage + 20 }, () => {\n      allIntegrationsQuery.refetch({\n        searchValue: value,\n        perPage: this.state.perPage\n      });\n    });\n  };\n\n  render() {\n    const { allIntegrationsQuery, save } = this.props;\n\n    const updatedProps = {\n      ...this.props,\n      search: this.search,\n      save,\n      perPage: this.state.perPage,\n      allIntegrations: allIntegrationsQuery.integrations || []\n    };\n\n    return <ManageIntegrations {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, IntegrationsQueryResponse, { perPage: number }>(\n      gql(queries.integrations),\n      {\n        name: 'allIntegrationsQuery',\n        options: {\n          variables: {\n            perPage: 20\n          },\n          fetchPolicy: 'network-only'\n        }\n      }\n    )\n  )(ManageIntegrationsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}