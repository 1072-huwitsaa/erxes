{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/productService/containers/productCategory/CategoryList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport List from '../../components/productCategory/CategoryList';\nimport { mutations, queries } from '../../graphql';\n\nvar ProductListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductListContainer, _React$Component);\n\n  function ProductListContainer() {\n    _classCallCheck(this, ProductListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductListContainer).apply(this, arguments));\n  }\n\n  _createClass(ProductListContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          productCategoriesQuery = _this$props.productCategoriesQuery,\n          productCategoriesCountQuery = _this$props.productCategoriesCountQuery,\n          productCategoryRemove = _this$props.productCategoryRemove;\n\n      var remove = function remove(productId) {\n        confirm().then(function () {\n          productCategoryRemove({\n            variables: {\n              _id: productId\n            }\n          }).then(function () {\n            productCategoriesQuery.refetch();\n            productCategoriesCountQuery.refetch();\n            Alert.success(\"You successfully deleted a product & service category\");\n          }).catch(function (error) {\n            Alert.error(error.message);\n          });\n        });\n      };\n\n      var productCategories = productCategoriesQuery.productCategories || [];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        remove: remove,\n        refetch: productCategoriesQuery.refetch,\n        productCategories: productCategories,\n        loading: productCategoriesQuery.loading,\n        productCategoriesCount: productCategoriesCountQuery.productCategoriesTotalCount || 0\n      });\n\n      return React.createElement(List, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ProductListContainer;\n}(React.Component);\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return ['productCategories', 'productCategoriesTotalCount'];\n};\n\nvar options = function options() {\n  return {\n    refetchQueries: getRefetchQueries()\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.productCategories), {\n  name: 'productCategoriesQuery'\n}), graphql(gql(queries.productCategoriesCount), {\n  name: 'productCategoriesCountQuery'\n}), graphql(gql(mutations.productCategoryRemove), {\n  name: 'productCategoryRemove',\n  options: options\n}))(ProductListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/productService/containers/productCategory/CategoryList.tsx"],"names":["gql","compose","Alert","confirm","withProps","React","graphql","List","mutations","queries","ProductListContainer","props","productCategoriesQuery","productCategoriesCountQuery","productCategoryRemove","remove","productId","then","variables","_id","refetch","success","catch","error","message","productCategories","updatedProps","loading","productCategoriesCount","productCategoriesTotalCount","Component","getRefetchQueries","options","refetchQueries","name"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,sBAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,+CAAjB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,eAAnC;;IAeMC,oB;;;;;;;;;;;;;6BACK;AAAA,wBAKH,KAAKC,KALF;AAAA,UAELC,sBAFK,eAELA,sBAFK;AAAA,UAGLC,2BAHK,eAGLA,2BAHK;AAAA,UAILC,qBAJK,eAILA,qBAJK;;AAOP,UAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,SAAS,EAAI;AAC1Bb,QAAAA,OAAO,GAAGc,IAAV,CAAe,YAAM;AACnBH,UAAAA,qBAAqB,CAAC;AACpBI,YAAAA,SAAS,EAAE;AAAEC,cAAAA,GAAG,EAAEH;AAAP;AADS,WAAD,CAArB,CAGGC,IAHH,CAGQ,YAAM;AACVL,YAAAA,sBAAsB,CAACQ,OAAvB;AACAP,YAAAA,2BAA2B,CAACO,OAA5B;AAEAlB,YAAAA,KAAK,CAACmB,OAAN;AAGD,WAVH,EAWGC,KAXH,CAWS,UAAAC,KAAK,EAAI;AACdrB,YAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,WAbH;AAcD,SAfD;AAgBD,OAjBD;;AAmBA,UAAMC,iBAAiB,GAAGb,sBAAsB,CAACa,iBAAvB,IAA4C,EAAtE;;AAEA,UAAMC,YAAY,qBACb,KAAKf,KADQ;AAEhBI,QAAAA,MAAM,EAANA,MAFgB;AAGhBK,QAAAA,OAAO,EAAER,sBAAsB,CAACQ,OAHhB;AAIhBK,QAAAA,iBAAiB,EAAjBA,iBAJgB;AAKhBE,QAAAA,OAAO,EAAEf,sBAAsB,CAACe,OALhB;AAMhBC,QAAAA,sBAAsB,EACpBf,2BAA2B,CAACgB,2BAA5B,IAA2D;AAP7C,QAAlB;;AAUA,aAAO,oBAAC,IAAD,oBAAUH,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAxCgCrB,KAAK,CAACyB,S;;AA2CzC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,SAAO,CAAC,mBAAD,EAAsB,6BAAtB,CAAP;AACD,CAFD;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAO;AACrBC,IAAAA,cAAc,EAAEF,iBAAiB;AADZ,GAAP;AAAA,CAAhB;;AAIA,eAAe3B,SAAS,CACtBH,OAAO,CACLK,OAAO,CACLN,GAAG,CAACS,OAAO,CAACgB,iBAAT,CADE,EAEL;AACES,EAAAA,IAAI,EAAE;AADR,CAFK,CADF,EAOL5B,OAAO,CACLN,GAAG,CAACS,OAAO,CAACmB,sBAAT,CADE,EAEL;AACEM,EAAAA,IAAI,EAAE;AADR,CAFK,CAPF,EAaL5B,OAAO,CACLN,GAAG,CAACQ,SAAS,CAACM,qBAAX,CADE,EAEL;AACEoB,EAAAA,IAAI,EAAE,uBADR;AAEEF,EAAAA,OAAO,EAAPA;AAFF,CAFK,CAbF,CAAP,CAoBEtB,oBApBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport List from '../../components/productCategory/CategoryList';\nimport { mutations, queries } from '../../graphql';\nimport {\n  ProductCategoriesCountQueryResponse,\n  ProductCategoriesQueryResponse,\n  ProductCategoryRemoveMutationResponse\n} from '../../types';\n\ntype Props = { history: any; queryParams: any };\n\ntype FinalProps = {\n  productCategoriesQuery: ProductCategoriesQueryResponse;\n  productCategoriesCountQuery: ProductCategoriesCountQueryResponse;\n} & Props &\n  ProductCategoryRemoveMutationResponse;\n\nclass ProductListContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      productCategoriesQuery,\n      productCategoriesCountQuery,\n      productCategoryRemove\n    } = this.props;\n\n    const remove = productId => {\n      confirm().then(() => {\n        productCategoryRemove({\n          variables: { _id: productId }\n        })\n          .then(() => {\n            productCategoriesQuery.refetch();\n            productCategoriesCountQuery.refetch();\n\n            Alert.success(\n              `You successfully deleted a product & service category`\n            );\n          })\n          .catch(error => {\n            Alert.error(error.message);\n          });\n      });\n    };\n\n    const productCategories = productCategoriesQuery.productCategories || [];\n\n    const updatedProps = {\n      ...this.props,\n      remove,\n      refetch: productCategoriesQuery.refetch,\n      productCategories,\n      loading: productCategoriesQuery.loading,\n      productCategoriesCount:\n        productCategoriesCountQuery.productCategoriesTotalCount || 0\n    };\n\n    return <List {...updatedProps} />;\n  }\n}\n\nconst getRefetchQueries = () => {\n  return ['productCategories', 'productCategoriesTotalCount'];\n};\n\nconst options = () => ({\n  refetchQueries: getRefetchQueries()\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, ProductCategoriesQueryResponse, { parentId: string }>(\n      gql(queries.productCategories),\n      {\n        name: 'productCategoriesQuery'\n      }\n    ),\n    graphql<Props, ProductCategoriesCountQueryResponse>(\n      gql(queries.productCategoriesCount),\n      {\n        name: 'productCategoriesCountQuery'\n      }\n    ),\n    graphql<Props, ProductCategoryRemoveMutationResponse, { _id: string }>(\n      gql(mutations.productCategoryRemove),\n      {\n        name: 'productCategoryRemove',\n        options\n      }\n    )\n  )(ProductListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}