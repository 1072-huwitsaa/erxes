{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/emailDelivery/containers/EmailDelivery.tsx\";\nimport gql from 'graphql-tag';\nimport { router } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport * as React from 'react';\nimport { useQuery } from 'react-apollo';\nimport EmailDelivery from '../components/EmailDelivery';\nimport queries from '../queries';\nexport var EMAIL_TYPES = {\n  TRANSACTION: 'transaction',\n  ENGAGE: 'engage'\n};\n\nfunction EmailDeliveryContainer(props) {\n  var history = props.history,\n      queryParams = props.queryParams;\n\n  var _React$useState = React.useState(queryParams.emailType || EMAIL_TYPES.TRANSACTION),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      emailType = _React$useState2[0],\n      setEmailType = _React$useState2[1];\n\n  React.useEffect(function () {\n    router.setParams(history, {\n      emailType: emailType\n    });\n  }, [history, emailType]);\n  var transactionResponse = useQuery(gql(queries.transactionEmailDeliveries), {\n    variables: _objectSpread({\n      searchValue: queryParams.searchValue\n    }, generatePaginationParams(queryParams))\n  });\n  var engageReportsListResponse = useQuery(gql(queries.engageReportsList), {\n    variables: generatePaginationParams(queryParams)\n  });\n\n  var handleSelectEmailType = function handleSelectEmailType(type) {\n    setEmailType(type);\n    return router.removeParams(history, 'page', 'perPage', 'searchValue');\n  };\n\n  var transactionData = transactionResponse.data || {};\n  var emailDeliveries = transactionData.transactionEmailDeliveries || {};\n  var emailDeliveriesLoading = transactionResponse.loading;\n  var engageReportsListData = engageReportsListResponse.data || {};\n  var reportsList = engageReportsListData.engageReportsList || {};\n  var reportsListLoading = engageReportsListResponse.loading;\n  var list;\n  var count;\n  var loading;\n\n  if (emailType === EMAIL_TYPES.TRANSACTION) {\n    list = emailDeliveries.list;\n    count = emailDeliveries.totalCount;\n    loading = emailDeliveriesLoading;\n  } else {\n    list = reportsList.list;\n    count = reportsList.totalCount;\n    loading = reportsListLoading;\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    count: count,\n    list: list,\n    loading: loading,\n    emailType: emailType,\n    handleSelectEmailType: handleSelectEmailType,\n    history: history,\n    searchValue: queryParams.searchValue || ''\n  });\n\n  return React.createElement(EmailDelivery, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n}\n\nexport default EmailDeliveryContainer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/emailDelivery/containers/EmailDelivery.tsx"],"names":["gql","router","generatePaginationParams","React","useQuery","EmailDelivery","queries","EMAIL_TYPES","TRANSACTION","ENGAGE","EmailDeliveryContainer","props","history","queryParams","useState","emailType","setEmailType","useEffect","setParams","transactionResponse","transactionEmailDeliveries","variables","searchValue","engageReportsListResponse","engageReportsList","handleSelectEmailType","type","removeParams","transactionData","data","emailDeliveries","emailDeliveriesLoading","loading","engageReportsListData","reportsList","reportsListLoading","list","count","totalCount","updatedProps"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { IRouterProps } from 'modules/common/types';\nimport { router } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport * as React from 'react';\nimport { useQuery } from 'react-apollo';\nimport EmailDelivery from '../components/EmailDelivery';\nimport queries from '../queries';\n\ntype Props = {\n  queryParams: any;\n} & IRouterProps;\n\nexport const EMAIL_TYPES = {\n  TRANSACTION: 'transaction',\n  ENGAGE: 'engage'\n};\n\nfunction EmailDeliveryContainer(props: Props) {\n  const { history, queryParams } = props;\n\n  const [emailType, setEmailType] = React.useState(\n    queryParams.emailType || EMAIL_TYPES.TRANSACTION\n  );\n\n  React.useEffect(() => {\n    router.setParams(history, { emailType });\n  }, [history, emailType]);\n\n  const transactionResponse = useQuery(\n    gql(queries.transactionEmailDeliveries),\n    {\n      variables: {\n        searchValue: queryParams.searchValue,\n        ...generatePaginationParams(queryParams)\n      }\n    }\n  );\n\n  const engageReportsListResponse = useQuery(gql(queries.engageReportsList), {\n    variables: generatePaginationParams(queryParams)\n  });\n\n  const handleSelectEmailType = (type: string) => {\n    setEmailType(type);\n\n    return router.removeParams(history, 'page', 'perPage', 'searchValue');\n  };\n\n  const transactionData = transactionResponse.data || {};\n  const emailDeliveries = transactionData.transactionEmailDeliveries || {};\n  const emailDeliveriesLoading = transactionResponse.loading;\n\n  const engageReportsListData = engageReportsListResponse.data || {};\n  const reportsList = engageReportsListData.engageReportsList || {};\n  const reportsListLoading = engageReportsListResponse.loading;\n\n  let list;\n  let count;\n  let loading;\n\n  if (emailType === EMAIL_TYPES.TRANSACTION) {\n    list = emailDeliveries.list;\n    count = emailDeliveries.totalCount;\n    loading = emailDeliveriesLoading;\n  } else {\n    list = reportsList.list;\n    count = reportsList.totalCount;\n    loading = reportsListLoading;\n  }\n\n  const updatedProps = {\n    ...props,\n    count,\n    list,\n    loading,\n    emailType,\n    handleSelectEmailType,\n    history,\n    searchValue: queryParams.searchValue || ''\n  };\n\n  return <EmailDelivery {...updatedProps} />;\n}\n\nexport default EmailDeliveryContainer;\n"]},"metadata":{},"sourceType":"module"}