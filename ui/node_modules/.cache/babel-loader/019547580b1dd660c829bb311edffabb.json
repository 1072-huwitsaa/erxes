{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/containers/Pipelines.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as boardQueries } from 'modules/boards/graphql';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __, Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Pipelines from '../components/Pipelines';\nimport { getWarningMessage } from '../constants';\nimport { mutations, queries } from '../graphql';\n\nvar PipelinesContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PipelinesContainer, _React$Component);\n\n  function PipelinesContainer() {\n    _classCallCheck(this, PipelinesContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PipelinesContainer).apply(this, arguments));\n  }\n\n  _createClass(PipelinesContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          boardId = _this$props.boardId,\n          pipelinesQuery = _this$props.pipelinesQuery,\n          removePipelineMutation = _this$props.removePipelineMutation,\n          pipelinesUpdateOrderMutation = _this$props.pipelinesUpdateOrderMutation,\n          boardDetailQuery = _this$props.boardDetailQuery;\n\n      if (pipelinesQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n      }\n\n      var pipelines = pipelinesQuery.pipelines; // remove action\n\n      var remove = function remove(pipelineId) {\n        confirm(getWarningMessage('Pipeline'), {\n          hasDeleteConfirm: true\n        }).then(function () {\n          removePipelineMutation({\n            variables: {\n              _id: pipelineId\n            },\n            refetchQueries: getRefetchQueries(boardId, pipelineId)\n          }).then(function () {\n            pipelinesQuery.refetch({\n              boardId: boardId\n            });\n            var msg = \"\".concat(__(\"You successfully deleted a\"), \" \").concat(__('pipeline'), \".\");\n            Alert.success(msg);\n          }).catch(function (error) {\n            Alert.error(error.message);\n          });\n        });\n      };\n\n      var renderButton = function renderButton(_ref) {\n        var name = _ref.name,\n            values = _ref.values,\n            isSubmitted = _ref.isSubmitted,\n            callback = _ref.callback,\n            object = _ref.object,\n            confirmationUpdate = _ref.confirmationUpdate;\n\n        var callBackResponse = function callBackResponse() {\n          pipelinesQuery.refetch({\n            boardId: boardId\n          });\n\n          if (callback) {\n            return callback();\n          }\n        };\n\n        return React.createElement(ButtonMutate, {\n          mutation: object ? mutations.pipelineEdit : mutations.pipelineAdd,\n          variables: values,\n          callback: callBackResponse,\n          confirmationUpdate: object ? confirmationUpdate : false,\n          refetchQueries: getRefetchQueries(boardId, object ? object._id : ''),\n          isSubmitted: isSubmitted,\n          type: \"submit\",\n          uppercase: false,\n          successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      };\n\n      var updateOrder = function updateOrder(orders) {\n        pipelinesUpdateOrderMutation({\n          variables: {\n            orders: orders\n          }\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var extendedProps = _objectSpread({}, this.props, {\n        pipelines: pipelines,\n        refetch: pipelinesQuery.refetch,\n        loading: pipelinesQuery.loading,\n        remove: remove,\n        renderButton: renderButton,\n        updateOrder: updateOrder,\n        currentBoard: boardDetailQuery ? boardDetailQuery.boardDetail : undefined\n      });\n\n      return React.createElement(Pipelines, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PipelinesContainer;\n}(React.Component);\n\nvar getRefetchQueries = function getRefetchQueries(boardId, pipelineId) {\n  return ['pipelinesQuery', {\n    query: gql(boardQueries.boardDetail),\n    variables: {\n      _id: boardId\n    }\n  }, {\n    query: gql(boardQueries.stages),\n    variables: {\n      pipelineId: pipelineId,\n      search: undefined,\n      customerIds: undefined,\n      companyIds: undefined,\n      assignedUserIds: undefined,\n      labelIds: undefined,\n      extraParams: {},\n      closeDateType: undefined,\n      userIds: undefined\n    }\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.pipelines), {\n  name: 'pipelinesQuery',\n  options: function options(_ref2) {\n    var _ref2$boardId = _ref2.boardId,\n        boardId = _ref2$boardId === void 0 ? '' : _ref2$boardId,\n        type = _ref2.type;\n    return {\n      variables: {\n        boardId: boardId,\n        type: type\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.boardDetail), {\n  name: 'boardDetailQuery',\n  skip: function skip(_ref3) {\n    var boardId = _ref3.boardId;\n    return !boardId;\n  },\n  options: function options(_ref4) {\n    var boardId = _ref4.boardId;\n    return {\n      variables: {\n        _id: boardId\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.pipelineRemove), {\n  name: 'removePipelineMutation'\n}), graphql(gql(mutations.pipelinesUpdateOrder), {\n  name: 'pipelinesUpdateOrderMutation'\n}))(PipelinesContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/containers/Pipelines.tsx"],"names":["gql","compose","queries","boardQueries","ButtonMutate","Spinner","__","Alert","confirm","withProps","React","graphql","Pipelines","getWarningMessage","mutations","PipelinesContainer","props","boardId","pipelinesQuery","removePipelineMutation","pipelinesUpdateOrderMutation","boardDetailQuery","loading","pipelines","remove","pipelineId","hasDeleteConfirm","then","variables","_id","refetchQueries","getRefetchQueries","refetch","msg","success","catch","error","message","renderButton","name","values","isSubmitted","callback","object","confirmationUpdate","callBackResponse","pipelineEdit","pipelineAdd","updateOrder","orders","extendedProps","currentBoard","boardDetail","undefined","Component","query","stages","search","customerIds","companyIds","assignedUserIds","labelIds","extraParams","closeDateType","userIds","options","type","fetchPolicy","skip","pipelineRemove","pipelinesUpdateOrder"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as boardQueries } from 'modules/boards/graphql';\nimport {\n  BoardDetailQueryResponse,\n  PipelinesQueryResponse\n} from 'modules/boards/types';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { __, Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Pipelines from '../components/Pipelines';\nimport { getWarningMessage } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport {\n  IOption,\n  RemovePipelineMutationResponse,\n  RemovePipelineMutationVariables,\n  UpdateOrderPipelineMutationResponse,\n  UpdateOrderPipelineMutationVariables\n} from '../types';\n\ntype Props = {\n  boardId: string;\n  type: string;\n  options?: IOption;\n};\n\ntype FinalProps = {\n  pipelinesQuery: PipelinesQueryResponse;\n  boardDetailQuery: BoardDetailQueryResponse;\n} & Props &\n  RemovePipelineMutationResponse &\n  UpdateOrderPipelineMutationResponse;\n\nclass PipelinesContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      boardId,\n      pipelinesQuery,\n      removePipelineMutation,\n      pipelinesUpdateOrderMutation,\n      boardDetailQuery\n    } = this.props;\n\n    if (pipelinesQuery.loading) {\n      return <Spinner />;\n    }\n\n    const pipelines = pipelinesQuery.pipelines;\n\n    // remove action\n    const remove = pipelineId => {\n      confirm(getWarningMessage('Pipeline'), { hasDeleteConfirm: true }).then(\n        () => {\n          removePipelineMutation({\n            variables: { _id: pipelineId },\n            refetchQueries: getRefetchQueries(boardId, pipelineId)\n          })\n            .then(() => {\n              pipelinesQuery.refetch({ boardId });\n\n              const msg = `${__(`You successfully deleted a`)} ${__(\n                'pipeline'\n              )}.`;\n\n              Alert.success(msg);\n            })\n            .catch(error => {\n              Alert.error(error.message);\n            });\n        }\n      );\n    };\n\n    const renderButton = ({\n      name,\n      values,\n      isSubmitted,\n      callback,\n      object,\n      confirmationUpdate\n    }: IButtonMutateProps) => {\n      const callBackResponse = () => {\n        pipelinesQuery.refetch({ boardId });\n\n        if (callback) {\n          return callback();\n        }\n      };\n\n      return (\n        <ButtonMutate\n          mutation={object ? mutations.pipelineEdit : mutations.pipelineAdd}\n          variables={values}\n          callback={callBackResponse}\n          confirmationUpdate={object ? confirmationUpdate : false}\n          refetchQueries={getRefetchQueries(boardId, object ? object._id : '')}\n          isSubmitted={isSubmitted}\n          type=\"submit\"\n          uppercase={false}\n          successMessage={`You successfully ${\n            object ? 'updated' : 'added'\n          } a ${name}`}\n        />\n      );\n    };\n\n    const updateOrder = orders => {\n      pipelinesUpdateOrderMutation({\n        variables: { orders }\n      }).catch(error => {\n        Alert.error(error.message);\n      });\n    };\n\n    const extendedProps = {\n      ...this.props,\n      pipelines,\n      refetch: pipelinesQuery.refetch,\n      loading: pipelinesQuery.loading,\n      remove,\n      renderButton,\n      updateOrder,\n      currentBoard: boardDetailQuery ? boardDetailQuery.boardDetail : undefined\n    };\n\n    return <Pipelines {...extendedProps} />;\n  }\n}\n\nconst getRefetchQueries = (boardId, pipelineId?: string) => {\n  return [\n    'pipelinesQuery',\n    {\n      query: gql(boardQueries.boardDetail),\n      variables: { _id: boardId }\n    },\n    {\n      query: gql(boardQueries.stages),\n      variables: {\n        pipelineId,\n        search: undefined,\n        customerIds: undefined,\n        companyIds: undefined,\n        assignedUserIds: undefined,\n        labelIds: undefined,\n        extraParams: {},\n        closeDateType: undefined,\n        userIds: undefined\n      }\n    }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, PipelinesQueryResponse, { boardId: string }>(\n      gql(queries.pipelines),\n      {\n        name: 'pipelinesQuery',\n        options: ({\n          boardId = '',\n          type\n        }: {\n          boardId: string;\n          type: string;\n        }) => ({\n          variables: { boardId, type },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, BoardDetailQueryResponse>(gql(queries.boardDetail), {\n      name: 'boardDetailQuery',\n      skip: ({ boardId }: { boardId?: string }) => !boardId,\n      options: ({ boardId }: { boardId?: string }) => ({\n        variables: { _id: boardId },\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<\n      Props,\n      RemovePipelineMutationResponse,\n      RemovePipelineMutationVariables\n    >(gql(mutations.pipelineRemove), {\n      name: 'removePipelineMutation'\n    }),\n    graphql<\n      Props,\n      UpdateOrderPipelineMutationResponse,\n      UpdateOrderPipelineMutationVariables\n    >(gql(mutations.pipelinesUpdateOrder), {\n      name: 'pipelinesUpdateOrderMutation'\n    })\n  )(PipelinesContainer)\n);\n"]},"metadata":{},"sourceType":"module"}