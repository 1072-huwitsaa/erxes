{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/general/containers/EngageSettingsContent.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __, Alert, confirm, withProps } from 'modules/common/utils';\nimport { mutations as engageMutations, queries as engageQueries } from 'modules/engage/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { queries } from '../../integrations/graphql';\nimport EngageSettingsContent from '../components/EngageSettingsContent';\n\nvar SettingsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SettingsContainer, _React$Component);\n\n  function SettingsContainer() {\n    _classCallCheck(this, SettingsContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SettingsContainer).apply(this, arguments));\n  }\n\n  _createClass(SettingsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          engagesConfigDetailQuery = _this$props.engagesConfigDetailQuery,\n          engagesVerifiedEmailsQuery = _this$props.engagesVerifiedEmailsQuery,\n          engagesVerifyEmailMutation = _this$props.engagesVerifyEmailMutation,\n          engagesRemoveVerifiedEmailMutation = _this$props.engagesRemoveVerifiedEmailMutation,\n          engagesSendTestEmailMutation = _this$props.engagesSendTestEmailMutation;\n\n      if (engagesConfigDetailQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      var renderButton = function renderButton(_ref) {\n        var values = _ref.values,\n            isSubmitted = _ref.isSubmitted;\n\n        var callback = function callback() {\n          engagesConfigDetailQuery.refetch();\n        };\n\n        return React.createElement(ButtonMutate, {\n          mutation: engageMutations.engagesUpdateConfigs,\n          variables: values,\n          callback: callback,\n          refetchQueries: 'engagesConfigDetail',\n          isSubmitted: isSubmitted,\n          type: \"submit\",\n          successMessage: __(\"You successfully updated engages config\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n      };\n\n      var verifyEmail = function verifyEmail(email) {\n        engagesVerifyEmailMutation({\n          variables: {\n            email: email\n          }\n        }).then(function () {\n          engagesVerifiedEmailsQuery.refetch();\n          Alert.success('Successfully sent verification email. Please check your inbox');\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var removeVerifiedEmail = function removeVerifiedEmail(email) {\n        confirm(__('You are about to remove verified email. Are your sure?')).then(function () {\n          engagesRemoveVerifiedEmailMutation({\n            variables: {\n              email: email\n            }\n          }).then(function () {\n            engagesVerifiedEmailsQuery.refetch();\n            Alert.success('Successfully removed');\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        });\n      };\n\n      var sendTestEmail = function sendTestEmail(from, to, content) {\n        engagesSendTestEmailMutation({\n          variables: {\n            from: from,\n            to: to,\n            content: content\n          }\n        }).then(function () {\n          Alert.success('Successfully sent');\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var configs = engagesConfigDetailQuery.engagesConfigDetail || [];\n      var configsMap = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = configs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var config = _step.value;\n          configsMap[config.code] = config.value;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return React.createElement(EngageSettingsContent, {\n        renderButton: renderButton,\n        verifyEmail: verifyEmail,\n        sendTestEmail: sendTestEmail,\n        removeVerifiedEmail: removeVerifiedEmail,\n        configsMap: configsMap,\n        verifiedEmails: engagesVerifiedEmailsQuery.engageVerifiedEmails || [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SettingsContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(engageQueries.verifiedEmails), {\n  name: 'engagesVerifiedEmailsQuery'\n}), graphql(gql(queries.engagesConfigDetail), {\n  name: 'engagesConfigDetailQuery'\n}), graphql(gql(engageMutations.verifyEmail), {\n  name: 'engagesVerifyEmailMutation'\n}), graphql(gql(engageMutations.removeVerifiedEmail), {\n  name: 'engagesRemoveVerifiedEmailMutation'\n}), graphql(gql(engageMutations.sendTestEmail), {\n  name: 'engagesSendTestEmailMutation'\n}))(withRouter(SettingsContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/general/containers/EngageSettingsContent.tsx"],"names":["gql","compose","ButtonMutate","Spinner","__","Alert","confirm","withProps","mutations","engageMutations","queries","engageQueries","React","graphql","withRouter","EngageSettingsContent","SettingsContainer","props","engagesConfigDetailQuery","engagesVerifiedEmailsQuery","engagesVerifyEmailMutation","engagesRemoveVerifiedEmailMutation","engagesSendTestEmailMutation","loading","renderButton","values","isSubmitted","callback","refetch","engagesUpdateConfigs","verifyEmail","email","variables","then","success","catch","e","error","message","removeVerifiedEmail","sendTestEmail","from","to","content","configs","engagesConfigDetail","configsMap","config","code","value","engageVerifiedEmails","Component","verifiedEmails","name"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { __, Alert, confirm, withProps } from 'modules/common/utils';\nimport {\n  mutations as engageMutations,\n  queries as engageQueries\n} from 'modules/engage/graphql';\nimport {\n  EngageConfigQueryResponse,\n  EngageVerifiedEmailsQueryResponse\n} from 'modules/engage/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { queries } from '../../integrations/graphql';\nimport EngageSettingsContent from '../components/EngageSettingsContent';\n\ntype Props = {\n  engagesConfigDetailQuery: EngageConfigQueryResponse;\n  engagesVerifiedEmailsQuery: EngageVerifiedEmailsQueryResponse;\n  engagesVerifyEmailMutation;\n  engagesRemoveVerifiedEmailMutation;\n  engagesSendTestEmailMutation;\n} & IRouterProps;\n\nclass SettingsContainer extends React.Component<Props> {\n  render() {\n    const {\n      engagesConfigDetailQuery,\n      engagesVerifiedEmailsQuery,\n      engagesVerifyEmailMutation,\n      engagesRemoveVerifiedEmailMutation,\n      engagesSendTestEmailMutation\n    } = this.props;\n\n    if (engagesConfigDetailQuery.loading) {\n      return <Spinner />;\n    }\n\n    const renderButton = ({ values, isSubmitted }: IButtonMutateProps) => {\n      const callback = () => {\n        engagesConfigDetailQuery.refetch();\n      };\n\n      return (\n        <ButtonMutate\n          mutation={engageMutations.engagesUpdateConfigs}\n          variables={values}\n          callback={callback}\n          refetchQueries={'engagesConfigDetail'}\n          isSubmitted={isSubmitted}\n          type=\"submit\"\n          successMessage={__(`You successfully updated engages config`)}\n        />\n      );\n    };\n\n    const verifyEmail = (email: string) => {\n      engagesVerifyEmailMutation({\n        variables: {\n          email\n        }\n      })\n        .then(() => {\n          engagesVerifiedEmailsQuery.refetch();\n          Alert.success(\n            'Successfully sent verification email. Please check your inbox'\n          );\n        })\n\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const removeVerifiedEmail = (email: string) => {\n      confirm(\n        __('You are about to remove verified email. Are your sure?')\n      ).then(() => {\n        engagesRemoveVerifiedEmailMutation({\n          variables: {\n            email\n          }\n        })\n          .then(() => {\n            engagesVerifiedEmailsQuery.refetch();\n            Alert.success('Successfully removed');\n          })\n\n          .catch(e => {\n            Alert.error(e.message);\n          });\n      });\n    };\n\n    const sendTestEmail = (from: string, to: string, content: string) => {\n      engagesSendTestEmailMutation({\n        variables: {\n          from,\n          to,\n          content\n        }\n      })\n        .then(() => {\n          Alert.success('Successfully sent');\n        })\n\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const configs = engagesConfigDetailQuery.engagesConfigDetail || [];\n\n    const configsMap = {};\n\n    for (const config of configs) {\n      configsMap[config.code] = config.value;\n    }\n\n    return (\n      <EngageSettingsContent\n        renderButton={renderButton}\n        verifyEmail={verifyEmail}\n        sendTestEmail={sendTestEmail}\n        removeVerifiedEmail={removeVerifiedEmail}\n        configsMap={configsMap}\n        verifiedEmails={engagesVerifiedEmailsQuery.engageVerifiedEmails || []}\n      />\n    );\n  }\n}\n\nexport default withProps<{}>(\n  compose(\n    graphql<{}, EngageVerifiedEmailsQueryResponse, {}>(\n      gql(engageQueries.verifiedEmails),\n      {\n        name: 'engagesVerifiedEmailsQuery'\n      }\n    ),\n    graphql<{}, EngageConfigQueryResponse, {}>(\n      gql(queries.engagesConfigDetail),\n      {\n        name: 'engagesConfigDetailQuery'\n      }\n    ),\n    graphql(gql(engageMutations.verifyEmail), {\n      name: 'engagesVerifyEmailMutation'\n    }),\n    graphql(gql(engageMutations.removeVerifiedEmail), {\n      name: 'engagesRemoveVerifiedEmailMutation'\n    }),\n    graphql(gql(engageMutations.sendTestEmail), {\n      name: 'engagesSendTestEmailMutation'\n    })\n  )(withRouter<Props>(SettingsContainer))\n);\n"]},"metadata":{},"sourceType":"module"}