{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/Store.tsx\";\nimport { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport Home from 'modules/settings/integrations/components/store/Home';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\n\nvar Store = function Store(props) {\n  var totalCountQuery = props.totalCountQuery;\n\n  if (totalCountQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n  var customLink = function customLink(kind, addLink) {\n    var _getEnv = getEnv(),\n        REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n    var url = \"\".concat(REACT_APP_API_URL, \"/connect-integration?link=\").concat(addLink, \"&kind=\").concat(kind);\n    window.location.replace(url);\n  };\n\n  var totalCount = totalCountQuery.integrationsTotalCount.byKind;\n\n  var updatedProps = _objectSpread({}, props, {\n    customLink: customLink,\n    totalCount: totalCount\n  });\n\n  return React.createElement(Home, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.integrationTotalCount), {\n  name: 'totalCountQuery'\n}))(Store));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/Store.tsx"],"names":["getEnv","gql","compose","Spinner","Home","queries","React","graphql","withProps","Store","props","totalCountQuery","loading","customLink","kind","addLink","REACT_APP_API_URL","url","window","location","replace","totalCount","integrationsTotalCount","byKind","updatedProps","integrationTotalCount","name"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,IAAP,MAAiB,qDAAjB;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;;AAUA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAuB;AAAA,MAC3BC,eAD2B,GACPD,KADO,CAC3BC,eAD2B;;AAGnC,MAAIA,eAAe,CAACC,OAApB,EAA6B;AAC3B,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAeC,OAAf,EAAmC;AAAA,kBACtBf,MAAM,EADgB;AAAA,QAC5CgB,iBAD4C,WAC5CA,iBAD4C;;AAEpD,QAAMC,GAAG,aAAMD,iBAAN,uCAAoDD,OAApD,mBAAoED,IAApE,CAAT;AAEAI,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwBH,GAAxB;AACD,GALD;;AAOA,MAAMI,UAAU,GAAGV,eAAe,CAACW,sBAAhB,CAAuCC,MAA1D;;AAEA,MAAMC,YAAY,qBACbd,KADa;AAEhBG,IAAAA,UAAU,EAAVA,UAFgB;AAGhBQ,IAAAA,UAAU,EAAVA;AAHgB,IAAlB;;AAMA,SAAO,oBAAC,IAAD,oBAAUG,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAvBD;;AAyBA,eAAehB,SAAS,CACtBN,OAAO,CACLK,OAAO,CAACN,GAAG,CAACI,OAAO,CAACoB,qBAAT,CAAJ,EAAqC;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAArC,CADF,CAAP,CAEEjB,KAFF,CADsB,CAAxB","sourcesContent":["import { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport Home from 'modules/settings/integrations/components/store/Home';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { IntegrationsCountQueryResponse } from '../types';\n\ntype Props = {\n  queryParams: any;\n  history?: any;\n};\n\ntype FinalProps = { totalCountQuery: IntegrationsCountQueryResponse } & Props;\n\nconst Store = (props: FinalProps) => {\n  const { totalCountQuery } = props;\n\n  if (totalCountQuery.loading) {\n    return <Spinner />;\n  }\n\n  const customLink = (kind: string, addLink: string) => {\n    const { REACT_APP_API_URL } = getEnv();\n    const url = `${REACT_APP_API_URL}/connect-integration?link=${addLink}&kind=${kind}`;\n\n    window.location.replace(url);\n  };\n\n  const totalCount = totalCountQuery.integrationsTotalCount.byKind;\n\n  const updatedProps = {\n    ...props,\n    customLink,\n    totalCount\n  };\n\n  return <Home {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(queries.integrationTotalCount), { name: 'totalCountQuery' })\n  )(Store)\n);\n"]},"metadata":{},"sourceType":"module"}