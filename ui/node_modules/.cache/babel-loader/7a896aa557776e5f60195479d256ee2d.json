{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/conversationDetail/workarea/mail/Mail.tsx\";\nimport Button from 'modules/common/components/Button';\nimport MailForm from 'modules/settings/integrations/containers/mail/MailForm';\nimport { cleanHtml } from 'modules/settings/integrations/containers/utils';\nimport React from 'react';\nimport Attachments from './Attachments';\nimport MailHeader from './MailHeader';\nimport { BoxItem, Content, Reply } from './style';\n\nvar Mail =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Mail, _React$PureComponent);\n\n  function Mail(props) {\n    var _this;\n\n    _classCallCheck(this, Mail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mail).call(this, props));\n\n    _this.onToggleContent = function () {\n      _this.setState({\n        isCollapsed: !_this.state.isCollapsed\n      });\n    };\n\n    _this.toggleReply = function (_) {\n      var replyAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isForward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      _this.setState({\n        isReply: !_this.state.isReply,\n        replyAll: replyAll,\n        isForward: isForward\n      });\n    };\n\n    _this.closeReply = function () {\n      _this.setState({\n        isReply: false,\n        replyAll: false,\n        isForward: false\n      });\n    };\n\n    _this.state = {\n      isReply: false,\n      isForward: false,\n      replyAll: false,\n      isCollapsed: !props.isLast\n    };\n    return _this;\n  }\n\n  _createClass(Mail, [{\n    key: \"renderButtons\",\n    value: function renderButtons(addressLength) {\n      var _this2 = this;\n\n      if (this.state.isReply || !this.props.isLast || typeof this.props.message._id !== 'string') {\n        return null;\n      }\n\n      var toggleReplyAll = function toggleReplyAll(e) {\n        return _this2.toggleReply(e, true);\n      };\n\n      var toggleForward = function toggleForward(e) {\n        return _this2.toggleReply(e, false, true);\n      };\n\n      return React.createElement(Reply, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Button, {\n        icon: \"reply\",\n        size: \"small\",\n        onClick: this.toggleReply,\n        btnStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Reply\"), addressLength > 1 && React.createElement(Button, {\n        icon: \"reply-all\",\n        size: \"small\",\n        onClick: toggleReplyAll,\n        btnStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Reply to all\"), React.createElement(Button, {\n        icon: \"corner-down-right-alt\",\n        size: \"small\",\n        onClick: toggleForward,\n        btnStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Forward\"));\n    }\n  }, {\n    key: \"renderMailForm\",\n    value: function renderMailForm(mailData) {\n      var _this$state = this.state,\n          replyAll = _this$state.replyAll,\n          isReply = _this$state.isReply,\n          isForward = _this$state.isForward;\n\n      if (!isReply) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          conversationId = _this$props.conversationId,\n          message = _this$props.message,\n          integrationId = _this$props.integrationId,\n          customerId = _this$props.customerId,\n          brandId = _this$props.brandId;\n      return React.createElement(BoxItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(MailForm, {\n        replyAll: replyAll,\n        isReply: isReply,\n        isForward: isForward,\n        closeReply: this.closeReply,\n        createdAt: message.createdAt,\n        conversationId: conversationId,\n        customerId: customerId,\n        toggleReply: this.toggleReply,\n        integrationId: integrationId,\n        refetchQueries: ['detailQuery'],\n        mailData: mailData,\n        brandId: brandId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderMailBody\",\n    value: function renderMailBody(mailData) {\n      if (this.state.isCollapsed) {\n        return null;\n      }\n\n      var innerHTML = {\n        __html: cleanHtml(mailData.body || '')\n      };\n      var to = mailData.to,\n          cc = mailData.cc,\n          bcc = mailData.bcc;\n      var addresses = to.concat(cc, bcc);\n      return React.createElement(React.Fragment, null, React.createElement(Content, {\n        dangerouslySetInnerHTML: innerHTML,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), this.renderAttachments(mailData), this.renderButtons(addresses.length));\n    }\n  }, {\n    key: \"renderAttachments\",\n    value: function renderAttachments(mailData) {\n      var messageId = mailData.messageId,\n          _mailData$attachments = mailData.attachments,\n          attachments = _mailData$attachments === void 0 ? [] : _mailData$attachments;\n\n      if (!attachments || attachments.length === 0) {\n        return;\n      }\n\n      var _this$props2 = this.props,\n          kind = _this$props2.kind,\n          integrationId = _this$props2.integrationId;\n      return React.createElement(Attachments, {\n        kind: kind,\n        integrationId: integrationId,\n        attachments: attachments,\n        messageId: messageId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$message = this.props.message,\n          message = _this$props$message === void 0 ? {} : _this$props$message;\n\n      if (!message) {\n        return null;\n      }\n\n      var mailData = message.mailData;\n\n      if (!mailData) {\n        return null;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(BoxItem, {\n        toggle: this.state.isCollapsed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(MailHeader, {\n        message: message,\n        isContentCollapsed: this.state.isCollapsed,\n        onToggleContent: this.onToggleContent,\n        onToggleMailForm: this.toggleReply,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), this.renderMailBody(mailData)), this.renderMailForm(mailData));\n    }\n  }]);\n\n  return Mail;\n}(React.PureComponent);\n\nexport default Mail;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/conversationDetail/workarea/mail/Mail.tsx"],"names":["Button","MailForm","cleanHtml","React","Attachments","MailHeader","BoxItem","Content","Reply","Mail","props","onToggleContent","setState","isCollapsed","state","toggleReply","_","replyAll","isForward","isReply","closeReply","isLast","addressLength","message","_id","toggleReplyAll","e","toggleForward","mailData","conversationId","integrationId","customerId","brandId","createdAt","innerHTML","__html","body","to","cc","bcc","addresses","concat","renderAttachments","renderButtons","length","messageId","attachments","kind","renderMailBody","renderMailForm","PureComponent"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,kCAAnB;AAEA,OAAOC,QAAP,MAAqB,wDAArB;AACA,SAASC,SAAT,QAA0B,gDAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,KAA3B,QAAwC,SAAxC;;IAmBMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;;AADiB,UAWnBC,eAXmB,GAWD,YAAM;AACtB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAE,CAAC,MAAKC,KAAL,CAAWD;AAA3B,OAAd;AACD,KAbkB;;AAAA,UAenBE,WAfmB,GAeL,UAACC,CAAD,EAA8D;AAAA,UAA1DC,QAA0D,uEAAtC,KAAsC;AAAA,UAA/BC,SAA+B,uEAAV,KAAU;;AAC1E,YAAKN,QAAL,CAAc;AAAEO,QAAAA,OAAO,EAAE,CAAC,MAAKL,KAAL,CAAWK,OAAvB;AAAgCF,QAAAA,QAAQ,EAARA,QAAhC;AAA0CC,QAAAA,SAAS,EAATA;AAA1C,OAAd;AACD,KAjBkB;;AAAA,UAmBnBE,UAnBmB,GAmBN,YAAM;AACjB,YAAKR,QAAL,CAAc;AAAEO,QAAAA,OAAO,EAAE,KAAX;AAAkBF,QAAAA,QAAQ,EAAE,KAA5B;AAAmCC,QAAAA,SAAS,EAAE;AAA9C,OAAd;AACD,KArBkB;;AAGjB,UAAKJ,KAAL,GAAa;AACXK,MAAAA,OAAO,EAAE,KADE;AAEXD,MAAAA,SAAS,EAAE,KAFA;AAGXD,MAAAA,QAAQ,EAAE,KAHC;AAIXJ,MAAAA,WAAW,EAAE,CAACH,KAAK,CAACW;AAJT,KAAb;AAHiB;AASlB;;;;kCAcaC,a,EAAuB;AAAA;;AACnC,UACE,KAAKR,KAAL,CAAWK,OAAX,IACA,CAAC,KAAKT,KAAL,CAAWW,MADZ,IAEA,OAAO,KAAKX,KAAL,CAAWa,OAAX,CAAmBC,GAA1B,KAAkC,QAHpC,EAIE;AACA,eAAO,IAAP;AACD;;AAED,UAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,CAAC;AAAA,eAAI,MAAI,CAACX,WAAL,CAAiBW,CAAjB,EAAoB,IAApB,CAAJ;AAAA,OAAxB;;AACA,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAD,CAAC;AAAA,eAAI,MAAI,CAACX,WAAL,CAAiBW,CAAjB,EAAoB,KAApB,EAA2B,IAA3B,CAAJ;AAAA,OAAvB;;AAEA,aACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,OAAO,EAAE,KAAKX,WAHhB;AAIE,QAAA,QAAQ,EAAC,SAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EASGO,aAAa,GAAG,CAAhB,IACC,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,WADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,OAAO,EAAEG,cAHX;AAIE,QAAA,QAAQ,EAAC,SAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVJ,EAmBE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,uBADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,OAAO,EAAEE,aAHX;AAIE,QAAA,QAAQ,EAAC,SAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAnBF,CADF;AA8BD;;;mCAEcC,Q,EAAU;AAAA,wBACkB,KAAKd,KADvB;AAAA,UACfG,QADe,eACfA,QADe;AAAA,UACLE,OADK,eACLA,OADK;AAAA,UACID,SADJ,eACIA,SADJ;;AAGvB,UAAI,CAACC,OAAL,EAAc;AACZ,eAAO,IAAP;AACD;;AALsB,wBAanB,KAAKT,KAbc;AAAA,UAQrBmB,cARqB,eAQrBA,cARqB;AAAA,UASrBN,OATqB,eASrBA,OATqB;AAAA,UAUrBO,aAVqB,eAUrBA,aAVqB;AAAA,UAWrBC,UAXqB,eAWrBA,UAXqB;AAAA,UAYrBC,OAZqB,eAYrBA,OAZqB;AAevB,aACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAEf,QADZ;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,QAAA,SAAS,EAAED,SAHb;AAIE,QAAA,UAAU,EAAE,KAAKE,UAJnB;AAKE,QAAA,SAAS,EAAEG,OAAO,CAACU,SALrB;AAME,QAAA,cAAc,EAAEJ,cANlB;AAOE,QAAA,UAAU,EAAEE,UAPd;AAQE,QAAA,WAAW,EAAE,KAAKhB,WARpB;AASE,QAAA,aAAa,EAAEe,aATjB;AAUE,QAAA,cAAc,EAAE,CAAC,aAAD,CAVlB;AAWE,QAAA,QAAQ,EAAEF,QAXZ;AAYE,QAAA,OAAO,EAAEI,OAZX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAkBD;;;mCAEcJ,Q,EAAU;AACvB,UAAI,KAAKd,KAAL,CAAWD,WAAf,EAA4B;AAC1B,eAAO,IAAP;AACD;;AAED,UAAMqB,SAAS,GAAG;AAAEC,QAAAA,MAAM,EAAEjC,SAAS,CAAC0B,QAAQ,CAACQ,IAAT,IAAiB,EAAlB;AAAnB,OAAlB;AALuB,UAMfC,EANe,GAMCT,QAND,CAMfS,EANe;AAAA,UAMXC,EANW,GAMCV,QAND,CAMXU,EANW;AAAA,UAMPC,GANO,GAMCX,QAND,CAMPW,GANO;AAOvB,UAAMC,SAAS,GAAGH,EAAE,CAACI,MAAH,CAAUH,EAAV,EAAcC,GAAd,CAAlB;AAEA,aACE,0CACE,oBAAC,OAAD;AAAS,QAAA,uBAAuB,EAAEL,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKQ,iBAAL,CAAuBd,QAAvB,CAFH,EAGG,KAAKe,aAAL,CAAmBH,SAAS,CAACI,MAA7B,CAHH,CADF;AAOD;;;sCAEiBhB,Q,EAAU;AAAA,UAClBiB,SADkB,GACcjB,QADd,CAClBiB,SADkB;AAAA,kCACcjB,QADd,CACPkB,WADO;AAAA,UACPA,WADO,sCACO,EADP;;AAG1B,UAAI,CAACA,WAAD,IAAgBA,WAAW,CAACF,MAAZ,KAAuB,CAA3C,EAA8C;AAC5C;AACD;;AALyB,yBAOM,KAAKlC,KAPX;AAAA,UAOlBqC,IAPkB,gBAOlBA,IAPkB;AAAA,UAOZjB,aAPY,gBAOZA,aAPY;AAS1B,aACE,oBAAC,WAAD;AACE,QAAA,IAAI,EAAEiB,IADR;AAEE,QAAA,aAAa,EAAEjB,aAFjB;AAGE,QAAA,WAAW,EAAEgB,WAHf;AAIE,QAAA,SAAS,EAAED,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;;6BAEQ;AAAA,gCAC8B,KAAKnC,KADnC,CACCa,OADD;AAAA,UACCA,OADD,oCACW,EADX;;AAGP,UAAI,CAACA,OAAL,EAAc;AACZ,eAAO,IAAP;AACD;;AALM,UAOCK,QAPD,GAOcL,OAPd,CAOCK,QAPD;;AASP,UAAI,CAACA,QAAL,EAAe;AACb,eAAO,IAAP;AACD;;AAED,aACE,0CACE,oBAAC,OAAD;AAAS,QAAA,MAAM,EAAE,KAAKd,KAAL,CAAWD,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAEU,OADX;AAEE,QAAA,kBAAkB,EAAE,KAAKT,KAAL,CAAWD,WAFjC;AAGE,QAAA,eAAe,EAAE,KAAKF,eAHxB;AAIE,QAAA,gBAAgB,EAAE,KAAKI,WAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOG,KAAKiC,cAAL,CAAoBpB,QAApB,CAPH,CADF,EAUG,KAAKqB,cAAL,CAAoBrB,QAApB,CAVH,CADF;AAcD;;;;EAvKgBzB,KAAK,CAAC+C,a;;AA0KzB,eAAezC,IAAf","sourcesContent":["import Button from 'modules/common/components/Button';\nimport { IMessage } from 'modules/inbox/types';\nimport MailForm from 'modules/settings/integrations/containers/mail/MailForm';\nimport { cleanHtml } from 'modules/settings/integrations/containers/utils';\nimport React from 'react';\nimport Attachments from './Attachments';\nimport MailHeader from './MailHeader';\nimport { BoxItem, Content, Reply } from './style';\n\ntype Props = {\n  message: IMessage;\n  integrationId: string;\n  conversationId?: string;\n  customerId?: string;\n  kind: string;\n  isLast: boolean;\n  brandId?: string;\n};\n\ntype State = {\n  isReply: boolean;\n  isForward: boolean;\n  replyAll: boolean;\n  isCollapsed: boolean;\n};\n\nclass Mail extends React.PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReply: false,\n      isForward: false,\n      replyAll: false,\n      isCollapsed: !props.isLast\n    };\n  }\n\n  onToggleContent = () => {\n    this.setState({ isCollapsed: !this.state.isCollapsed });\n  };\n\n  toggleReply = (_, replyAll: boolean = false, isForward: boolean = false) => {\n    this.setState({ isReply: !this.state.isReply, replyAll, isForward });\n  };\n\n  closeReply = () => {\n    this.setState({ isReply: false, replyAll: false, isForward: false });\n  };\n\n  renderButtons(addressLength: number) {\n    if (\n      this.state.isReply ||\n      !this.props.isLast ||\n      typeof this.props.message._id !== 'string'\n    ) {\n      return null;\n    }\n\n    const toggleReplyAll = e => this.toggleReply(e, true);\n    const toggleForward = e => this.toggleReply(e, false, true);\n\n    return (\n      <Reply>\n        <Button\n          icon=\"reply\"\n          size=\"small\"\n          onClick={this.toggleReply}\n          btnStyle=\"primary\"\n        >\n          Reply\n        </Button>\n        {addressLength > 1 && (\n          <Button\n            icon=\"reply-all\"\n            size=\"small\"\n            onClick={toggleReplyAll}\n            btnStyle=\"primary\"\n          >\n            Reply to all\n          </Button>\n        )}\n        <Button\n          icon=\"corner-down-right-alt\"\n          size=\"small\"\n          onClick={toggleForward}\n          btnStyle=\"primary\"\n        >\n          Forward\n        </Button>\n      </Reply>\n    );\n  }\n\n  renderMailForm(mailData) {\n    const { replyAll, isReply, isForward } = this.state;\n\n    if (!isReply) {\n      return null;\n    }\n\n    const {\n      conversationId,\n      message,\n      integrationId,\n      customerId,\n      brandId\n    } = this.props;\n\n    return (\n      <BoxItem>\n        <MailForm\n          replyAll={replyAll}\n          isReply={isReply}\n          isForward={isForward}\n          closeReply={this.closeReply}\n          createdAt={message.createdAt}\n          conversationId={conversationId}\n          customerId={customerId}\n          toggleReply={this.toggleReply}\n          integrationId={integrationId}\n          refetchQueries={['detailQuery']}\n          mailData={mailData}\n          brandId={brandId}\n        />\n      </BoxItem>\n    );\n  }\n\n  renderMailBody(mailData) {\n    if (this.state.isCollapsed) {\n      return null;\n    }\n\n    const innerHTML = { __html: cleanHtml(mailData.body || '') };\n    const { to, cc, bcc } = mailData;\n    const addresses = to.concat(cc, bcc);\n\n    return (\n      <>\n        <Content dangerouslySetInnerHTML={innerHTML} />\n        {this.renderAttachments(mailData)}\n        {this.renderButtons(addresses.length)}\n      </>\n    );\n  }\n\n  renderAttachments(mailData) {\n    const { messageId, attachments = [] } = mailData;\n\n    if (!attachments || attachments.length === 0) {\n      return;\n    }\n\n    const { kind, integrationId } = this.props;\n\n    return (\n      <Attachments\n        kind={kind}\n        integrationId={integrationId}\n        attachments={attachments}\n        messageId={messageId}\n      />\n    );\n  }\n\n  render() {\n    const { message = {} as IMessage } = this.props;\n\n    if (!message) {\n      return null;\n    }\n\n    const { mailData } = message;\n\n    if (!mailData) {\n      return null;\n    }\n\n    return (\n      <>\n        <BoxItem toggle={this.state.isCollapsed}>\n          <MailHeader\n            message={message}\n            isContentCollapsed={this.state.isCollapsed}\n            onToggleContent={this.onToggleContent}\n            onToggleMailForm={this.toggleReply}\n          />\n          {this.renderMailBody(mailData)}\n        </BoxItem>\n        {this.renderMailForm(mailData)}\n      </>\n    );\n  }\n}\n\nexport default Mail;\n"]},"metadata":{},"sourceType":"module"}