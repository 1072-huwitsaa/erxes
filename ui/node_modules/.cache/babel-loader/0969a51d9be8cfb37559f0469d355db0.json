{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mode = undefined;\n\nvar _draftJs = require('draft-js');\n\nvar _getSearchText2 = require('../utils/getSearchText');\n\nvar _getSearchText3 = _interopRequireDefault(_getSearchText2);\n\nvar _emojiList = require('../utils/emojiList');\n\nvar _emojiList2 = _interopRequireDefault(_emojiList);\n\nvar _convertShortNameToUnicode = require('../utils/convertShortNameToUnicode');\n\nvar _convertShortNameToUnicode2 = _interopRequireDefault(_convertShortNameToUnicode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // This modifier can inserted emoji to current cursor position (with replace selected fragment),\n// or replaced emoji shortname like \":thumbsup:\". Behavior determined by `Mode` parameter.\n\n\nvar Mode = {\n  INSERT: 'INSERT',\n  // insert emoji to current cursor position\n  REPLACE: 'REPLACE' // replace emoji shortname\n\n};\n\nvar addEmoji = function addEmoji(editorState, emojiShortName) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Mode.INSERT;\n  var unicode = _emojiList2.default.list[emojiShortName][0];\n  var emoji = (0, _convertShortNameToUnicode2.default)(unicode);\n  var contentState = editorState.getCurrentContent();\n  var contentStateWithEntity = contentState.createEntity('emoji', 'IMMUTABLE', {\n    emojiUnicode: emoji\n  });\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  var currentSelectionState = editorState.getSelection();\n  var emojiAddedContent = void 0;\n  var emojiEndPos = 0;\n  var blockSize = 0;\n\n  switch (mode) {\n    case Mode.INSERT:\n      {\n        // in case text is selected it is removed and then the emoji is added\n        var afterRemovalContentState = _draftJs.Modifier.removeRange(contentState, currentSelectionState, 'backward'); // deciding on the position to insert emoji\n\n\n        var targetSelection = afterRemovalContentState.getSelectionAfter();\n        emojiAddedContent = _draftJs.Modifier.insertText(afterRemovalContentState, targetSelection, emoji, null, entityKey);\n        emojiEndPos = targetSelection.getAnchorOffset();\n        var blockKey = targetSelection.getAnchorKey();\n        blockSize = contentState.getBlockForKey(blockKey).getLength();\n        break;\n      }\n\n    case Mode.REPLACE:\n      {\n        var _getSearchText = (0, _getSearchText3.default)(editorState, currentSelectionState),\n            begin = _getSearchText.begin,\n            end = _getSearchText.end; // Get the selection of the :emoji: search text\n\n\n        var emojiTextSelection = currentSelectionState.merge({\n          anchorOffset: begin,\n          focusOffset: end\n        });\n        emojiAddedContent = _draftJs.Modifier.replaceText(contentState, emojiTextSelection, emoji, null, entityKey);\n        emojiEndPos = end;\n\n        var _blockKey = emojiTextSelection.getAnchorKey();\n\n        blockSize = contentState.getBlockForKey(_blockKey).getLength();\n        break;\n      }\n\n    default:\n      throw new Error('Unidentified value of \"mode\"');\n  } // If the emoji is inserted at the end, a space is appended right after for\n  // a smooth writing experience.\n\n\n  if (emojiEndPos === blockSize) {\n    emojiAddedContent = _draftJs.Modifier.insertText(emojiAddedContent, emojiAddedContent.getSelectionAfter(), ' ');\n  }\n\n  var newEditorState = _draftJs.EditorState.push(editorState, emojiAddedContent, 'insert-emoji');\n\n  return _draftJs.EditorState.forceSelection(newEditorState, emojiAddedContent.getSelectionAfter());\n};\n\nexports.default = addEmoji;\nexports.Mode = Mode;","map":null,"metadata":{},"sourceType":"script"}