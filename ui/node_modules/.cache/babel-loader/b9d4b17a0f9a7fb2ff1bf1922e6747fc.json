{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/SegmentFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Segments from 'modules/segments/containers/Filter';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as customerQueries } from '../../graphql';\n\nvar SegmentFilterContainer = function SegmentFilterContainer(props) {\n  var customersCountQuery = props.customersCountQuery,\n      type = props.type;\n  var counts = (customersCountQuery ? customersCountQuery.customerCounts : null) || {\n    bySegment: {}\n  };\n  return React.createElement(Segments, {\n    contentType: type,\n    counts: counts.bySegment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  });\n};\n\nexport default withProps(compose(graphql(gql(customerQueries.customerCounts), {\n  name: 'customersCountQuery',\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: function options(_ref2) {\n    var type = _ref2.type;\n    return {\n      variables: {\n        type: type,\n        only: 'bySegment'\n      }\n    };\n  }\n}))(SegmentFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/SegmentFilter.tsx"],"names":["gql","compose","Segments","React","graphql","withProps","queries","customerQueries","SegmentFilterContainer","props","customersCountQuery","type","counts","customerCounts","bySegment","name","skip","loadingMainQuery","options","variables","only"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAO,IAAIC,eAApB,QAA2C,eAA3C;;AAOA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAiC;AAAA,MACtDC,mBADsD,GACxBD,KADwB,CACtDC,mBADsD;AAAA,MACjCC,IADiC,GACxBF,KADwB,CACjCE,IADiC;AAG9D,MAAMC,MAAM,GAAG,CAACF,mBAAmB,GAC/BA,mBAAmB,CAACG,cADW,GAE/B,IAFW,KAEF;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAFb;AAIA,SAAO,oBAAC,QAAD;AAAU,IAAA,WAAW,EAAEH,IAAvB;AAA6B,IAAA,MAAM,EAAEC,MAAM,CAACE,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CARD;;AAeA,eAAeT,SAAS,CACtBJ,OAAO,CACLG,OAAO,CACLJ,GAAG,CAACO,eAAe,CAACM,cAAjB,CADE,EAEL;AACEE,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEC,EAAAA,OAAO,EAAE;AAAA,QAAGP,IAAH,SAAGA,IAAH;AAAA,WAAe;AACtBQ,MAAAA,SAAS,EAAE;AAAER,QAAAA,IAAI,EAAJA,IAAF;AAAQS,QAAAA,IAAI,EAAE;AAAd;AADW,KAAf;AAAA;AAHX,CAFK,CADF,CAAP,CAWEZ,sBAXF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Segments from 'modules/segments/containers/Filter';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as customerQueries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\ntype Props = {\n  customersCountQuery?: CountQueryResponse;\n};\n\nconst SegmentFilterContainer = (props: Props & WrapperProps) => {\n  const { customersCountQuery, type } = props;\n\n  const counts = (customersCountQuery\n    ? customersCountQuery.customerCounts\n    : null) || { bySegment: {} };\n\n  return <Segments contentType={type} counts={counts.bySegment} />;\n};\n\ntype WrapperProps = {\n  type: string;\n  loadingMainQuery: boolean;\n};\n\nexport default withProps<WrapperProps>(\n  compose(\n    graphql<WrapperProps, CountQueryResponse, { only: string }>(\n      gql(customerQueries.customerCounts),\n      {\n        name: 'customersCountQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: ({ type }) => ({\n          variables: { type, only: 'bySegment' }\n        })\n      }\n    )\n  )(SegmentFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}