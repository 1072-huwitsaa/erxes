{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/leftSidebar/FilterList.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport FilterByParams from 'modules/common/components/FilterByParams';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert } from 'modules/common/utils';\nimport { queries } from 'modules/inbox/graphql';\nimport { NoHeight } from 'modules/inbox/styles';\nimport { generateParams } from 'modules/inbox/utils';\nimport React from 'react';\n\nvar FilterList =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(FilterList, _React$PureComponent);\n\n  function FilterList(props) {\n    var _this;\n\n    _classCallCheck(this, FilterList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterList).call(this, props));\n    _this.mounted = void 0;\n    var loading = true;\n\n    if (props.fields) {\n      loading = false;\n    }\n\n    _this.mounted = false;\n    _this.state = {\n      fields: props.fields || [],\n      counts: {},\n      loading: loading\n    };\n    return _this;\n  }\n\n  _createClass(FilterList, [{\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this2 = this;\n\n      var ignoreCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$props = this.props,\n          query = _this$props.query,\n          counts = _this$props.counts,\n          queryParams = _this$props.queryParams;\n      this.mounted = true; // Fetching filter lists channels, brands, tags etc\n\n      if (query) {\n        var queryName = query.queryName,\n            dataName = query.dataName,\n            _query$variables = query.variables,\n            variables = _query$variables === void 0 ? {} : _query$variables;\n        client.query({\n          query: gql(queries[queryName]),\n          variables: variables\n        }).then(function (_ref) {\n          var data = _ref.data;\n\n          if (_this2.mounted) {\n            _this2.setState({\n              fields: data[dataName]\n            });\n          }\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      } // Fetching count query\n\n\n      client.query({\n        query: gql(queries.conversationCounts),\n        variables: _objectSpread({}, generateParams(_objectSpread({}, queryParams)), {\n          only: counts\n        }),\n        fetchPolicy: ignoreCache ? 'network-only' : 'cache-first'\n      }).then(function (_ref2) {\n        var data = _ref2.data,\n            loading = _ref2.loading;\n\n        if (_this2.mounted) {\n          _this2.setState({\n            counts: data.conversationCounts[counts],\n            loading: loading\n          });\n        }\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          queryParams = _this$props2.queryParams,\n          refetchRequired = _this$props2.refetchRequired;\n\n      if (prevProps.refetchRequired !== refetchRequired) {\n        return this.fetchData(true);\n      }\n\n      if (prevProps.queryParams === queryParams) {\n        return;\n      }\n\n      return this.fetchData(true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          paramKey = _this$props3.paramKey,\n          icon = _this$props3.icon;\n      var _this$state = this.state,\n          counts = _this$state.counts,\n          fields = _this$state.fields,\n          loading = _this$state.loading;\n\n      if (loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(NoHeight, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(FilterByParams, {\n        fields: fields,\n        paramKey: paramKey,\n        counts: counts,\n        icon: icon,\n        loading: false,\n        searchable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FilterList;\n}(React.PureComponent);\n\nexport { FilterList as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/leftSidebar/FilterList.tsx"],"names":["client","gql","FilterByParams","Spinner","Alert","queries","NoHeight","generateParams","React","FilterList","props","mounted","loading","fields","state","counts","ignoreCache","query","queryParams","queryName","dataName","variables","then","data","setState","catch","e","error","message","conversationCounts","only","fetchPolicy","fetchData","prevProps","refetchRequired","paramKey","icon","PureComponent"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport FilterByParams from 'modules/common/components/FilterByParams';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert } from 'modules/common/utils';\nimport { queries } from 'modules/inbox/graphql';\nimport { NoHeight } from 'modules/inbox/styles';\nimport { generateParams } from 'modules/inbox/utils';\nimport React from 'react';\n\ntype Props = {\n  query?: { queryName: string; dataName: string; variables?: any };\n  fields?: any[];\n  counts: string;\n  paramKey: string;\n  icon?: string;\n  queryParams?: any;\n  refetchRequired: string;\n};\n\ntype State = {\n  fields: any[];\n  counts: any;\n  loading: boolean;\n};\n\nexport default class FilterList extends React.PureComponent<Props, State> {\n  mounted: boolean;\n\n  constructor(props: Props) {\n    super(props);\n\n    let loading = true;\n\n    if (props.fields) {\n      loading = false;\n    }\n\n    this.mounted = false;\n\n    this.state = {\n      fields: props.fields || [],\n      counts: {},\n      loading\n    };\n  }\n\n  fetchData(ignoreCache = false) {\n    const { query, counts, queryParams } = this.props;\n\n    this.mounted = true;\n\n    // Fetching filter lists channels, brands, tags etc\n    if (query) {\n      const { queryName, dataName, variables = {} } = query;\n      client\n        .query({\n          query: gql(queries[queryName]),\n          variables\n        })\n        .then(({ data }: any) => {\n          if (this.mounted) {\n            this.setState({ fields: data[dataName] });\n          }\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    }\n\n    // Fetching count query\n    client\n      .query({\n        query: gql(queries.conversationCounts),\n        variables: { ...generateParams({ ...queryParams }), only: counts },\n        fetchPolicy: ignoreCache ? 'network-only' : 'cache-first'\n      })\n      .then(({ data, loading }: { data: any; loading: boolean }) => {\n        if (this.mounted) {\n          this.setState({ counts: data.conversationCounts[counts], loading });\n        }\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { queryParams, refetchRequired } = this.props;\n\n    if (prevProps.refetchRequired !== refetchRequired) {\n      return this.fetchData(true);\n    }\n\n    if (prevProps.queryParams === queryParams) {\n      return;\n    }\n\n    return this.fetchData(true);\n  }\n\n  render() {\n    const { paramKey, icon } = this.props;\n    const { counts, fields, loading } = this.state;\n\n    if (loading) {\n      return <Spinner objective={true} />;\n    }\n\n    return (\n      <NoHeight>\n        <FilterByParams\n          fields={fields}\n          paramKey={paramKey}\n          counts={counts}\n          icon={icon}\n          loading={false}\n          searchable={false}\n        />\n      </NoHeight>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}