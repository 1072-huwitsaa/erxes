{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/CompanyChooser.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport ConformityChooser from 'modules/conformity/containers/ConformityChooser';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport CompanyForm from './CompanyForm';\n\nvar CompanyChooser =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CompanyChooser, _React$Component);\n\n  function CompanyChooser(props) {\n    var _this;\n\n    _classCallCheck(this, CompanyChooser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompanyChooser).call(this, props));\n\n    _this.resetAssociatedItem = function () {\n      return _this.setState({\n        newCompany: undefined\n      });\n    };\n\n    _this.state = {\n      newCompany: undefined\n    };\n    return _this;\n  }\n\n  _createClass(CompanyChooser, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          companiesQuery = _this$props.companiesQuery,\n          search = _this$props.search;\n\n      var renderName = function renderName(company) {\n        return company.primaryName || company.website || 'Unknown';\n      };\n\n      var getAssociatedCompany = function getAssociatedCompany(newCompany) {\n        _this2.setState({\n          newCompany: newCompany\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        data: {\n          _id: data._id,\n          name: renderName(data),\n          datas: data.companies,\n          mainTypeId: data.mainTypeId,\n          mainType: data.mainType,\n          relType: 'company'\n        },\n        search: search,\n        clearState: function clearState() {\n          return search('');\n        },\n        title: 'Company',\n        renderForm: function renderForm(formProps) {\n          return React.createElement(CompanyForm, Object.assign({}, formProps, {\n            getAssociatedCompany: getAssociatedCompany,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }));\n        },\n        renderName: renderName,\n        newItem: this.state.newCompany,\n        resetAssociatedItem: this.resetAssociatedItem,\n        datas: companiesQuery.companies || [],\n        refetchQuery: queries.companies\n      });\n\n      return React.createElement(ConformityChooser, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CompanyChooser;\n}(React.Component);\n\nvar WithQuery = withProps(compose(graphql(gql(queries.companies), {\n  name: 'companiesQuery',\n  options: function options(_ref) {\n    var searchValue = _ref.searchValue,\n        perPage = _ref.perPage,\n        data = _ref.data;\n    return {\n      variables: {\n        searchValue: searchValue,\n        perPage: perPage,\n        mainType: data.mainType,\n        mainTypeId: data.mainTypeId,\n        isRelated: data.isRelated,\n        sortField: 'createdAt',\n        sortDirection: -1\n      },\n      fetchPolicy: data.isRelated ? 'network-only' : 'cache-first'\n    };\n  }\n}), // mutations\ngraphql(gql(mutations.companiesAdd), {\n  name: 'companiesAdd'\n}))(CompanyChooser));\n\nvar Wrapper =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Wrapper, _React$Component2);\n\n  function Wrapper(props) {\n    var _this3;\n\n    _classCallCheck(this, Wrapper);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Wrapper).call(this, props));\n\n    _this3.search = function (value, loadmore) {\n      var perPage = 20;\n\n      if (loadmore) {\n        perPage = _this3.state.perPage + 20;\n      }\n\n      return _this3.setState({\n        perPage: perPage,\n        searchValue: value\n      });\n    };\n\n    _this3.state = {\n      perPage: 20,\n      searchValue: ''\n    };\n    return _this3;\n  }\n\n  _createClass(Wrapper, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          perPage = _this$state.perPage;\n      return React.createElement(WithQuery, Object.assign({}, this.props, {\n        search: this.search,\n        searchValue: searchValue,\n        perPage: perPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Wrapper;\n}(React.Component);\n\nexport { Wrapper as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/CompanyChooser.tsx"],"names":["gql","compose","withProps","ConformityChooser","React","graphql","mutations","queries","CompanyForm","CompanyChooser","props","resetAssociatedItem","setState","newCompany","undefined","state","data","companiesQuery","search","renderName","company","primaryName","website","getAssociatedCompany","updatedProps","_id","name","datas","companies","mainTypeId","mainType","relType","clearState","title","renderForm","formProps","newItem","refetchQuery","Component","WithQuery","options","searchValue","perPage","variables","isRelated","sortField","sortDirection","fetchPolicy","companiesAdd","Wrapper","value","loadmore"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport ConformityChooser from 'modules/conformity/containers/ConformityChooser';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport {\n  AddMutationResponse,\n  CompaniesQueryResponse,\n  ICompany,\n  ICompanyDoc\n} from '../types';\nimport CompanyForm from './CompanyForm';\n\ntype Props = {\n  search: (value: string, loadMore?: boolean) => void;\n  perPage: number;\n  searchValue: string;\n};\n\ntype FinalProps = {\n  companiesQuery: CompaniesQueryResponse;\n} & Props &\n  AddMutationResponse;\n\nclass CompanyChooser extends React.Component<\n  WrapperProps & FinalProps,\n  { newCompany?: ICompany }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newCompany: undefined\n    };\n  }\n\n  resetAssociatedItem = () => {\n    return this.setState({ newCompany: undefined });\n  };\n\n  render() {\n    const { data, companiesQuery, search } = this.props;\n\n    const renderName = company => {\n      return company.primaryName || company.website || 'Unknown';\n    };\n\n    const getAssociatedCompany = (newCompany: ICompany) => {\n      this.setState({ newCompany });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      data: {\n        _id: data._id,\n        name: renderName(data),\n        datas: data.companies,\n        mainTypeId: data.mainTypeId,\n        mainType: data.mainType,\n        relType: 'company'\n      },\n      search,\n      clearState: () => search(''),\n      title: 'Company',\n      renderForm: formProps => (\n        <CompanyForm\n          {...formProps}\n          getAssociatedCompany={getAssociatedCompany}\n        />\n      ),\n      renderName,\n      newItem: this.state.newCompany,\n      resetAssociatedItem: this.resetAssociatedItem,\n      datas: companiesQuery.companies || [],\n      refetchQuery: queries.companies\n    };\n\n    return <ConformityChooser {...updatedProps} />;\n  }\n}\n\nconst WithQuery = withProps<Props>(\n  compose(\n    graphql<\n      Props & WrapperProps,\n      CompaniesQueryResponse,\n      { searchValue: string; perPage: number }\n    >(gql(queries.companies), {\n      name: 'companiesQuery',\n      options: ({ searchValue, perPage, data }) => {\n        return {\n          variables: {\n            searchValue,\n            perPage,\n            mainType: data.mainType,\n            mainTypeId: data.mainTypeId,\n            isRelated: data.isRelated,\n            sortField: 'createdAt',\n            sortDirection: -1\n          },\n          fetchPolicy: data.isRelated ? 'network-only' : 'cache-first'\n        };\n      }\n    }),\n    // mutations\n    graphql<{}, AddMutationResponse, ICompanyDoc>(gql(mutations.companiesAdd), {\n      name: 'companiesAdd'\n    })\n  )(CompanyChooser)\n);\n\ntype WrapperProps = {\n  data: {\n    _id?: string;\n    name: string;\n    companies: ICompany[];\n    mainTypeId?: string;\n    mainType?: string;\n    isRelated?: boolean;\n  };\n  onSelect: (datas: ICompany[]) => void;\n  closeModal: () => void;\n};\n\nexport default class Wrapper extends React.Component<\n  WrapperProps,\n  {\n    perPage: number;\n    searchValue: string;\n  }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = { perPage: 20, searchValue: '' };\n  }\n\n  search = (value, loadmore) => {\n    let perPage = 20;\n\n    if (loadmore) {\n      perPage = this.state.perPage + 20;\n    }\n\n    return this.setState({ perPage, searchValue: value });\n  };\n\n  render() {\n    const { searchValue, perPage } = this.state;\n\n    return (\n      <WithQuery\n        {...this.props}\n        search={this.search}\n        searchValue={searchValue}\n        perPage={perPage}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}