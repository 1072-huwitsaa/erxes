{"ast":null,"code":"import { graphql } from 'react-apollo';\n\nvar ChipText = function ChipText(props) {\n  var query = props.query;\n\n  if (query.loading) {\n    return '-';\n  }\n\n  var brand = query.brandDetail;\n  var channel = query.channelDetail;\n  var tag = query.tagDetail;\n  var segment = query.segmentDetail;\n  var form = query.formDetail;\n  return brand && brand.name || channel && channel.name || tag && tag.name || segment && segment.name || form && form.title;\n};\n\nvar createChipText = function createChipText(query, id) {\n  return graphql(query, {\n    name: 'query',\n    options: function options() {\n      return {\n        variables: {\n          id: id\n        }\n      };\n    }\n  })(ChipText);\n};\n\nexport default createChipText;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/filter/createChipText.tsx"],"names":["graphql","ChipText","props","query","loading","brand","brandDetail","channel","channelDetail","tag","tagDetail","segment","segmentDetail","form","formDetail","name","title","createChipText","id","options","variables"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAgB;AAAA,MACvBC,KADuB,GACbD,KADa,CACvBC,KADuB;;AAG/B,MAAIA,KAAK,CAACC,OAAV,EAAmB;AACjB,WAAO,GAAP;AACD;;AAED,MAAMC,KAAK,GAAGF,KAAK,CAACG,WAApB;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,aAAtB;AACA,MAAMC,GAAG,GAAGN,KAAK,CAACO,SAAlB;AACA,MAAMC,OAAO,GAAGR,KAAK,CAACS,aAAtB;AACA,MAAMC,IAAI,GAAGV,KAAK,CAACW,UAAnB;AAEA,SACGT,KAAK,IAAIA,KAAK,CAACU,IAAhB,IACCR,OAAO,IAAIA,OAAO,CAACQ,IADpB,IAECN,GAAG,IAAIA,GAAG,CAACM,IAFZ,IAGCJ,OAAO,IAAIA,OAAO,CAACI,IAHpB,IAICF,IAAI,IAAIA,IAAI,CAACG,KALhB;AAOD,CApBD;;AAsBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACd,KAAD,EAAQe,EAAR,EAAe;AACpC,SAAOlB,OAAO,CAACG,KAAD,EAAQ;AACpBY,IAAAA,IAAI,EAAE,OADc;AAEpBI,IAAAA,OAAO,EAAE,mBAAM;AACb,aAAO;AACLC,QAAAA,SAAS,EAAE;AACTF,UAAAA,EAAE,EAAFA;AADS;AADN,OAAP;AAKD;AARmB,GAAR,CAAP,CASJjB,QATI,CAAP;AAUD,CAXD;;AAaA,eAAegB,cAAf","sourcesContent":["import { graphql } from 'react-apollo';\n\nconst ChipText = (props: any) => {\n  const { query } = props;\n\n  if (query.loading) {\n    return '-';\n  }\n\n  const brand = query.brandDetail;\n  const channel = query.channelDetail;\n  const tag = query.tagDetail;\n  const segment = query.segmentDetail;\n  const form = query.formDetail;\n\n  return (\n    (brand && brand.name) ||\n    (channel && channel.name) ||\n    (tag && tag.name) ||\n    (segment && segment.name) ||\n    (form && form.title)\n  );\n};\n\nconst createChipText = (query, id) => {\n  return graphql(query, {\n    name: 'query',\n    options: () => {\n      return {\n        variables: {\n          id\n        }\n      };\n    }\n  })(ChipText);\n};\n\nexport default createChipText;\n"]},"metadata":{},"sourceType":"module"}