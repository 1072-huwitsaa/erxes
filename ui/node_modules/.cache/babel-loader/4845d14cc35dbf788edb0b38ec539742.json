{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/components/list/CompanyForm.tsx\";\nimport Button from 'erxes-common-ui/lib/components/button';\nimport AutoCompletionSelect from 'modules/common/components/AutoCompletionSelect';\nimport AvatarUpload from 'modules/common/components/AvatarUpload';\nimport CollapseContent from 'modules/common/components/CollapseContent';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { FormColumn, FormWrapper, ModalFooter, ScrollWrapper } from 'modules/common/styles/main';\nimport { __, getConstantFromStore } from 'modules/common/utils';\nimport SelectCompanies from 'modules/companies/containers/SelectCompanies';\nimport { isValidPhone } from 'modules/customers/utils';\nimport SelectTeamMembers from 'modules/settings/team/containers/SelectTeamMembers';\nimport React from 'react';\nimport Select from 'react-select-plus';\nimport validator from 'validator';\nimport { COMPANY_BUSINESS_TYPES, COMPANY_INDUSTRY_TYPES } from '../../constants';\n\nvar CompanyForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CompanyForm, _React$Component);\n\n  function CompanyForm(_props) {\n    var _this;\n\n    _classCallCheck(this, CompanyForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompanyForm).call(this, _props));\n\n    _this.generateDoc = function (values) {\n      var company = _this.props.company;\n      var finalValues = values;\n\n      if (company) {\n        finalValues._id = company._id;\n      }\n\n      var links = {};\n      getConstantFromStore('social_links').forEach(function (link) {\n        links[link.value] = finalValues[link.value];\n      });\n      return _objectSpread({\n        _id: finalValues._id\n      }, _this.state, {\n        size: Number(finalValues.size),\n        description: finalValues.description,\n        code: finalValues.code,\n        links: links\n      });\n    };\n\n    _this.onAvatarUpload = function (url) {\n      _this.setState({\n        avatar: url\n      });\n    };\n\n    _this.handleSelect = function (selectedOption, name) {\n      _this.setState(_defineProperty({}, name, selectedOption));\n    };\n\n    _this.renderFormGroup = function (label, props) {\n      return React.createElement(FormGroup, {\n        key: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, label), React.createElement(FormControl, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })));\n    };\n\n    _this.onIndustryChange = function (option) {\n      _this.setState({\n        industry: option.value\n      });\n    };\n\n    _this.onBusinessChange = function (option) {\n      _this.setState({\n        businessType: option.value\n      });\n    };\n\n    _this.onChange = function (optionsName, optionName, _ref) {\n      var _this$setState2;\n\n      var options = _ref.options,\n          selectedOption = _ref.selectedOption;\n\n      _this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, optionsName, options), _defineProperty(_this$setState2, optionName, selectedOption), _this$setState2));\n    };\n\n    _this.renderContent = function (formProps) {\n      var company = _this.props.company || {};\n      var _this$props = _this.props,\n          closeModal = _this$props.closeModal,\n          renderButton = _this$props.renderButton,\n          autoCompletionQuery = _this$props.autoCompletionQuery;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      var primaryName = company.primaryName,\n          names = company.names,\n          primaryPhone = company.primaryPhone,\n          phones = company.phones,\n          primaryEmail = company.primaryEmail,\n          emails = company.emails;\n      var _this$state = _this.state,\n          parentCompanyId = _this$state.parentCompanyId,\n          ownerId = _this$state.ownerId;\n\n      var onSelectOwner = function onSelectOwner(value) {\n        return _this.handleSelect(value, 'ownerId');\n      };\n\n      var onSelectParentCompany = function onSelectParentCompany(value) {\n        return _this.handleSelect(value, 'parentCompanyId');\n      };\n\n      return React.createElement(React.Fragment, null, React.createElement(ScrollWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(CollapseContent, {\n        title: __('General information'),\n        compact: true,\n        open: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(FormWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(FormColumn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(AvatarUpload, {\n        avatar: company.avatar,\n        onAvatarUpload: _this.onAvatarUpload,\n        defaultAvatar: \"/images/integrations/company.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), React.createElement(FormColumn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, _this.renderFormGroup('Code', _objectSpread({}, formProps, {\n        name: 'code',\n        defaultValue: company.code || ''\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(SelectTeamMembers, {\n        label: \"Choose an owner\",\n        name: \"ownerId\",\n        value: ownerId,\n        onSelect: onSelectOwner,\n        multi: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      })))), React.createElement(FormWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(FormColumn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Name\"), React.createElement(AutoCompletionSelect, {\n        required: true,\n        defaultValue: primaryName,\n        defaultOptions: names || [],\n        autoCompletionType: \"names\",\n        placeholder: \"Enter company name\",\n        queryName: \"companies\",\n        query: autoCompletionQuery,\n        onChange: _this.onChange.bind(_assertThisInitialized(_this), 'names', 'primaryName'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Industry\"), React.createElement(Select, {\n        value: _this.state.industry,\n        onChange: _this.onIndustryChange,\n        options: _this.generateConstantParams(COMPANY_INDUSTRY_TYPES()),\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"Email\"), React.createElement(AutoCompletionSelect, {\n        defaultValue: primaryEmail,\n        defaultOptions: emails || [],\n        autoCompletionType: \"emails\",\n        placeholder: \"Enter company email\",\n        queryName: \"companies\",\n        query: autoCompletionQuery,\n        onChange: _this.onChange.bind(_assertThisInitialized(_this), 'emails', 'primaryEmail'),\n        checkFormat: validator.isEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"Description\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        max: 140,\n        name: \"description\",\n        componentClass: \"textarea\",\n        defaultValue: company.description || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      })))), React.createElement(FormColumn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"Parent Company\"), React.createElement(SelectCompanies, {\n        label: \"Choose parent company\",\n        name: \"parentCompanyId\",\n        value: parentCompanyId,\n        onSelect: onSelectParentCompany,\n        multi: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"Business Type\"), React.createElement(Select, {\n        value: _this.state.businessType,\n        onChange: _this.onBusinessChange,\n        options: _this.generateConstantParams(COMPANY_BUSINESS_TYPES),\n        placeholder: __('Select'),\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, \"Phone\"), React.createElement(AutoCompletionSelect, {\n        defaultValue: primaryPhone,\n        defaultOptions: phones || [],\n        autoCompletionType: \"phones\",\n        placeholder: \"Enter company phone\",\n        queryName: \"companies\",\n        query: autoCompletionQuery,\n        onChange: _this.onChange.bind(_assertThisInitialized(_this), 'phones', 'primaryPhone'),\n        checkFormat: isValidPhone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      })), _this.renderFormGroup('Size', _objectSpread({}, formProps, {\n        name: 'size',\n        type: 'number',\n        defaultValue: company.size || 0\n      })), _this.renderFormGroup('Do not disturb', {\n        componentClass: 'radio',\n        options: [{\n          childNode: 'Yes',\n          value: 'Yes',\n          checked: _this.state.doNotDisturb === 'Yes',\n          onChange: function onChange(e) {\n            return _this.setState({\n              doNotDisturb: e.target.value\n            });\n          }\n        }, {\n          childNode: 'No',\n          value: 'No',\n          checked: _this.state.doNotDisturb === 'No',\n          onChange: function onChange(e) {\n            return _this.setState({\n              doNotDisturb: e.target.value\n            });\n          }\n        }]\n      })))), React.createElement(CollapseContent, {\n        title: __('Links'),\n        compact: true,\n        open: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(FormWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(FormColumn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, getConstantFromStore('social_links').map(function (link) {\n        return _this.renderLink(formProps, link);\n      }))))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        onClick: closeModal,\n        icon: \"cancel-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"Close\"), renderButton({\n        name: 'company',\n        values: _this.generateDoc(values),\n        isSubmitted: isSubmitted,\n        object: _this.props.company\n      })));\n    };\n\n    var _props$company = _props.company,\n        _company = _props$company === void 0 ? {} : _props$company;\n\n    var companies = [];\n    var userId = _props.currentUser ? _props.currentUser._id : '';\n\n    if (_company.parentCompany) {\n      companies.push(_company.parentCompany);\n    }\n\n    _this.state = {\n      parentCompanyId: _company.parentCompanyId || '',\n      ownerId: _company.ownerId || userId,\n      companies: companies,\n      doNotDisturb: _company.doNotDisturb || 'No',\n      users: [],\n      avatar: _company.avatar,\n      industry: _company.industry || '',\n      businessType: _company.businessType || ''\n    };\n    return _this;\n  }\n\n  _createClass(CompanyForm, [{\n    key: \"generateConstantParams\",\n    value: function generateConstantParams(constants) {\n      return constants.map(function (constant) {\n        return {\n          value: constant,\n          label: constant\n        };\n      });\n    }\n  }, {\n    key: \"renderLink\",\n    value: function renderLink(formProps, link) {\n      var company = this.props.company;\n      var links = (company ? company.links : {}) || {};\n      return this.renderFormGroup(link.label, _objectSpread({}, formProps, {\n        name: link.value,\n        defaultValue: links[link.value] || '',\n        type: 'url'\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CompanyForm;\n}(React.Component);\n\nexport default CompanyForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/components/list/CompanyForm.tsx"],"names":["Button","AutoCompletionSelect","AvatarUpload","CollapseContent","FormControl","Form","FormGroup","ControlLabel","FormColumn","FormWrapper","ModalFooter","ScrollWrapper","__","getConstantFromStore","SelectCompanies","isValidPhone","SelectTeamMembers","React","Select","validator","COMPANY_BUSINESS_TYPES","COMPANY_INDUSTRY_TYPES","CompanyForm","props","generateDoc","values","company","finalValues","_id","links","forEach","link","value","state","size","Number","description","code","onAvatarUpload","url","setState","avatar","handleSelect","selectedOption","name","renderFormGroup","label","onIndustryChange","option","industry","onBusinessChange","businessType","onChange","optionsName","optionName","options","renderContent","formProps","closeModal","renderButton","autoCompletionQuery","isSubmitted","primaryName","names","primaryPhone","phones","primaryEmail","emails","parentCompanyId","ownerId","onSelectOwner","onSelectParentCompany","defaultValue","bind","generateConstantParams","isEmail","type","componentClass","childNode","checked","doNotDisturb","e","target","map","renderLink","object","companies","userId","currentUser","parentCompany","push","users","constants","constant","Component"],"mappings":"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","sourcesContent":["import Button from 'erxes-common-ui/lib/components/button';\nimport AutoCompletionSelect from 'modules/common/components/AutoCompletionSelect';\nimport AvatarUpload from 'modules/common/components/AvatarUpload';\nimport CollapseContent from 'modules/common/components/CollapseContent';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport {\n  FormColumn,\n  FormWrapper,\n  ModalFooter,\n  ScrollWrapper\n} from 'modules/common/styles/main';\nimport { IButtonMutateProps, IFormProps } from 'modules/common/types';\nimport { __, getConstantFromStore } from 'modules/common/utils';\nimport SelectCompanies from 'modules/companies/containers/SelectCompanies';\nimport { isValidPhone } from 'modules/customers/utils';\nimport SelectTeamMembers from 'modules/settings/team/containers/SelectTeamMembers';\nimport React from 'react';\nimport Select from 'react-select-plus';\nimport validator from 'validator';\nimport { IUser } from '../../../auth/types';\nimport {\n  COMPANY_BUSINESS_TYPES,\n  COMPANY_INDUSTRY_TYPES\n} from '../../constants';\nimport { ICompany, ICompanyDoc, ICompanyLinks } from '../../types';\n\ntype Props = {\n  currentUser: IUser;\n  autoCompletionQuery: string;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  company: ICompany;\n  closeModal: () => void;\n};\n\ntype State = {\n  parentCompanyId?: string;\n  ownerId?: string;\n  companies?: ICompany[];\n  doNotDisturb?: string;\n  users?: IUser[];\n  avatar?: string;\n\n  names?: string[];\n  emails?: string[];\n  phones?: string[];\n  primaryName?: string;\n  primaryEmail?: string;\n  primaryPhone?: string;\n  industry?: string;\n  businessType?: string;\n};\n\nclass CompanyForm extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    const { company = {} } = props;\n    const companies: ICompany[] = [];\n    const userId = props.currentUser ? props.currentUser._id : '';\n\n    if (company.parentCompany) {\n      companies.push(company.parentCompany);\n    }\n\n    this.state = {\n      parentCompanyId: company.parentCompanyId || '',\n      ownerId: company.ownerId || userId,\n      companies,\n      doNotDisturb: company.doNotDisturb || 'No',\n      users: [],\n      avatar: company.avatar,\n      industry: company.industry || '',\n      businessType: company.businessType || ''\n    };\n  }\n\n  generateDoc = (\n    values: { _id: string; size?: number } & ICompanyDoc & ICompanyLinks\n  ) => {\n    const { company } = this.props;\n\n    const finalValues = values;\n\n    if (company) {\n      finalValues._id = company._id;\n    }\n\n    const links = {};\n\n    getConstantFromStore('social_links').forEach(link => {\n      links[link.value] = finalValues[link.value];\n    });\n\n    return {\n      _id: finalValues._id,\n      ...this.state,\n      size: Number(finalValues.size),\n      description: finalValues.description,\n      code: finalValues.code,\n      links\n    };\n  };\n\n  onAvatarUpload = (url: string) => {\n    this.setState({ avatar: url });\n  };\n\n  generateConstantParams(constants) {\n    return constants.map(constant => ({\n      value: constant,\n      label: constant\n    }));\n  }\n\n  handleSelect = <T extends keyof State>(selectedOption: string, name: T) => {\n    this.setState({\n      [name]: selectedOption\n    } as Pick<State, keyof State>);\n  };\n\n  renderFormGroup = (label, props) => {\n    return (\n      <FormGroup key={label}>\n        <ControlLabel>{label}</ControlLabel>\n        <FormControl {...props} />\n      </FormGroup>\n    );\n  };\n\n  onIndustryChange = option => {\n    this.setState({ industry: option.value });\n  };\n\n  onBusinessChange = option => {\n    this.setState({ businessType: option.value });\n  };\n\n  onChange = (\n    optionsName: string,\n    optionName: string,\n    { options, selectedOption }: { options: string[]; selectedOption: string }\n  ) => {\n    this.setState({ [optionsName]: options, [optionName]: selectedOption });\n  };\n\n  renderLink(formProps, link) {\n    const { company } = this.props;\n    const links = (company ? company.links : {}) || {};\n\n    return this.renderFormGroup(link.label, {\n      ...formProps,\n      name: link.value,\n      defaultValue: links[link.value] || '',\n      type: 'url'\n    });\n  }\n\n  renderContent = (formProps: IFormProps) => {\n    const company = this.props.company || ({} as ICompany);\n    const { closeModal, renderButton, autoCompletionQuery } = this.props;\n    const { values, isSubmitted } = formProps;\n\n    const {\n      primaryName,\n      names,\n      primaryPhone,\n      phones,\n      primaryEmail,\n      emails\n    } = company;\n\n    const { parentCompanyId, ownerId } = this.state;\n\n    const onSelectOwner = value => {\n      return this.handleSelect(value, 'ownerId');\n    };\n\n    const onSelectParentCompany = value => {\n      return this.handleSelect(value, 'parentCompanyId');\n    };\n\n    return (\n      <>\n        <ScrollWrapper>\n          <CollapseContent\n            title={__('General information')}\n            compact={true}\n            open={true}\n          >\n            <FormWrapper>\n              <FormColumn>\n                <AvatarUpload\n                  avatar={company.avatar}\n                  onAvatarUpload={this.onAvatarUpload}\n                  defaultAvatar=\"/images/integrations/company.png\"\n                />\n              </FormColumn>\n\n              <FormColumn>\n                {this.renderFormGroup('Code', {\n                  ...formProps,\n                  name: 'code',\n                  defaultValue: company.code || ''\n                })}\n\n                <FormGroup>\n                  <ControlLabel>Owner</ControlLabel>\n                  <SelectTeamMembers\n                    label=\"Choose an owner\"\n                    name=\"ownerId\"\n                    value={ownerId}\n                    onSelect={onSelectOwner}\n                    multi={false}\n                  />\n                </FormGroup>\n              </FormColumn>\n            </FormWrapper>\n            <FormWrapper>\n              <FormColumn>\n                <FormGroup>\n                  <ControlLabel required={true}>Name</ControlLabel>\n                  <AutoCompletionSelect\n                    required={true}\n                    defaultValue={primaryName}\n                    defaultOptions={names || []}\n                    autoCompletionType=\"names\"\n                    placeholder=\"Enter company name\"\n                    queryName=\"companies\"\n                    query={autoCompletionQuery}\n                    onChange={this.onChange.bind(this, 'names', 'primaryName')}\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <ControlLabel>Industry</ControlLabel>\n                  <Select\n                    value={this.state.industry}\n                    onChange={this.onIndustryChange}\n                    options={this.generateConstantParams(\n                      COMPANY_INDUSTRY_TYPES()\n                    )}\n                    clearable={false}\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <ControlLabel>Email</ControlLabel>\n                  <AutoCompletionSelect\n                    defaultValue={primaryEmail}\n                    defaultOptions={emails || []}\n                    autoCompletionType=\"emails\"\n                    placeholder=\"Enter company email\"\n                    queryName=\"companies\"\n                    query={autoCompletionQuery}\n                    onChange={this.onChange.bind(\n                      this,\n                      'emails',\n                      'primaryEmail'\n                    )}\n                    checkFormat={validator.isEmail}\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <ControlLabel>Description</ControlLabel>\n                  <FormControl\n                    {...formProps}\n                    max={140}\n                    name=\"description\"\n                    componentClass=\"textarea\"\n                    defaultValue={company.description || ''}\n                  />\n                </FormGroup>\n              </FormColumn>\n              <FormColumn>\n                <FormGroup>\n                  <ControlLabel>Parent Company</ControlLabel>\n                  <SelectCompanies\n                    label=\"Choose parent company\"\n                    name=\"parentCompanyId\"\n                    value={parentCompanyId}\n                    onSelect={onSelectParentCompany}\n                    multi={false}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <ControlLabel>Business Type</ControlLabel>\n                  <Select\n                    value={this.state.businessType}\n                    onChange={this.onBusinessChange}\n                    options={this.generateConstantParams(\n                      COMPANY_BUSINESS_TYPES\n                    )}\n                    placeholder={__('Select')}\n                    clearable={false}\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <ControlLabel>Phone</ControlLabel>\n                  <AutoCompletionSelect\n                    defaultValue={primaryPhone}\n                    defaultOptions={phones || []}\n                    autoCompletionType=\"phones\"\n                    placeholder=\"Enter company phone\"\n                    queryName=\"companies\"\n                    query={autoCompletionQuery}\n                    onChange={this.onChange.bind(\n                      this,\n                      'phones',\n                      'primaryPhone'\n                    )}\n                    checkFormat={isValidPhone}\n                  />\n                </FormGroup>\n\n                {this.renderFormGroup('Size', {\n                  ...formProps,\n                  name: 'size',\n                  type: 'number',\n                  defaultValue: company.size || 0\n                })}\n\n                {this.renderFormGroup('Do not disturb', {\n                  componentClass: 'radio',\n                  options: [\n                    {\n                      childNode: 'Yes',\n                      value: 'Yes',\n                      checked: this.state.doNotDisturb === 'Yes',\n                      onChange: e =>\n                        this.setState({ doNotDisturb: e.target.value })\n                    },\n                    {\n                      childNode: 'No',\n                      value: 'No',\n                      checked: this.state.doNotDisturb === 'No',\n                      onChange: e =>\n                        this.setState({ doNotDisturb: e.target.value })\n                    }\n                  ]\n                })}\n              </FormColumn>\n            </FormWrapper>\n          </CollapseContent>\n          <CollapseContent title={__('Links')} compact={true} open={true}>\n            <FormWrapper>\n              <FormColumn>\n                {getConstantFromStore('social_links').map(link =>\n                  this.renderLink(formProps, link)\n                )}\n              </FormColumn>\n            </FormWrapper>\n          </CollapseContent>\n        </ScrollWrapper>\n\n        <ModalFooter>\n          <Button btnStyle=\"simple\" onClick={closeModal} icon=\"cancel-1\">\n            Close\n          </Button>\n\n          {renderButton({\n            name: 'company',\n            values: this.generateDoc(values),\n            isSubmitted,\n            object: this.props.company\n          })}\n        </ModalFooter>\n      </>\n    );\n  };\n\n  render() {\n    return <Form renderContent={this.renderContent} />;\n  }\n}\n\nexport default CompanyForm;\n"]},"metadata":{},"sourceType":"module"}