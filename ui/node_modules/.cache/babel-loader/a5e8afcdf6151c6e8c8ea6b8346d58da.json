{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/ChooseBrand.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ChooseBrand from '../components/ChooseBrand';\nimport { mutations, queries } from '../graphql';\n\nvar ChooseBrandContainer = function ChooseBrandContainer(props) {\n  var brandsQuery = props.brandsQuery,\n      integration = props.integration,\n      addMutation = props.addMutation,\n      editMutation = props.editMutation,\n      onSave = props.onSave,\n      refetch = props.refetch;\n\n  if (brandsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n  var save = function save(variables) {\n    var mutation = addMutation;\n\n    if (integration && integration._id) {\n      mutation = editMutation;\n      variables._id = integration._id;\n    }\n\n    mutation({\n      variables: variables\n    }).then(function () {\n      if (refetch) {\n        refetch();\n      }\n\n      if (onSave) {\n        onSave();\n      }\n\n      Alert.success('You successfully chose a new brand');\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    save: save,\n    brands: brandsQuery.brands || []\n  });\n\n  return React.createElement(ChooseBrand, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.integrationsCreateMessenger), {\n  name: 'addMutation'\n}), graphql(gql(mutations.integrationsEditMessenger), {\n  name: 'editMutation'\n}))(ChooseBrandContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/ChooseBrand.tsx"],"names":["gql","compose","Spinner","Alert","withProps","React","graphql","ChooseBrand","mutations","queries","ChooseBrandContainer","props","brandsQuery","integration","addMutation","editMutation","onSave","refetch","loading","save","variables","mutation","_id","then","success","catch","error","message","updatedProps","brands","name","options","fetchPolicy","integrationsCreateMessenger","integrationsEditMessenger"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;AAqBA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAuB;AAAA,MAEhDC,WAFgD,GAQ9CD,KAR8C,CAEhDC,WAFgD;AAAA,MAGhDC,WAHgD,GAQ9CF,KAR8C,CAGhDE,WAHgD;AAAA,MAIhDC,WAJgD,GAQ9CH,KAR8C,CAIhDG,WAJgD;AAAA,MAKhDC,YALgD,GAQ9CJ,KAR8C,CAKhDI,YALgD;AAAA,MAMhDC,MANgD,GAQ9CL,KAR8C,CAMhDK,MANgD;AAAA,MAOhDC,OAPgD,GAQ9CN,KAR8C,CAOhDM,OAPgD;;AAUlD,MAAIL,WAAW,CAACM,OAAhB,EAAyB;AACvB,WAAO,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,SAAD,EAA6B;AACxC,QAAIC,QAAQ,GAAGP,WAAf;;AAEA,QAAID,WAAW,IAAIA,WAAW,CAACS,GAA/B,EAAoC;AAClCD,MAAAA,QAAQ,GAAGN,YAAX;AACAK,MAAAA,SAAS,CAACE,GAAV,GAAgBT,WAAW,CAACS,GAA5B;AACD;;AAEDD,IAAAA,QAAQ,CAAC;AACPD,MAAAA,SAAS,EAATA;AADO,KAAD,CAAR,CAGGG,IAHH,CAGQ,YAAM;AACV,UAAIN,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;;AAED,UAAID,MAAJ,EAAY;AACVA,QAAAA,MAAM;AACP;;AAEDb,MAAAA,KAAK,CAACqB,OAAN,CAAc,oCAAd;AACD,KAbH,EAcGC,KAdH,CAcS,UAAAC,KAAK,EAAI;AACdvB,MAAAA,KAAK,CAACuB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,KAhBH;AAiBD,GAzBD;;AA2BA,MAAMC,YAAY,qBACbjB,KADa;AAEhBQ,IAAAA,IAAI,EAAJA,IAFgB;AAGhBU,IAAAA,MAAM,EAAEjB,WAAW,CAACiB,MAAZ,IAAsB;AAHd,IAAlB;;AAMA,SAAO,oBAAC,WAAD,oBAAiBD,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAhDD;;AAkDA,eAAexB,SAAS,CACtBH,OAAO,CACLK,OAAO,CAAiCN,GAAG,CAACS,OAAO,CAACoB,MAAT,CAApC,EAAsD;AAC3DC,EAAAA,IAAI,EAAE,aADqD;AAE3DC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,WAAW,EAAE;AADC,KAAP;AAAA;AAFkD,CAAtD,CADF,EAOL1B,OAAO,CACLN,GAAG,CAACQ,SAAS,CAACyB,2BAAX,CADE,EAEL;AACEH,EAAAA,IAAI,EAAE;AADR,CAFK,CAPF,EAaLxB,OAAO,CACLN,GAAG,CAACQ,SAAS,CAAC0B,yBAAX,CADE,EAEL;AACEJ,EAAAA,IAAI,EAAE;AADR,CAFK,CAbF,CAAP,CAmBEpB,oBAnBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport {\n  AddIntegrationMutationResponse,\n  EditIntegrationMutationResponse,\n  IIntegration\n} from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ChooseBrand from '../components/ChooseBrand';\nimport { mutations, queries } from '../graphql';\nimport { BrandsQueryResponse, IChooseBrand } from '../types';\n\ntype Variables = {\n  name: string;\n  brandId: string;\n};\n\ntype Props = {\n  integration: IIntegration;\n  onSave: () => void;\n  refetch: () => void;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n\n  addMutation: (params: { variables: Variables }) => Promise<any>;\n  editMutation: (params: { variables: Variables }) => Promise<any>;\n} & Props;\n\nconst ChooseBrandContainer = (props: FinalProps) => {\n  const {\n    brandsQuery,\n    integration,\n    addMutation,\n    editMutation,\n    onSave,\n    refetch\n  } = props;\n\n  if (brandsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const save = (variables: IChooseBrand) => {\n    let mutation = addMutation;\n\n    if (integration && integration._id) {\n      mutation = editMutation;\n      variables._id = integration._id;\n    }\n\n    mutation({\n      variables\n    })\n      .then(() => {\n        if (refetch) {\n          refetch();\n        }\n\n        if (onSave) {\n          onSave();\n        }\n\n        Alert.success('You successfully chose a new brand');\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    save,\n    brands: brandsQuery.brands || []\n  };\n\n  return <ChooseBrand {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse, {}>(gql(queries.brands), {\n      name: 'brandsQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, AddIntegrationMutationResponse, IIntegration>(\n      gql(mutations.integrationsCreateMessenger),\n      {\n        name: 'addMutation'\n      }\n    ),\n    graphql<Props, EditIntegrationMutationResponse, IIntegration>(\n      gql(mutations.integrationsEditMessenger),\n      {\n        name: 'editMutation'\n      }\n    )\n  )(ChooseBrandContainer)\n);\n"]},"metadata":{},"sourceType":"module"}