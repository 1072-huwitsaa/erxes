{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/VolumeAndResponseReport.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ResponseReport from '../components/ResponseReport';\nimport VolumeReport from '../components/VolumeReport';\nimport { queries } from '../graphql';\n\nvar VolumenAndResponseReportContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VolumenAndResponseReportContainer, _React$Component);\n\n  function VolumenAndResponseReportContainer(props) {\n    var _this;\n\n    _classCallCheck(this, VolumenAndResponseReportContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VolumenAndResponseReportContainer).call(this, props));\n\n    _this.load = function (queryName, graphqQueryName, skip) {\n      var _this$props = _this.props,\n          queryParams = _this$props.queryParams,\n          type = _this$props.type;\n\n      if (skip) {\n        return;\n      } // loading true\n\n\n      var loading = _this.state.loading;\n      loading[queryName] = true;\n\n      _this.setState({\n        loading: loading\n      });\n\n      client.query({\n        query: gql(queries[queryName]),\n        variables: {\n          type: type,\n          brandIds: queryParams.brandIds,\n          integrationIds: queryParams.integrationIds,\n          startDate: queryParams.startDate,\n          endDate: queryParams.endDate\n        }\n      }).then(function (_ref) {\n        var data = _ref.data;\n        loading = _this.state.loading;\n        loading[queryName] = false; // loading false && setting data\n\n        _this.setState(_defineProperty({\n          loading: loading\n        }, queryName, data[graphqQueryName] || []));\n\n        if (queryName === 'summaryData') {\n          _this.load('trend', 'insightsTrend', false);\n        }\n\n        if (queryName === 'trend') {\n          _this.load('punchCard', 'insightsPunchCard', false);\n        }\n\n        if (queryName === 'punchCard') {\n          _this.load('integrationChart', 'insightsIntegrations', type === 'response');\n        }\n\n        if (queryName === 'integrationChart') {\n          _this.load('tagChart', 'insightsTags', type === 'response');\n        }\n      });\n    };\n\n    _this.state = {\n      summaryData: [],\n      trend: [],\n      punchCard: [],\n      integrationChart: [],\n      tagChart: [],\n      loading: {\n        summaryData: false,\n        trend: false,\n        punchCard: false,\n        integrationChart: false,\n        tagChart: false\n      }\n    };\n    return _this;\n  }\n\n  _createClass(VolumenAndResponseReportContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.load('summaryData', 'insightsSummaryData', false);\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps) {\n      if (JSON.stringify(this.props.queryParams) !== JSON.stringify(nextProps.queryParams)) {\n        this.load('summaryData', 'insightsSummaryData', false);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          type = _this$props2.type,\n          brandsQuery = _this$props2.brandsQuery,\n          history = _this$props2.history,\n          queryParams = _this$props2.queryParams;\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          summaryData = _this$state.summaryData,\n          trend = _this$state.trend,\n          punchCard = _this$state.punchCard,\n          integrationChart = _this$state.integrationChart,\n          tagChart = _this$state.tagChart;\n      var extendedProps = {\n        history: history,\n        queryParams: queryParams,\n        brands: brandsQuery.brands || [],\n        summaryData: summaryData,\n        trend: trend,\n        punchCard: punchCard,\n        integrationChart: integrationChart,\n        tagChart: tagChart,\n        loading: loading\n      };\n\n      if (type === 'volume') {\n        var volumeProps = _objectSpread({}, extendedProps, {\n          integrationChart: integrationChart,\n          tagChart: tagChart\n        });\n\n        return React.createElement(VolumeReport, Object.assign({}, volumeProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(ResponseReport, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VolumenAndResponseReportContainer;\n}(React.Component);\n\nexport default compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}))(VolumenAndResponseReportContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/VolumeAndResponseReport.tsx"],"names":["client","gql","compose","React","graphql","ResponseReport","VolumeReport","queries","VolumenAndResponseReportContainer","props","load","queryName","graphqQueryName","skip","queryParams","type","loading","state","setState","query","variables","brandIds","integrationIds","startDate","endDate","then","data","summaryData","trend","punchCard","integrationChart","tagChart","nextProps","JSON","stringify","brandsQuery","history","extendedProps","brands","volumeProps","Component","name"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport ResponseReport from '../components/ResponseReport';\nimport VolumeReport from '../components/VolumeReport';\nimport { queries } from '../graphql';\nimport {\n  IChartParams,\n  IPieChartData,\n  IPunchCardData,\n  IQueryParams,\n  SummaryData\n} from '../types';\n\ntype Props = {\n  history: any;\n  type: string;\n  queryParams: IQueryParams;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n} & Props;\n\ntype State = {\n  summaryData: SummaryData[];\n  trend: IChartParams[];\n  punchCard: IPunchCardData[];\n  integrationChart: IPieChartData[];\n  tagChart: IPieChartData[];\n  loading: {\n    punchCard: boolean;\n    summaryData: boolean;\n    trend: boolean;\n    integrationChart: boolean;\n    tagChart: boolean;\n  };\n};\n\nclass VolumenAndResponseReportContainer extends React.Component<\n  FinalProps,\n  State\n> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = {\n      summaryData: [],\n      trend: [],\n      punchCard: [],\n      integrationChart: [],\n      tagChart: [],\n\n      loading: {\n        summaryData: false,\n        trend: false,\n        punchCard: false,\n        integrationChart: false,\n        tagChart: false\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.load('summaryData', 'insightsSummaryData', false);\n  }\n\n  componentWillUpdate(nextProps) {\n    if (\n      JSON.stringify(this.props.queryParams) !==\n      JSON.stringify(nextProps.queryParams)\n    ) {\n      this.load('summaryData', 'insightsSummaryData', false);\n    }\n  }\n\n  load = (queryName: string, graphqQueryName: string, skip: boolean) => {\n    const { queryParams, type } = this.props;\n\n    if (skip) {\n      return;\n    }\n\n    // loading true\n    let loading = this.state.loading;\n    loading[queryName] = true;\n    this.setState({ loading });\n\n    client\n      .query({\n        query: gql(queries[queryName]),\n        variables: {\n          type,\n          brandIds: queryParams.brandIds,\n          integrationIds: queryParams.integrationIds,\n          startDate: queryParams.startDate,\n          endDate: queryParams.endDate\n        }\n      })\n      .then(({ data }: any) => {\n        loading = this.state.loading;\n        loading[queryName] = false;\n\n        // loading false && setting data\n        this.setState({\n          loading,\n          [queryName]: data[graphqQueryName] || []\n        } as any);\n\n        if (queryName === 'summaryData') {\n          this.load('trend', 'insightsTrend', false);\n        }\n\n        if (queryName === 'trend') {\n          this.load('punchCard', 'insightsPunchCard', false);\n        }\n\n        if (queryName === 'punchCard') {\n          this.load(\n            'integrationChart',\n            'insightsIntegrations',\n            type === 'response'\n          );\n        }\n\n        if (queryName === 'integrationChart') {\n          this.load('tagChart', 'insightsTags', type === 'response');\n        }\n      });\n  };\n\n  render() {\n    const { type, brandsQuery, history, queryParams } = this.props;\n\n    const {\n      loading,\n      summaryData,\n      trend,\n      punchCard,\n      integrationChart,\n      tagChart\n    } = this.state;\n\n    const extendedProps = {\n      history,\n      queryParams,\n      brands: brandsQuery.brands || [],\n      summaryData,\n      trend,\n      punchCard,\n      integrationChart,\n      tagChart,\n      loading\n    };\n\n    if (type === 'volume') {\n      const volumeProps = {\n        ...extendedProps,\n        integrationChart,\n        tagChart\n      };\n\n      return <VolumeReport {...volumeProps} />;\n    }\n\n    return <ResponseReport {...extendedProps} />;\n  }\n}\n\nexport default compose(\n  graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n    name: 'brandsQuery'\n  })\n)(VolumenAndResponseReportContainer);\n"]},"metadata":{},"sourceType":"module"}