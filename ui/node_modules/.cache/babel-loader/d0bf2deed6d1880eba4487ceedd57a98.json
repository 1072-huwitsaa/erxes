{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/email/containers/Config.tsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n        query brandsGetDefaultEmailConfig {\\n          brandsGetDefaultEmailConfig\\n        }\\n      \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        query brandDetail($brandId: String!) {\\n          brandDetail(_id: $brandId) {\\n            _id\\n            name\\n            emailConfig\\n          }\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport { mutations as brandMutations } from 'modules/settings/brands/graphql';\nimport { queries as brandQueries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Config from '../components/Config';\n\nvar ConfigContainer = function ConfigContainer(props) {\n  var brandDetailQuery = props.brandDetailQuery,\n      emailConfigQuery = props.emailConfigQuery;\n\n  if (brandDetailQuery.loading || emailConfigQuery.loading) {\n    return null;\n  }\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback;\n    return React.createElement(ButtonMutate, {\n      mutation: brandMutations.brandsConfigEmail,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(),\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      successMessage: \"You successfully updated an \".concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    brand: brandDetailQuery.brandDetail,\n    defaultTemplate: emailConfigQuery.brandsGetDefaultEmailConfig || '',\n    renderButton: renderButton\n  });\n\n  return React.createElement(Config, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return [{\n    query: gql(brandQueries.brands)\n  }];\n};\n\nexport default withProps(compose(graphql(gql(_templateObject()), {\n  name: 'brandDetailQuery',\n  options: function options(_ref2) {\n    var brandId = _ref2.brandId;\n    return {\n      variables: {\n        brandId: brandId\n      }\n    };\n  }\n}), graphql(gql(_templateObject2()), {\n  name: 'emailConfigQuery'\n}), graphql(gql(brandMutations.brandsConfigEmail), {\n  name: 'configEmailMutation'\n}))(ConfigContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/email/containers/Config.tsx"],"names":["gql","compose","ButtonMutate","withProps","mutations","brandMutations","queries","brandQueries","React","graphql","Config","ConfigContainer","props","brandDetailQuery","emailConfigQuery","loading","renderButton","name","values","isSubmitted","callback","brandsConfigEmail","getRefetchQueries","updatedProps","brand","brandDetail","defaultTemplate","brandsGetDefaultEmailConfig","query","brands","options","brandId","variables"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,SAAS,IAAIC,cAAtB,QAA4C,iCAA5C;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,iCAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAKA,OAAOC,MAAP,MAAmB,sBAAnB;;AAcA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAuB;AAAA,MACrCC,gBADqC,GACED,KADF,CACrCC,gBADqC;AAAA,MACnBC,gBADmB,GACEF,KADF,CACnBE,gBADmB;;AAG7C,MAAID,gBAAgB,CAACE,OAAjB,IAA4BD,gBAAgB,CAACC,OAAjD,EAA0D;AACxD,WAAO,IAAP;AACD;;AAED,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAKK;AAAA,QAJxBC,IAIwB,QAJxBA,IAIwB;AAAA,QAHxBC,MAGwB,QAHxBA,MAGwB;AAAA,QAFxBC,WAEwB,QAFxBA,WAEwB;AAAA,QADxBC,QACwB,QADxBA,QACwB;AACxB,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEf,cAAc,CAACgB,iBAD3B;AAEE,MAAA,SAAS,EAAEH,MAFb;AAGE,MAAA,QAAQ,EAAEE,QAHZ;AAIE,MAAA,cAAc,EAAEE,iBAAiB,EAJnC;AAKE,MAAA,WAAW,EAAEH,WALf;AAME,MAAA,IAAI,EAAC,QANP;AAOE,MAAA,cAAc,wCAAiCF,IAAjC,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAjBD;;AAmBA,MAAMM,YAAY,qBACbX,KADa;AAEhBY,IAAAA,KAAK,EAAEX,gBAAgB,CAACY,WAFR;AAGhBC,IAAAA,eAAe,EAAEZ,gBAAgB,CAACa,2BAAjB,IAAgD,EAHjD;AAIhBX,IAAAA,YAAY,EAAZA;AAJgB,IAAlB;;AAOA,SAAO,oBAAC,MAAD,oBAAYO,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAlCD;;AAoCA,IAAMD,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,SAAO,CAAC;AAAEM,IAAAA,KAAK,EAAE5B,GAAG,CAACO,YAAY,CAACsB,MAAd;AAAZ,GAAD,CAAP;AACD,CAFD;;AAIA,eAAe1B,SAAS,CACtBF,OAAO,CACLQ,OAAO,CACLT,GADK,qBAUL;AACEiB,EAAAA,IAAI,EAAE,kBADR;AAEEa,EAAAA,OAAO,EAAE,wBAAsC;AAAA,QAAnCC,OAAmC,SAAnCA,OAAmC;AAC7C,WAAO;AACLC,MAAAA,SAAS,EAAE;AACTD,QAAAA,OAAO,EAAPA;AADS;AADN,KAAP;AAKD;AARH,CAVK,CADF,EAuBLtB,OAAO,CACLT,GADK,sBAML;AACEiB,EAAAA,IAAI,EAAE;AADR,CANK,CAvBF,EAkCLR,OAAO,CAACT,GAAG,CAACK,cAAc,CAACgB,iBAAhB,CAAJ,EAAwC;AAC7CJ,EAAAA,IAAI,EAAE;AADuC,CAAxC,CAlCF,CAAP,CAqCEN,eArCF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport { mutations as brandMutations } from 'modules/settings/brands/graphql';\nimport { queries as brandQueries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport {\n  BrandDetailQueryResponse,\n  BrandsConfigEmailMutationResponse\n} from '../../brands/types';\nimport Config from '../components/Config';\n\ntype Props = {\n  refetch: () => void;\n  closeModal: () => void;\n  brandId: string;\n};\n\ntype FinalProps = {\n  brandDetailQuery: BrandDetailQueryResponse;\n  emailConfigQuery: any;\n} & Props &\n  BrandsConfigEmailMutationResponse;\n\nconst ConfigContainer = (props: FinalProps) => {\n  const { brandDetailQuery, emailConfigQuery } = props;\n\n  if (brandDetailQuery.loading || emailConfigQuery.loading) {\n    return null;\n  }\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={brandMutations.brandsConfigEmail}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries()}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully updated an ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    brand: brandDetailQuery.brandDetail,\n    defaultTemplate: emailConfigQuery.brandsGetDefaultEmailConfig || '',\n    renderButton\n  };\n\n  return <Config {...updatedProps} />;\n};\n\nconst getRefetchQueries = () => {\n  return [{ query: gql(brandQueries.brands) }];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandDetailQueryResponse, { brandId: string }>(\n      gql`\n        query brandDetail($brandId: String!) {\n          brandDetail(_id: $brandId) {\n            _id\n            name\n            emailConfig\n          }\n        }\n      `,\n      {\n        name: 'brandDetailQuery',\n        options: ({ brandId }: { brandId: string }) => {\n          return {\n            variables: {\n              brandId\n            }\n          };\n        }\n      }\n    ),\n\n    graphql(\n      gql`\n        query brandsGetDefaultEmailConfig {\n          brandsGetDefaultEmailConfig\n        }\n      `,\n      {\n        name: 'emailConfigQuery'\n      }\n    ),\n\n    graphql(gql(brandMutations.brandsConfigEmail), {\n      name: 'configEmailMutation'\n    })\n  )(ConfigContainer)\n);\n"]},"metadata":{},"sourceType":"module"}