{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/ExportReport.tsx\";\nimport { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as userQueries } from 'modules/settings/team/graphql';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ExportReport from '../components/ExportReport';\nimport { queries } from '../graphql';\n\nvar ExportReportContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ExportReportContainer, _React$Component);\n\n  function ExportReportContainer() {\n    _classCallCheck(this, ExportReportContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ExportReportContainer).apply(this, arguments));\n  }\n\n  _createClass(ExportReportContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          history = _this$props.history,\n          brandsQuery = _this$props.brandsQuery,\n          queryParams = _this$props.queryParams,\n          usersQuery = _this$props.usersQuery;\n\n      var _getEnv = getEnv(),\n          REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n      var exportReport = function exportReport(args) {\n        var stringified = queryString.stringify(_objectSpread({}, queryParams, args));\n        window.open(\"\".concat(REACT_APP_API_URL, \"/insights-export?\").concat(stringified), '_blank');\n      };\n\n      var extendedProps = {\n        history: history,\n        queryParams: queryParams,\n        brands: brandsQuery.brands || [],\n        users: usersQuery.users || [],\n        exportReport: exportReport\n      };\n      return React.createElement(ExportReport, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ExportReportContainer;\n}(React.Component);\n\nexport default compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(userQueries.users), {\n  name: 'usersQuery'\n}))(ExportReportContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/ExportReport.tsx"],"names":["getEnv","gql","compose","queries","userQueries","queryString","React","graphql","ExportReport","ExportReportContainer","props","history","brandsQuery","queryParams","usersQuery","REACT_APP_API_URL","exportReport","args","stringified","stringify","window","open","extendedProps","brands","users","Component","name"],"mappings":";;;;;;;AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,+BAAvC;AAEA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASL,OAAT,QAAwB,YAAxB;;IAUMM,qB;;;;;;;;;;;;;6BACK;AAAA,wBACmD,KAAKC,KADxD;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,WADV,eACUA,WADV;AAAA,UACuBC,WADvB,eACuBA,WADvB;AAAA,UACoCC,UADpC,eACoCA,UADpC;;AAAA,oBAGuBd,MAAM,EAH7B;AAAA,UAGCe,iBAHD,WAGCA,iBAHD;;AAKP,UAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAA6C;AAChE,YAAMC,WAAW,GAAGb,WAAW,CAACc,SAAZ,mBAA2BN,WAA3B,EAA2CI,IAA3C,EAApB;AAEAG,QAAAA,MAAM,CAACC,IAAP,WACKN,iBADL,8BAC0CG,WAD1C,GAEE,QAFF;AAID,OAPD;;AASA,UAAMI,aAAa,GAAG;AACpBX,QAAAA,OAAO,EAAPA,OADoB;AAEpBE,QAAAA,WAAW,EAAXA,WAFoB;AAGpBU,QAAAA,MAAM,EAAEX,WAAW,CAACW,MAAZ,IAAsB,EAHV;AAIpBC,QAAAA,KAAK,EAAEV,UAAU,CAACU,KAAX,IAAoB,EAJP;AAKpBR,QAAAA,YAAY,EAAZA;AALoB,OAAtB;AAQA,aAAO,oBAAC,YAAD,oBAAkBM,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAxBiChB,KAAK,CAACmB,S;;AA2B1C,eAAevB,OAAO,CACpBK,OAAO,CAA6BN,GAAG,CAACE,OAAO,CAACoB,MAAT,CAAhC,EAAkD;AACvDG,EAAAA,IAAI,EAAE;AADiD,CAAlD,CADa,EAIpBnB,OAAO,CAA4BN,GAAG,CAACG,WAAW,CAACoB,KAAb,CAA/B,EAAoD;AACzDE,EAAAA,IAAI,EAAE;AADmD,CAApD,CAJa,CAAP,CAObjB,qBAPa,CAAf","sourcesContent":["import { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as userQueries } from 'modules/settings/team/graphql';\nimport { UsersQueryResponse } from 'modules/settings/team/types';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport ExportReport from '../components/ExportReport';\nimport { queries } from '../graphql';\nimport { IQueryParams } from '../types';\n\ntype Props = {\n  history: any;\n  brandsQuery: BrandsQueryResponse;\n  usersQuery: UsersQueryResponse;\n  queryParams: IQueryParams;\n};\n\nclass ExportReportContainer extends React.Component<Props> {\n  render() {\n    const { history, brandsQuery, queryParams, usersQuery } = this.props;\n\n    const { REACT_APP_API_URL } = getEnv();\n\n    const exportReport = (args: { type: string; userId?: string }) => {\n      const stringified = queryString.stringify({ ...queryParams, ...args });\n\n      window.open(\n        `${REACT_APP_API_URL}/insights-export?${stringified}`,\n        '_blank'\n      );\n    };\n\n    const extendedProps = {\n      history,\n      queryParams,\n      brands: brandsQuery.brands || [],\n      users: usersQuery.users || [],\n      exportReport\n    };\n\n    return <ExportReport {...extendedProps} />;\n  }\n}\n\nexport default compose(\n  graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n    name: 'brandsQuery'\n  }),\n  graphql<Props, UsersQueryResponse>(gql(userQueries.users), {\n    name: 'usersQuery'\n  })\n)(ExportReportContainer);\n"]},"metadata":{},"sourceType":"module"}