{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/profile/components/NotificationSettings.tsx\";\nimport Toggle from 'modules/common/components/Toggle';\nimport { ScrollWrapper } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport { Description, InlineItems, ModuleBox, SubHeading, SubItem } from '../../styles';\n\nvar NotificationSettings =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NotificationSettings, _React$Component);\n\n  function NotificationSettings() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NotificationSettings);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NotificationSettings)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onTypeChange = function (e) {\n      // save config\n      _this.props.saveNotificationConfigurations({\n        notifType: e.target.value,\n        isAllowed: e.target.checked\n      });\n    };\n\n    _this.onEmailConfigChange = function (e) {\n      // save get notification by email config\n      _this.props.configGetNotificationByEmail({\n        isAllowed: e.target.checked\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(NotificationSettings, [{\n    key: \"isChecked\",\n    value: function isChecked(notifType) {\n      var oldEntry = this.props.configs.find(function (config) {\n        return config.notifType === notifType.name;\n      }); // if no previous configuration found then default is checked\n\n      if (!oldEntry) {\n        return true;\n      }\n\n      return oldEntry.isAllowed;\n    }\n  }, {\n    key: \"renderNotifType\",\n    value: function renderNotifType(type, key) {\n      return React.createElement(InlineItems, {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, type.text, React.createElement(Toggle, {\n        value: type.name,\n        checked: this.isChecked(type),\n        onChange: this.onTypeChange,\n        icons: {\n          checked: null,\n          unchecked: null\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderModule\",\n    value: function renderModule(module, mindex) {\n      var _this2 = this;\n\n      return React.createElement(SubItem, {\n        key: mindex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(SubHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, module.description), module.types.map(function (type, index) {\n        return _this2.renderNotifType(type, \"\".concat(mindex).concat(index));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var content = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(SubHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, __('Notifications'), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, __('Get notified and notify others to keep everything up to date'))), React.createElement(InlineItems, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, __('Get notification by email'), React.createElement(Toggle, {\n        defaultChecked: this.props.getNotificationByEmail,\n        onChange: this.onEmailConfigChange,\n        icons: {\n          checked: null,\n          unchecked: null\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, __(\"If your team hasn't received messages that you sent on the site, we can send it to them via email\")), React.createElement(ScrollWrapper, {\n        calcHeight: \"365\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(ModuleBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.props.modules.map(function (module, index) {\n        return _this3.renderModule(module, index);\n      }))));\n      return content;\n    }\n  }]);\n\n  return NotificationSettings;\n}(React.Component);\n\nexport default NotificationSettings;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/profile/components/NotificationSettings.tsx"],"names":["Toggle","ScrollWrapper","__","React","Description","InlineItems","ModuleBox","SubHeading","SubItem","NotificationSettings","onTypeChange","e","props","saveNotificationConfigurations","notifType","target","value","isAllowed","checked","onEmailConfigChange","configGetNotificationByEmail","oldEntry","configs","find","config","name","type","key","text","isChecked","unchecked","module","mindex","description","types","map","index","renderNotifType","content","getNotificationByEmail","modules","renderModule","Component"],"mappings":"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","sourcesContent":["import Toggle from 'modules/common/components/Toggle';\nimport { ScrollWrapper } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport {\n  NotificationConfig,\n  NotificationModule\n} from '../../../notifications/types';\nimport {\n  Description,\n  InlineItems,\n  ModuleBox,\n  SubHeading,\n  SubItem\n} from '../../styles';\n\ntype Props = {\n  modules: NotificationModule[];\n  configs: NotificationConfig[];\n  // save notification configurations\n  saveNotificationConfigurations: (notify: {\n    notifType: string;\n    isAllowed: boolean;\n  }) => void;\n  // save get notification by email action\n  configGetNotificationByEmail: (byEmail: { isAllowed: boolean }) => void;\n  // previously configured value\n  getNotificationByEmail: boolean;\n};\n\nclass NotificationSettings extends React.Component<Props> {\n  onTypeChange = e => {\n    // save config\n    this.props.saveNotificationConfigurations({\n      notifType: e.target.value,\n      isAllowed: e.target.checked\n    });\n  };\n\n  onEmailConfigChange = e => {\n    // save get notification by email config\n    this.props.configGetNotificationByEmail({ isAllowed: e.target.checked });\n  };\n\n  isChecked(notifType) {\n    const oldEntry = this.props.configs.find(\n      config => config.notifType === notifType.name\n    );\n\n    // if no previous configuration found then default is checked\n    if (!oldEntry) {\n      return true;\n    }\n\n    return oldEntry.isAllowed;\n  }\n\n  renderNotifType(type, key) {\n    return (\n      <InlineItems key={key}>\n        {type.text}\n        <Toggle\n          value={type.name}\n          checked={this.isChecked(type)}\n          onChange={this.onTypeChange}\n          icons={{\n            checked: null,\n            unchecked: null\n          }}\n        />\n      </InlineItems>\n    );\n  }\n\n  renderModule(module, mindex) {\n    return (\n      <SubItem key={mindex}>\n        <SubHeading>{module.description}</SubHeading>\n        {module.types.map((type, index) =>\n          this.renderNotifType(type, `${mindex}${index}`)\n        )}\n      </SubItem>\n    );\n  }\n\n  render() {\n    const content = (\n      <React.Fragment>\n        <SubHeading>\n          {__('Notifications')}\n          <span>\n            {__('Get notified and notify others to keep everything up to date')}\n          </span>\n        </SubHeading>\n        <InlineItems>\n          {__('Get notification by email')}\n          <Toggle\n            defaultChecked={this.props.getNotificationByEmail}\n            onChange={this.onEmailConfigChange}\n            icons={{\n              checked: null,\n              unchecked: null\n            }}\n          />\n        </InlineItems>\n        <Description>\n          {__(\n            \"If your team hasn't received messages that you sent on the site, we can send it to them via email\"\n          )}\n        </Description>\n        <ScrollWrapper calcHeight=\"365\">\n          <ModuleBox>\n            {this.props.modules.map((module, index) =>\n              this.renderModule(module, index)\n            )}\n          </ModuleBox>\n        </ScrollWrapper>\n      </React.Fragment>\n    );\n\n    return content;\n  }\n}\n\nexport default NotificationSettings;\n"]},"metadata":{},"sourceType":"module"}