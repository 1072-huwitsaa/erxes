{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/mail/MailForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport debounce from 'lodash/debounce';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { queries as messageQueries } from 'modules/inbox/graphql';\nimport { queries as templatesQuery } from 'modules/settings/emailTemplates/graphql';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport MailForm from '../../components/mail/MailForm';\nimport { defaultCustomerFields, defaultMailFields, defaultMessageFields } from './constants';\n\nvar MailFormContainer = function MailFormContainer(props) {\n  var mailData = props.mailData,\n      customerId = props.customerId,\n      conversationId = props.conversationId,\n      integrationsQuery = props.integrationsQuery,\n      isReply = props.isReply,\n      closeModal = props.closeModal,\n      closeReply = props.closeReply,\n      emailTemplatesQuery = props.emailTemplatesQuery,\n      emailTemplatesTotalCountQuery = props.emailTemplatesTotalCountQuery,\n      sendMailMutation = props.sendMailMutation,\n      currentUser = props.currentUser;\n\n  if (integrationsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n  var fetchMoreEmailTemplates = function fetchMoreEmailTemplates() {\n    var fetchMore = emailTemplatesQuery.fetchMore,\n        emailTemplates = emailTemplatesQuery.emailTemplates,\n        variables = emailTemplatesQuery.variables;\n    var emailTemplatesTotalCount = emailTemplatesTotalCountQuery.emailTemplatesTotalCount;\n\n    if (emailTemplatesTotalCount === emailTemplates.length) {\n      return;\n    }\n\n    return fetchMore({\n      variables: {\n        page: Number(variables.page) + 1\n      },\n      updateQuery: function updateQuery(prev, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return Object.assign({}, prev, {\n          emailTemplates: [].concat(_toConsumableArray(prev.emailTemplates), _toConsumableArray(fetchMoreResult.emailTemplates))\n        });\n      }\n    });\n  };\n\n  var integrations = integrationsQuery.integrations || [];\n\n  var save = function save(_ref2) {\n    var variables = _ref2.variables,\n        optimisticResponse = _ref2.optimisticResponse,\n        update = _ref2.update,\n        callback = _ref2.callback;\n    return sendMailMutation({\n      variables: _objectSpread({}, variables, {\n        customerId: customerId\n      }),\n      optimisticResponse: optimisticResponse,\n      update: update\n    }).then(function () {\n      Alert.success('You have successfully sent a email');\n\n      if (isReply && variables.shouldResolve) {\n        debounce(function () {\n          return Alert.info('This email conversation will be automatically moved to a resolved state.');\n        }, 3300)();\n      }\n\n      if (closeModal) {\n        closeModal();\n      }\n\n      if (callback) {\n        callback();\n      }\n    }).catch(function (e) {\n      Alert.error(e.message);\n\n      if (closeModal) {\n        closeModal();\n      }\n    });\n  };\n\n  var sendMail = function sendMail(_ref3) {\n    var variables = _ref3.variables,\n        callback = _ref3.callback;\n\n    if (!isReply) {\n      return save({\n        variables: variables,\n        callback: callback\n      });\n    }\n\n    var email = mailData ? mailData.integrationEmail : '';\n\n    var integrationSendMail = _objectSpread({\n      _id: Math.round(Math.random() * -1000000)\n    }, defaultMessageFields, {\n      conversationId: conversationId,\n      videoCallData: null,\n      contentType: '',\n      content: variables.body,\n      customer: _objectSpread({}, defaultCustomerFields, {\n        firstName: email,\n        primaryEmail: email\n      }),\n      mailData: _objectSpread({}, defaultMailFields, {\n        bcc: [{\n          __typename: 'Email',\n          email: variables.bcc\n        }],\n        to: [{\n          __typename: 'Email',\n          email: variables.to\n        }],\n        from: [{\n          __typename: 'Email',\n          email: variables.to\n        }],\n        cc: [{\n          __typename: 'Email',\n          email: variables.cc\n        }],\n        body: variables.body,\n        subject: variables.subject,\n        attachments: variables.attachments,\n        integrationEmail: variables.from\n      })\n    });\n\n    var optimisticResponse = {\n      __typename: 'Mutation',\n      integrationSendMail: integrationSendMail\n    };\n\n    var update = function update(store) {\n      var selector = {\n        query: gql(messageQueries.conversationMessages),\n        variables: {\n          conversationId: conversationId,\n          limit: 10,\n          skip: 0\n        }\n      }; // Read the data from our cache for this query.\n\n      try {\n        var data = store.readQuery(selector);\n        var messages = data.conversationMessages || [];\n        messages.push(integrationSendMail); // Write our data back to the cache.\n\n        store.writeQuery(_objectSpread({}, selector, {\n          data: data\n        }));\n\n        if (closeReply) {\n          closeReply();\n        }\n      } catch (e) {\n        Alert.error(e);\n        return;\n      }\n    }; // Invoke mutation\n\n\n    return save({\n      variables: variables,\n      optimisticResponse: optimisticResponse,\n      update: update\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    sendMail: sendMail,\n    integrations: integrations,\n    currentUser: currentUser,\n    fetchMoreEmailTemplates: fetchMoreEmailTemplates,\n    emailTemplates: emailTemplatesQuery.emailTemplates,\n    emailSignatures: currentUser.emailSignatures || []\n  });\n\n  return React.createElement(MailForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.integrations), {\n  name: 'integrationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        kind: 'mail'\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(templatesQuery.emailTemplates), {\n  name: 'emailTemplatesQuery',\n  options: function options() {\n    return {\n      variables: {\n        page: 1\n      }\n    };\n  }\n}), graphql(gql(templatesQuery.totalCount), {\n  name: 'emailTemplatesTotalCountQuery'\n}), graphql(gql(mutations.integrationSendMail), {\n  name: 'sendMailMutation',\n  options: function options() {\n    return {\n      refetchQueries: ['activityLogs']\n    };\n  }\n}))(withCurrentUser(MailFormContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/mail/MailForm.tsx"],"names":["gql","compose","debounce","withCurrentUser","Spinner","Alert","withProps","queries","messageQueries","templatesQuery","mutations","React","graphql","MailForm","defaultCustomerFields","defaultMailFields","defaultMessageFields","MailFormContainer","props","mailData","customerId","conversationId","integrationsQuery","isReply","closeModal","closeReply","emailTemplatesQuery","emailTemplatesTotalCountQuery","sendMailMutation","currentUser","loading","fetchMoreEmailTemplates","fetchMore","emailTemplates","variables","emailTemplatesTotalCount","length","page","Number","updateQuery","prev","fetchMoreResult","Object","assign","integrations","save","optimisticResponse","update","callback","then","success","shouldResolve","info","catch","e","error","message","sendMail","email","integrationEmail","integrationSendMail","_id","Math","round","random","videoCallData","contentType","content","body","customer","firstName","primaryEmail","bcc","__typename","to","from","cc","subject","attachments","store","selector","query","conversationMessages","limit","skip","data","readQuery","messages","push","writeQuery","updatedProps","emailSignatures","name","options","kind","fetchPolicy","totalCount","refetchQueries"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport debounce from 'lodash/debounce';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { IUser } from 'modules/auth/types';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { queries as messageQueries } from 'modules/inbox/graphql';\nimport { IMail } from 'modules/inbox/types';\nimport {\n  EmailTemplatesQueryResponse,\n  EmailTemplatesTotalCountQueryResponse\n} from 'modules/settings/emailTemplates/containers/List';\nimport { queries as templatesQuery } from 'modules/settings/emailTemplates/graphql';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport MailForm from '../../components/mail/MailForm';\nimport { IntegrationsQueryResponse } from '../../types';\nimport {\n  defaultCustomerFields,\n  defaultMailFields,\n  defaultMessageFields\n} from './constants';\n\ntype Props = {\n  clearOnSubmit?: boolean;\n  integrationId?: string;\n  brandId?: string;\n  conversationId?: string;\n  refetchQueries?: string[];\n  fromEmail?: string;\n  customerId?: string;\n  mailData?: IMail;\n  isReply?: boolean;\n  isForward?: boolean;\n  replyAll?: boolean;\n  createdAt?: Date;\n  toggleReply?: (toAll?: boolean) => void;\n  closeModal?: () => void;\n  closeReply?: () => void;\n  callback?: () => void;\n};\n\ntype FinalProps = {\n  currentUser: IUser;\n  sendMailMutation: any;\n  emailTemplatesQuery: EmailTemplatesQueryResponse;\n  emailTemplatesTotalCountQuery: EmailTemplatesTotalCountQueryResponse;\n  integrationsQuery: IntegrationsQueryResponse;\n} & Props;\n\nconst MailFormContainer = (props: FinalProps) => {\n  const {\n    mailData,\n    customerId,\n    conversationId,\n    integrationsQuery,\n    isReply,\n    closeModal,\n    closeReply,\n    emailTemplatesQuery,\n    emailTemplatesTotalCountQuery,\n    sendMailMutation,\n    currentUser\n  } = props;\n\n  if (integrationsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const fetchMoreEmailTemplates = () => {\n    const { fetchMore, emailTemplates, variables } = emailTemplatesQuery;\n    const { emailTemplatesTotalCount } = emailTemplatesTotalCountQuery;\n\n    if (emailTemplatesTotalCount === emailTemplates.length) {\n      return;\n    }\n\n    return fetchMore({\n      variables: { page: Number(variables.page) + 1 },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return Object.assign({}, prev, {\n          emailTemplates: [\n            ...prev.emailTemplates,\n            ...fetchMoreResult.emailTemplates\n          ]\n        });\n      }\n    });\n  };\n\n  const integrations = integrationsQuery.integrations || [];\n\n  const save = ({\n    variables,\n    optimisticResponse,\n    update,\n    callback\n  }: {\n    variables: any;\n    optimisticResponse?: any;\n    callback?: () => void;\n    update?: any;\n  }) => {\n    return sendMailMutation({\n      variables: { ...variables, customerId },\n      optimisticResponse,\n      update\n    })\n      .then(() => {\n        Alert.success('You have successfully sent a email');\n\n        if (isReply && variables.shouldResolve) {\n          debounce(\n            () =>\n              Alert.info(\n                'This email conversation will be automatically moved to a resolved state.'\n              ),\n            3300\n          )();\n        }\n\n        if (closeModal) {\n          closeModal();\n        }\n\n        if (callback) {\n          callback();\n        }\n      })\n      .catch(e => {\n        Alert.error(e.message);\n\n        if (closeModal) {\n          closeModal();\n        }\n      });\n  };\n\n  const sendMail = ({\n    variables,\n    callback\n  }: {\n    variables: any;\n    callback: () => void;\n  }) => {\n    if (!isReply) {\n      return save({ variables, callback });\n    }\n\n    const email = mailData ? mailData.integrationEmail : '';\n\n    const integrationSendMail = {\n      _id: Math.round(Math.random() * -1000000),\n      ...defaultMessageFields,\n      conversationId,\n      videoCallData: null,\n      contentType: '',\n      content: variables.body,\n      customer: {\n        ...defaultCustomerFields,\n        firstName: email,\n        primaryEmail: email\n      },\n      mailData: {\n        ...defaultMailFields,\n        bcc: [{ __typename: 'Email', email: variables.bcc }],\n        to: [{ __typename: 'Email', email: variables.to }],\n        from: [{ __typename: 'Email', email: variables.to }],\n        cc: [{ __typename: 'Email', email: variables.cc }],\n        body: variables.body,\n        subject: variables.subject,\n        attachments: variables.attachments,\n        integrationEmail: variables.from\n      }\n    };\n\n    const optimisticResponse = { __typename: 'Mutation', integrationSendMail };\n\n    const update = store => {\n      const selector = {\n        query: gql(messageQueries.conversationMessages),\n        variables: { conversationId, limit: 10, skip: 0 }\n      };\n\n      // Read the data from our cache for this query.\n      try {\n        const data = store.readQuery(selector);\n        const messages = data.conversationMessages || [];\n\n        messages.push(integrationSendMail);\n\n        // Write our data back to the cache.\n        store.writeQuery({ ...selector, data });\n\n        if (closeReply) {\n          closeReply();\n        }\n      } catch (e) {\n        Alert.error(e);\n        return;\n      }\n    };\n\n    // Invoke mutation\n    return save({ variables, optimisticResponse, update });\n  };\n\n  const updatedProps = {\n    ...props,\n    sendMail,\n    integrations,\n    currentUser,\n    fetchMoreEmailTemplates,\n    emailTemplates: emailTemplatesQuery.emailTemplates,\n    emailSignatures: currentUser.emailSignatures || []\n  };\n\n  return <MailForm {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, IntegrationsQueryResponse>(gql(queries.integrations), {\n      name: 'integrationsQuery',\n      options: () => {\n        return {\n          variables: { kind: 'mail' },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<Props, EmailTemplatesQueryResponse>(\n      gql(templatesQuery.emailTemplates),\n      {\n        name: 'emailTemplatesQuery',\n        options: () => ({\n          variables: { page: 1 }\n        })\n      }\n    ),\n    graphql<Props, any>(gql(templatesQuery.totalCount), {\n      name: 'emailTemplatesTotalCountQuery'\n    }),\n    graphql<Props>(gql(mutations.integrationSendMail), {\n      name: 'sendMailMutation',\n      options: () => ({\n        refetchQueries: ['activityLogs']\n      })\n    })\n  )(withCurrentUser(MailFormContainer))\n);\n"]},"metadata":{},"sourceType":"module"}