{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/containers/Properties.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        \", \"\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { router } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Properties from '../components/Properties';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport { companyBasicInfos, customerBasicInfos, productBasicInfos } from '../utils';\n\nvar PropertiesContainer = function PropertiesContainer(props) {\n  var fieldsGroupsQuery = props.fieldsGroupsQuery,\n      history = props.history,\n      fieldsGroupsRemove = props.fieldsGroupsRemove,\n      fieldsRemove = props.fieldsRemove,\n      fieldsGroupsUpdateVisible = props.fieldsGroupsUpdateVisible,\n      fieldsUpdateVisible = props.fieldsUpdateVisible,\n      queryParams = props.queryParams;\n\n  if (!router.getParam(history, 'type')) {\n    router.setParams(history, {\n      type: FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER\n    }, true);\n  }\n\n  var removePropertyGroup = function removePropertyGroup(_ref) {\n    var _id = _ref._id;\n    fieldsGroupsRemove({\n      variables: {\n        _id: _id\n      }\n    }).then(function () {\n      Alert.success('You successfully deleted a property group');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var removeProperty = function removeProperty(_ref2) {\n    var _id = _ref2._id;\n    fieldsRemove({\n      variables: {\n        _id: _id\n      }\n    }).then(function () {\n      Alert.success('You successfully deleted a property field');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var updatePropertyVisible = function updatePropertyVisible(_ref3) {\n    var _id = _ref3._id,\n        isVisible = _ref3.isVisible;\n    fieldsUpdateVisible({\n      variables: {\n        _id: _id,\n        isVisible: isVisible\n      }\n    }).then(function () {\n      Alert.success('You changed a property field visibility');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var updatePropertyGroupVisible = function updatePropertyGroupVisible(_ref4) {\n    var _id = _ref4._id,\n        isVisible = _ref4.isVisible;\n    fieldsGroupsUpdateVisible({\n      variables: {\n        _id: _id,\n        isVisible: isVisible\n      }\n    }).then(function () {\n      Alert.success('You changed a property group visibility');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var currentType = router.getParam(history, 'type');\n\n  var fieldsGroups = _toConsumableArray(fieldsGroupsQuery.fieldsGroups || []); // Initializing default properties for customer and company\n\n\n  var defaultGroup = companyBasicInfos;\n\n  if (queryParams.type === FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER) {\n    defaultGroup = customerBasicInfos;\n  }\n\n  if (queryParams.type === FIELDS_GROUPS_CONTENT_TYPES.PRODUCT) {\n    defaultGroup = productBasicInfos;\n  }\n\n  fieldsGroups.unshift(defaultGroup);\n\n  var updatedProps = _objectSpread({}, props, {\n    fieldsGroups: fieldsGroups,\n    currentType: currentType,\n    removePropertyGroup: removePropertyGroup,\n    removeProperty: removeProperty,\n    updatePropertyVisible: updatePropertyVisible,\n    updatePropertyGroupVisible: updatePropertyGroupVisible\n  });\n\n  return React.createElement(Properties, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }));\n};\n\nvar options = function options(_ref5) {\n  var queryParams = _ref5.queryParams;\n  return {\n    refetchQueries: [{\n      query: gql(_templateObject(), queries.fieldsGroups),\n      variables: {\n        contentType: queryParams.type\n      }\n    }]\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.fieldsGroups), {\n  name: 'fieldsGroupsQuery',\n  options: function options(_ref6) {\n    var queryParams = _ref6.queryParams;\n    return {\n      variables: {\n        contentType: queryParams.type || ''\n      }\n    };\n  }\n}), graphql(gql(mutations.fieldsGroupsRemove), {\n  name: 'fieldsGroupsRemove',\n  options: options\n}), graphql(gql(mutations.fieldsRemove), {\n  name: 'fieldsRemove',\n  options: options\n}), graphql(gql(mutations.fieldsUpdateVisible), {\n  name: 'fieldsUpdateVisible',\n  options: options\n}), graphql(gql(mutations.fieldsGroupsUpdateVisible), {\n  name: 'fieldsGroupsUpdateVisible',\n  options: options\n}))(withRouter(PropertiesContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/containers/Properties.tsx"],"names":["gql","compose","Alert","withProps","router","React","graphql","withRouter","Properties","FIELDS_GROUPS_CONTENT_TYPES","mutations","queries","companyBasicInfos","customerBasicInfos","productBasicInfos","PropertiesContainer","props","fieldsGroupsQuery","history","fieldsGroupsRemove","fieldsRemove","fieldsGroupsUpdateVisible","fieldsUpdateVisible","queryParams","getParam","setParams","type","CUSTOMER","removePropertyGroup","_id","variables","then","success","catch","e","error","message","removeProperty","updatePropertyVisible","isVisible","updatePropertyGroupVisible","currentType","fieldsGroups","defaultGroup","PRODUCT","unshift","updatedProps","options","refetchQueries","query","contentType","name"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { router } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Properties from '../components/Properties';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport {\n  FieldsGroupsQueryResponse,\n  FieldsGroupsRemoveMutationResponse,\n  FieldsGroupsUpdateVisibleMutationResponse,\n  FieldsRemoveMutationResponse,\n  FieldsUpdateVisibleMutationResponse\n} from '../types';\nimport {\n  companyBasicInfos,\n  customerBasicInfos,\n  productBasicInfos\n} from '../utils';\n\ntype Props = {\n  queryParams: any;\n};\n\ntype FinalProps = {\n  fieldsGroupsQuery: FieldsGroupsQueryResponse;\n} & Props &\n  FieldsGroupsRemoveMutationResponse &\n  FieldsRemoveMutationResponse &\n  FieldsGroupsUpdateVisibleMutationResponse &\n  FieldsUpdateVisibleMutationResponse &\n  IRouterProps;\n\nconst PropertiesContainer = (props: FinalProps) => {\n  const {\n    fieldsGroupsQuery,\n    history,\n    fieldsGroupsRemove,\n    fieldsRemove,\n    fieldsGroupsUpdateVisible,\n    fieldsUpdateVisible,\n    queryParams\n  } = props;\n\n  if (!router.getParam(history, 'type')) {\n    router.setParams(\n      history,\n      { type: FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER },\n      true\n    );\n  }\n\n  const removePropertyGroup = ({ _id }) => {\n    fieldsGroupsRemove({\n      variables: { _id }\n    })\n      .then(() => {\n        Alert.success('You successfully deleted a property group');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const removeProperty = ({ _id }) => {\n    fieldsRemove({\n      variables: { _id }\n    })\n      .then(() => {\n        Alert.success('You successfully deleted a property field');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatePropertyVisible = ({ _id, isVisible }) => {\n    fieldsUpdateVisible({\n      variables: { _id, isVisible }\n    })\n      .then(() => {\n        Alert.success('You changed a property field visibility');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatePropertyGroupVisible = ({ _id, isVisible }) => {\n    fieldsGroupsUpdateVisible({\n      variables: { _id, isVisible }\n    })\n      .then(() => {\n        Alert.success('You changed a property group visibility');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const currentType = router.getParam(history, 'type');\n  const fieldsGroups = [...(fieldsGroupsQuery.fieldsGroups || [])];\n\n  // Initializing default properties for customer and company\n  let defaultGroup = companyBasicInfos;\n\n  if (queryParams.type === FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER) {\n    defaultGroup = customerBasicInfos;\n  }\n\n  if (queryParams.type === FIELDS_GROUPS_CONTENT_TYPES.PRODUCT) {\n    defaultGroup = productBasicInfos;\n  }\n\n  fieldsGroups.unshift(defaultGroup);\n\n  const updatedProps = {\n    ...props,\n    fieldsGroups,\n    currentType,\n    removePropertyGroup,\n    removeProperty,\n    updatePropertyVisible,\n    updatePropertyGroupVisible\n  };\n\n  return <Properties {...updatedProps} />;\n};\n\nconst options = ({ queryParams }) => ({\n  refetchQueries: [\n    {\n      query: gql`\n        ${queries.fieldsGroups}\n      `,\n      variables: { contentType: queryParams.type }\n    }\n  ]\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, FieldsGroupsQueryResponse>(gql(queries.fieldsGroups), {\n      name: 'fieldsGroupsQuery',\n      options: ({ queryParams }) => ({\n        variables: {\n          contentType: queryParams.type || ''\n        }\n      })\n    }),\n    graphql<Props, FieldsGroupsRemoveMutationResponse, { _id: string }>(\n      gql(mutations.fieldsGroupsRemove),\n      {\n        name: 'fieldsGroupsRemove',\n        options\n      }\n    ),\n    graphql<Props, FieldsRemoveMutationResponse, { _id: string }>(\n      gql(mutations.fieldsRemove),\n      {\n        name: 'fieldsRemove',\n        options\n      }\n    ),\n    graphql<\n      Props,\n      FieldsUpdateVisibleMutationResponse,\n      { _id: string; isVisible: boolean }\n    >(gql(mutations.fieldsUpdateVisible), {\n      name: 'fieldsUpdateVisible',\n      options\n    }),\n    graphql<\n      Props,\n      FieldsGroupsUpdateVisibleMutationResponse,\n      { _id: string; isVisible: boolean }\n    >(gql(mutations.fieldsGroupsUpdateVisible), {\n      name: 'fieldsGroupsUpdateVisible',\n      options\n    })\n  )(withRouter<FinalProps>(PropertiesContainer))\n);\n"]},"metadata":{},"sourceType":"module"}