{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/components/common/Form.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport EmptyContent from \"modules/common/components/empty/EmptyContent\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport CommonForm from \"modules/common/components/form/Form\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { __, generateRandomColorCode } from \"modules/common/utils\";\nimport { FlexContent, FlexItem } from \"modules/layout/styles\";\nimport { EMPTY_NEW_SEGMENT_CONTENT } from \"modules/settings/constants\";\nimport { ColorPick, ColorPicker, ExpandWrapper } from \"modules/settings/styles\";\nimport React from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport TwitterPicker from \"react-color/lib/Twitter\";\nimport { Link } from \"react-router-dom\";\nimport { FilterBox, SegmentTitle, SegmentWrapper } from \"../styles\";\nimport AddConditionButton from \"./AddConditionButton\";\nimport EventCondition from \"./EventCondition\";\nimport PropertyCondition from \"./PropertyCondition\";\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n\n    _this.addCondition = function (condition) {\n      _this.setState({\n        conditions: [].concat(_toConsumableArray(_this.state.conditions), [condition])\n      });\n    };\n\n    _this.changeEventCondition = function (args) {\n      var condition = {\n        type: \"event\",\n        key: args.key,\n        eventName: args.name,\n        eventOccurence: args.occurence,\n        eventOccurenceValue: args.occurenceValue,\n        eventAttributeFilters: (args.attributeFilters || []).map(function (filter) {\n          var key = filter.key,\n              rest = _objectWithoutProperties(filter, [\"key\"]);\n\n          return rest;\n        })\n      };\n\n      _this.setState({\n        conditions: _this.state.conditions.map(function (c) {\n          return c.key === condition.key ? condition : c;\n        })\n      });\n    };\n\n    _this.changePropertyCondition = function (args) {\n      var condition = {\n        type: \"property\",\n        key: args.key,\n        propertyName: args.name,\n        propertyOperator: args.operator,\n        propertyValue: args.value\n      };\n\n      _this.setState({\n        conditions: _this.state.conditions.map(function (c) {\n          return c.key === condition.key ? condition : c;\n        })\n      });\n    };\n\n    _this.removeCondition = function (key) {\n      var conditions = _this.state.conditions.filter(function (c) {\n        return c.key !== key;\n      });\n\n      _this.setState({\n        conditions: conditions\n      });\n    };\n\n    _this.handleChange = function (name, value) {\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.generateDoc = function (values) {\n      var _this$props = _this.props,\n          segment = _this$props.segment,\n          contentType = _this$props.contentType;\n      var _this$state = _this.state,\n          color = _this$state.color,\n          conditions = _this$state.conditions;\n      var finalValues = values;\n      var updatedConditions = [];\n\n      if (segment) {\n        finalValues._id = segment._id;\n      }\n\n      conditions.forEach(function (cond) {\n        var key = cond.key,\n            rest = _objectWithoutProperties(cond, [\"key\"]);\n\n        updatedConditions.push(rest);\n      });\n      return _objectSpread({}, finalValues, {\n        color: color,\n        contentType: contentType,\n        conditions: updatedConditions\n      });\n    };\n\n    _this.renderFilters = function () {\n      return React.createElement(FilterBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, _this.renderConditions(), React.createElement(AddConditionButton, {\n        addCondition: _this.addCondition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderForm = function (formProps) {\n      var _this$props2 = _this.props,\n          isForm = _this$props2.isForm,\n          segment = _this$props2.segment,\n          contentType = _this$props2.contentType,\n          renderButton = _this$props2.renderButton,\n          afterSave = _this$props2.afterSave,\n          previewCount = _this$props2.previewCount;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      var _this$state2 = _this.state,\n          name = _this$state2.name,\n          description = _this$state2.description,\n          color = _this$state2.color,\n          conditions = _this$state2.conditions,\n          subOf = _this$state2.subOf;\n\n      var nameOnChange = function nameOnChange(e) {\n        return _this.handleChange(\"name\", e.currentTarget.value);\n      };\n\n      var descOnChange = function descOnChange(e) {\n        return _this.handleChange(\"description\", e.currentTarget.value);\n      };\n\n      var colorOnChange = function colorOnChange(e) {\n        return _this.handleChange(\"color\", e.hex);\n      };\n\n      var onPreviewCount = function onPreviewCount() {\n        if (previewCount) {\n          previewCount(conditions, subOf);\n        }\n      };\n\n      var popoverTop = React.createElement(Popover, {\n        id: \"color-picker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(TwitterPicker, {\n        triangle: \"hide\",\n        color: color,\n        onChange: colorOnChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }));\n      return React.createElement(React.Fragment, null, React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(FlexItem, {\n        count: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"Segment Name\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"name\",\n        value: name,\n        onChange: nameOnChange,\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })))), React.createElement(FlexItem, {\n        count: 3,\n        hasSpace: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, _this.renderSubOf(_objectSpread({}, formProps)))), React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(ExpandWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, \"Description\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"description\",\n        value: description,\n        onChange: descOnChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      })))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, \"Color\"), React.createElement(\"div\", {\n        id: \"segment-color\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, React.createElement(OverlayTrigger, {\n        trigger: \"click\",\n        rootClose: true,\n        placement: \"bottom\",\n        overlay: popoverTop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, React.createElement(ColorPick, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(ColorPicker, {\n        style: {\n          backgroundColor: color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      })))))), _this.renderFilters(), React.createElement(ModalFooter, {\n        id: \"button-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, isForm && React.createElement(Link, {\n        to: \"/segments/\".concat(contentType),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(Button, {\n        uppercase: false,\n        btnStyle: \"simple\",\n        icon: \"times-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, \"Cancel\")), previewCount && React.createElement(Button, {\n        id: \"segment-show-count\",\n        uppercase: false,\n        icon: \"crosshairs\",\n        onClick: onPreviewCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, \"Show count\"), renderButton({\n        name: \"segment\",\n        values: _this.generateDoc(values),\n        callback: afterSave,\n        isSubmitted: isSubmitted,\n        object: segment\n      }))));\n    };\n\n    var _segment = props.segment || {\n      name: \"\",\n      description: \"\",\n      subOf: \"\",\n      color: generateRandomColorCode(),\n      conditions: []\n    };\n\n    _segment.conditions = _segment.conditions.map(function (cond) {\n      return _objectSpread({\n        key: Math.random().toString()\n      }, cond);\n    });\n    _this.state = _segment;\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var previewCount = this.props.previewCount;\n      var _this$state3 = this.state,\n          conditions = _this$state3.conditions,\n          subOf = _this$state3.subOf;\n\n      if (previewCount) {\n        previewCount(conditions, subOf);\n      }\n    }\n  }, {\n    key: \"renderParent\",\n    value: function renderParent() {\n      var contentType = this.props.contentType;\n      var subOf = this.state.subOf;\n\n      if (!subOf) {\n        return null;\n      }\n\n      return React.createElement(Link, {\n        to: \"/segments/edit/\".concat(contentType, \"/\").concat(subOf),\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"arrows-up-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), __(\"See parent segment conditions\"));\n    }\n  }, {\n    key: \"renderCondition\",\n    value: function renderCondition(condition) {\n      var _this$props3 = this.props,\n          fields = _this$props3.fields,\n          events = _this$props3.events;\n\n      if (condition.type === \"property\") {\n        return React.createElement(PropertyCondition, {\n          fields: fields,\n          key: condition.key,\n          conditionKey: condition.key || \"\",\n          name: condition.propertyName || \"\",\n          operator: condition.propertyOperator || \"\",\n          value: condition.propertyValue || \"\",\n          onChange: this.changePropertyCondition,\n          onRemove: this.removeCondition,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(EventCondition, {\n        events: events,\n        key: condition.key,\n        conditionKey: condition.key || \"\",\n        name: condition.eventName || \"\",\n        occurence: condition.eventOccurence || \"\",\n        occurenceValue: condition.eventOccurenceValue || 0,\n        attributeFilters: condition.eventAttributeFilters || [],\n        onChange: this.changeEventCondition,\n        onRemove: this.removeCondition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderConditions\",\n    value: function renderConditions() {\n      var _this2 = this;\n\n      var conditions = this.state.conditions;\n\n      if (conditions.length === 0) {\n        return React.createElement(EmptyContent, {\n          content: EMPTY_NEW_SEGMENT_CONTENT,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(SegmentTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, __(\"Filters\"), \" \", this.renderParent()), conditions.map(function (condition) {\n        return _this2.renderCondition(condition);\n      }));\n    }\n  }, {\n    key: \"renderSubOf\",\n    value: function renderSubOf(formProps) {\n      var _this3 = this;\n\n      var onChange = function onChange(e) {\n        return _this3.handleChange(\"subOf\", e.currentTarget.value);\n      };\n\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Sub segment of\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"subOf\",\n        componentClass: \"select\",\n        value: this.state.subOf || \"\",\n        onChange: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, __(\"Not selected\")), this.props.headSegments.map(function (segment) {\n        return React.createElement(\"option\", {\n          value: segment._id,\n          key: segment._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, segment.name);\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(SegmentWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(CommonForm, {\n        renderContent: this.renderForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nexport default Form;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/components/common/Form.tsx"],"names":["Button","EmptyContent","FormControl","CommonForm","FormGroup","ControlLabel","Icon","ModalFooter","__","generateRandomColorCode","FlexContent","FlexItem","EMPTY_NEW_SEGMENT_CONTENT","ColorPick","ColorPicker","ExpandWrapper","React","OverlayTrigger","Popover","TwitterPicker","Link","FilterBox","SegmentTitle","SegmentWrapper","AddConditionButton","EventCondition","PropertyCondition","Form","props","addCondition","condition","setState","conditions","state","changeEventCondition","args","type","key","eventName","name","eventOccurence","occurence","eventOccurenceValue","occurenceValue","eventAttributeFilters","attributeFilters","map","filter","rest","c","changePropertyCondition","propertyName","propertyOperator","operator","propertyValue","value","removeCondition","handleChange","generateDoc","values","segment","contentType","color","finalValues","updatedConditions","_id","forEach","cond","push","renderFilters","renderConditions","renderForm","formProps","isForm","renderButton","afterSave","previewCount","isSubmitted","description","subOf","nameOnChange","e","currentTarget","descOnChange","colorOnChange","hex","onPreviewCount","popoverTop","renderSubOf","backgroundColor","callback","object","Math","random","toString","fields","events","length","renderParent","renderCondition","onChange","headSegments","Component"],"mappings":"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","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport EmptyContent from \"modules/common/components/empty/EmptyContent\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport CommonForm from \"modules/common/components/form/Form\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { IButtonMutateProps, IFormProps } from \"modules/common/types\";\nimport { __, generateRandomColorCode } from \"modules/common/utils\";\nimport { FlexContent, FlexItem } from \"modules/layout/styles\";\nimport {\n  IConditionFilter,\n  IEvent,\n  IField,\n  ISegment,\n  ISegmentCondition,\n  ISegmentWithConditionDoc,\n} from \"modules/segments/types\";\nimport { EMPTY_NEW_SEGMENT_CONTENT } from \"modules/settings/constants\";\nimport { ColorPick, ColorPicker, ExpandWrapper } from \"modules/settings/styles\";\nimport React from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport TwitterPicker from \"react-color/lib/Twitter\";\nimport { Link } from \"react-router-dom\";\nimport { FilterBox, SegmentTitle, SegmentWrapper } from \"../styles\";\nimport AddConditionButton from \"./AddConditionButton\";\nimport EventCondition from \"./EventCondition\";\nimport PropertyCondition from \"./PropertyCondition\";\n\ntype Props = {\n  contentType?: string;\n  fields: IField[];\n  events: IEvent[];\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  edit?: (params: { _id: string; doc: ISegmentWithConditionDoc }) => void;\n  segment?: ISegment;\n  headSegments: ISegment[];\n  isForm?: boolean;\n  afterSave?: () => void;\n  previewCount?: (conditions: ISegmentCondition[], subOf?: string) => void;\n};\n\ntype State = {\n  name: string;\n  description: string;\n  subOf: string;\n  color: string;\n  conditions: ISegmentCondition[];\n};\n\nclass Form extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    const segment: ISegment = props.segment || {\n      name: \"\",\n      description: \"\",\n      subOf: \"\",\n      color: generateRandomColorCode(),\n      conditions: [],\n    };\n\n    segment.conditions = segment.conditions.map((cond: ISegmentCondition) => ({\n      key: Math.random().toString(),\n      ...cond,\n    }));\n\n    this.state = segment;\n  }\n\n  componentDidMount() {\n    const { previewCount } = this.props;\n    const { conditions, subOf } = this.state;\n\n    if (previewCount) {\n      previewCount(conditions, subOf);\n    }\n  }\n\n  addCondition = (condition: ISegmentCondition) => {\n    this.setState({\n      conditions: [...this.state.conditions, condition],\n    });\n  };\n\n  changeEventCondition = (args: {\n    key: string;\n    name: string;\n    attributeFilters: IConditionFilter[];\n    occurence: string;\n    occurenceValue: number;\n  }) => {\n    const condition = {\n      type: \"event\",\n      key: args.key,\n      eventName: args.name,\n      eventOccurence: args.occurence,\n      eventOccurenceValue: args.occurenceValue,\n      eventAttributeFilters: (args.attributeFilters || []).map((filter) => {\n        const { key, ...rest } = filter;\n\n        return rest;\n      }),\n    };\n\n    this.setState({\n      conditions: this.state.conditions.map((c) =>\n        c.key === condition.key ? condition : c\n      ),\n    });\n  };\n\n  changePropertyCondition = (args: {\n    key: string;\n    name: string;\n    operator: string;\n    value: string;\n  }) => {\n    const condition = {\n      type: \"property\",\n      key: args.key,\n      propertyName: args.name,\n      propertyOperator: args.operator,\n      propertyValue: args.value,\n    };\n\n    this.setState({\n      conditions: this.state.conditions.map((c) =>\n        c.key === condition.key ? condition : c\n      ),\n    });\n  };\n\n  removeCondition = (key: string) => {\n    const conditions = this.state.conditions.filter((c) => c.key !== key);\n\n    this.setState({ conditions });\n  };\n\n  handleChange = <T extends keyof State>(name: T, value: State[T]) => {\n    this.setState(({ [name]: value } as unknown) as Pick<State, keyof State>);\n  };\n\n  generateDoc = (values: {\n    _id?: string;\n    name: string;\n    subOf: string;\n    color: string;\n  }) => {\n    const { segment, contentType } = this.props;\n    const { color, conditions } = this.state;\n    const finalValues = values;\n\n    const updatedConditions: ISegmentCondition[] = [];\n\n    if (segment) {\n      finalValues._id = segment._id;\n    }\n\n    conditions.forEach((cond: ISegmentCondition) => {\n      const { key, ...rest } = cond;\n      updatedConditions.push(rest);\n    });\n\n    return {\n      ...finalValues,\n      color,\n      contentType,\n      conditions: updatedConditions,\n    };\n  };\n\n  renderParent() {\n    const { contentType } = this.props;\n    const { subOf } = this.state;\n\n    if (!subOf) {\n      return null;\n    }\n\n    return (\n      <Link to={`/segments/edit/${contentType}/${subOf}`} target=\"_blank\">\n        <Icon icon=\"arrows-up-right\" />\n        {__(\"See parent segment conditions\")}\n      </Link>\n    );\n  }\n\n  renderCondition(condition: ISegmentCondition) {\n    const { fields, events } = this.props;\n\n    if (condition.type === \"property\") {\n      return (\n        <PropertyCondition\n          fields={fields}\n          key={condition.key}\n          conditionKey={condition.key || \"\"}\n          name={condition.propertyName || \"\"}\n          operator={condition.propertyOperator || \"\"}\n          value={condition.propertyValue || \"\"}\n          onChange={this.changePropertyCondition}\n          onRemove={this.removeCondition}\n        />\n      );\n    }\n\n    return (\n      <EventCondition\n        events={events}\n        key={condition.key}\n        conditionKey={condition.key || \"\"}\n        name={condition.eventName || \"\"}\n        occurence={condition.eventOccurence || \"\"}\n        occurenceValue={condition.eventOccurenceValue || 0}\n        attributeFilters={condition.eventAttributeFilters || []}\n        onChange={this.changeEventCondition}\n        onRemove={this.removeCondition}\n      />\n    );\n  }\n\n  renderConditions() {\n    const { conditions } = this.state;\n\n    if (conditions.length === 0) {\n      return <EmptyContent content={EMPTY_NEW_SEGMENT_CONTENT} />;\n    }\n\n    return (\n      <>\n        <SegmentTitle>\n          {__(\"Filters\")} {this.renderParent()}\n        </SegmentTitle>\n        {conditions.map((condition) => this.renderCondition(condition))}\n      </>\n    );\n  }\n\n  renderSubOf(formProps: IFormProps) {\n    const onChange = (e: React.FormEvent) =>\n      this.handleChange(\"subOf\", (e.currentTarget as HTMLInputElement).value);\n\n    return (\n      <FormGroup>\n        <ControlLabel>Sub segment of</ControlLabel>\n        <FormControl\n          {...formProps}\n          name=\"subOf\"\n          componentClass=\"select\"\n          value={this.state.subOf || \"\"}\n          onChange={onChange}\n        >\n          <option value=\"\">{__(\"Not selected\")}</option>\n          {this.props.headSegments.map((segment) => (\n            <option value={segment._id} key={segment._id}>\n              {segment.name}\n            </option>\n          ))}\n        </FormControl>\n      </FormGroup>\n    );\n  }\n\n  renderFilters = () => {\n    return (\n      <FilterBox>\n        {this.renderConditions()}\n        <AddConditionButton addCondition={this.addCondition} />\n      </FilterBox>\n    );\n  };\n\n  renderForm = (formProps: IFormProps) => {\n    const {\n      isForm,\n      segment,\n      contentType,\n      renderButton,\n      afterSave,\n      previewCount,\n    } = this.props;\n\n    const { values, isSubmitted } = formProps;\n    const { name, description, color, conditions, subOf } = this.state;\n\n    const nameOnChange = (e: React.FormEvent) =>\n      this.handleChange(\"name\", (e.currentTarget as HTMLInputElement).value);\n\n    const descOnChange = (e: React.FormEvent) =>\n      this.handleChange(\n        \"description\",\n        (e.currentTarget as HTMLInputElement).value\n      );\n\n    const colorOnChange = (e) => this.handleChange(\"color\", e.hex);\n\n    const onPreviewCount = () => {\n      if (previewCount) {\n        previewCount(conditions, subOf);\n      }\n    };\n\n    const popoverTop = (\n      <Popover id=\"color-picker\">\n        <TwitterPicker triangle=\"hide\" color={color} onChange={colorOnChange} />\n      </Popover>\n    );\n\n    return (\n      <>\n        <FlexContent>\n          <FlexItem count={5}>\n            <FormGroup>\n              <ControlLabel required={true}>Segment Name</ControlLabel>\n              <FormControl\n                {...formProps}\n                name=\"name\"\n                value={name}\n                onChange={nameOnChange}\n                required={true}\n                autoFocus={true}\n              />\n            </FormGroup>\n          </FlexItem>\n          <FlexItem count={3} hasSpace={true}>\n            {this.renderSubOf({ ...formProps })}\n          </FlexItem>\n        </FlexContent>\n\n        <FlexContent>\n          <ExpandWrapper>\n            <FormGroup>\n              <ControlLabel>Description</ControlLabel>\n              <FormControl\n                {...formProps}\n                name=\"description\"\n                value={description}\n                onChange={descOnChange}\n              />\n            </FormGroup>\n          </ExpandWrapper>\n\n          <FormGroup>\n            <ControlLabel>Color</ControlLabel>\n            <div id=\"segment-color\">\n              <OverlayTrigger\n                trigger=\"click\"\n                rootClose={true}\n                placement=\"bottom\"\n                overlay={popoverTop}\n              >\n                <ColorPick>\n                  <ColorPicker style={{ backgroundColor: color }} />\n                </ColorPick>\n              </OverlayTrigger>\n            </div>\n          </FormGroup>\n        </FlexContent>\n\n        {this.renderFilters()}\n\n        <ModalFooter id=\"button-group\">\n          <Button.Group>\n            {isForm && (\n              <Link to={`/segments/${contentType}`}>\n                <Button uppercase={false} btnStyle=\"simple\" icon=\"times-circle\">\n                  Cancel\n                </Button>\n              </Link>\n            )}\n\n            {previewCount && (\n              <Button\n                id=\"segment-show-count\"\n                uppercase={false}\n                icon=\"crosshairs\"\n                onClick={onPreviewCount}\n              >\n                Show count\n              </Button>\n            )}\n\n            {renderButton({\n              name: \"segment\",\n              values: this.generateDoc(values),\n              callback: afterSave,\n              isSubmitted,\n              object: segment,\n            })}\n          </Button.Group>\n        </ModalFooter>\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <SegmentWrapper>\n        <CommonForm renderContent={this.renderForm} />\n      </SegmentWrapper>\n    );\n  }\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}