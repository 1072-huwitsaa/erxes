{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserList.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport { Alert } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport { queries as permissionQueries } from 'modules/settings/permissions/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { commonListComposer } from '../../utils';\nimport UserList from '../components/UserList';\nimport { mutations, queries } from '../graphql';\n\nvar UserListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserListContainer, _React$Component);\n\n  function UserListContainer(props) {\n    var _this;\n\n    _classCallCheck(this, UserListContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserListContainer).call(this, props));\n\n    _this.changeStatus = function (id) {\n      var _this$props = _this.props,\n          statusChangedMutation = _this$props.statusChangedMutation,\n          listQuery = _this$props.listQuery;\n      statusChangedMutation({\n        variables: {\n          _id: id\n        }\n      }).then(function () {\n        listQuery.refetch();\n        Alert.success('Congrats, Successfully updated.');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.getRefetchQueries = function () {\n      return [{\n        query: gql(queries.users),\n        options: options\n      }, {\n        query: gql(queries.usersTotalCount),\n        options: options\n      }];\n    };\n\n    _this.state = {\n      usersGroups: []\n    };\n    return _this;\n  }\n\n  _createClass(UserListContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      client.query({\n        query: gql(permissionQueries.usersGroups)\n      }).then(function (_ref) {\n        var usersGroups = _ref.data.usersGroups;\n\n        _this2.setState({\n          usersGroups: usersGroups\n        });\n      });\n    }\n  }, {\n    key: \"resendInvitation\",\n    value: function resendInvitation(email) {\n      client.mutate({\n        mutation: gql(mutations.usersResendInvitation),\n        variables: {\n          email: email\n        }\n      }).then(function () {\n        Alert.success('Successfully resent the invitation');\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(UserList, Object.assign({}, this.props, {\n        usersGroups: this.state.usersGroups,\n        changeStatus: this.changeStatus,\n        resendInvitation: this.resendInvitation,\n        refetchQueries: this.getRefetchQueries(),\n        renderButton: this.props.renderButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserListContainer;\n}(React.Component);\n\nvar options = function options(_ref2) {\n  var queryParams = _ref2.queryParams;\n  return {\n    variables: _objectSpread({}, generatePaginationParams(queryParams), {\n      searchValue: queryParams.searchValue,\n      isActive: queryParams.isActive === 'false' ? false : true,\n      brandIds: queryParams.brandIds\n    }),\n    fetchPolicy: 'network-only'\n  };\n};\n\nexport default commonListComposer({\n  text: 'team member',\n  label: 'users',\n  stringAddMutation: mutations.usersInvite,\n  stringEditMutation: mutations.usersEdit,\n  gqlListQuery: graphql(gql(queries.users), {\n    name: 'listQuery',\n    options: options\n  }),\n  gqlAddMutation: graphql(gql(mutations.usersInvite), {\n    name: 'addMutation'\n  }),\n  gqlEditMutation: graphql(gql(mutations.usersEdit), {\n    name: 'editMutation'\n  }),\n  gqlRemoveMutation: graphql(gql(mutations.usersSetActiveStatus), {\n    name: 'statusChangedMutation',\n    options: function options(_ref3) {\n      var queryParams = _ref3.queryParams;\n      return {\n        refetchQueries: [{\n          query: gql(queries.users),\n          variables: _objectSpread({}, generatePaginationParams(queryParams), {\n            isActive: !(queryParams.isActive === 'false' ? false : true)\n          })\n        }]\n      };\n    }\n  }),\n  gqlTotalCountQuery: graphql(gql(queries.usersTotalCount), {\n    name: 'totalCountQuery',\n    options: options\n  }),\n  ListComponent: UserListContainer,\n  gqlConfigsQuery: graphql(gql(generalQueries.configsGetEnv), {\n    name: 'configsEnvQuery',\n    options: {\n      fetchPolicy: 'network-only'\n    }\n  })\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserList.tsx"],"names":["client","gql","Alert","generatePaginationParams","queries","generalQueries","permissionQueries","React","graphql","commonListComposer","UserList","mutations","UserListContainer","props","changeStatus","id","statusChangedMutation","listQuery","variables","_id","then","refetch","success","catch","error","message","getRefetchQueries","query","users","options","usersTotalCount","state","usersGroups","data","setState","email","mutate","mutation","usersResendInvitation","e","resendInvitation","renderButton","Component","queryParams","searchValue","isActive","brandIds","fetchPolicy","text","label","stringAddMutation","usersInvite","stringEditMutation","usersEdit","gqlListQuery","name","gqlAddMutation","gqlEditMutation","gqlRemoveMutation","usersSetActiveStatus","refetchQueries","gqlTotalCountQuery","ListComponent","gqlConfigsQuery","configsGetEnv"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { Alert } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport {\n  ICommonFormProps,\n  ICommonListProps\n} from 'modules/settings/common/types';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport { queries as permissionQueries } from 'modules/settings/permissions/graphql';\nimport { IUserGroup } from 'modules/settings/permissions/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { commonListComposer } from '../../utils';\nimport UserList from '../components/UserList';\nimport { mutations, queries } from '../graphql';\n\ntype Props = ICommonListProps &\n  ICommonFormProps & {\n    statusChangedMutation: any;\n    listQuery: any;\n    renderButton: (props: IButtonMutateProps) => JSX.Element;\n  };\n\nclass UserListContainer extends React.Component<\n  Props,\n  { usersGroups: IUserGroup[] }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = { usersGroups: [] };\n  }\n\n  componentDidMount() {\n    client\n      .query({\n        query: gql(permissionQueries.usersGroups)\n      })\n      .then(({ data: { usersGroups } }: any) => {\n        this.setState({ usersGroups });\n      });\n  }\n\n  changeStatus = (id: string): void => {\n    const { statusChangedMutation, listQuery } = this.props;\n\n    statusChangedMutation({\n      variables: { _id: id }\n    })\n      .then(() => {\n        listQuery.refetch();\n\n        Alert.success('Congrats, Successfully updated.');\n      })\n      .catch((error: Error) => {\n        Alert.error(error.message);\n      });\n  };\n\n  resendInvitation(email: string) {\n    client\n      .mutate({\n        mutation: gql(mutations.usersResendInvitation),\n        variables: { email }\n      })\n      .then(() => {\n        Alert.success('Successfully resent the invitation');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  }\n\n  getRefetchQueries = () => {\n    return [\n      { query: gql(queries.users), options },\n      { query: gql(queries.usersTotalCount), options }\n    ];\n  };\n\n  render() {\n    return (\n      <UserList\n        {...this.props}\n        usersGroups={this.state.usersGroups}\n        changeStatus={this.changeStatus}\n        resendInvitation={this.resendInvitation}\n        refetchQueries={this.getRefetchQueries()}\n        renderButton={this.props.renderButton}\n      />\n    );\n  }\n}\n\nconst options = ({ queryParams }: { queryParams: any }): any => {\n  return {\n    variables: {\n      ...generatePaginationParams(queryParams),\n      searchValue: queryParams.searchValue,\n      isActive: queryParams.isActive === 'false' ? false : true,\n      brandIds: queryParams.brandIds\n    },\n    fetchPolicy: 'network-only'\n  };\n};\n\nexport default commonListComposer<{ queryParams: any; history: any }>({\n  text: 'team member',\n  label: 'users',\n  stringAddMutation: mutations.usersInvite,\n  stringEditMutation: mutations.usersEdit,\n\n  gqlListQuery: graphql(gql(queries.users), {\n    name: 'listQuery',\n    options\n  }),\n  gqlAddMutation: graphql(gql(mutations.usersInvite), {\n    name: 'addMutation'\n  }),\n  gqlEditMutation: graphql(gql(mutations.usersEdit), {\n    name: 'editMutation'\n  }),\n  gqlRemoveMutation: graphql<{ queryParams: any }>(\n    gql(mutations.usersSetActiveStatus),\n    {\n      name: 'statusChangedMutation',\n      options: ({ queryParams }) => ({\n        refetchQueries: [\n          {\n            query: gql(queries.users),\n            variables: {\n              ...generatePaginationParams(queryParams),\n              isActive: !(queryParams.isActive === 'false' ? false : true)\n            }\n          }\n        ]\n      })\n    }\n  ),\n  gqlTotalCountQuery: graphql(gql(queries.usersTotalCount), {\n    name: 'totalCountQuery',\n    options\n  }),\n  ListComponent: UserListContainer,\n  gqlConfigsQuery: graphql(gql(generalQueries.configsGetEnv), {\n    name: 'configsEnvQuery',\n    options: { fetchPolicy: 'network-only' }\n  })\n});\n"]},"metadata":{},"sourceType":"module"}