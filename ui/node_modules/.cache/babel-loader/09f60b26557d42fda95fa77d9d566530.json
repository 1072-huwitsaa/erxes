{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport queryString from 'query-string';\nimport { router } from '.';\n/**\n * @param {Object} query\n */\n\nvar setParams = function setParams(history, query) {\n  var replace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var location = Object.assign({}, history.location); // convert to {param1: value1}\n\n  var parsed = queryString.parse(location.search); // add new params or replace old params\n\n  Object.assign(parsed, query); // convert back to param1=value1&param2=value2\n\n  var stringified = queryString.stringify(parsed); // go to new url\n\n  if (replace) {\n    return history.replace(\"\".concat(location.pathname, \"?\").concat(stringified).concat(location.hash));\n  }\n\n  return history.push(\"\".concat(location.pathname, \"?\").concat(stringified).concat(location.hash));\n};\n/**\n * @param {String} name\n */\n\n\nvar getParam = function getParam(history, name) {\n  var location = Object.assign({}, history.location); // convert to {param1: value1}\n\n  var parsed = queryString.parse(location.search);\n  return parsed[name];\n};\n/**\n * @param {...String} queryNames\n */\n\n\nvar removeParams = function removeParams(history) {\n  var location = Object.assign({}, history.location); // convert to {param1: value1}\n\n  var parsed = queryString.parse(location.search); // remove given parameters\n\n  for (var _len = arguments.length, queryNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    queryNames[_key - 1] = arguments[_key];\n  }\n\n  queryNames.forEach(function (q) {\n    return delete parsed[q];\n  }); // convert back to param1=value1&param2=value2\n\n  var stringified = queryString.stringify(parsed); // go to new url\n\n  history.push(\"\".concat(location.pathname, \"?\").concat(stringified));\n};\n/*\n * @param {Object} query\n */\n\n\nvar refetchIfUpdated = function refetchIfUpdated(history, query) {\n  if (history.location.search.includes('updated')) {\n    // refetch query if path has refetch param\n    query.refetch(); // clear refetch param\n\n    removeParams(history, 'updated');\n  }\n};\n/**\n * Replace specific param\n * @param {Object} history\n * @param {Object} params - Updated params\n * @query {Object} query\n */\n\n\nvar replaceParam = function replaceParam(history, params, query) {\n  Object.assign(params, query);\n  var stringified = queryString.stringify(params);\n  return history.push(\"\".concat(window.location.pathname, \"?\").concat(stringified));\n};\n\nexport var generatePaginationParams = function generatePaginationParams(queryParams) {\n  return {\n    page: queryParams.page ? parseInt(queryParams.page, 10) : 1,\n    perPage: queryParams.perPage ? parseInt(queryParams.perPage, 10) : 20\n  };\n};\n/**\n * Set selected option param\n * @param {String} selected values\n * @param {String} param name\n * @param {Object}  history\n */\n\nvar onParamSelect = function onParamSelect(name, values, history) {\n  router.setParams(history, _defineProperty({}, name, values));\n};\n/**\n * Get hash from URL and check\n * given key exists in hash\n * @param {Object} history - location\n * @returns {Boolean} hashKey\n */\n\n\nvar checkHashKeyInURL = function checkHashKeyInURL(_ref, hashKey) {\n  var location = _ref.location;\n\n  if (!hashKey) {\n    return false;\n  }\n\n  var parsedHash = queryString.parse(location.hash);\n  return hashKey in parsedHash;\n};\n/**\n * Remove selected hash from URL\n * @param {Object} history - location\n * @param {String} hashKey\n */\n\n\nvar removeHash = function removeHash(history, hashKey) {\n  var location = Object.assign({}, history.location); // convert to {hashKey: value}\n\n  var parsedHash = queryString.parse(location.hash); // remove given hashKey\n\n  delete parsedHash[hashKey]; // convert back to hashKey=value\n\n  var stringified = queryString.stringify(parsedHash);\n  history.push(\"\".concat(location.pathname, \"?\").concat(stringified));\n};\n\nexport default {\n  onParamSelect: onParamSelect,\n  setParams: setParams,\n  getParam: getParam,\n  replaceParam: replaceParam,\n  removeParams: removeParams,\n  removeHash: removeHash,\n  refetchIfUpdated: refetchIfUpdated,\n  checkHashKeyInURL: checkHashKeyInURL\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/utils/router.ts"],"names":["queryString","router","setParams","history","query","replace","location","Object","assign","parsed","parse","search","stringified","stringify","pathname","hash","push","getParam","name","removeParams","queryNames","forEach","q","refetchIfUpdated","includes","refetch","replaceParam","params","window","generatePaginationParams","queryParams","page","parseInt","perPage","onParamSelect","values","checkHashKeyInURL","hashKey","parsedHash","removeHash"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\nimport { router } from '.';\n\n/**\n * @param {Object} query\n */\nconst setParams = (history: any, query: any, replace: boolean = false) => {\n  const location = Object.assign({}, history.location);\n\n  // convert to {param1: value1}\n  const parsed = queryString.parse(location.search);\n\n  // add new params or replace old params\n  Object.assign(parsed, query);\n\n  // convert back to param1=value1&param2=value2\n  const stringified = queryString.stringify(parsed);\n\n  // go to new url\n  if (replace) {\n    return history.replace(\n      `${location.pathname}?${stringified}${location.hash}`\n    );\n  }\n\n  return history.push(`${location.pathname}?${stringified}${location.hash}`);\n};\n\n/**\n * @param {String} name\n */\nconst getParam = (history: any, name: string | string[]) => {\n  const location = Object.assign({}, history.location);\n\n  // convert to {param1: value1}\n  const parsed = queryString.parse(location.search);\n\n  return parsed[name];\n};\n\n/**\n * @param {...String} queryNames\n */\nconst removeParams = (history: any, ...queryNames: string[]) => {\n  const location = Object.assign({}, history.location);\n\n  // convert to {param1: value1}\n  const parsed = queryString.parse(location.search);\n\n  // remove given parameters\n  queryNames.forEach(q => delete parsed[q]);\n\n  // convert back to param1=value1&param2=value2\n  const stringified = queryString.stringify(parsed);\n\n  // go to new url\n  history.push(`${location.pathname}?${stringified}`);\n};\n\n/*\n * @param {Object} query\n */\nconst refetchIfUpdated = (history: any, query: any) => {\n  if (history.location.search.includes('updated')) {\n    // refetch query if path has refetch param\n    query.refetch();\n\n    // clear refetch param\n    removeParams(history, 'updated');\n  }\n};\n\n/**\n * Replace specific param\n * @param {Object} history\n * @param {Object} params - Updated params\n * @query {Object} query\n */\nconst replaceParam = (history: any, params: any, query: any) => {\n  Object.assign(params, query);\n\n  const stringified = queryString.stringify(params);\n\n  return history.push(`${window.location.pathname}?${stringified}`);\n};\n\nexport const generatePaginationParams = (queryParams: {\n  page?: string;\n  perPage?: string;\n}) => {\n  return {\n    page: queryParams.page ? parseInt(queryParams.page, 10) : 1,\n    perPage: queryParams.perPage ? parseInt(queryParams.perPage, 10) : 20\n  };\n};\n\n/**\n * Set selected option param\n * @param {String} selected values\n * @param {String} param name\n * @param {Object}  history\n */\nconst onParamSelect = (\n  name: string,\n  values: string[] | string,\n  history: any\n) => {\n  router.setParams(history, { [name]: values });\n};\n\n/**\n * Get hash from URL and check\n * given key exists in hash\n * @param {Object} history - location\n * @returns {Boolean} hashKey\n */\nconst checkHashKeyInURL = ({ location }, hashKey?: string): boolean => {\n  if (!hashKey) {\n    return false;\n  }\n\n  const parsedHash = queryString.parse(location.hash);\n\n  return hashKey in parsedHash;\n};\n\n/**\n * Remove selected hash from URL\n * @param {Object} history - location\n * @param {String} hashKey\n */\nconst removeHash = (history: any, hashKey?: string) => {\n  const location = Object.assign({}, history.location);\n\n  // convert to {hashKey: value}\n  const parsedHash = queryString.parse(location.hash);\n\n  // remove given hashKey\n  delete parsedHash[hashKey];\n\n  // convert back to hashKey=value\n  const stringified = queryString.stringify(parsedHash);\n\n  history.push(`${location.pathname}?${stringified}`);\n};\n\nexport default {\n  onParamSelect,\n  setParams,\n  getParam,\n  replaceParam,\n  removeParams,\n  removeHash,\n  refetchIfUpdated,\n  checkHashKeyInURL\n};\n"]},"metadata":{},"sourceType":"module"}