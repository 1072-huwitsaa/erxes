{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/components/common/CustomerSection.tsx\";\nimport Box from 'modules/common/components/Box';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport Spinner from 'modules/common/components/Spinner';\nimport { ButtonRelated } from 'modules/common/styles/main';\nimport { __, renderFullName } from 'modules/common/utils';\nimport GetConformity from 'modules/conformity/containers/GetConformity';\nimport { SectionBodyItem } from 'modules/layout/styles';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport ActionSection from '../../containers/common/ActionSection';\nimport CustomerChooser from '../../containers/CustomerChooser';\nimport { queries } from '../../graphql';\n\nfunction Component(_ref) {\n  var name = _ref.name,\n      _ref$items = _ref.items,\n      items = _ref$items === void 0 ? [] : _ref$items,\n      _ref$mainType = _ref.mainType,\n      mainType = _ref$mainType === void 0 ? '' : _ref$mainType,\n      _ref$mainTypeId = _ref.mainTypeId,\n      mainTypeId = _ref$mainTypeId === void 0 ? '' : _ref$mainTypeId,\n      onSelect = _ref.onSelect;\n\n  var renderRelatedCustomerChooser = function renderRelatedCustomerChooser(props) {\n    return React.createElement(CustomerChooser, Object.assign({}, props, {\n      data: {\n        name: name,\n        customers: items,\n        mainTypeId: mainTypeId,\n        mainType: mainType,\n        isRelated: true\n      },\n      onSelect: onSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n  };\n\n  var relCustomerTrigger = React.createElement(ButtonRelated, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __('See related customers..')));\n  var relQuickButtons = React.createElement(ModalTrigger, {\n    title: \"Related Associate\",\n    trigger: relCustomerTrigger,\n    size: \"lg\",\n    content: renderRelatedCustomerChooser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  });\n\n  var renderBody = function renderBody(customersObj) {\n    if (!customersObj) {\n      return React.createElement(Spinner, {\n        objective: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, customersObj.map(function (customer, index) {\n      return React.createElement(SectionBodyItem, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/contacts/details/\".concat(customer._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, renderFullName(customer)), React.createElement(ActionSection, {\n        customer: customer,\n        isSmall: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }), customersObj.length === 0 && React.createElement(EmptyState, {\n      icon: \"user-6\",\n      text: \"No customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), mainTypeId && mainType && relQuickButtons);\n  };\n\n  var customerChooser = function customerChooser(props) {\n    return React.createElement(CustomerChooser, Object.assign({}, props, {\n      data: {\n        name: name,\n        customers: items,\n        mainTypeId: mainTypeId,\n        mainType: mainType\n      },\n      onSelect: onSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  };\n\n  var extraButtons = React.createElement(ModalTrigger, {\n    title: \"Associate\",\n    size: \"lg\",\n    trigger: React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      icon: \"plus-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })),\n    content: customerChooser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  });\n  return React.createElement(Box, {\n    title: __('Customers'),\n    extraButtons: extraButtons,\n    isOpen: true,\n    name: \"showCustomers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, renderBody(items));\n}\n\nexport default (function (props) {\n  return React.createElement(GetConformity, Object.assign({}, props, {\n    relType: \"customer\",\n    component: Component,\n    queryName: \"customers\",\n    itemsQuery: queries.customers,\n    alreadyItems: props.customers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/components/common/CustomerSection.tsx"],"names":["Box","EmptyState","Icon","ModalTrigger","Spinner","ButtonRelated","__","renderFullName","GetConformity","SectionBodyItem","React","Link","ActionSection","CustomerChooser","queries","Component","name","items","mainType","mainTypeId","onSelect","renderRelatedCustomerChooser","props","customers","isRelated","relCustomerTrigger","relQuickButtons","renderBody","customersObj","map","customer","index","_id","length","customerChooser","extraButtons"],"mappings":"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","sourcesContent":["import Box from 'modules/common/components/Box';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport Spinner from 'modules/common/components/Spinner';\nimport { ButtonRelated } from 'modules/common/styles/main';\nimport { __, renderFullName } from 'modules/common/utils';\nimport GetConformity from 'modules/conformity/containers/GetConformity';\nimport { SectionBodyItem } from 'modules/layout/styles';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport ActionSection from '../../containers/common/ActionSection';\nimport CustomerChooser from '../../containers/CustomerChooser';\nimport { queries } from '../../graphql';\nimport { ICustomer } from '../../types';\n\ntype Props = {\n  name: string;\n  items: ICustomer[];\n  mainType?: string;\n  mainTypeId?: string;\n  onSelect?: (customers: ICustomer[]) => void;\n};\n\nfunction Component({\n  name,\n  items = [],\n  mainType = '',\n  mainTypeId = '',\n  onSelect\n}: Props) {\n  const renderRelatedCustomerChooser = props => {\n    return (\n      <CustomerChooser\n        {...props}\n        data={{ name, customers: items, mainTypeId, mainType, isRelated: true }}\n        onSelect={onSelect}\n      />\n    );\n  };\n\n  const relCustomerTrigger = (\n    <ButtonRelated>\n      <span>{__('See related customers..')}</span>\n    </ButtonRelated>\n  );\n\n  const relQuickButtons = (\n    <ModalTrigger\n      title=\"Related Associate\"\n      trigger={relCustomerTrigger}\n      size=\"lg\"\n      content={renderRelatedCustomerChooser}\n    />\n  );\n\n  const renderBody = (customersObj: ICustomer[]) => {\n    if (!customersObj) {\n      return <Spinner objective={true} />;\n    }\n\n    return (\n      <div>\n        {customersObj.map((customer, index) => (\n          <SectionBodyItem key={index}>\n            <Link to={`/contacts/details/${customer._id}`}>\n              {renderFullName(customer)}\n            </Link>\n            <ActionSection customer={customer} isSmall={true} />\n          </SectionBodyItem>\n        ))}\n        {customersObj.length === 0 && (\n          <EmptyState icon=\"user-6\" text=\"No customer\" />\n        )}\n        {mainTypeId && mainType && relQuickButtons}\n      </div>\n    );\n  };\n\n  const customerChooser = props => {\n    return (\n      <CustomerChooser\n        {...props}\n        data={{ name, customers: items, mainTypeId, mainType }}\n        onSelect={onSelect}\n      />\n    );\n  };\n\n  const extraButtons = (\n    <ModalTrigger\n      title=\"Associate\"\n      size=\"lg\"\n      trigger={\n        <button>\n          <Icon icon=\"plus-circle\" />\n        </button>\n      }\n      content={customerChooser}\n    />\n  );\n\n  return (\n    <Box\n      title={__('Customers')}\n      extraButtons={extraButtons}\n      isOpen={true}\n      name=\"showCustomers\"\n    >\n      {renderBody(items)}\n    </Box>\n  );\n}\n\ntype IProps = {\n  mainType?: string;\n  mainTypeId?: string;\n  isOpen?: boolean;\n  customers?: ICustomer[];\n  onSelect?: (datas: ICustomer[]) => void;\n};\n\nexport default (props: IProps) => {\n  return (\n    <GetConformity\n      {...props}\n      relType=\"customer\"\n      component={Component}\n      queryName=\"customers\"\n      itemsQuery={queries.customers}\n      alreadyItems={props.customers}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}