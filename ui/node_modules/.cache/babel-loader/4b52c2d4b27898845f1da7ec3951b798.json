{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/Stage.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport { __, Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Stage from '../components/stage/Stage';\nimport { mutations } from '../graphql';\n\nvar StageContainer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(StageContainer, _React$PureComponent);\n\n  function StageContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StageContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StageContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.loadMore = function () {\n      var _this$props = _this.props,\n          onLoad = _this$props.onLoad,\n          stage = _this$props.stage,\n          items = _this$props.items,\n          queryParams = _this$props.queryParams,\n          options = _this$props.options;\n\n      if (items.length === stage.itemsTotalCount) {\n        return;\n      }\n\n      client.query({\n        query: gql(options.queries.itemsQuery),\n        variables: _objectSpread({\n          stageId: stage._id,\n          pipelineId: stage.pipelineId,\n          skip: items.length\n        }, getFilterParams(queryParams, options.getExtraParams))\n      }).then(function (_ref) {\n        var data = _ref.data;\n        onLoad(stage._id, [].concat(_toConsumableArray(items), _toConsumableArray(data[options.queriesName.itemsQuery] || [])));\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    _this.removeStage = function (id) {\n      var _this$props2 = _this.props,\n          removeStageMutation = _this$props2.removeStageMutation,\n          refetchStages = _this$props2.refetchStages,\n          stage = _this$props2.stage;\n      var message = 'This will permanently delete any items related to this stage. Are you absolutely sure?';\n      confirm(message, {\n        hasDeleteConfirm: true\n      }).then(function () {\n        removeStageMutation({\n          variables: {\n            _id: id\n          }\n        }).then(function () {\n          Alert.success('You have successfully removed a stage');\n          refetchStages({\n            pipelineId: stage.pipelineId\n          });\n        });\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    _this.archiveItems = function () {\n      var _this$props3 = _this.props,\n          options = _this$props3.options,\n          stage = _this$props3.stage,\n          onLoad = _this$props3.onLoad;\n      var stageId = stage._id;\n      confirm(__('Archive All Cards in This List?')).then(function () {\n        var proccessId = Math.random().toString();\n        localStorage.setItem('proccessId', proccessId);\n        client.mutate({\n          mutation: gql(options.mutations.archiveMutation),\n          variables: {\n            stageId: stageId\n          },\n          refetchQueries: [{\n            query: gql(queries.stageDetail),\n            variables: {\n              _id: stageId,\n              proccessId: proccessId\n            }\n          }]\n        }).then(function () {\n          Alert.success('Archive Items has been archived.');\n          onLoad(stageId, []);\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      });\n    };\n\n    _this.archiveList = function () {\n      var _this$props4 = _this.props,\n          stage = _this$props4.stage,\n          refetchStages = _this$props4.refetchStages,\n          options = _this$props4.options;\n      confirm(__('Archive this list?')).then(function () {\n        client.mutate({\n          mutation: gql(mutations.stagesEdit),\n          variables: {\n            _id: stage._id,\n            type: options.type,\n            status: 'archived'\n          }\n        }).then(function () {\n          Alert.success('Archive List has been archived.');\n          refetchStages({\n            pipelineId: stage.pipelineId\n          });\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StageContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var stage = nextProps.stage,\n          loadingState = nextProps.loadingState,\n          onLoad = nextProps.onLoad,\n          itemsQuery = nextProps.itemsQuery,\n          options = nextProps.options;\n\n      if (itemsQuery && !itemsQuery.loading && loadingState !== 'loaded') {\n        // Send loaded items to PipelineContext so that context is able to set it\n        // to global itemsMap\n        var _items = itemsQuery[options.queriesName.itemsQuery] || [];\n\n        onLoad(stage._id, _items);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props5 = this.props,\n          scheduleStage = _this$props5.scheduleStage,\n          stage = _this$props5.stage; // register stage to queue on first render\n\n      scheduleStage(stage._id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          index = _this$props6.index,\n          length = _this$props6.length,\n          stage = _this$props6.stage,\n          items = _this$props6.items,\n          itemsQuery = _this$props6.itemsQuery,\n          options = _this$props6.options,\n          onAddItem = _this$props6.onAddItem,\n          onRemoveItem = _this$props6.onRemoveItem,\n          loadingState = _this$props6.loadingState;\n\n      var loadingItems = function loadingItems() {\n        if (itemsQuery && !itemsQuery.loading || loadingState !== 'loaded') {\n          return true;\n        }\n\n        return false;\n      };\n\n      return React.createElement(Stage, {\n        options: options,\n        stage: stage,\n        index: index,\n        length: length,\n        items: items,\n        archiveItems: this.archiveItems,\n        archiveList: this.archiveList,\n        removeStage: this.removeStage,\n        loadingItems: loadingItems,\n        loadMore: this.loadMore,\n        onAddItem: onAddItem,\n        onRemoveItem: onRemoveItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return StageContainer;\n}(React.PureComponent);\n\nvar getFilterParams = function getFilterParams(queryParams, getExtraParams) {\n  if (!queryParams) {\n    return {};\n  }\n\n  return _objectSpread({\n    search: queryParams.search,\n    customerIds: queryParams.customerIds,\n    companyIds: queryParams.companyIds,\n    assignedUserIds: queryParams.assignedUserIds,\n    closeDateType: queryParams.closeDateType,\n    labelIds: queryParams.labelIds,\n    userIds: queryParams.userIds\n  }, getExtraParams(queryParams));\n};\n\nvar withQuery = function withQuery(_ref2) {\n  var _options = _ref2.options;\n  return withProps(compose(graphql(gql(_options.queries.itemsQuery), {\n    name: 'itemsQuery',\n    skip: function skip(_ref3) {\n      var loadingState = _ref3.loadingState;\n      return loadingState !== 'readyToLoad';\n    },\n    options: function options(_ref4) {\n      var stage = _ref4.stage,\n          queryParams = _ref4.queryParams,\n          loadingState = _ref4.loadingState;\n      return {\n        variables: _objectSpread({\n          stageId: stage._id,\n          pipelineId: stage.pipelineId\n        }, getFilterParams(queryParams, _options.getExtraParams)),\n        fetchPolicy: loadingState === 'readyToLoad' ? 'network-only' : 'cache-only',\n        notifyOnNetworkStatusChange: loadingState === 'readyToLoad'\n      };\n    }\n  }), graphql(gql(mutations.stagesRemove), {\n    name: 'removeStageMutation'\n  }))(StageContainer));\n};\n\nvar WithData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WithData, _React$Component);\n\n  function WithData(props) {\n    var _this2;\n\n    _classCallCheck(this, WithData);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props));\n    _this2.withQuery = void 0;\n    _this2.withQuery = withQuery({\n      options: props.options\n    });\n    return _this2;\n  }\n\n  _createClass(WithData, [{\n    key: \"render\",\n    value: function render() {\n      var Component = this.withQuery;\n      return React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WithData;\n}(React.Component);\n\nexport default withProps(WithData);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/Stage.tsx"],"names":["client","gql","compose","queries","__","Alert","confirm","withProps","React","graphql","Stage","mutations","StageContainer","loadMore","props","onLoad","stage","items","queryParams","options","length","itemsTotalCount","query","itemsQuery","variables","stageId","_id","pipelineId","skip","getFilterParams","getExtraParams","then","data","queriesName","catch","e","error","message","removeStage","id","removeStageMutation","refetchStages","hasDeleteConfirm","success","archiveItems","proccessId","Math","random","toString","localStorage","setItem","mutate","mutation","archiveMutation","refetchQueries","stageDetail","archiveList","stagesEdit","type","status","nextProps","loadingState","loading","scheduleStage","index","onAddItem","onRemoveItem","loadingItems","PureComponent","search","customerIds","companyIds","assignedUserIds","closeDateType","labelIds","userIds","withQuery","name","fetchPolicy","notifyOnNetworkStatusChange","stagesRemove","WithData","Component"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport { __, Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Stage from '../components/stage/Stage';\nimport { mutations } from '../graphql';\nimport {\n  IFilterParams,\n  IItem,\n  IOptions,\n  IStage,\n  ItemsQueryResponse,\n  RemoveStageMutation,\n  SaveItemMutation\n} from '../types';\n\ntype StageProps = {\n  stage: IStage;\n  index: number;\n  loadingState: 'readyToLoad' | 'loaded';\n  items: IItem[];\n  length: number;\n  queryParams: IFilterParams;\n  options: IOptions;\n  refetchStages: ({ pipelineId }: { pipelineId?: string }) => Promise<any>;\n  onLoad: (stageId: string, items: IItem[]) => void;\n  scheduleStage: (stageId: string) => void;\n  onAddItem: (stageId: string, item: IItem, aboveItemId?: string) => void;\n  onRemoveItem: (itemId: string, stageId: string) => void;\n};\n\ntype FinalStageProps = {\n  addMutation: SaveItemMutation;\n  itemsQuery?: ItemsQueryResponse;\n  removeStageMutation: RemoveStageMutation;\n} & StageProps;\n\nclass StageContainer extends React.PureComponent<FinalStageProps> {\n  componentWillReceiveProps(nextProps: FinalStageProps) {\n    const { stage, loadingState, onLoad, itemsQuery, options } = nextProps;\n\n    if (itemsQuery && !itemsQuery.loading && loadingState !== 'loaded') {\n      // Send loaded items to PipelineContext so that context is able to set it\n      // to global itemsMap\n      const items = itemsQuery[options.queriesName.itemsQuery] || [];\n      onLoad(stage._id, items);\n    }\n  }\n\n  componentDidMount() {\n    const { scheduleStage, stage } = this.props;\n\n    // register stage to queue on first render\n    scheduleStage(stage._id);\n  }\n\n  loadMore = () => {\n    const { onLoad, stage, items, queryParams, options } = this.props;\n\n    if (items.length === stage.itemsTotalCount) {\n      return;\n    }\n\n    client\n      .query({\n        query: gql(options.queries.itemsQuery),\n        variables: {\n          stageId: stage._id,\n          pipelineId: stage.pipelineId,\n          skip: items.length,\n          ...getFilterParams(queryParams, options.getExtraParams)\n        }\n      })\n      .then(({ data }: any) => {\n        onLoad(stage._id, [\n          ...items,\n          ...(data[options.queriesName.itemsQuery] || [])\n        ]);\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  removeStage = (id: string) => {\n    const { removeStageMutation, refetchStages, stage } = this.props;\n\n    const message =\n      'This will permanently delete any items related to this stage. Are you absolutely sure?';\n\n    confirm(message, { hasDeleteConfirm: true })\n      .then(() => {\n        removeStageMutation({ variables: { _id: id } }).then(() => {\n          Alert.success('You have successfully removed a stage');\n\n          refetchStages({ pipelineId: stage.pipelineId });\n        });\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  archiveItems = () => {\n    const { options, stage, onLoad } = this.props;\n\n    const stageId = stage._id;\n\n    confirm(__('Archive All Cards in This List?')).then(() => {\n      const proccessId = Math.random().toString();\n      localStorage.setItem('proccessId', proccessId);\n\n      client\n        .mutate({\n          mutation: gql(options.mutations.archiveMutation),\n          variables: { stageId },\n          refetchQueries: [\n            {\n              query: gql(queries.stageDetail),\n              variables: { _id: stageId, proccessId }\n            }\n          ]\n        })\n        .then(() => {\n          Alert.success('Archive Items has been archived.');\n\n          onLoad(stageId, []);\n        })\n        .catch((e: Error) => {\n          Alert.error(e.message);\n        });\n    });\n  };\n\n  archiveList = () => {\n    const { stage, refetchStages, options } = this.props;\n\n    confirm(__('Archive this list?')).then(() => {\n      client\n        .mutate({\n          mutation: gql(mutations.stagesEdit),\n          variables: {\n            _id: stage._id,\n            type: options.type,\n            status: 'archived'\n          }\n        })\n        .then(() => {\n          Alert.success('Archive List has been archived.');\n\n          refetchStages({ pipelineId: stage.pipelineId });\n        })\n        .catch((e: Error) => {\n          Alert.error(e.message);\n        });\n    });\n  };\n\n  render() {\n    const {\n      index,\n      length,\n      stage,\n      items,\n      itemsQuery,\n      options,\n      onAddItem,\n      onRemoveItem,\n      loadingState\n    } = this.props;\n\n    const loadingItems = () => {\n      if ((itemsQuery && !itemsQuery.loading) || loadingState !== 'loaded') {\n        return true;\n      }\n\n      return false;\n    };\n\n    return (\n      <Stage\n        options={options}\n        stage={stage}\n        index={index}\n        length={length}\n        items={items}\n        archiveItems={this.archiveItems}\n        archiveList={this.archiveList}\n        removeStage={this.removeStage}\n        loadingItems={loadingItems}\n        loadMore={this.loadMore}\n        onAddItem={onAddItem}\n        onRemoveItem={onRemoveItem}\n      />\n    );\n  }\n}\n\nconst getFilterParams = (\n  queryParams: IFilterParams,\n  getExtraParams: (queryParams) => any\n) => {\n  if (!queryParams) {\n    return {};\n  }\n\n  return {\n    search: queryParams.search,\n    customerIds: queryParams.customerIds,\n    companyIds: queryParams.companyIds,\n    assignedUserIds: queryParams.assignedUserIds,\n    closeDateType: queryParams.closeDateType,\n    labelIds: queryParams.labelIds,\n    userIds: queryParams.userIds,\n    ...getExtraParams(queryParams)\n  };\n};\n\nconst withQuery = ({ options }) => {\n  return withProps<StageProps>(\n    compose(\n      graphql<StageProps>(gql(options.queries.itemsQuery), {\n        name: 'itemsQuery',\n        skip: ({ loadingState }) => loadingState !== 'readyToLoad',\n        options: ({ stage, queryParams, loadingState }) => ({\n          variables: {\n            stageId: stage._id,\n            pipelineId: stage.pipelineId,\n            ...getFilterParams(queryParams, options.getExtraParams)\n          },\n          fetchPolicy:\n            loadingState === 'readyToLoad' ? 'network-only' : 'cache-only',\n          notifyOnNetworkStatusChange: loadingState === 'readyToLoad'\n        })\n      }),\n      graphql<StageProps>(gql(mutations.stagesRemove), {\n        name: 'removeStageMutation'\n      })\n    )(StageContainer)\n  );\n};\n\nclass WithData extends React.Component<StageProps> {\n  private withQuery;\n\n  constructor(props) {\n    super(props);\n\n    this.withQuery = withQuery({ options: props.options });\n  }\n\n  render() {\n    const Component = this.withQuery;\n\n    return <Component {...this.props} />;\n  }\n}\n\nexport default withProps<StageProps>(WithData);\n"]},"metadata":{},"sourceType":"module"}