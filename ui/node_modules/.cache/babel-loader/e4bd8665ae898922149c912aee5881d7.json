{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/layout/containers/QuickNavigation.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n          mutation {\\n            logout\\n          }\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { Alert, getCookie, setCookie, withProps } from 'modules/common/utils';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport QuickNavigation from '../components/QuickNavigation';\n\nvar QuickNavigationContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QuickNavigationContainer, _React$Component);\n\n  function QuickNavigationContainer(props) {\n    var _this;\n\n    _classCallCheck(this, QuickNavigationContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuickNavigationContainer).call(this, props));\n\n    _this.logout = function () {\n      client.mutate({\n        mutation: gql(_templateObject())\n      }).then(function () {\n        window.location.href = '/';\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.setValues = function (selectedBrands) {\n      _this.setState({\n        selectedBrands: selectedBrands\n      }, function () {\n        setCookie('scopeBrandIds', JSON.stringify(_this.state.selectedBrands));\n        window.location.reload();\n      });\n    };\n\n    _this.onChangeBrands = function (value) {\n      var selectedBrands = _this.state.selectedBrands;\n\n      if (selectedBrands.includes(value)) {\n        return _this.setValues(selectedBrands.filter(function (i) {\n          return i !== value;\n        }));\n      }\n\n      return _this.setValues(selectedBrands.concat(value));\n    };\n\n    var cookieValue = getCookie('scopeBrandIds');\n    _this.state = {\n      selectedBrands: cookieValue ? JSON.parse(cookieValue) : []\n    };\n    return _this;\n  }\n\n  _createClass(QuickNavigationContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          getEnvQuery = _this$props.getEnvQuery,\n          currentUser = _this$props.currentUser;\n      var config = getEnvQuery.configsGetEnv || {};\n      return React.createElement(QuickNavigation, {\n        showBrands: config.USE_BRAND_RESTRICTIONS === 'true',\n        onChangeBrands: this.onChangeBrands,\n        selectedBrands: this.state.selectedBrands,\n        logout: this.logout,\n        currentUser: currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return QuickNavigationContainer;\n}(React.Component);\n\nvar WithUser = withCurrentUser(QuickNavigationContainer);\nexport default withProps(compose(graphql(gql(generalQueries.configsGetEnv), {\n  name: 'getEnvQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(WithUser));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/layout/containers/QuickNavigation.tsx"],"names":["client","gql","compose","withCurrentUser","Alert","getCookie","setCookie","withProps","queries","generalQueries","React","graphql","QuickNavigation","QuickNavigationContainer","props","logout","mutate","mutation","then","window","location","href","catch","error","message","setValues","selectedBrands","setState","JSON","stringify","state","reload","onChangeBrands","value","includes","filter","i","concat","cookieValue","parse","getEnvQuery","currentUser","config","configsGetEnv","USE_BRAND_RESTRICTIONS","Component","WithUser","name","options","fetchPolicy"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { IUser } from 'modules/auth/types';\nimport { Alert, getCookie, setCookie, withProps } from 'modules/common/utils';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport QuickNavigation from '../components/QuickNavigation';\n\ntype Props = {\n  getEnvQuery: any;\n  currentUser: IUser;\n};\n\ntype State = {\n  selectedBrands: string[];\n};\n\nclass QuickNavigationContainer extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    const cookieValue = getCookie('scopeBrandIds');\n\n    this.state = { selectedBrands: cookieValue ? JSON.parse(cookieValue) : [] };\n  }\n\n  logout = () => {\n    client\n      .mutate({\n        mutation: gql`\n          mutation {\n            logout\n          }\n        `\n      })\n\n      .then(() => {\n        window.location.href = '/';\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  setValues = (selectedBrands: string[]) => {\n    this.setState({ selectedBrands }, () => {\n      setCookie('scopeBrandIds', JSON.stringify(this.state.selectedBrands));\n      window.location.reload();\n    });\n  };\n\n  onChangeBrands = (value: string) => {\n    const { selectedBrands } = this.state;\n\n    if (selectedBrands.includes(value)) {\n      return this.setValues(selectedBrands.filter(i => i !== value));\n    }\n\n    return this.setValues(selectedBrands.concat(value));\n  };\n\n  render() {\n    const { getEnvQuery, currentUser } = this.props;\n    const config = getEnvQuery.configsGetEnv || {};\n\n    return (\n      <QuickNavigation\n        showBrands={config.USE_BRAND_RESTRICTIONS === 'true'}\n        onChangeBrands={this.onChangeBrands}\n        selectedBrands={this.state.selectedBrands}\n        logout={this.logout}\n        currentUser={currentUser}\n      />\n    );\n  }\n}\n\nconst WithUser = withCurrentUser(QuickNavigationContainer);\n\nexport default withProps(\n  compose(\n    graphql(gql(generalQueries.configsGetEnv), {\n      name: 'getEnvQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    })\n  )(WithUser)\n);\n"]},"metadata":{},"sourceType":"module"}