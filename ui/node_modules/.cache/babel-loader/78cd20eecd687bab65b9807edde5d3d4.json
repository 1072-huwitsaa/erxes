{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/detail/CompanyDetails.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CompanyDetails from '../../components/detail/CompanyDetails';\nimport { queries } from '../../graphql';\n\nvar CompanyDetailsContainer = function CompanyDetailsContainer(props) {\n  var id = props.id,\n      companyDetailQuery = props.companyDetailQuery,\n      currentUser = props.currentUser;\n\n  if (companyDetailQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }\n\n  if (!companyDetailQuery.companyDetail) {\n    return React.createElement(EmptyState, {\n      text: \"Company not found\",\n      image: \"/images/actions/24.svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    });\n  }\n\n  var companyDetail = companyDetailQuery.companyDetail || {};\n  var taggerRefetchQueries = [{\n    query: gql(queries.companyDetail),\n    variables: {\n      _id: id\n    }\n  }];\n\n  var updatedProps = _objectSpread({}, props, {\n    loading: companyDetailQuery.loading,\n    company: companyDetail,\n    taggerRefetchQueries: taggerRefetchQueries,\n    currentUser: currentUser\n  });\n\n  return React.createElement(CompanyDetails, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.companyDetail), {\n  name: 'companyDetailQuery',\n  options: function options(_ref) {\n    var id = _ref.id;\n    return {\n      variables: {\n        _id: id\n      }\n    };\n  }\n}))(CompanyDetailsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/detail/CompanyDetails.tsx"],"names":["gql","compose","EmptyState","Spinner","withProps","React","graphql","CompanyDetails","queries","CompanyDetailsContainer","props","id","companyDetailQuery","currentUser","loading","companyDetail","taggerRefetchQueries","query","variables","_id","updatedProps","company","name","options"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAYA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAuB;AAAA,MAC7CC,EAD6C,GACLD,KADK,CAC7CC,EAD6C;AAAA,MACzCC,kBADyC,GACLF,KADK,CACzCE,kBADyC;AAAA,MACrBC,WADqB,GACLH,KADK,CACrBG,WADqB;;AAGrD,MAAID,kBAAkB,CAACE,OAAvB,EAAgC;AAC9B,WAAO,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAI,CAACF,kBAAkB,CAACG,aAAxB,EAAuC;AACrC,WACE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,mBAAjB;AAAqC,MAAA,KAAK,EAAC,wBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,MAAMA,aAAa,GAAGH,kBAAkB,CAACG,aAAnB,IAAoC,EAA1D;AAEA,MAAMC,oBAAoB,GAAG,CAC3B;AACEC,IAAAA,KAAK,EAAEjB,GAAG,CAACQ,OAAO,CAACO,aAAT,CADZ;AAEEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,GAAG,EAAER;AAAP;AAFb,GAD2B,CAA7B;;AAOA,MAAMS,YAAY,qBACbV,KADa;AAEhBI,IAAAA,OAAO,EAAEF,kBAAkB,CAACE,OAFZ;AAGhBO,IAAAA,OAAO,EAAEN,aAHO;AAIhBC,IAAAA,oBAAoB,EAApBA,oBAJgB;AAKhBH,IAAAA,WAAW,EAAXA;AALgB,IAAlB;;AAQA,SAAO,oBAAC,cAAD,oBAAoBO,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA/BD;;AAiCA,eAAehB,SAAS,CACtBH,OAAO,CACLK,OAAO,CACLN,GAAG,CAACQ,OAAO,CAACO,aAAT,CADE,EAEL;AACEO,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGZ,EAAH,QAAGA,EAAH;AAAA,WAAa;AACpBO,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAER;AADI;AADS,KAAb;AAAA;AAFX,CAFK,CADF,CAAP,CAYEF,uBAZF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { IUser } from '../../../auth/types';\nimport CompanyDetails from '../../components/detail/CompanyDetails';\nimport { queries } from '../../graphql';\nimport { DetailQueryResponse } from '../../types';\n\ntype Props = {\n  id: string;\n};\n\ntype FinalProps = {\n  companyDetailQuery: DetailQueryResponse;\n  currentUser: IUser;\n} & Props;\n\nconst CompanyDetailsContainer = (props: FinalProps) => {\n  const { id, companyDetailQuery, currentUser } = props;\n\n  if (companyDetailQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  if (!companyDetailQuery.companyDetail) {\n    return (\n      <EmptyState text=\"Company not found\" image=\"/images/actions/24.svg\" />\n    );\n  }\n\n  const companyDetail = companyDetailQuery.companyDetail || {};\n\n  const taggerRefetchQueries = [\n    {\n      query: gql(queries.companyDetail),\n      variables: { _id: id }\n    }\n  ];\n\n  const updatedProps = {\n    ...props,\n    loading: companyDetailQuery.loading,\n    company: companyDetail,\n    taggerRefetchQueries,\n    currentUser\n  };\n\n  return <CompanyDetails {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, DetailQueryResponse, { _id: string }>(\n      gql(queries.companyDetail),\n      {\n        name: 'companyDetailQuery',\n        options: ({ id }) => ({\n          variables: {\n            _id: id\n          }\n        })\n      }\n    )\n  )(CompanyDetailsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}