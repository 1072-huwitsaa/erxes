{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/editForm/EditForm.tsx\";\nimport { ArchiveStatus } from 'modules/boards/styles/item';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { CloseModal } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\nvar EditForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditForm, _React$Component);\n\n  function EditForm(props) {\n    var _this;\n\n    _classCallCheck(this, EditForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditForm).call(this, props));\n\n    _this.onChangeStage = function (stageId) {\n      _this.setState({\n        stageId: stageId\n      }, function () {\n        if (_this.props.item.stageId !== _this.state.stageId) {\n          _this.setState({\n            prevStageId: _this.props.item.stageId\n          });\n\n          _this.props.saveItem({\n            stageId: stageId\n          }, function (updatedItem) {\n            _this.props.onUpdate(updatedItem, _this.state.prevStageId);\n          });\n        }\n      });\n    };\n\n    _this.saveItem = function (doc) {\n      _this.props.saveItem(doc, function (updatedItem) {\n        _this.setState({\n          updatedItem: updatedItem\n        });\n      });\n    };\n\n    _this.remove = function (id) {\n      var removeItem = _this.props.removeItem;\n      removeItem(id, _this.closeModal);\n    };\n\n    _this.copy = function () {\n      var _this$props = _this.props,\n          item = _this$props.item,\n          copyItem = _this$props.copyItem,\n          options = _this$props.options;\n      copyItem(item._id, _this.closeModal, options.texts.copySuccessText);\n    };\n\n    _this.closeModal = function (afterPopupClose) {\n      var beforePopupClose = _this.props.beforePopupClose;\n\n      if (beforePopupClose) {\n        beforePopupClose(afterPopupClose);\n      } else if (afterPopupClose) {\n        afterPopupClose();\n      }\n    };\n\n    _this.onHideModal = function () {\n      _this.closeModal(function () {\n        var _this$state = _this.state,\n            updatedItem = _this$state.updatedItem,\n            prevStageId = _this$state.prevStageId;\n\n        if (updatedItem && _this.props.onUpdate) {\n          _this.props.onUpdate(updatedItem, prevStageId);\n        }\n      });\n    };\n\n    _this.state = {\n      stageId: props.item.stageId\n    };\n    return _this;\n  }\n\n  _createClass(EditForm, [{\n    key: \"renderArchiveStatus\",\n    value: function renderArchiveStatus() {\n      if (this.props.item.status === 'archived') {\n        return React.createElement(ArchiveStatus, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          icon: \"archive-alt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, __('This card is archived.')));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      if (this.props.hideHeader) {\n        return React.createElement(CloseModal, {\n          onClick: this.onHideModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          icon: \"times\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, __('Edit')));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Modal, {\n        dialogClassName: \"modal-1000w\",\n        enforceFocus: false,\n        size: \"lg\",\n        show: this.props.isPopupVisible,\n        onHide: this.onHideModal,\n        animation: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.renderArchiveStatus(), this.renderHeader(), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.props.formContent({\n        state: this.state,\n        saveItem: this.saveItem,\n        onChangeStage: this.onChangeStage,\n        copy: this.copy,\n        remove: this.remove\n      })));\n    }\n  }]);\n\n  return EditForm;\n}(React.Component);\n\nexport default EditForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/editForm/EditForm.tsx"],"names":["ArchiveStatus","Icon","CloseModal","__","React","Modal","EditForm","props","onChangeStage","stageId","setState","item","state","prevStageId","saveItem","updatedItem","onUpdate","doc","remove","id","removeItem","closeModal","copy","copyItem","options","_id","texts","copySuccessText","afterPopupClose","beforePopupClose","onHideModal","status","hideHeader","isPopupVisible","renderArchiveStatus","renderHeader","formContent","Component"],"mappings":"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","sourcesContent":["import { ArchiveStatus } from 'modules/boards/styles/item';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { CloseModal } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport { IEditFormContent, IItem, IItemParams, IOptions } from '../../types';\n\ntype Props = {\n  options: IOptions;\n  item: IItem;\n  addItem: (doc: IItemParams, callback: () => void, msg?: string) => void;\n  removeItem: (itemId: string, callback: () => void) => void;\n  copyItem: (itemId: string, callback: () => void, msg?: string) => void;\n  beforePopupClose: (afterPopupClose?: () => void) => void;\n  amount?: () => React.ReactNode;\n  formContent: ({ state, copy, remove }: IEditFormContent) => React.ReactNode;\n  onUpdate: (item: IItem, prevStageId?) => void;\n  saveItem: (doc, callback?: (item) => void) => void;\n  isPopupVisible?: boolean;\n  hideHeader?: boolean;\n};\n\ntype State = {\n  stageId?: string;\n  updatedItem?: IItem;\n  prevStageId?: string;\n};\n\nclass EditForm extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stageId: props.item.stageId\n    };\n  }\n\n  onChangeStage = (stageId: string) => {\n    this.setState({ stageId }, () => {\n      if (this.props.item.stageId !== this.state.stageId) {\n        this.setState({\n          prevStageId: this.props.item.stageId\n        });\n\n        this.props.saveItem({ stageId }, updatedItem => {\n          this.props.onUpdate(updatedItem, this.state.prevStageId);\n        });\n      }\n    });\n  };\n\n  saveItem = (doc: { [key: string]: any }) => {\n    this.props.saveItem(doc, updatedItem => {\n      this.setState({ updatedItem });\n    });\n  };\n\n  remove = (id: string) => {\n    const { removeItem } = this.props;\n\n    removeItem(id, this.closeModal);\n  };\n\n  copy = () => {\n    const { item, copyItem, options } = this.props;\n\n    copyItem(item._id, this.closeModal, options.texts.copySuccessText);\n  };\n\n  closeModal = (afterPopupClose?: () => void) => {\n    const { beforePopupClose } = this.props;\n\n    if (beforePopupClose) {\n      beforePopupClose(afterPopupClose);\n    } else if (afterPopupClose) {\n      afterPopupClose();\n    }\n  };\n\n  onHideModal = () => {\n    this.closeModal(() => {\n      const { updatedItem, prevStageId } = this.state;\n\n      if (updatedItem && this.props.onUpdate) {\n        this.props.onUpdate(updatedItem, prevStageId);\n      }\n    });\n  };\n\n  renderArchiveStatus() {\n    if (this.props.item.status === 'archived') {\n      return (\n        <ArchiveStatus>\n          <Icon icon=\"archive-alt\" />\n          <span>{__('This card is archived.')}</span>\n        </ArchiveStatus>\n      );\n    }\n\n    return null;\n  }\n\n  renderHeader() {\n    if (this.props.hideHeader) {\n      return (\n        <CloseModal onClick={this.onHideModal}>\n          <Icon icon=\"times\" />\n        </CloseModal>\n      );\n    }\n\n    return (\n      <Modal.Header closeButton={true}>\n        <Modal.Title>{__('Edit')}</Modal.Title>\n      </Modal.Header>\n    );\n  }\n\n  render() {\n    return (\n      <Modal\n        dialogClassName=\"modal-1000w\"\n        enforceFocus={false}\n        size=\"lg\"\n        show={this.props.isPopupVisible}\n        onHide={this.onHideModal}\n        animation={false}\n      >\n        {this.renderArchiveStatus()}\n        {this.renderHeader()}\n        <Modal.Body>\n          {this.props.formContent({\n            state: this.state,\n            saveItem: this.saveItem,\n            onChangeStage: this.onChangeStage,\n            copy: this.copy,\n            remove: this.remove\n          })}\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport default EditForm;\n"]},"metadata":{},"sourceType":"module"}