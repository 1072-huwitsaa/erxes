{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/FirstAndCloseResponseReport.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport FirstResponse from '../components/FirstResponse';\nimport ResponseCloseReport from '../components/ResponseCloseReport';\nimport { queries } from '../graphql';\n\nvar FirstAndCloseResponseReportContainer = function FirstAndCloseResponseReportContainer(props) {\n  var type = props.type,\n      brandsQuery = props.brandsQuery,\n      history = props.history,\n      firstResponseQuery = props.firstResponseQuery,\n      responseCloseQuery = props.responseCloseQuery,\n      queryParams = props.queryParams;\n  var data;\n  var loading;\n\n  if (type === 'close') {\n    data = responseCloseQuery.insightsResponseClose || {};\n    loading = responseCloseQuery.loading;\n  } else {\n    data = firstResponseQuery.insightsFirstResponse || {};\n    loading = firstResponseQuery.loading;\n  }\n\n  var extendedProps = {\n    history: history,\n    queryParams: queryParams,\n    trend: data.trend || [],\n    time: data.time,\n    teamMembers: data.teamMembers || [],\n    brands: brandsQuery.brands || [],\n    isLoading: brandsQuery.loading || loading,\n    summaries: data.summaries || []\n  };\n\n  if (type === 'close') {\n    return React.createElement(ResponseCloseReport, Object.assign({}, extendedProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(FirstResponse, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nvar commonOptions = function commonOptions(queryParams) {\n  return {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      brandIds: queryParams.brandIds,\n      integrationIds: queryParams.integrationIds,\n      startDate: queryParams.startDate,\n      endDate: queryParams.endDate\n    }\n  };\n};\n\nexport default compose(graphql(gql(queries.firstResponse), {\n  name: 'firstResponseQuery',\n  skip: function skip(_ref) {\n    var type = _ref.type;\n    return type !== 'first';\n  },\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return commonOptions(queryParams);\n  }\n}), graphql(gql(queries.responseClose), {\n  name: 'responseCloseQuery',\n  skip: function skip(_ref3) {\n    var type = _ref3.type;\n    return type !== 'close';\n  },\n  options: function options(_ref4) {\n    var queryParams = _ref4.queryParams;\n    return commonOptions(queryParams);\n  }\n}), graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}))(FirstAndCloseResponseReportContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/FirstAndCloseResponseReport.tsx"],"names":["gql","compose","React","graphql","FirstResponse","ResponseCloseReport","queries","FirstAndCloseResponseReportContainer","props","type","brandsQuery","history","firstResponseQuery","responseCloseQuery","queryParams","data","loading","insightsResponseClose","insightsFirstResponse","extendedProps","trend","time","teamMembers","brands","isLoading","summaries","commonOptions","notifyOnNetworkStatusChange","variables","brandIds","integrationIds","startDate","endDate","firstResponse","name","skip","options","responseClose"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport FirstResponse from '../components/FirstResponse';\nimport ResponseCloseReport from '../components/ResponseCloseReport';\nimport { queries } from '../graphql';\nimport {\n  FirstResponseQueryResponse,\n  IParams,\n  IQueryParams,\n  ResponseCloseQueryResponse\n} from '../types';\n\ntype Props = {\n  queryParams: IQueryParams;\n  history: any;\n  type: string;\n};\n\ntype FinalProps = {\n  firstResponseQuery: FirstResponseQueryResponse;\n  responseCloseQuery: ResponseCloseQueryResponse;\n  brandsQuery: BrandsQueryResponse;\n} & Props;\n\nconst FirstAndCloseResponseReportContainer = (props: FinalProps) => {\n  const {\n    type,\n    brandsQuery,\n    history,\n    firstResponseQuery,\n    responseCloseQuery,\n    queryParams\n  } = props;\n\n  let data;\n  let loading;\n\n  if (type === 'close') {\n    data = responseCloseQuery.insightsResponseClose || {};\n    loading = responseCloseQuery.loading;\n  } else {\n    data = firstResponseQuery.insightsFirstResponse || {};\n    loading = firstResponseQuery.loading;\n  }\n\n  const extendedProps = {\n    history,\n    queryParams,\n    trend: data.trend || [],\n    time: data.time,\n    teamMembers: data.teamMembers || [],\n    brands: brandsQuery.brands || [],\n    isLoading: brandsQuery.loading || loading,\n    summaries: data.summaries || []\n  };\n\n  if (type === 'close') {\n    return <ResponseCloseReport {...extendedProps} />;\n  }\n\n  return <FirstResponse {...extendedProps} />;\n};\n\nconst commonOptions = queryParams => ({\n  notifyOnNetworkStatusChange: true,\n  variables: {\n    brandIds: queryParams.brandIds,\n    integrationIds: queryParams.integrationIds,\n    startDate: queryParams.startDate,\n    endDate: queryParams.endDate\n  }\n});\n\nexport default compose(\n  graphql(gql(queries.firstResponse), {\n    name: 'firstResponseQuery',\n    skip: ({ type }) => type !== 'first',\n    options: ({ queryParams }: IParams) => commonOptions(queryParams)\n  }),\n  graphql(gql(queries.responseClose), {\n    name: 'responseCloseQuery',\n    skip: ({ type }) => type !== 'close',\n    options: ({ queryParams }: IParams) => commonOptions(queryParams)\n  }),\n  graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n    name: 'brandsQuery'\n  })\n)(FirstAndCloseResponseReportContainer);\n"]},"metadata":{},"sourceType":"module"}