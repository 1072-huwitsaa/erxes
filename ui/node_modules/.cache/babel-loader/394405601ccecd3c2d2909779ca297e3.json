{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/containers/calendar/DealColumn.tsx\";\nimport dayjs from 'dayjs';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport { getMonthTitle, getMonthYear } from 'modules/common/utils/calendar';\nimport DealColumn from 'modules/deals/components/calendar/DealColumn';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../../graphql';\n\nvar DealColumnContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DealColumnContainer, _React$Component);\n\n  function DealColumnContainer() {\n    _classCallCheck(this, DealColumnContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DealColumnContainer).apply(this, arguments));\n  }\n\n  _createClass(DealColumnContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props = this.props,\n          updatedAt = _this$props.updatedAt,\n          dealsQuery = _this$props.dealsQuery,\n          dealsTotalAmountsQuery = _this$props.dealsTotalAmountsQuery;\n\n      if (updatedAt !== nextProps.updatedAt) {\n        dealsQuery.refetch();\n        dealsTotalAmountsQuery.refetch();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          dealsQuery = _this$props2.dealsQuery,\n          dealsTotalAmountsQuery = _this$props2.dealsTotalAmountsQuery,\n          month = _this$props2.date.month;\n      var fetchMore = dealsQuery.fetchMore; // Update calendar after stage updated\n\n      if (localStorage.getItem('cacheInvalidated') === 'true') {\n        localStorage.setItem('cacheInvalidated', 'false');\n        dealsQuery.refetch();\n        dealsTotalAmountsQuery.refetch();\n      }\n\n      var title = getMonthTitle(month);\n      var deals = dealsQuery.deals || [];\n      var dealTotalAmounts = dealsTotalAmountsQuery.dealsTotalAmounts || {\n        dealCount: 0,\n        dealAmounts: []\n      };\n\n      var updateDeals = function updateDeals(deal) {\n        dealsQuery.refetch();\n        dealsTotalAmountsQuery.refetch();\n\n        if (deal) {\n          var onColumnUpdated = _this.props.onColumnUpdated;\n          var convertedDate = dayjs(deal.closeDate);\n\n          var _date = getMonthYear(convertedDate);\n\n          onColumnUpdated(_date);\n        }\n      };\n\n      var onLoadMore = function onLoadMore(skip) {\n        fetchMore({\n          variables: {\n            skip: skip\n          },\n          updateQuery: function updateQuery(prevResult, _ref) {\n            var fetchMoreResult = _ref.fetchMoreResult;\n\n            if (!fetchMoreResult || fetchMoreResult.deals.length === 0) {\n              return prevResult;\n            }\n\n            return {\n              deals: prevResult.deals.concat(fetchMoreResult.deals)\n            };\n          }\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        deals: deals,\n        title: title,\n        onLoadMore: onLoadMore,\n        onRemove: updateDeals,\n        onUpdate: updateDeals,\n        dealTotalAmounts: dealTotalAmounts\n      });\n\n      return React.createElement(DealColumn, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DealColumnContainer;\n}(React.Component);\n\nvar getCommonParams = function getCommonParams(queryParams) {\n  if (!queryParams) {\n    return {};\n  }\n\n  return {\n    customerIds: queryParams.customerIds,\n    companyIds: queryParams.companyIds,\n    assignedUserIds: queryParams.assignedUserIds,\n    productIds: queryParams.productIds,\n    labelIds: queryParams.labelIds,\n    search: queryParams.search,\n    userIds: queryParams.userIds\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.deals), {\n  name: 'dealsQuery',\n  options: function options(_ref2) {\n    var date = _ref2.date,\n        pipelineId = _ref2.pipelineId,\n        queryParams = _ref2.queryParams;\n    return {\n      notifyOnNetworkStatusChange: true,\n      variables: _objectSpread({\n        skip: 0,\n        date: date,\n        pipelineId: pipelineId\n      }, getCommonParams(queryParams))\n    };\n  }\n}), graphql(gql(queries.dealsTotalAmounts), {\n  name: 'dealsTotalAmountsQuery',\n  options: function options(_ref3) {\n    var date = _ref3.date,\n        pipelineId = _ref3.pipelineId,\n        queryParams = _ref3.queryParams;\n    return {\n      variables: _objectSpread({\n        date: date,\n        pipelineId: pipelineId\n      }, getCommonParams(queryParams))\n    };\n  }\n}))(DealColumnContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/containers/calendar/DealColumn.tsx"],"names":["dayjs","gql","compose","withProps","getMonthTitle","getMonthYear","DealColumn","React","graphql","queries","DealColumnContainer","nextProps","props","updatedAt","dealsQuery","dealsTotalAmountsQuery","refetch","month","date","fetchMore","localStorage","getItem","setItem","title","deals","dealTotalAmounts","dealsTotalAmounts","dealCount","dealAmounts","updateDeals","deal","onColumnUpdated","convertedDate","closeDate","onLoadMore","skip","variables","updateQuery","prevResult","fetchMoreResult","length","concat","updatedProps","onRemove","onUpdate","Component","getCommonParams","queryParams","customerIds","companyIds","assignedUserIds","productIds","labelIds","search","userIds","name","options","pipelineId","notifyOnNetworkStatusChange"],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IDateColumn } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport { getMonthTitle, getMonthYear } from 'modules/common/utils/calendar';\nimport DealColumn from 'modules/deals/components/calendar/DealColumn';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../../graphql';\nimport {\n  DealsQueryResponse,\n  DealsTotalAmountsQueryResponse,\n  IDeal\n} from '../../types';\n\ntype FinalProps = Props & {\n  dealsQuery: DealsQueryResponse;\n  dealsTotalAmountsQuery: DealsTotalAmountsQueryResponse;\n};\n\nclass DealColumnContainer extends React.Component<FinalProps> {\n  componentWillReceiveProps(nextProps: FinalProps) {\n    const { updatedAt, dealsQuery, dealsTotalAmountsQuery } = this.props;\n\n    if (updatedAt !== nextProps.updatedAt) {\n      dealsQuery.refetch();\n      dealsTotalAmountsQuery.refetch();\n    }\n  }\n\n  render() {\n    const {\n      dealsQuery,\n      dealsTotalAmountsQuery,\n      date: { month }\n    } = this.props;\n\n    const { fetchMore } = dealsQuery;\n\n    // Update calendar after stage updated\n    if (localStorage.getItem('cacheInvalidated') === 'true') {\n      localStorage.setItem('cacheInvalidated', 'false');\n\n      dealsQuery.refetch();\n      dealsTotalAmountsQuery.refetch();\n    }\n\n    const title = getMonthTitle(month);\n    const deals = dealsQuery.deals || [];\n    const dealTotalAmounts = dealsTotalAmountsQuery.dealsTotalAmounts || {\n      dealCount: 0,\n      dealAmounts: []\n    };\n\n    const updateDeals = (deal?: IDeal) => {\n      dealsQuery.refetch();\n      dealsTotalAmountsQuery.refetch();\n\n      if (deal) {\n        const { onColumnUpdated } = this.props;\n\n        const convertedDate = dayjs(deal.closeDate);\n        const date = getMonthYear(convertedDate);\n\n        onColumnUpdated(date);\n      }\n    };\n\n    const onLoadMore = (skip: number) => {\n      fetchMore({\n        variables: { skip },\n        updateQuery: (prevResult, { fetchMoreResult }) => {\n          if (!fetchMoreResult || fetchMoreResult.deals.length === 0) {\n            return prevResult;\n          }\n\n          return {\n            deals: prevResult.deals.concat(fetchMoreResult.deals)\n          };\n        }\n      });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      deals,\n      title,\n      onLoadMore,\n      onRemove: updateDeals,\n      onUpdate: updateDeals,\n      dealTotalAmounts\n    };\n\n    return <DealColumn {...updatedProps} />;\n  }\n}\n\ntype Props = {\n  updatedAt: string;\n  pipelineId: string;\n  date: IDateColumn;\n  queryParams: any;\n  onColumnUpdated: (date: IDateColumn) => void;\n};\n\nconst getCommonParams = queryParams => {\n  if (!queryParams) {\n    return {};\n  }\n\n  return {\n    customerIds: queryParams.customerIds,\n    companyIds: queryParams.companyIds,\n    assignedUserIds: queryParams.assignedUserIds,\n    productIds: queryParams.productIds,\n    labelIds: queryParams.labelIds,\n    search: queryParams.search,\n    userIds: queryParams.userIds\n  };\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, DealsQueryResponse, { skip: number; date: IDateColumn }>(\n      gql(queries.deals),\n      {\n        name: 'dealsQuery',\n        options: ({ date, pipelineId, queryParams }: Props) => {\n          return {\n            notifyOnNetworkStatusChange: true,\n            variables: {\n              skip: 0,\n              date,\n              pipelineId,\n              ...getCommonParams(queryParams)\n            }\n          };\n        }\n      }\n    ),\n    graphql<Props, DealsTotalAmountsQueryResponse, { date: IDateColumn }>(\n      gql(queries.dealsTotalAmounts),\n      {\n        name: 'dealsTotalAmountsQuery',\n        options: ({ date, pipelineId, queryParams }: Props) => ({\n          variables: {\n            date,\n            pipelineId,\n            ...getCommonParams(queryParams)\n          }\n        })\n      }\n    )\n  )(DealColumnContainer)\n);\n"]},"metadata":{},"sourceType":"module"}