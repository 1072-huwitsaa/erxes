{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/LeadFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as integrationQuery } from '../../../settings/integrations/graphql';\nimport LeadFilter from '../../components/list/LeadFilter';\nimport { queries } from '../../graphql';\n\nfunction LeadFilterContainer(props) {\n  var integrationsQuery = props.integrationsQuery,\n      totalCountQuery = props.totalCountQuery,\n      customersCountQuery = props.customersCountQuery;\n  var defaultIntegrations = integrationsQuery ? integrationsQuery.integrations : [];\n\n  var _useState = useState(defaultIntegrations),\n      _useState2 = _slicedToArray(_useState, 2),\n      integrations = _useState2[0],\n      setIntegrations = _useState2[1];\n\n  var prevProp = useRef(integrationsQuery);\n  useEffect(function () {\n    var prevIntegrationsQuery = prevProp.current;\n\n    if (integrationsQuery && prevIntegrationsQuery && integrationsQuery.integrations !== prevIntegrationsQuery.integrations) {\n      setIntegrations([].concat(_toConsumableArray(integrations), _toConsumableArray(integrationsQuery.integrations)));\n    }\n\n    prevProp.current = integrationsQuery;\n  }, [integrationsQuery, integrations]);\n\n  var loadMore = function loadMore() {\n    if (integrationsQuery) {\n      integrationsQuery.refetch({\n        perPage: 10,\n        page: Math.floor(integrations.length / 10) + 1\n      });\n    }\n  };\n\n  var counts = (customersCountQuery ? customersCountQuery.customerCounts : null) || {\n    byForm: {}\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    counts: counts.byForm || {},\n    integrations: integrations,\n    loading: integrationsQuery ? integrationsQuery.loading : false,\n    loadMore: loadMore,\n    all: totalCountQuery && totalCountQuery.integrationsTotalCount ? totalCountQuery.integrationsTotalCount.byKind.lead : 0\n  });\n\n  return React.createElement(LeadFilter, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n}\n\nexport default withProps(compose(graphql(gql(integrationQuery.integrations), {\n  name: 'integrationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        kind: 'lead',\n        perPage: 10,\n        page: 1\n      }\n    };\n  },\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  }\n}), graphql(gql(integrationQuery.integrationTotalCount), {\n  name: 'totalCountQuery',\n  skip: function skip(_ref2) {\n    var loadingMainQuery = _ref2.loadingMainQuery;\n    return loadingMainQuery;\n  }\n}), graphql(gql(queries.customerCounts), {\n  name: 'customersCountQuery',\n  skip: function skip(_ref3) {\n    var loadingMainQuery = _ref3.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: function options(_ref4) {\n    var type = _ref4.type;\n    return {\n      variables: {\n        type: type,\n        only: 'byForm'\n      }\n    };\n  }\n}))(LeadFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/LeadFilter.tsx"],"names":["gql","compose","React","useEffect","useRef","useState","graphql","withProps","queries","integrationQuery","LeadFilter","LeadFilterContainer","props","integrationsQuery","totalCountQuery","customersCountQuery","defaultIntegrations","integrations","setIntegrations","prevProp","prevIntegrationsQuery","current","loadMore","refetch","perPage","page","Math","floor","length","counts","customerCounts","byForm","updatedProps","loading","all","integrationsTotalCount","byKind","lead","name","options","variables","kind","skip","loadingMainQuery","integrationTotalCount","type","only"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAO,IAAIC,gBAApB,QAA4C,wCAA5C;AAKA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASF,OAAT,QAAwB,eAAxB;;AASA,SAASG,mBAAT,CAA6BC,KAA7B,EAA2C;AAAA,MACjCC,iBADiC,GAC2BD,KAD3B,CACjCC,iBADiC;AAAA,MACdC,eADc,GAC2BF,KAD3B,CACdE,eADc;AAAA,MACGC,mBADH,GAC2BH,KAD3B,CACGG,mBADH;AAEzC,MAAMC,mBAAmB,GAAGH,iBAAiB,GACzCA,iBAAiB,CAACI,YADuB,GAEzC,EAFJ;;AAFyC,kBAKDZ,QAAQ,CAACW,mBAAD,CALP;AAAA;AAAA,MAKlCC,YALkC;AAAA,MAKpBC,eALoB;;AAOzC,MAAMC,QAAQ,GAAGf,MAAM,CAACS,iBAAD,CAAvB;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiB,qBAAqB,GAAGD,QAAQ,CAACE,OAAvC;;AAEA,QACER,iBAAiB,IACjBO,qBADA,IAEAP,iBAAiB,CAACI,YAAlB,KAAmCG,qBAAqB,CAACH,YAH3D,EAIE;AACAC,MAAAA,eAAe,8BAAKD,YAAL,sBAAsBJ,iBAAiB,CAACI,YAAxC,GAAf;AACD;;AAEDE,IAAAA,QAAQ,CAACE,OAAT,GAAmBR,iBAAnB;AACD,GAZQ,EAYN,CAACA,iBAAD,EAAoBI,YAApB,CAZM,CAAT;;AAcA,MAAMK,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIT,iBAAJ,EAAuB;AACrBA,MAAAA,iBAAiB,CAACU,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE,EADe;AAExBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWV,YAAY,CAACW,MAAb,GAAsB,EAAjC,IAAuC;AAFrB,OAA1B;AAID;AACF,GAPD;;AASA,MAAMC,MAAM,GAAG,CAACd,mBAAmB,GAC/BA,mBAAmB,CAACe,cADW,GAE/B,IAFW,KAEF;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAFb;;AAIA,MAAMC,YAAY,qBACbpB,KADa;AAEhBiB,IAAAA,MAAM,EAAEA,MAAM,CAACE,MAAP,IAAiB,EAFT;AAGhBd,IAAAA,YAAY,EAAZA,YAHgB;AAIhBgB,IAAAA,OAAO,EAAEpB,iBAAiB,GAAGA,iBAAiB,CAACoB,OAArB,GAA+B,KAJzC;AAKhBX,IAAAA,QAAQ,EAARA,QALgB;AAMhBY,IAAAA,GAAG,EACDpB,eAAe,IAAIA,eAAe,CAACqB,sBAAnC,GACIrB,eAAe,CAACqB,sBAAhB,CAAuCC,MAAvC,CAA8CC,IADlD,GAEI;AATU,IAAlB;;AAYA,SAAO,oBAAC,UAAD,oBAAgBL,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAOD,eAAezB,SAAS,CACtBN,OAAO,CACLK,OAAO,CACLN,GAAG,CAACS,gBAAgB,CAACQ,YAAlB,CADE,EAEL;AACEqB,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBjB,QAAAA,OAAO,EAAE,EAAzB;AAA6BC,QAAAA,IAAI,EAAE;AAAnC;AADG,KAAP;AAAA,GAFX;AAKEiB,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA;AALR,CAFK,CADF,EAWLrC,OAAO,CACLN,GAAG,CAACS,gBAAgB,CAACmC,qBAAlB,CADE,EAEL;AACEN,EAAAA,IAAI,EAAE,iBADR;AAEEI,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,SAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA;AAFR,CAFK,CAXF,EAkBLrC,OAAO,CACLN,GAAG,CAACQ,OAAO,CAACsB,cAAT,CADE,EAEL;AACEQ,EAAAA,IAAI,EAAE,qBADR;AAEEI,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,SAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEJ,EAAAA,OAAO,EAAE;AAAA,QAAGM,IAAH,SAAGA,IAAH;AAAA,WAAe;AACtBL,MAAAA,SAAS,EAAE;AAAEK,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,IAAI,EAAE;AAAd;AADW,KAAf;AAAA;AAHX,CAFK,CAlBF,CAAP,CA4BEnC,mBA5BF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as integrationQuery } from '../../../settings/integrations/graphql';\nimport {\n  IntegrationsCountQueryResponse,\n  IntegrationsQueryResponse\n} from '../../../settings/integrations/types';\nimport LeadFilter from '../../components/list/LeadFilter';\nimport { queries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\ntype Props = {\n  integrationsQuery?: IntegrationsQueryResponse;\n  customersCountQuery?: CountQueryResponse;\n  totalCountQuery?: IntegrationsCountQueryResponse;\n};\n\nfunction LeadFilterContainer(props: Props) {\n  const { integrationsQuery, totalCountQuery, customersCountQuery } = props;\n  const defaultIntegrations = integrationsQuery\n    ? integrationsQuery.integrations\n    : [];\n  const [integrations, setIntegrations] = useState(defaultIntegrations);\n\n  const prevProp = useRef(integrationsQuery);\n\n  useEffect(() => {\n    const prevIntegrationsQuery = prevProp.current;\n\n    if (\n      integrationsQuery &&\n      prevIntegrationsQuery &&\n      integrationsQuery.integrations !== prevIntegrationsQuery.integrations\n    ) {\n      setIntegrations([...integrations, ...integrationsQuery.integrations]);\n    }\n\n    prevProp.current = integrationsQuery;\n  }, [integrationsQuery, integrations]);\n\n  const loadMore = () => {\n    if (integrationsQuery) {\n      integrationsQuery.refetch({\n        perPage: 10,\n        page: Math.floor(integrations.length / 10) + 1\n      });\n    }\n  };\n\n  const counts = (customersCountQuery\n    ? customersCountQuery.customerCounts\n    : null) || { byForm: {} };\n\n  const updatedProps = {\n    ...props,\n    counts: counts.byForm || {},\n    integrations,\n    loading: integrationsQuery ? integrationsQuery.loading : false,\n    loadMore,\n    all:\n      totalCountQuery && totalCountQuery.integrationsTotalCount\n        ? totalCountQuery.integrationsTotalCount.byKind.lead\n        : 0\n  };\n\n  return <LeadFilter {...updatedProps} />;\n}\n\ntype WrapperProps = {\n  type: string;\n  loadingMainQuery: boolean;\n};\n\nexport default withProps<WrapperProps>(\n  compose(\n    graphql<WrapperProps, IntegrationsQueryResponse, {}>(\n      gql(integrationQuery.integrations),\n      {\n        name: 'integrationsQuery',\n        options: () => ({\n          variables: { kind: 'lead', perPage: 10, page: 1 }\n        }),\n        skip: ({ loadingMainQuery }) => loadingMainQuery\n      }\n    ),\n    graphql<WrapperProps, IntegrationsCountQueryResponse, {}>(\n      gql(integrationQuery.integrationTotalCount),\n      {\n        name: 'totalCountQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery\n      }\n    ),\n    graphql<WrapperProps, CountQueryResponse, { only: string }>(\n      gql(queries.customerCounts),\n      {\n        name: 'customersCountQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: ({ type }) => ({\n          variables: { type, only: 'byForm' }\n        })\n      }\n    )\n  )(LeadFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}