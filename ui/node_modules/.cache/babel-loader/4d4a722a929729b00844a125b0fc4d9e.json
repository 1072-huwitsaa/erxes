{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/twitter/Twitter.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Twitter from '../../components/twitter/Twitter';\nimport { getRefetchQueries } from '../utils';\n\nvar TwitterContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TwitterContainer, _React$Component);\n\n  function TwitterContainer(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterContainer).call(this, props));\n\n    _this.onAccountSelect = function (accountId) {\n      if (!accountId) {\n        return _this.setState({\n          twitterAccountId: '',\n          accountId: ''\n        });\n      }\n\n      client.query({\n        query: gql(queries.fetchApi),\n        variables: {\n          path: '/twitter/get-account',\n          params: {\n            accountId: accountId\n          }\n        }\n      }).then(function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading;\n\n        if (!loading) {\n          _this.setState({\n            twitterAccountId: data.integrationsFetchApi,\n            accountId: accountId\n          });\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.onRemoveAccount = function () {\n      _this.setState({\n        twitterAccountId: ''\n      });\n    };\n\n    _this.renderButton = function (_ref2) {\n      var name = _ref2.name,\n          values = _ref2.values,\n          isSubmitted = _ref2.isSubmitted,\n          callback = _ref2.callback;\n      return React.createElement(ButtonMutate, {\n        mutation: mutations.integrationsCreateExternalIntegration,\n        variables: values,\n        callback: callback,\n        refetchQueries: getRefetchQueries('gmail'),\n        isSubmitted: isSubmitted,\n        type: \"submit\",\n        successMessage: \"You successfully added a \".concat(name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    };\n\n    _this.state = {\n      twitterAccountId: '',\n      accountId: ''\n    };\n    return _this;\n  }\n\n  _createClass(TwitterContainer, [{\n    key: \"render\",\n    value: function render() {\n      var closeModal = this.props.closeModal;\n      var _this$state = this.state,\n          accountId = _this$state.accountId,\n          twitterAccountId = _this$state.twitterAccountId;\n      var updatedProps = {\n        closeModal: closeModal,\n        accountId: accountId,\n        twitterAccountId: twitterAccountId,\n        onAccountSelect: this.onAccountSelect,\n        onRemoveAccount: this.onRemoveAccount,\n        renderButton: this.renderButton\n      };\n      return React.createElement(Twitter, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TwitterContainer;\n}(React.Component);\n\nexport default withRouter(TwitterContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/twitter/Twitter.tsx"],"names":["client","gql","ButtonMutate","Alert","mutations","queries","React","withRouter","Twitter","getRefetchQueries","TwitterContainer","props","onAccountSelect","accountId","setState","twitterAccountId","query","fetchApi","variables","path","params","then","data","loading","integrationsFetchApi","catch","error","message","onRemoveAccount","renderButton","name","values","isSubmitted","callback","integrationsCreateExternalIntegration","state","closeModal","updatedProps","Component"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { Alert } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Twitter from '../../components/twitter/Twitter';\nimport { getRefetchQueries } from '../utils';\n\ntype Props = {\n  type?: string;\n  closeModal: () => void;\n};\n\ntype FinalProps = {} & IRouterProps & Props;\n\ntype State = {\n  twitterAccountId: string;\n  accountId: string;\n};\n\nclass TwitterContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = { twitterAccountId: '', accountId: '' };\n  }\n\n  onAccountSelect = (accountId?: string) => {\n    if (!accountId) {\n      return this.setState({ twitterAccountId: '', accountId: '' });\n    }\n\n    client\n      .query({\n        query: gql(queries.fetchApi),\n        variables: {\n          path: '/twitter/get-account',\n          params: { accountId }\n        }\n      })\n      .then(({ data, loading }: any) => {\n        if (!loading) {\n          this.setState({\n            twitterAccountId: data.integrationsFetchApi,\n            accountId\n          });\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  onRemoveAccount = () => {\n    this.setState({ twitterAccountId: '' });\n  };\n\n  renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={mutations.integrationsCreateExternalIntegration}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries('gmail')}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully added a ${name}`}\n      />\n    );\n  };\n\n  render() {\n    const { closeModal } = this.props;\n    const { accountId, twitterAccountId } = this.state;\n\n    const updatedProps = {\n      closeModal,\n      accountId,\n      twitterAccountId,\n      onAccountSelect: this.onAccountSelect,\n      onRemoveAccount: this.onRemoveAccount,\n      renderButton: this.renderButton\n    };\n\n    return <Twitter {...updatedProps} />;\n  }\n}\n\nexport default withRouter<FinalProps>(TwitterContainer);\n"]},"metadata":{},"sourceType":"module"}