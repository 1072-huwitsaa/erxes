{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/WidgetForm.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport Uploader from \"modules/common/components/Uploader\";\nimport EditorCK from \"modules/common/containers/EditorCK\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { __ } from \"modules/common/utils\";\nimport { METHODS } from \"modules/engage/constants\";\nimport { FlexContent, FlexItem } from \"modules/layout/styles\";\nimport { MAIL_TOOLBARS_CONFIG } from \"modules/settings/integrations/constants\";\nimport React from \"react\";\nimport Select from \"react-select-plus\";\nimport MessengerPreview from \"../containers/MessengerPreview\";\nimport { Half, Recipient, Recipients } from \"../styles\";\nimport { generateEmailTemplateParams } from \"../utils\";\n\nvar WidgetForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WidgetForm, _React$Component);\n\n  function WidgetForm(props) {\n    var _this;\n\n    _classCallCheck(this, WidgetForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WidgetForm).call(this, props));\n\n    _this.save = function (e) {\n      e.preventDefault();\n      var _this$props = _this.props,\n          save = _this$props.save,\n          customers = _this$props.customers;\n      var doc = {\n        title: document.getElementById(\"title\").value,\n        customerIds: customers.map(function (customer) {\n          return customer._id;\n        }),\n        method: \"\"\n      };\n\n      if (_this.state.channel === \"email\") {\n        doc.method = METHODS.EMAIL;\n        doc.email = {\n          subject: document.getElementById(\"emailSubject\").value,\n          attachments: _this.state.attachments,\n          content: _this.state.content\n        };\n      }\n\n      if (_this.state.channel === \"messenger\") {\n        doc.method = METHODS.MESSENGER;\n        doc.messenger = {\n          brandId: document.getElementById(\"brandId\").value,\n          kind: document.getElementById(\"messengerKind\").value,\n          sentAs: document.getElementById(\"sentAs\").value,\n          content: _this.state.content\n        };\n      }\n\n      return save(doc, function () {\n        return _this.props.closeModal();\n      });\n    };\n\n    _this.onChangeCommon = function (name, value) {\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.onChannelChange = function (e) {\n      _this.setState({\n        channel: e.target.value\n      });\n    };\n\n    _this.templateChange = function (e) {\n      _this.setState({\n        content: _this.findTemplate(e.value),\n        templateId: e.value\n      });\n    };\n\n    _this.onEditorChange = function (e) {\n      _this.onChangeCommon(\"content\", e.editor.getData());\n    };\n\n    _this.onSentAsChange = function (e) {\n      _this.onChangeCommon(\"sentAs\", e.target.value);\n    };\n\n    _this.findTemplate = function (id) {\n      var template = _this.props.emailTemplates.find(function (t) {\n        return t._id === id;\n      });\n\n      if (template) {\n        return template.content;\n      }\n\n      return \"\";\n    };\n\n    _this.state = {\n      content: \"\",\n      channel: props.channelType || \"email\",\n      attachments: [],\n      sentAs: \"snippet\",\n      templateId: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(WidgetForm, [{\n    key: \"renderReceivers\",\n    value: function renderReceivers() {\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Sending to:\"), React.createElement(Recipients, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.props.customers.map(function (customer) {\n        return React.createElement(Recipient, {\n          key: customer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, customer.firstName), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"(\", customer.primaryEmail || \"Unknown\", \")\"));\n      })));\n    }\n  }, {\n    key: \"renderChannelType\",\n    value: function renderChannelType() {\n      if (this.props.channelType) {\n        return null;\n      }\n\n      return React.createElement(Half, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Channel:\"), React.createElement(FormControl, {\n        componentClass: \"select\",\n        onChange: this.onChannelChange,\n        defaultValue: this.state.channel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, __(\"Email\")), React.createElement(\"option\", {\n        value: \"messenger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, __(\"Messenger\")))));\n    }\n  }, {\n    key: \"renderFormContent\",\n    value: function renderFormContent() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n\n      var editor = function editor(options) {\n        return React.createElement(EditorCK, Object.assign({}, options, {\n          content: _this2.state.content,\n          onChange: _this2.onEditorChange,\n          toolbar: [{\n            name: \"insert\",\n            items: [\"strinsert\"]\n          }].concat(_toConsumableArray(MAIL_TOOLBARS_CONFIG)),\n          name: \"engage_widget_\".concat(_this2.state.channel, \"_\").concat(currentUser._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }));\n      };\n\n      if (this.state.channel === \"messenger\") {\n        return React.createElement(FlexContent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, React.createElement(FlexItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(ControlLabel, {\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, \"Brand:\"), React.createElement(FormControl, {\n          id: \"brandId\",\n          componentClass: \"select\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }), this.props.brands.map(function (b, index) {\n          return React.createElement(\"option\", {\n            key: \"brand-\".concat(index),\n            value: b._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          }, b.name);\n        }))), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, React.createElement(FlexContent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, React.createElement(FlexItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(ControlLabel, {\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, \"Messenger kind:\"), React.createElement(FormControl, {\n          id: \"messengerKind\",\n          componentClass: \"select\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }), this.props.messengerKinds.map(function (t, index) {\n          return React.createElement(\"option\", {\n            key: \"messengerKind-\".concat(index),\n            value: t.value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, t.text);\n        })))), React.createElement(FlexItem, {\n          hasSpace: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, React.createElement(ControlLabel, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, \"Sent as:\"), React.createElement(FormControl, {\n          id: \"sentAs\",\n          defaultValue: this.state.sentAs,\n          componentClass: \"select\",\n          onChange: this.onSentAsChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, this.props.sentAsChoices.map(function (t, index) {\n          return React.createElement(\"option\", {\n            key: \"sentAs-\".concat(index),\n            value: t.value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }, t.text);\n        })))))), editor()), React.createElement(FlexItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, React.createElement(MessengerPreview, {\n          sentAs: this.state.sentAs,\n          content: this.state.content,\n          fromUserId: this.props.currentUser._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        })));\n      }\n\n      var attachments = this.state.attachments;\n\n      var onChange = function onChange(attachmentsAtt) {\n        return _this2.onChangeCommon(\"attachments\", attachmentsAtt);\n      };\n\n      return React.createElement(React.Fragment, null, React.createElement(Half, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Email subject:\"), React.createElement(FormControl, {\n        id: \"emailSubject\",\n        type: \"text\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"Email templates:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, __(\"Insert email template to content\")), React.createElement(Select, {\n        value: this.state.templateId,\n        onChange: this.templateChange,\n        options: generateEmailTemplateParams(this.props.emailTemplates),\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, editor({\n        height: 300\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Attachments:\"), React.createElement(Uploader, {\n        defaultFileList: attachments,\n        onChange: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, this.renderReceivers(), this.renderChannelType(), React.createElement(Half, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"Title:\"), React.createElement(FormControl, {\n        autoFocus: true,\n        id: \"title\",\n        type: \"text\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }))), this.renderFormContent(), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        icon: \"times-circle\",\n        uppercase: false,\n        onClick: this.props.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        uppercase: false,\n        type: \"submit\",\n        btnStyle: \"success\",\n        icon: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, \"Send\")));\n    }\n  }]);\n\n  return WidgetForm;\n}(React.Component);\n\nexport default WidgetForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/WidgetForm.tsx"],"names":["Button","FormControl","FormGroup","ControlLabel","Uploader","EditorCK","ModalFooter","__","METHODS","FlexContent","FlexItem","MAIL_TOOLBARS_CONFIG","React","Select","MessengerPreview","Half","Recipient","Recipients","generateEmailTemplateParams","WidgetForm","props","save","e","preventDefault","customers","doc","title","document","getElementById","value","customerIds","map","customer","_id","method","state","channel","EMAIL","email","subject","attachments","content","MESSENGER","messenger","brandId","kind","sentAs","closeModal","onChangeCommon","name","setState","onChannelChange","target","templateChange","findTemplate","templateId","onEditorChange","editor","getData","onSentAsChange","id","template","emailTemplates","find","t","channelType","firstName","primaryEmail","currentUser","options","items","brands","b","index","messengerKinds","text","sentAsChoices","onChange","attachmentsAtt","height","renderReceivers","renderChannelType","renderFormContent","Component"],"mappings":"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","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport { IUser } from \"modules/auth/types\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport Uploader from \"modules/common/components/Uploader\";\nimport EditorCK from \"modules/common/containers/EditorCK\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { __ } from \"modules/common/utils\";\nimport { ICustomer } from \"modules/customers/types\";\nimport { METHODS } from \"modules/engage/constants\";\nimport { FlexContent, FlexItem } from \"modules/layout/styles\";\nimport { IEmailTemplate } from \"modules/settings/emailTemplates/types\";\nimport { MAIL_TOOLBARS_CONFIG } from \"modules/settings/integrations/constants\";\nimport React from \"react\";\nimport Select from \"react-select-plus\";\nimport { IAttachment } from \"../../common/types\";\nimport { IBrand } from \"../../settings/brands/types\";\nimport MessengerPreview from \"../containers/MessengerPreview\";\nimport { Half, Recipient, Recipients } from \"../styles\";\nimport { IEngageEmail, IEngageMessageDoc, IEngageMessenger } from \"../types\";\nimport { generateEmailTemplateParams } from \"../utils\";\n\ntype Props = {\n  customers: ICustomer[];\n  emailTemplates: IEmailTemplate[];\n  brands: IBrand[];\n  messengerKinds: any[];\n  sentAsChoices: any[];\n  save: (doc: IEngageMessageDoc, closeModal: () => void) => void;\n  closeModal: () => void;\n  channelType?: string;\n  currentUser: IUser;\n};\n\ntype State = {\n  content: string;\n  channel: string;\n  attachments: IAttachment[];\n  sentAs: string;\n  templateId: string;\n};\n\nclass WidgetForm extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      content: \"\",\n      channel: props.channelType || \"email\",\n      attachments: [],\n      sentAs: \"snippet\",\n      templateId: \"\",\n    };\n  }\n\n  save = (e) => {\n    e.preventDefault();\n\n    const { save, customers } = this.props;\n\n    const doc = {\n      title: (document.getElementById(\"title\") as HTMLInputElement).value,\n      customerIds: customers.map((customer) => customer._id),\n      method: \"\",\n    } as IEngageMessageDoc;\n\n    if (this.state.channel === \"email\") {\n      doc.method = METHODS.EMAIL;\n      doc.email = {\n        subject: (document.getElementById(\"emailSubject\") as HTMLInputElement)\n          .value,\n        attachments: this.state.attachments,\n        content: this.state.content,\n      } as IEngageEmail;\n    }\n\n    if (this.state.channel === \"messenger\") {\n      doc.method = METHODS.MESSENGER;\n      doc.messenger = {\n        brandId: (document.getElementById(\"brandId\") as HTMLInputElement).value,\n        kind: (document.getElementById(\"messengerKind\") as HTMLInputElement)\n          .value,\n        sentAs: (document.getElementById(\"sentAs\") as HTMLInputElement).value,\n        content: this.state.content,\n      } as IEngageMessenger;\n    }\n\n    return save(doc, () => this.props.closeModal());\n  };\n\n  onChangeCommon = <T extends keyof State>(name: T, value: State[T]) => {\n    this.setState(({ [name]: value } as unknown) as Pick<State, keyof State>);\n  };\n\n  onChannelChange = (e) => {\n    this.setState({ channel: e.target.value });\n  };\n\n  templateChange = (e) => {\n    this.setState({ content: this.findTemplate(e.value), templateId: e.value });\n  };\n\n  onEditorChange = (e) => {\n    this.onChangeCommon(\"content\", e.editor.getData());\n  };\n\n  onSentAsChange = (e) => {\n    this.onChangeCommon(\"sentAs\", e.target.value);\n  };\n\n  findTemplate = (id) => {\n    const template = this.props.emailTemplates.find((t) => t._id === id);\n\n    if (template) {\n      return template.content;\n    }\n\n    return \"\";\n  };\n\n  renderReceivers() {\n    return (\n      <FormGroup>\n        <ControlLabel>Sending to:</ControlLabel>\n        <Recipients>\n          {this.props.customers.map((customer) => (\n            <Recipient key={customer._id}>\n              <strong>{customer.firstName}</strong>\n              <span>({customer.primaryEmail || \"Unknown\"})</span>\n            </Recipient>\n          ))}\n        </Recipients>\n      </FormGroup>\n    );\n  }\n\n  renderChannelType() {\n    if (this.props.channelType) {\n      return null;\n    }\n\n    return (\n      <Half>\n        <FormGroup>\n          <ControlLabel>Channel:</ControlLabel>\n          <FormControl\n            componentClass=\"select\"\n            onChange={this.onChannelChange}\n            defaultValue={this.state.channel}\n          >\n            <option value=\"email\">{__(\"Email\")}</option>\n            <option value=\"messenger\">{__(\"Messenger\")}</option>\n          </FormControl>\n        </FormGroup>\n      </Half>\n    );\n  }\n\n  renderFormContent() {\n    const currentUser = this.props.currentUser;\n\n    const editor = (options?) => (\n      <EditorCK\n        {...options}\n        content={this.state.content}\n        onChange={this.onEditorChange}\n        toolbar={[\n          { name: \"insert\", items: [\"strinsert\"] },\n          ...MAIL_TOOLBARS_CONFIG,\n        ]}\n        name={`engage_widget_${this.state.channel}_${currentUser._id}`}\n      />\n    );\n\n    if (this.state.channel === \"messenger\") {\n      return (\n        <FlexContent>\n          <FlexItem>\n            <FormGroup>\n              <ControlLabel required={true}>Brand:</ControlLabel>\n\n              <FormControl id=\"brandId\" componentClass=\"select\" required={true}>\n                <option />\n                {this.props.brands.map((b, index) => (\n                  <option key={`brand-${index}`} value={b._id}>\n                    {b.name}\n                  </option>\n                ))}\n              </FormControl>\n            </FormGroup>\n            <div>\n              <FlexContent>\n                <FlexItem>\n                  <FormGroup>\n                    <ControlLabel required={true}>Messenger kind:</ControlLabel>\n\n                    <FormControl\n                      id=\"messengerKind\"\n                      componentClass=\"select\"\n                      required={true}\n                    >\n                      <option />\n                      {this.props.messengerKinds.map((t, index) => (\n                        <option key={`messengerKind-${index}`} value={t.value}>\n                          {t.text}\n                        </option>\n                      ))}\n                    </FormControl>\n                  </FormGroup>\n                </FlexItem>\n                <FlexItem hasSpace={true}>\n                  <FormGroup>\n                    <ControlLabel>Sent as:</ControlLabel>\n\n                    <FormControl\n                      id=\"sentAs\"\n                      defaultValue={this.state.sentAs}\n                      componentClass=\"select\"\n                      onChange={this.onSentAsChange}\n                    >\n                      {this.props.sentAsChoices.map((t, index) => (\n                        <option key={`sentAs-${index}`} value={t.value}>\n                          {t.text}\n                        </option>\n                      ))}\n                    </FormControl>\n                  </FormGroup>\n                </FlexItem>\n              </FlexContent>\n            </div>\n\n            {editor()}\n          </FlexItem>\n\n          <FlexItem>\n            <MessengerPreview\n              sentAs={this.state.sentAs}\n              content={this.state.content}\n              fromUserId={this.props.currentUser._id}\n            />\n          </FlexItem>\n        </FlexContent>\n      );\n    }\n\n    const { attachments } = this.state;\n    const onChange = (attachmentsAtt) =>\n      this.onChangeCommon(\"attachments\", attachmentsAtt);\n\n    return (\n      <>\n        <Half>\n          <FormGroup>\n            <ControlLabel>Email subject:</ControlLabel>\n            <FormControl id=\"emailSubject\" type=\"text\" required={true} />\n          </FormGroup>\n\n          <FormGroup>\n            <ControlLabel>Email templates:</ControlLabel>\n            <p>{__(\"Insert email template to content\")}</p>\n\n            <Select\n              value={this.state.templateId}\n              onChange={this.templateChange}\n              options={generateEmailTemplateParams(this.props.emailTemplates)}\n              clearable={false}\n            />\n          </FormGroup>\n        </Half>\n\n        <FormGroup>{editor({ height: 300 })}</FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Attachments:</ControlLabel>\n          <Uploader defaultFileList={attachments} onChange={onChange} />\n        </FormGroup>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.save}>\n        {this.renderReceivers()}\n        {this.renderChannelType()}\n\n        <Half>\n          <FormGroup>\n            <ControlLabel required={true}>Title:</ControlLabel>\n            <FormControl\n              autoFocus={true}\n              id=\"title\"\n              type=\"text\"\n              required={true}\n            />\n          </FormGroup>\n        </Half>\n\n        {this.renderFormContent()}\n\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            icon=\"times-circle\"\n            uppercase={false}\n            onClick={this.props.closeModal}\n          >\n            Close\n          </Button>\n          <Button\n            uppercase={false}\n            type=\"submit\"\n            btnStyle=\"success\"\n            icon=\"message\"\n          >\n            Send\n          </Button>\n        </ModalFooter>\n      </form>\n    );\n  }\n}\n\nexport default WidgetForm;\n"]},"metadata":{},"sourceType":"module"}