{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/SummaryReport.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SummaryReport from '../components/SummaryReport';\nimport { queries } from '../graphql';\n\nvar SummaryReportContainer = function SummaryReportContainer(props) {\n  var history = props.history,\n      brandsQuery = props.brandsQuery,\n      queryParams = props.queryParams,\n      summaryQuery = props.summaryQuery;\n  var data = summaryQuery.insightsConversation || {};\n  var extendedProps = {\n    history: history,\n    queryParams: queryParams,\n    trend: data.trend || [],\n    brands: brandsQuery.brands || [],\n    summary: data.summary || [],\n    loading: summaryQuery.loading\n  };\n  return React.createElement(SummaryReport, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nexport default compose(graphql(gql(queries.responseSummary), {\n  name: 'summaryQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams,\n        type = _ref.type;\n    return {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {\n        brandIds: queryParams.brandIds,\n        integrationIds: queryParams.integrationIds,\n        startDate: queryParams.startDate,\n        endDate: queryParams.endDate\n      }\n    };\n  }\n}), graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}))(SummaryReportContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/SummaryReport.tsx"],"names":["gql","compose","React","graphql","SummaryReport","queries","SummaryReportContainer","props","history","brandsQuery","queryParams","summaryQuery","data","insightsConversation","extendedProps","trend","brands","summary","loading","responseSummary","name","options","type","fetchPolicy","notifyOnNetworkStatusChange","variables","brandIds","integrationIds","startDate","endDate"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAUA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAkB;AAAA,MACvCC,OADuC,GACaD,KADb,CACvCC,OADuC;AAAA,MAC9BC,WAD8B,GACaF,KADb,CAC9BE,WAD8B;AAAA,MACjBC,WADiB,GACaH,KADb,CACjBG,WADiB;AAAA,MACJC,YADI,GACaJ,KADb,CACJI,YADI;AAG/C,MAAMC,IAAI,GAAGD,YAAY,CAACE,oBAAb,IAAqC,EAAlD;AAEA,MAAMC,aAAa,GAAG;AACpBN,IAAAA,OAAO,EAAPA,OADoB;AAEpBE,IAAAA,WAAW,EAAXA,WAFoB;AAGpBK,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,IAAc,EAHD;AAIpBC,IAAAA,MAAM,EAAEP,WAAW,CAACO,MAAZ,IAAsB,EAJV;AAKpBC,IAAAA,OAAO,EAAEL,IAAI,CAACK,OAAL,IAAgB,EALL;AAMpBC,IAAAA,OAAO,EAAEP,YAAY,CAACO;AANF,GAAtB;AASA,SAAO,oBAAC,aAAD,oBAAmBJ,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAfD;;AAiBA,eAAeb,OAAO,CACpBE,OAAO,CAACH,GAAG,CAACK,OAAO,CAACc,eAAT,CAAJ,EAA+B;AACpCC,EAAAA,IAAI,EAAE,cAD8B;AAEpCC,EAAAA,OAAO,EAAE;AAAA,QAAGX,WAAH,QAAGA,WAAH;AAAA,QAAgBY,IAAhB,QAAgBA,IAAhB;AAAA,WAAqC;AAC5CC,MAAAA,WAAW,EAAE,cAD+B;AAE5CC,MAAAA,2BAA2B,EAAE,IAFe;AAG5CC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAEhB,WAAW,CAACgB,QADb;AAETC,QAAAA,cAAc,EAAEjB,WAAW,CAACiB,cAFnB;AAGTC,QAAAA,SAAS,EAAElB,WAAW,CAACkB,SAHd;AAITC,QAAAA,OAAO,EAAEnB,WAAW,CAACmB;AAJZ;AAHiC,KAArC;AAAA;AAF2B,CAA/B,CADa,EAcpB1B,OAAO,CAA6BH,GAAG,CAACK,OAAO,CAACW,MAAT,CAAhC,EAAkD;AACvDI,EAAAA,IAAI,EAAE;AADiD,CAAlD,CAda,CAAP,CAiBbd,sBAjBa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport SummaryReport from '../components/SummaryReport';\nimport { queries } from '../graphql';\nimport { IParams, IQueryParams, SummaryQueryResponse } from '../types';\n\ntype Props = {\n  history: any;\n  brandsQuery: BrandsQueryResponse;\n  summaryQuery: SummaryQueryResponse;\n  queryParams: IQueryParams;\n};\n\nconst SummaryReportContainer = (props: Props) => {\n  const { history, brandsQuery, queryParams, summaryQuery } = props;\n\n  const data = summaryQuery.insightsConversation || {};\n\n  const extendedProps = {\n    history,\n    queryParams,\n    trend: data.trend || [],\n    brands: brandsQuery.brands || [],\n    summary: data.summary || [],\n    loading: summaryQuery.loading\n  };\n\n  return <SummaryReport {...extendedProps} />;\n};\n\nexport default compose(\n  graphql(gql(queries.responseSummary), {\n    name: 'summaryQuery',\n    options: ({ queryParams, type }: IParams) => ({\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {\n        brandIds: queryParams.brandIds,\n        integrationIds: queryParams.integrationIds,\n        startDate: queryParams.startDate,\n        endDate: queryParams.endDate\n      }\n    })\n  }),\n  graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n    name: 'brandsQuery'\n  })\n)(SummaryReportContainer);\n"]},"metadata":{},"sourceType":"module"}