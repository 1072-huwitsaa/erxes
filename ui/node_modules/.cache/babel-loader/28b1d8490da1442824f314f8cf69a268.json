{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/components/Boards.tsx\";\nimport Button from 'modules/common/components/Button';\nimport DataWithLoader from 'modules/common/components/DataWithLoader';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport { TopHeader } from 'modules/common/styles/main';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport { SidebarList as List } from 'modules/layout/styles';\nimport React from 'react';\nimport BoardForm from './BoardForm';\nimport BoardRow from './BoardRow';\n\nvar Boards =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Boards, _React$Component);\n\n  function Boards() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Boards);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Boards)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderItems = function () {\n      var _this$props = _this.props,\n          type = _this$props.type,\n          boards = _this$props.boards,\n          remove = _this$props.remove,\n          renderButton = _this$props.renderButton,\n          currentBoardId = _this$props.currentBoardId;\n      return boards.map(function (board) {\n        return React.createElement(BoardRow, {\n          type: type,\n          key: board._id,\n          isActive: currentBoardId === board._id,\n          board: board,\n          remove: remove,\n          renderButton: renderButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Boards, [{\n    key: \"renderBoardForm\",\n    value: function renderBoardForm(props) {\n      return React.createElement(BoardForm, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderSidebarHeader\",\n    value: function renderSidebarHeader() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          renderButton = _this$props2.renderButton,\n          type = _this$props2.type,\n          options = _this$props2.options;\n      var boardName = options ? options.boardName : 'Board';\n      var addBoard = React.createElement(Button, {\n        btnStyle: \"success\",\n        icon: \"plus-circle\",\n        uppercase: false,\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Add New \", boardName);\n\n      var content = function content(props) {\n        return _this2.renderBoardForm(_objectSpread({}, props, {\n          renderButton: renderButton,\n          type: type\n        }));\n      };\n\n      return React.createElement(TopHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(ModalTrigger, {\n        title: \"New \".concat(boardName),\n        trigger: addBoard,\n        autoOpenKey: \"showBoardModal\",\n        content: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          loading = _this$props3.loading,\n          boards = _this$props3.boards,\n          options = _this$props3.options;\n      var boardName = options && options.boardName ? options.boardName.toLowerCase() : 'board';\n      return React.createElement(Sidebar, {\n        wide: true,\n        header: this.renderSidebarHeader(),\n        full: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(DataWithLoader, {\n        data: React.createElement(List, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, this.renderItems()),\n        loading: loading,\n        count: boards.length,\n        emptyText: \"There is no \".concat(boardName),\n        emptyImage: \"/images/actions/18.svg\",\n        objective: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Boards;\n}(React.Component);\n\nexport default Boards;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/components/Boards.tsx"],"names":["Button","DataWithLoader","ModalTrigger","TopHeader","Sidebar","SidebarList","List","React","BoardForm","BoardRow","Boards","renderItems","props","type","boards","remove","renderButton","currentBoardId","map","board","_id","options","boardName","addBoard","content","renderBoardForm","loading","toLowerCase","renderSidebarHeader","length","Component"],"mappings":"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","sourcesContent":["import { IBoard } from 'modules/boards/types';\nimport Button from 'modules/common/components/Button';\nimport DataWithLoader from 'modules/common/components/DataWithLoader';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport { TopHeader } from 'modules/common/styles/main';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport { SidebarList as List } from 'modules/layout/styles';\nimport React from 'react';\nimport { IOption } from '../types';\nimport BoardForm from './BoardForm';\nimport BoardRow from './BoardRow';\n\ntype Props = {\n  currentBoardId?: string;\n  type: string;\n  boards: IBoard[];\n  remove: (boardId: string) => void;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  loading: boolean;\n  options?: IOption;\n};\n\nclass Boards extends React.Component<Props, {}> {\n  renderItems = () => {\n    const { type, boards, remove, renderButton, currentBoardId } = this.props;\n\n    return boards.map(board => (\n      <BoardRow\n        type={type}\n        key={board._id}\n        isActive={currentBoardId === board._id}\n        board={board}\n        remove={remove}\n        renderButton={renderButton}\n      />\n    ));\n  };\n\n  renderBoardForm(props) {\n    return <BoardForm {...props} />;\n  }\n\n  renderSidebarHeader() {\n    const { renderButton, type, options } = this.props;\n\n    const boardName = options ? options.boardName : 'Board';\n\n    const addBoard = (\n      <Button\n        btnStyle=\"success\"\n        icon=\"plus-circle\"\n        uppercase={false}\n        block={true}\n      >\n        Add New {boardName}\n      </Button>\n    );\n\n    const content = props => {\n      return this.renderBoardForm({ ...props, renderButton, type });\n    };\n\n    return (\n      <TopHeader>\n        <ModalTrigger\n          title={`New ${boardName}`}\n          trigger={addBoard}\n          autoOpenKey=\"showBoardModal\"\n          content={content}\n        />\n      </TopHeader>\n    );\n  }\n\n  render() {\n    const { loading, boards, options } = this.props;\n\n    const boardName =\n      options && options.boardName ? options.boardName.toLowerCase() : 'board';\n\n    return (\n      <Sidebar wide={true} header={this.renderSidebarHeader()} full={true}>\n        <DataWithLoader\n          data={<List>{this.renderItems()}</List>}\n          loading={loading}\n          count={boards.length}\n          emptyText={`There is no ${boardName}`}\n          emptyImage=\"/images/actions/18.svg\"\n          objective={true}\n        />\n      </Sidebar>\n    );\n  }\n}\n\nexport default Boards;\n"]},"metadata":{},"sourceType":"module"}