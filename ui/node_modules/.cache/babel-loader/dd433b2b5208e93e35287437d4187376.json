{"ast":null,"code":"import { __ } from 'modules/common/utils';\nimport s from 'underscore.string';\nexport var formatMemorySize = function formatMemorySize(memorySize) {\n  if (typeof memorySize !== 'number') {\n    return null;\n  }\n\n  var units = ['bytes', 'kB', 'MB', 'GB'];\n  var order;\n\n  for (order = 0; order < units.length - 1; ++order) {\n    var upperLimit = Math.pow(1024, order + 1);\n\n    if (memorySize < upperLimit) {\n      break;\n    }\n  }\n\n  var divider = Math.pow(1024, order);\n  var decimalDigits = order === 0 ? 0 : 2;\n  return \"\".concat(s.numberFormat(memorySize / divider, decimalDigits), \" \").concat(units[order]);\n};\nexport var formatDuration = function formatDuration(duration) {\n  var days = Math.floor(duration / 86400);\n  var hours = Math.floor(duration % 86400 / 3600);\n  var minutes = Math.floor(duration % 86400 % 3600 / 60);\n  var seconds = Math.floor(duration % 86400 % 3600 % 60);\n  var out = '';\n\n  if (days > 0) {\n    out += \"\".concat(days, \" \").concat(__('days'), \", \");\n  }\n\n  if (hours > 0) {\n    out += \"\".concat(hours, \" \").concat(__('hours'), \", \");\n  }\n\n  if (minutes > 0) {\n    out += \"\".concat(minutes, \" \").concat(__('minutes'), \", \");\n  }\n\n  if (seconds > 0) {\n    out += \"\".concat(seconds, \" \").concat(__('seconds'));\n  }\n\n  return out;\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/status/utils.ts"],"names":["__","s","formatMemorySize","memorySize","units","order","length","upperLimit","Math","pow","divider","decimalDigits","numberFormat","formatDuration","duration","days","floor","hours","minutes","seconds","out"],"mappings":"AAAA,SAASA,EAAT,QAAmB,sBAAnB;AACA,OAAOC,CAAP,MAAc,mBAAd;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,UAAU,EAAI;AAC5C,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAO,IAAP;AACD;;AAED,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAd;AAEA,MAAIC,KAAJ;;AACA,OAAKA,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAvC,EAA0C,EAAED,KAA5C,EAAmD;AACjD,QAAME,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,IAAT,EAAeJ,KAAK,GAAG,CAAvB,CAAnB;;AAEA,QAAIF,UAAU,GAAGI,UAAjB,EAA6B;AAC3B;AACD;AACF;;AAED,MAAMG,OAAO,GAAGF,IAAI,CAACC,GAAL,CAAS,IAAT,EAAeJ,KAAf,CAAhB;AACA,MAAMM,aAAa,GAAGN,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAxC;AACA,mBAAUJ,CAAC,CAACW,YAAF,CAAeT,UAAU,GAAGO,OAA5B,EAAqCC,aAArC,CAAV,cACEP,KAAK,CAACC,KAAD,CADP;AAGD,CArBM;AAuBP,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AACxC,MAAMC,IAAI,GAAGP,IAAI,CAACQ,KAAL,CAAWF,QAAQ,GAAG,KAAtB,CAAb;AACA,MAAMG,KAAK,GAAGT,IAAI,CAACQ,KAAL,CAAYF,QAAQ,GAAG,KAAZ,GAAqB,IAAhC,CAAd;AACA,MAAMI,OAAO,GAAGV,IAAI,CAACQ,KAAL,CAAaF,QAAQ,GAAG,KAAZ,GAAqB,IAAtB,GAA8B,EAAzC,CAAhB;AACA,MAAMK,OAAO,GAAGX,IAAI,CAACQ,KAAL,CAAaF,QAAQ,GAAG,KAAZ,GAAqB,IAAtB,GAA8B,EAAzC,CAAhB;AACA,MAAIM,GAAG,GAAG,EAAV;;AACA,MAAIL,IAAI,GAAG,CAAX,EAAc;AACZK,IAAAA,GAAG,cAAOL,IAAP,cAAef,EAAE,CAAC,MAAD,CAAjB,OAAH;AACD;;AACD,MAAIiB,KAAK,GAAG,CAAZ,EAAe;AACbG,IAAAA,GAAG,cAAOH,KAAP,cAAgBjB,EAAE,CAAC,OAAD,CAAlB,OAAH;AACD;;AACD,MAAIkB,OAAO,GAAG,CAAd,EAAiB;AACfE,IAAAA,GAAG,cAAOF,OAAP,cAAkBlB,EAAE,CAAC,SAAD,CAApB,OAAH;AACD;;AACD,MAAImB,OAAO,GAAG,CAAd,EAAiB;AACfC,IAAAA,GAAG,cAAOD,OAAP,cAAkBnB,EAAE,CAAC,SAAD,CAApB,CAAH;AACD;;AACD,SAAOoB,GAAP;AACD,CAnBM","sourcesContent":["import { __ } from 'modules/common/utils';\nimport s from 'underscore.string';\n\nexport const formatMemorySize = memorySize => {\n  if (typeof memorySize !== 'number') {\n    return null;\n  }\n\n  const units = ['bytes', 'kB', 'MB', 'GB'];\n\n  let order;\n  for (order = 0; order < units.length - 1; ++order) {\n    const upperLimit = Math.pow(1024, order + 1);\n\n    if (memorySize < upperLimit) {\n      break;\n    }\n  }\n\n  const divider = Math.pow(1024, order);\n  const decimalDigits = order === 0 ? 0 : 2;\n  return `${s.numberFormat(memorySize / divider, decimalDigits)} ${\n    units[order]\n  }`;\n};\n\nexport const formatDuration = duration => {\n  const days = Math.floor(duration / 86400);\n  const hours = Math.floor((duration % 86400) / 3600);\n  const minutes = Math.floor(((duration % 86400) % 3600) / 60);\n  const seconds = Math.floor(((duration % 86400) % 3600) % 60);\n  let out = '';\n  if (days > 0) {\n    out += `${days} ${__('days')}, `;\n  }\n  if (hours > 0) {\n    out += `${hours} ${__('hours')}, `;\n  }\n  if (minutes > 0) {\n    out += `${minutes} ${__('minutes')}, `;\n  }\n  if (seconds > 0) {\n    out += `${seconds} ${__('seconds')}`;\n  }\n  return out;\n};\n"]},"metadata":{},"sourceType":"module"}