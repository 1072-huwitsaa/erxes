{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/TagFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport CountsByTag from 'modules/common/components/CountsByTag';\nimport { TAG_TYPES } from 'modules/tags/constants';\nimport { queries as tagQueries } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as customerQueries } from '../../graphql';\n\nvar TagFilterContainer = function TagFilterContainer(props) {\n  var customersCountQuery = props.customersCountQuery,\n      tagsQuery = props.tagsQuery;\n  var counts = (customersCountQuery ? customersCountQuery.customerCounts : null) || {\n    byTag: {}\n  };\n  var tagsLoading = false;\n  var tags = [];\n\n  if (tagsQuery) {\n    tagsLoading = tagsQuery.loading || false;\n    tags = tagsQuery.tags || [];\n  }\n\n  return React.createElement(CountsByTag, {\n    tags: tags,\n    counts: counts.byTag || {},\n    manageUrl: \"/tags/customer\",\n    loading: tagsLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n};\n\nexport default withProps(compose(graphql(gql(customerQueries.customerCounts), {\n  name: 'customersCountQuery',\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: function options(_ref2) {\n    var type = _ref2.type;\n    return {\n      variables: {\n        type: type,\n        only: 'byTag'\n      }\n    };\n  }\n}), graphql(gql(tagQueries.tags), {\n  name: 'tagsQuery',\n  skip: function skip(_ref3) {\n    var loadingMainQuery = _ref3.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: function options() {\n    return {\n      variables: {\n        type: TAG_TYPES.CUSTOMER\n      }\n    };\n  }\n}))(TagFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/TagFilter.tsx"],"names":["gql","compose","CountsByTag","TAG_TYPES","queries","tagQueries","React","graphql","withProps","customerQueries","TagFilterContainer","props","customersCountQuery","tagsQuery","counts","customerCounts","byTag","tagsLoading","tags","loading","name","skip","loadingMainQuery","options","type","variables","only","CUSTOMER"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,OAAO,IAAIC,UAApB,QAAsC,sBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASJ,OAAO,IAAIK,eAApB,QAA2C,eAA3C;;AAGA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAGrB;AAAA,MACIC,mBADJ,GACuCD,KADvC,CACIC,mBADJ;AAAA,MACyBC,SADzB,GACuCF,KADvC,CACyBE,SADzB;AAGJ,MAAMC,MAAM,GAAG,CAACF,mBAAmB,GAC/BA,mBAAmB,CAACG,cADW,GAE/B,IAFW,KAEF;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFb;AAIA,MAAIC,WAAW,GAAG,KAAlB;AACA,MAAIC,IAAY,GAAG,EAAnB;;AAEA,MAAIL,SAAJ,EAAe;AACbI,IAAAA,WAAW,GAAGJ,SAAS,CAACM,OAAV,IAAqB,KAAnC;AACAD,IAAAA,IAAI,GAAGL,SAAS,CAACK,IAAV,IAAkB,EAAzB;AACD;;AAED,SACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,MAAM,EAAEJ,MAAM,CAACE,KAAP,IAAgB,EAF1B;AAGE,IAAA,SAAS,EAAC,gBAHZ;AAIE,IAAA,OAAO,EAAEC,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CA1BD;;AAiCA,eAAeT,SAAS,CACtBP,OAAO,CACLM,OAAO,CACLP,GAAG,CAACS,eAAe,CAACM,cAAjB,CADE,EAEL;AACEK,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,WAAe;AACtBC,MAAAA,SAAS,EAAE;AAAED,QAAAA,IAAI,EAAJA,IAAF;AAAQE,QAAAA,IAAI,EAAE;AAAd;AADW,KAAf;AAAA;AAHX,CAFK,CADF,EAWLnB,OAAO,CACLP,GAAG,CAACK,UAAU,CAACa,IAAZ,CADE,EAEL;AACEE,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,SAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdE,MAAAA,SAAS,EAAE;AACTD,QAAAA,IAAI,EAAErB,SAAS,CAACwB;AADP;AADG,KAAP;AAAA;AAHX,CAFK,CAXF,CAAP,CAuBEjB,kBAvBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport CountsByTag from 'modules/common/components/CountsByTag';\nimport { TAG_TYPES } from 'modules/tags/constants';\nimport { queries as tagQueries } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { ITag, TagsQueryResponse } from '../../../tags/types';\nimport { queries as customerQueries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\nconst TagFilterContainer = (props: {\n  customersCountQuery?: CountQueryResponse;\n  tagsQuery?: TagsQueryResponse;\n}) => {\n  const { customersCountQuery, tagsQuery } = props;\n\n  const counts = (customersCountQuery\n    ? customersCountQuery.customerCounts\n    : null) || { byTag: {} };\n\n  let tagsLoading = false;\n  let tags: ITag[] = [];\n\n  if (tagsQuery) {\n    tagsLoading = tagsQuery.loading || false;\n    tags = tagsQuery.tags || [];\n  }\n\n  return (\n    <CountsByTag\n      tags={tags}\n      counts={counts.byTag || {}}\n      manageUrl=\"/tags/customer\"\n      loading={tagsLoading}\n    />\n  );\n};\n\ntype WrapperProps = {\n  type: string;\n  loadingMainQuery: boolean;\n};\n\nexport default withProps<WrapperProps>(\n  compose(\n    graphql<WrapperProps, CountQueryResponse, { only: string }>(\n      gql(customerQueries.customerCounts),\n      {\n        name: 'customersCountQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: ({ type }) => ({\n          variables: { type, only: 'byTag' }\n        })\n      }\n    ),\n    graphql<{ loadingMainQuery: boolean }, TagsQueryResponse, { type: string }>(\n      gql(tagQueries.tags),\n      {\n        name: 'tagsQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: () => ({\n          variables: {\n            type: TAG_TYPES.CUSTOMER\n          }\n        })\n      }\n    )\n  )(TagFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}