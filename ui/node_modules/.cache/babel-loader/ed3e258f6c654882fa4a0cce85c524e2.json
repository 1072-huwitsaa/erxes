{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/common/ActionSection.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ActionSection from 'modules/customers/components/common/ActionSection';\nimport { mutations, queries } from 'modules/customers/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nvar ActionSectionContainer = function ActionSectionContainer(props) {\n  var isSmall = props.isSmall,\n      customer = props.customer,\n      customersRemove = props.customersRemove,\n      customersMerge = props.customersMerge,\n      customersChangeState = props.customersChangeState,\n      history = props.history;\n  var _id = customer._id;\n\n  var remove = function remove() {\n    customersRemove({\n      variables: {\n        customerIds: [_id]\n      }\n    }).then(function () {\n      Alert.success('You successfully deleted a customer');\n      history.push('/contacts/customer');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var changeState = function changeState(value) {\n    customersChangeState({\n      variables: {\n        _id: _id,\n        value: value\n      }\n    }).then(function () {\n      Alert.success('You successfully changed the state');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var merge = function merge(_ref) {\n    var ids = _ref.ids,\n        data = _ref.data;\n    customersMerge({\n      variables: {\n        customerIds: ids,\n        customerFields: data\n      }\n    }).then(function (response) {\n      Alert.success('You successfully merged a customer');\n      history.push(\"/contacts/details/\".concat(response.data.customersMerge._id));\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var searchCustomer = function searchCustomer(searchValue, callback) {\n    client.query({\n      query: gql(queries.customers),\n      variables: {\n        searchValue: searchValue,\n        page: 1,\n        perPage: 10\n      }\n    }).then(function (response) {\n      if (typeof callback === 'function') {\n        callback(response.data.customers);\n      }\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = {\n    isSmall: isSmall,\n    coc: customer,\n    cocType: 'customer',\n    remove: remove,\n    merge: merge,\n    changeState: changeState,\n    search: searchCustomer\n  };\n  return React.createElement(ActionSection, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }));\n};\n\nvar generateOptions = function generateOptions() {\n  return {\n    refetchQueries: ['customersMain', 'customerCounts', 'customerDetail']\n  };\n};\n\nexport default withProps(compose( // mutations\ngraphql(gql(mutations.customersRemove), {\n  name: 'customersRemove',\n  options: generateOptions()\n}), graphql(gql(mutations.customersMerge), {\n  name: 'customersMerge',\n  options: generateOptions()\n}), graphql(gql(mutations.customersChangeState), {\n  name: 'customersChangeState',\n  options: generateOptions()\n}))(withRouter(ActionSectionContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/common/ActionSection.tsx"],"names":["client","gql","compose","Alert","withProps","ActionSection","mutations","queries","React","graphql","withRouter","ActionSectionContainer","props","isSmall","customer","customersRemove","customersMerge","customersChangeState","history","_id","remove","variables","customerIds","then","success","push","catch","e","error","message","changeState","value","merge","ids","data","customerFields","response","searchCustomer","searchValue","callback","query","customers","page","perPage","updatedProps","coc","cocType","search","generateOptions","refetchQueries","name","options"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ActionSection from 'modules/customers/components/common/ActionSection';\nimport { mutations, queries } from 'modules/customers/graphql';\nimport {\n  ChangeStateMutationResponse,\n  ChangeStateMutationVariables,\n  ICustomer,\n  MergeMutationResponse,\n  MergeMutationVariables,\n  RemoveMutationResponse,\n  RemoveMutationVariables\n} from 'modules/customers/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../../common/types';\n\ntype Props = {\n  customer: ICustomer;\n  isSmall?: boolean;\n};\n\ntype FinalProps = Props &\n  RemoveMutationResponse &\n  MergeMutationResponse &\n  ChangeStateMutationResponse &\n  IRouterProps;\n\nconst ActionSectionContainer = (props: FinalProps) => {\n  const {\n    isSmall,\n    customer,\n    customersRemove,\n    customersMerge,\n    customersChangeState,\n    history\n  } = props;\n\n  const { _id } = customer;\n\n  const remove = () => {\n    customersRemove({\n      variables: { customerIds: [_id] }\n    })\n      .then(() => {\n        Alert.success('You successfully deleted a customer');\n        history.push('/contacts/customer');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const changeState = (value: string) => {\n    customersChangeState({\n      variables: {\n        _id,\n        value\n      }\n    })\n      .then(() => {\n        Alert.success('You successfully changed the state');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const merge = ({ ids, data }) => {\n    customersMerge({\n      variables: {\n        customerIds: ids,\n        customerFields: data\n      }\n    })\n      .then(response => {\n        Alert.success('You successfully merged a customer');\n        history.push(`/contacts/details/${response.data.customersMerge._id}`);\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const searchCustomer = (\n    searchValue: string,\n    callback: (data?: any) => void\n  ) => {\n    client\n      .query({\n        query: gql(queries.customers),\n        variables: { searchValue, page: 1, perPage: 10 }\n      })\n      .then((response: any) => {\n        if (typeof callback === 'function') {\n          callback(response.data.customers);\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    isSmall,\n    coc: customer,\n    cocType: 'customer',\n    remove,\n    merge,\n    changeState,\n    search: searchCustomer\n  };\n\n  return <ActionSection {...updatedProps} />;\n};\n\nconst generateOptions = () => ({\n  refetchQueries: ['customersMain', 'customerCounts', 'customerDetail']\n});\n\nexport default withProps<Props>(\n  compose(\n    // mutations\n    graphql<Props, RemoveMutationResponse, RemoveMutationVariables>(\n      gql(mutations.customersRemove),\n      {\n        name: 'customersRemove',\n        options: generateOptions()\n      }\n    ),\n    graphql<Props, MergeMutationResponse, MergeMutationVariables>(\n      gql(mutations.customersMerge),\n      {\n        name: 'customersMerge',\n        options: generateOptions()\n      }\n    ),\n    graphql<Props, ChangeStateMutationResponse, ChangeStateMutationVariables>(\n      gql(mutations.customersChangeState),\n      {\n        name: 'customersChangeState',\n        options: generateOptions()\n      }\n    )\n  )(withRouter<FinalProps>(ActionSectionContainer))\n);\n"]},"metadata":{},"sourceType":"module"}