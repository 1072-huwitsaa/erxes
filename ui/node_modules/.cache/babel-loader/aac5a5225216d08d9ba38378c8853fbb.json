{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/containers/items/Conversation.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Conversation from 'modules/activityLogs/components/items/Conversation';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport { queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar ConversationContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConversationContainer, _React$Component);\n\n  function ConversationContainer() {\n    _classCallCheck(this, ConversationContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConversationContainer).apply(this, arguments));\n  }\n\n  _createClass(ConversationContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          conversationDetailQuery = _this$props.conversationDetailQuery,\n          messagesQuery = _this$props.messagesQuery,\n          commentsQuery = _this$props.commentsQuery;\n\n      if (conversationDetailQuery.loading || messagesQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      }\n\n      var conversation = conversationDetailQuery.conversationDetail;\n      var messages = messagesQuery.conversationMessages || {};\n      var comments = commentsQuery && commentsQuery.converstationFacebookComments || [];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        conversation: conversation,\n        messages: messages,\n        comments: comments\n      });\n\n      return React.createElement(Conversation, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ConversationContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.conversationDetail), {\n  name: 'conversationDetailQuery',\n  options: function options(_ref) {\n    var conversationId = _ref.conversationId;\n    return {\n      variables: {\n        _id: conversationId\n      }\n    };\n  }\n}), graphql(gql(queries.conversationMessages), {\n  name: 'messagesQuery',\n  options: function options(_ref2) {\n    var conversationId = _ref2.conversationId;\n    return {\n      variables: {\n        conversationId: conversationId,\n        limit: 10,\n        getFirst: true\n      }\n    };\n  }\n}), graphql(gql(queries.converstationFacebookComments), {\n  name: 'commentsQuery',\n  skip: function skip(_ref3) {\n    var activity = _ref3.activity;\n    return activity.contentType !== 'comment';\n  },\n  options: function options(_ref4) {\n    var conversationId = _ref4.conversationId,\n        activity = _ref4.activity;\n    return {\n      variables: {\n        postId: conversationId,\n        senderId: activity.contentId\n      }\n    };\n  }\n}))(ConversationContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/containers/items/Conversation.tsx"],"names":["gql","compose","Conversation","Spinner","withProps","queries","React","graphql","ConversationContainer","props","conversationDetailQuery","messagesQuery","commentsQuery","loading","conversation","conversationDetail","messages","conversationMessages","comments","converstationFacebookComments","updatedProps","Component","name","options","conversationId","variables","_id","limit","getFirst","skip","activity","contentType","postId","senderId","contentId"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,oDAAzB;AAEA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;;IAaMC,qB;;;;;;;;;;;;;6BACK;AAAA,wBAKH,KAAKC,KALF;AAAA,UAELC,uBAFK,eAELA,uBAFK;AAAA,UAGLC,aAHK,eAGLA,aAHK;AAAA,UAILC,aAJK,eAILA,aAJK;;AAOP,UAAIF,uBAAuB,CAACG,OAAxB,IAAmCF,aAAa,CAACE,OAArD,EAA8D;AAC5D,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAMC,YAAY,GAAGJ,uBAAuB,CAACK,kBAA7C;AACA,UAAMC,QAAQ,GAAGL,aAAa,CAACM,oBAAd,IAAsC,EAAvD;AACA,UAAMC,QAAQ,GACXN,aAAa,IAAIA,aAAa,CAACO,6BAAhC,IAAkE,EADpE;;AAGA,UAAMC,YAAY,qBACb,KAAKX,KADQ;AAEhBK,QAAAA,YAAY,EAAZA,YAFgB;AAGhBE,QAAAA,QAAQ,EAARA,QAHgB;AAIhBE,QAAAA,QAAQ,EAARA;AAJgB,QAAlB;;AAOA,aAAO,oBAAC,YAAD,oBAAkBE,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAzBiCd,KAAK,CAACe,S;;AA4B1C,eAAejB,SAAS,CACtBH,OAAO,CACLM,OAAO,CACLP,GAAG,CAACK,OAAO,CAACU,kBAAT,CADE,EAEL;AACEO,EAAAA,IAAI,EAAE,yBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,cAAH,QAAGA,cAAH;AAAA,WAAyB;AAChCC,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEF;AADI;AADqB,KAAzB;AAAA;AAFX,CAFK,CADF,EAYLjB,OAAO,CAA+BP,GAAG,CAACK,OAAO,CAACY,oBAAT,CAAlC,EAAkE;AACvEK,EAAAA,IAAI,EAAE,eADiE;AAEvEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,cAAH,SAAGA,cAAH;AAAA,WAAyB;AAChCC,MAAAA,SAAS,EAAE;AACTD,QAAAA,cAAc,EAAdA,cADS;AAETG,QAAAA,KAAK,EAAE,EAFE;AAGTC,QAAAA,QAAQ,EAAE;AAHD;AADqB,KAAzB;AAAA;AAF8D,CAAlE,CAZF,EAsBLrB,OAAO,CACLP,GAAG,CAACK,OAAO,CAACc,6BAAT,CADE,EAEL;AACEG,EAAAA,IAAI,EAAE,eADR;AAEEO,EAAAA,IAAI,EAAE;AAAA,QAAGC,QAAH,SAAGA,QAAH;AAAA,WAAkBA,QAAQ,CAACC,WAAT,KAAyB,SAA3C;AAAA,GAFR;AAGER,EAAAA,OAAO,EAAE;AAAA,QAAGC,cAAH,SAAGA,cAAH;AAAA,QAAmBM,QAAnB,SAAmBA,QAAnB;AAAA,WAAmC;AAC1CL,MAAAA,SAAS,EAAE;AACTO,QAAAA,MAAM,EAAER,cADC;AAETS,QAAAA,QAAQ,EAAEH,QAAQ,CAACI;AAFV;AAD+B,KAAnC;AAAA;AAHX,CAFK,CAtBF,CAAP,CAmCE1B,qBAnCF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Conversation from 'modules/activityLogs/components/items/Conversation';\nimport { IActivityLog } from 'modules/activityLogs/types';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport { queries } from 'modules/inbox/graphql';\nimport {\n  ConversationDetailQueryResponse,\n  FacebookCommentsQueryResponse,\n  MessagesQueryResponse\n} from 'modules/inbox/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  activity: IActivityLog;\n  conversationId: string;\n};\n\ntype FinalProps = {\n  messagesQuery: MessagesQueryResponse;\n  commentsQuery: FacebookCommentsQueryResponse;\n  conversationDetailQuery: ConversationDetailQueryResponse;\n} & Props;\n\nclass ConversationContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      conversationDetailQuery,\n      messagesQuery,\n      commentsQuery\n    } = this.props;\n\n    if (conversationDetailQuery.loading || messagesQuery.loading) {\n      return <Spinner />;\n    }\n\n    const conversation = conversationDetailQuery.conversationDetail;\n    const messages = messagesQuery.conversationMessages || {};\n    const comments =\n      (commentsQuery && commentsQuery.converstationFacebookComments) || [];\n\n    const updatedProps = {\n      ...this.props,\n      conversation,\n      messages,\n      comments\n    };\n\n    return <Conversation {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, ConversationDetailQueryResponse>(\n      gql(queries.conversationDetail),\n      {\n        name: 'conversationDetailQuery',\n        options: ({ conversationId }) => ({\n          variables: {\n            _id: conversationId\n          }\n        })\n      }\n    ),\n    graphql<Props, MessagesQueryResponse>(gql(queries.conversationMessages), {\n      name: 'messagesQuery',\n      options: ({ conversationId }) => ({\n        variables: {\n          conversationId,\n          limit: 10,\n          getFirst: true\n        }\n      })\n    }),\n    graphql<Props, FacebookCommentsQueryResponse>(\n      gql(queries.converstationFacebookComments),\n      {\n        name: 'commentsQuery',\n        skip: ({ activity }) => activity.contentType !== 'comment',\n        options: ({ conversationId, activity }) => ({\n          variables: {\n            postId: conversationId,\n            senderId: activity.contentId\n          }\n        })\n      }\n    )\n  )(ConversationContainer)\n);\n"]},"metadata":{},"sourceType":"module"}