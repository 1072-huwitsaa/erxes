{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/editor/Editor.tsx\";\nimport Draft from \"draft-js\";\nimport { ContentState, EditorState, RichUtils } from \"draft-js\";\nimport createLinkPlugin from \"draft-js-anchor-plugin\";\nimport \"draft-js-anchor-plugin/lib/plugin.css\";\nimport { BlockquoteButton, BoldButton, CodeBlockButton, ItalicButton, OrderedListButton, UnderlineButton, UnorderedListButton } from \"draft-js-buttons\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport Editor from \"draft-js-plugins-editor\";\nimport createToolbarPlugin, { Separator } from \"draft-js-static-toolbar-plugin\";\nimport \"draft-js-static-toolbar-plugin/lib/plugin.css\";\nimport { getDraftDecorator } from \"modules/common/components/editor/DraftjsHelpers\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport React from \"react\";\nimport HeadlinesButton from \"./HeadlinesButton\";\nimport { RichEditorControlsRoot, RichEditorRoot } from \"./styles\";\nexport var ErxesEditor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ErxesEditor, _React$Component);\n\n  function ErxesEditor(props) {\n    var _this;\n\n    _classCallCheck(this, ErxesEditor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErxesEditor).call(this, props));\n    _this.editor = _this.refs.editor;\n    _this.linkPlugin = void 0;\n    _this.toolbarPlugin = void 0;\n    _this.emojiPlugin = void 0;\n\n    _this.focus = function () {\n      _this.editor.focus();\n    };\n\n    _this.onTab = function (e) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          editorState = _this$props.editorState;\n      var maxDepth = 4;\n      onChange(RichUtils.onTab(e, editorState, maxDepth));\n    };\n\n    _this.handleKeyCommand = function (command) {\n      var _this$props2 = _this.props,\n          onChange = _this$props2.onChange,\n          editorState = _this$props2.editorState;\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        onChange(newState);\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.toggleBlockType = function () {\n      var blockType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"unstyled\";\n      var _this$props3 = _this.props,\n          onChange = _this$props3.onChange,\n          editorState = _this$props3.editorState;\n      onChange(RichUtils.toggleBlockType(editorState, blockType));\n    };\n\n    _this.toggleInlineStyle = function (inlineStyle) {\n      var _this$props4 = _this.props,\n          onChange = _this$props4.onChange,\n          editorState = _this$props4.editorState;\n      onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n    };\n\n    _this.handlePastedFile = function (e) {\n      if (_this.props.handleFileInput) {\n        _this.props.handleFileInput(e);\n      }\n    };\n\n    var options = function options(settings) {\n      if (props.isTopPopup) {\n        return {\n          top: settings.decoratorRect.y - 30 + \"px\",\n          // change this value (30) for manage the distance between cursor and bottom edge of popover\n          transform: \"scale(1) translateY(-100%)\"\n        };\n      }\n\n      return {\n        top: settings.decoratorRect.y + \"px\",\n        transform: \"scale(1)\"\n      };\n    };\n\n    _this.linkPlugin = createLinkPlugin();\n    _this.toolbarPlugin = createToolbarPlugin();\n    _this.emojiPlugin = createEmojiPlugin({\n      useNativeArt: true,\n      selectButtonContent: React.createElement(Icon, {\n        icon: \"smile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      positionSuggestions: function positionSuggestions(settings) {\n        return _objectSpread({\n          left: settings.decoratorRect.x + \"px\",\n          boxShadow: \"0 0 12px 0 rgba(0, 0, 0, 0.1)\",\n          transformOrigin: \"1em 0%\",\n          position: \"fixed\",\n          transition: \"all 0.2s cubic-bezier(0.3, 1.2, 0.2, 1) 0s\"\n        }, options(settings));\n      }\n    });\n    return _this;\n  }\n\n  _createClass(ErxesEditor, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          editorState = _this$props5.editorState,\n          controls = _this$props5.controls,\n          onUpArrow = _this$props5.onUpArrow,\n          onDownArrow = _this$props5.onDownArrow,\n          onEscape = _this$props5.onEscape,\n          bordered = _this$props5.bordered,\n          _this$props5$isTopPop = _this$props5.isTopPopup,\n          isTopPopup = _this$props5$isTopPop === void 0 ? false : _this$props5$isTopPop,\n          plugins = _this$props5.plugins;\n      var updatedPlugins = [this.toolbarPlugin, this.linkPlugin, this.emojiPlugin].concat(plugins || []); // plugins\n\n      var Toolbar = this.toolbarPlugin.Toolbar;\n      var LinkButton = this.linkPlugin.LinkButton;\n      var _this$emojiPlugin = this.emojiPlugin,\n          EmojiSuggestions = _this$emojiPlugin.EmojiSuggestions,\n          EmojiSelect = _this$emojiPlugin.EmojiSelect; // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n\n      var className = \"RichEditor-editor\";\n      var contentState = editorState.getCurrentContent();\n\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\n          className += \" RichEditor-hidePlaceholder\";\n        }\n      }\n\n      return React.createElement(RichEditorRoot, {\n        bordered: bordered || false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: className,\n        onClick: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        editorState: editorState,\n        handleKeyCommand: this.handleKeyCommand,\n        onTab: this.onTab,\n        onChange: this.props.onChange,\n        placeholder: this.props.placeholder,\n        keyBindingFn: this.props.keyBindingFn,\n        onUpArrow: onUpArrow,\n        onDownArrow: onDownArrow,\n        onEscape: onEscape,\n        ref: function ref(element) {\n          _this2.editor = element;\n        },\n        plugins: updatedPlugins,\n        spellCheck: true,\n        handlePastedFiles: this.handlePastedFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(EmojiSuggestions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), React.createElement(RichEditorControlsRoot, {\n        isTopPopup: isTopPopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Toolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, function (externalProps) {\n        return React.createElement(React.Fragment, null, React.createElement(BoldButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        })), React.createElement(ItalicButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        })), React.createElement(UnderlineButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        })), React.createElement(Separator, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        })), React.createElement(HeadlinesButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        })), React.createElement(UnorderedListButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        })), React.createElement(OrderedListButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        })), React.createElement(BlockquoteButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        })), React.createElement(CodeBlockButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        })), React.createElement(LinkButton, Object.assign({}, externalProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        })), React.createElement(EmojiSelect, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }), controls ? controls : null);\n      })), this.props.pluginContent);\n    }\n  }]);\n\n  return ErxesEditor;\n}(React.Component);\nexport var toHTML = function toHTML(state) {\n  return stateToHTML(state.getCurrentContent());\n};\nexport var createStateFromHTML = function createStateFromHTML(editorState, html) {\n  if (!html) {\n    return editorState;\n  }\n\n  var _Draft$convertFromHTM = Draft.convertFromHTML(html),\n      contentBlocks = _Draft$convertFromHTM.contentBlocks,\n      entityMap = _Draft$convertFromHTM.entityMap;\n\n  if (!contentBlocks) {\n    return editorState;\n  }\n\n  var content = ContentState.createFromBlockArray(contentBlocks, entityMap);\n  return EditorState.createWithContent(content, getDraftDecorator());\n}; // TODO: Check insert-fragment\n\nexport var clearContent = function clearContent(editorState) {\n  return EditorState.push(editorState, ContentState.createFromText(\"\"), \"insert-fragment\");\n};\nexport default {\n  ErxesEditor: ErxesEditor,\n  toHTML: toHTML,\n  createStateFromHTML: createStateFromHTML,\n  clearContent: clearContent\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/editor/Editor.tsx"],"names":["Draft","ContentState","EditorState","RichUtils","createLinkPlugin","BlockquoteButton","BoldButton","CodeBlockButton","ItalicButton","OrderedListButton","UnderlineButton","UnorderedListButton","createEmojiPlugin","stateToHTML","Editor","createToolbarPlugin","Separator","getDraftDecorator","Icon","React","HeadlinesButton","RichEditorControlsRoot","RichEditorRoot","ErxesEditor","props","editor","refs","linkPlugin","toolbarPlugin","emojiPlugin","focus","onTab","e","onChange","editorState","maxDepth","handleKeyCommand","command","newState","toggleBlockType","blockType","toggleInlineStyle","inlineStyle","handlePastedFile","handleFileInput","options","settings","isTopPopup","top","decoratorRect","y","transform","useNativeArt","selectButtonContent","positionSuggestions","left","x","boxShadow","transformOrigin","position","transition","controls","onUpArrow","onDownArrow","onEscape","bordered","plugins","updatedPlugins","concat","Toolbar","LinkButton","EmojiSuggestions","EmojiSelect","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","placeholder","keyBindingFn","element","externalProps","pluginContent","Component","toHTML","state","createStateFromHTML","html","convertFromHTML","contentBlocks","entityMap","content","createFromBlockArray","createWithContent","clearContent","push","createFromText"],"mappings":"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","sourcesContent":["import Draft from \"draft-js\";\nimport { ContentState, EditorState, RichUtils } from \"draft-js\";\nimport createLinkPlugin from \"draft-js-anchor-plugin\";\nimport \"draft-js-anchor-plugin/lib/plugin.css\";\nimport {\n  BlockquoteButton,\n  BoldButton,\n  CodeBlockButton,\n  ItalicButton,\n  OrderedListButton,\n  UnderlineButton,\n  UnorderedListButton,\n} from \"draft-js-buttons\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport Editor from \"draft-js-plugins-editor\";\nimport createToolbarPlugin, { Separator } from \"draft-js-static-toolbar-plugin\";\nimport \"draft-js-static-toolbar-plugin/lib/plugin.css\";\nimport { getDraftDecorator } from \"modules/common/components/editor/DraftjsHelpers\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport React from \"react\";\nimport HeadlinesButton from \"./HeadlinesButton\";\nimport { RichEditorControlsRoot, RichEditorRoot } from \"./styles\";\n\ntype ErxesEditorProps = {\n  editorState: EditorState;\n  onChange: (richUtils: RichUtils) => void;\n  bordered?: boolean;\n  isTopPopup?: boolean;\n  // extra control rows\n  controls?: any[];\n  pluginContent?: any;\n  plugins?: any[];\n  keyBindingFn?: (e: any) => any;\n  onUpArrow?: (e: KeyboardEvent) => void;\n  onDownArrow?: (e: KeyboardEvent) => void;\n  onEscape?: (e: KeyboardEvent) => void;\n  handleFileInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  placeholder?: string | React.ReactNode;\n};\n\nexport class ErxesEditor extends React.Component<ErxesEditorProps> {\n  editor: Editor = this.refs.editor;\n  private linkPlugin;\n  private toolbarPlugin;\n  private emojiPlugin;\n\n  constructor(props) {\n    super(props);\n\n    const options = (settings) => {\n      if (props.isTopPopup) {\n        return {\n          top: settings.decoratorRect.y - 30 + \"px\", // change this value (30) for manage the distance between cursor and bottom edge of popover\n          transform: \"scale(1) translateY(-100%)\",\n        };\n      }\n\n      return {\n        top: settings.decoratorRect.y + \"px\",\n        transform: \"scale(1)\",\n      };\n    };\n\n    this.linkPlugin = createLinkPlugin();\n    this.toolbarPlugin = createToolbarPlugin();\n    this.emojiPlugin = createEmojiPlugin({\n      useNativeArt: true,\n      selectButtonContent: <Icon icon=\"smile\" />,\n      positionSuggestions: (settings) => {\n        return {\n          left: settings.decoratorRect.x + \"px\",\n          boxShadow: \"0 0 12px 0 rgba(0, 0, 0, 0.1)\",\n          transformOrigin: \"1em 0%\",\n          position: \"fixed\",\n          transition: \"all 0.2s cubic-bezier(0.3, 1.2, 0.2, 1) 0s\",\n          ...options(settings),\n        };\n      },\n    });\n  }\n\n  focus = () => {\n    this.editor.focus();\n  };\n\n  onTab = (e) => {\n    const { onChange, editorState } = this.props;\n    const maxDepth = 4;\n\n    onChange(RichUtils.onTab(e, editorState, maxDepth));\n  };\n\n  handleKeyCommand = (command: string) => {\n    const { onChange, editorState } = this.props;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      onChange(newState);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  toggleBlockType = (blockType: string = \"unstyled\") => {\n    const { onChange, editorState } = this.props;\n\n    onChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  toggleInlineStyle = (inlineStyle) => {\n    const { onChange, editorState } = this.props;\n\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  handlePastedFile = (e) => {\n    if (this.props.handleFileInput) {\n      this.props.handleFileInput(e);\n    }\n  };\n\n  render() {\n    const {\n      editorState,\n      controls,\n      onUpArrow,\n      onDownArrow,\n      onEscape,\n      bordered,\n      isTopPopup = false,\n      plugins,\n    } = this.props;\n\n    const updatedPlugins = [\n      this.toolbarPlugin,\n      this.linkPlugin,\n      this.emojiPlugin,\n    ].concat(plugins || []);\n\n    // plugins\n    const { Toolbar } = this.toolbarPlugin;\n    const { LinkButton } = this.linkPlugin;\n    const { EmojiSuggestions, EmojiSelect } = this.emojiPlugin;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = \"RichEditor-editor\";\n    const contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\n        className += \" RichEditor-hidePlaceholder\";\n      }\n    }\n\n    return (\n      <RichEditorRoot bordered={bordered || false}>\n        <div className={className} onClick={this.focus}>\n          <Editor\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onTab={this.onTab}\n            onChange={this.props.onChange}\n            placeholder={this.props.placeholder}\n            keyBindingFn={this.props.keyBindingFn}\n            onUpArrow={onUpArrow}\n            onDownArrow={onDownArrow}\n            onEscape={onEscape}\n            ref={(element) => {\n              this.editor = element;\n            }}\n            plugins={updatedPlugins}\n            spellCheck={true}\n            handlePastedFiles={this.handlePastedFile}\n          />\n          <EmojiSuggestions />\n        </div>\n        <RichEditorControlsRoot isTopPopup={isTopPopup}>\n          <Toolbar>\n            {(externalProps) => (\n              <>\n                <BoldButton {...externalProps} />\n                <ItalicButton {...externalProps} />\n                <UnderlineButton {...externalProps} />\n                <Separator {...externalProps} />\n                <HeadlinesButton {...externalProps} />\n                <UnorderedListButton {...externalProps} />\n                <OrderedListButton {...externalProps} />\n                <BlockquoteButton {...externalProps} />\n                <CodeBlockButton {...externalProps} />\n                <LinkButton {...externalProps} />\n                <EmojiSelect />\n                {controls ? controls : null}\n              </>\n            )}\n          </Toolbar>\n        </RichEditorControlsRoot>\n        {this.props.pluginContent}\n      </RichEditorRoot>\n    );\n  }\n}\n\nexport const toHTML = (state: EditorState) =>\n  stateToHTML(state.getCurrentContent());\n\nexport const createStateFromHTML = (\n  editorState: EditorState,\n  html: string\n): EditorState => {\n  if (!html) {\n    return editorState;\n  }\n\n  const { contentBlocks, entityMap } = Draft.convertFromHTML(html);\n\n  if (!contentBlocks) {\n    return editorState;\n  }\n\n  const content = ContentState.createFromBlockArray(contentBlocks, entityMap);\n\n  return EditorState.createWithContent(content, getDraftDecorator());\n};\n\n// TODO: Check insert-fragment\nexport const clearContent = (editorState) =>\n  EditorState.push(\n    editorState,\n    ContentState.createFromText(\"\"),\n    \"insert-fragment\"\n  );\n\nexport default {\n  ErxesEditor,\n  toHTML,\n  createStateFromHTML,\n  clearContent,\n};\n"]},"metadata":{},"sourceType":"module"}