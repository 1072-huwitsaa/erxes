{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/leftSidebar/StatusFilterPopover.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __, Alert, router } from 'modules/common/utils';\nimport { queries } from 'modules/inbox/graphql';\nimport { PopoverButton } from 'modules/inbox/styles';\nimport { generateParams } from 'modules/inbox/utils';\nimport { FieldStyle, SidebarCounter, SidebarList } from 'modules/layout/styles';\nimport React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\n\nvar StatusFilterPopover =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StatusFilterPopover, _React$Component);\n\n  function StatusFilterPopover(props) {\n    var _this;\n\n    _classCallCheck(this, StatusFilterPopover);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatusFilterPopover).call(this, props));\n    _this.overlayTrigger = void 0;\n\n    _this.fetchData = function () {\n      var ignoreCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var queryParams = _this.props.queryParams;\n      client.query({\n        query: gql(queries.conversationCounts),\n        variables: generateParams(queryParams),\n        fetchPolicy: ignoreCache ? 'network-only' : 'cache-first'\n      }).then(function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading;\n\n        _this.setState({\n          counts: data.conversationCounts,\n          loading: loading\n        });\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    _this.onClick = function () {\n      _this.fetchData();\n    };\n\n    _this.clearStatusFilter = function () {\n      router.setParams(_this.props.history, {\n        participating: '',\n        status: '',\n        unassigned: '',\n        starred: '',\n        awaitingResponse: ''\n      });\n    };\n\n    _this.renderSingleFilter = function (paramName, paramValue, text, count) {\n      var history = _this.props.history;\n\n      var onClick = function onClick() {\n        // clear previous values\n        _this.clearStatusFilter();\n\n        router.setParams(history, _defineProperty({}, paramName, paramValue));\n\n        _this.overlayTrigger.hide();\n      };\n\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#link\",\n        className: router.getParam(history, [paramName]) === paramValue ? 'active' : '',\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(FieldStyle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, __(text)), React.createElement(SidebarCounter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, count)));\n    };\n\n    _this.renderPopover = function () {\n      var _this$state = _this.state,\n          loading = _this$state.loading,\n          counts = _this$state.counts;\n\n      if (loading) {\n        return React.createElement(Popover, {\n          id: \"filter-popover\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(Popover.Title, {\n          as: \"h3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, __('Filter by status')), React.createElement(Popover.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(Popover, {\n        id: \"filter-popover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Popover.Title, {\n        as: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, __('Filter by status')), React.createElement(Popover.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(SidebarList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, _this.renderSingleFilter('unassigned', 'true', 'Unassigned', counts.unassigned), _this.renderSingleFilter('participating', 'true', 'Participating', counts.participating), _this.renderSingleFilter('awaitingResponse', 'true', 'Awaiting Response', counts.awaitingResponse), _this.renderSingleFilter('status', 'closed', 'Resolved', counts.resolved))));\n    };\n\n    _this.state = {\n      counts: {},\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(StatusFilterPopover, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.refetchRequired !== prevProps.refetchRequired) {\n        this.fetchData(true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(OverlayTrigger, {\n        ref: function ref(overlayTrigger) {\n          _this2.overlayTrigger = overlayTrigger;\n        },\n        trigger: \"click\",\n        placement: \"bottom\",\n        overlay: this.renderPopover(),\n        container: this,\n        rootClose: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(PopoverButton, {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, __('Status'), React.createElement(Icon, {\n        icon: \"angle-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return StatusFilterPopover;\n}(React.Component);\n\nexport { StatusFilterPopover as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/leftSidebar/StatusFilterPopover.tsx"],"names":["client","gql","Icon","Spinner","__","Alert","router","queries","PopoverButton","generateParams","FieldStyle","SidebarCounter","SidebarList","React","OverlayTrigger","Popover","StatusFilterPopover","props","overlayTrigger","fetchData","ignoreCache","queryParams","query","conversationCounts","variables","fetchPolicy","then","data","loading","setState","counts","catch","e","error","message","onClick","clearStatusFilter","setParams","history","participating","status","unassigned","starred","awaitingResponse","renderSingleFilter","paramName","paramValue","text","count","hide","getParam","renderPopover","state","resolved","prevProps","refetchRequired","Component"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __, Alert, router } from 'modules/common/utils';\nimport { queries } from 'modules/inbox/graphql';\nimport { PopoverButton } from 'modules/inbox/styles';\nimport { generateParams } from 'modules/inbox/utils';\nimport { FieldStyle, SidebarCounter, SidebarList } from 'modules/layout/styles';\nimport React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\n\ntype Props = {\n  history: any;\n  queryParams: any;\n  refetchRequired: string;\n};\n\ntype State = {\n  counts: any;\n  loading: boolean;\n};\n\nexport default class StatusFilterPopover extends React.Component<Props, State> {\n  private overlayTrigger;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counts: {},\n      loading: true\n    };\n  }\n\n  fetchData = (ignoreCache = false) => {\n    const { queryParams } = this.props;\n\n    client\n      .query({\n        query: gql(queries.conversationCounts),\n        variables: generateParams(queryParams),\n        fetchPolicy: ignoreCache ? 'network-only' : 'cache-first'\n      })\n      .then(({ data, loading }: { data: any; loading: boolean }) => {\n        this.setState({ counts: data.conversationCounts, loading });\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.refetchRequired !== prevProps.refetchRequired) {\n      this.fetchData(true);\n    }\n  }\n\n  onClick = () => {\n    this.fetchData();\n  };\n\n  clearStatusFilter = () => {\n    router.setParams(this.props.history, {\n      participating: '',\n      status: '',\n      unassigned: '',\n      starred: '',\n      awaitingResponse: ''\n    });\n  };\n\n  renderSingleFilter = (\n    paramName: string,\n    paramValue: string,\n    text: string,\n    count: number\n  ) => {\n    const { history } = this.props;\n\n    const onClick = () => {\n      // clear previous values\n      this.clearStatusFilter();\n      router.setParams(history, { [paramName]: paramValue });\n      this.overlayTrigger.hide();\n    };\n\n    return (\n      <li>\n        <a\n          href=\"#link\"\n          className={\n            router.getParam(history, [paramName]) === paramValue ? 'active' : ''\n          }\n          onClick={onClick}\n        >\n          <FieldStyle>{__(text)}</FieldStyle>\n          <SidebarCounter>{count}</SidebarCounter>\n        </a>\n      </li>\n    );\n  };\n\n  renderPopover = () => {\n    const { loading, counts } = this.state;\n\n    if (loading) {\n      return (\n        <Popover id=\"filter-popover\">\n          <Popover.Title as=\"h3\">{__('Filter by status')}</Popover.Title>\n          <Popover.Content>\n            <Spinner objective={true} />\n          </Popover.Content>\n        </Popover>\n      );\n    }\n\n    return (\n      <Popover id=\"filter-popover\">\n        <Popover.Title as=\"h3\">{__('Filter by status')}</Popover.Title>\n        <Popover.Content>\n          <SidebarList>\n            {this.renderSingleFilter(\n              'unassigned',\n              'true',\n              'Unassigned',\n              counts.unassigned\n            )}\n            {this.renderSingleFilter(\n              'participating',\n              'true',\n              'Participating',\n              counts.participating\n            )}\n\n            {this.renderSingleFilter(\n              'awaitingResponse',\n              'true',\n              'Awaiting Response',\n              counts.awaitingResponse\n            )}\n\n            {this.renderSingleFilter(\n              'status',\n              'closed',\n              'Resolved',\n              counts.resolved\n            )}\n          </SidebarList>\n        </Popover.Content>\n      </Popover>\n    );\n  };\n\n  render() {\n    return (\n      <OverlayTrigger\n        ref={overlayTrigger => {\n          this.overlayTrigger = overlayTrigger;\n        }}\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlay={this.renderPopover()}\n        container={this}\n        rootClose={true}\n      >\n        <PopoverButton onClick={this.onClick}>\n          {__('Status')}\n          <Icon icon=\"angle-down\" />\n        </PopoverButton>\n      </OverlayTrigger>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}