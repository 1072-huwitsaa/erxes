{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/components/Histories.tsx\";\nimport { getEnv } from \"apolloClient\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport DataWithLoader from \"modules/common/components/DataWithLoader\";\nimport EmptyContent from \"modules/common/components/empty/EmptyContent\";\nimport HeaderDescription from \"modules/common/components/HeaderDescription\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport Pagination from \"modules/common/components/pagination/Pagination\";\nimport Table from \"modules/common/components/table\";\nimport { __ } from \"modules/common/utils\";\nimport Wrapper from \"modules/layout/components/Wrapper\";\nimport { BarItems } from \"modules/layout/styles\";\nimport { EMPTY_IMPORT_CONTENT } from \"modules/settings/constants\";\nimport DataImporter from \"modules/settings/importHistory/containers/DataImporter\";\nimport ManageColumns from \"modules/settings/properties/containers/ManageColumns\";\nimport React from \"react\";\nimport ExportPopupsData from \"../containers/ExportPopupsData\";\nimport HistoryRow from \"./Row\";\nimport Sidebar from \"./Sidebar\";\n// currently support import data types\nvar DATA_IMPORT_TYPES = [\"customer\", \"company\", \"product\", \"deal\", \"task\", \"ticket\", \"lead\"];\nvar DYNAMICLY_TEMPLATE_TYPES = [\"customer\", \"company\", \"product\", \"lead\"];\n\nvar Histories =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Histories, _React$Component);\n\n  function Histories() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Histories);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Histories)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderHistories = function () {\n      var _this$props = _this.props,\n          histories = _this$props.histories,\n          removeHistory = _this$props.removeHistory;\n      return React.createElement(Table, {\n        hover: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, __(\"Success\")), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, __(\"Failed\")), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, __(\"Total\")), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, __(\"Imported Date\")), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, __(\"Imported User\")), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, histories.map(function (history) {\n        return React.createElement(HistoryRow, {\n          key: history._id,\n          history: history,\n          removeHistory: removeHistory,\n          onClick: _this.onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      })));\n    };\n\n    _this.renderColumnChooser = function (type) {\n      var currentType = _this.props.currentType;\n      var icon = \"\";\n      var btnStyle = \"\";\n      var text = \"\";\n\n      switch (type) {\n        case \"import\":\n          icon = \"folder-download\";\n          btnStyle = \"success\";\n          text = \"Download template\";\n          break;\n\n        case \"export\":\n          icon = \"export\";\n          btnStyle = \"primary\";\n          text = \"Export \".concat(_this.getButtonText());\n          break;\n      }\n\n      var manageColumns = function manageColumns(props) {\n        return React.createElement(ManageColumns, Object.assign({}, props, {\n          contentType: currentType,\n          type: type,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      };\n\n      var editColumns = React.createElement(Button, {\n        btnStyle: btnStyle,\n        size: \"small\",\n        icon: icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __(\"\".concat(text)));\n      return React.createElement(ModalTrigger, {\n        title: \"Select Columns\",\n        trigger: editColumns,\n        content: manageColumns,\n        autoOpenKey: \"showManageColumnsModal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    };\n\n    _this.renderExportButton = function () {\n      var currentType = _this.props.currentType;\n\n      var _getEnv = getEnv(),\n          REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n      if (currentType === \"product\") {\n        return null;\n      }\n\n      var exportData = function exportData() {\n        window.open(\"\".concat(REACT_APP_API_URL, \"/file-export?type=\").concat(currentType), \"_blank\");\n      };\n\n      if (DYNAMICLY_TEMPLATE_TYPES.includes(currentType)) {\n        return _this.renderColumnChooser(\"export\");\n      }\n\n      return React.createElement(Button, {\n        icon: \"export\",\n        btnStyle: \"primary\",\n        size: \"small\",\n        onClick: exportData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, __(\"Export \".concat(_this.getButtonText())));\n    };\n\n    _this.renderImportButton = function () {\n      return React.createElement(BarItems, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, _this.renderTemplateButton(), _this.renderDataImporter(), _this.renderExportButton(), _this.renderExportPopupsData());\n    };\n\n    _this.onClick = function (id) {\n      var history = _this.props.history;\n      history.push(\"/settings/importHistory/\".concat(id));\n    };\n\n    return _this;\n  }\n\n  _createClass(Histories, [{\n    key: \"getButtonText\",\n    value: function getButtonText() {\n      var currentType = this.props.currentType;\n      var buttonText = \"\".concat(currentType, \"s\");\n\n      switch (currentType) {\n        case \"company\":\n          buttonText = \"companies\";\n          break;\n\n        case \"deal\":\n          buttonText = \"sales pipelines\";\n          break;\n\n        case \"user\":\n          buttonText = \"team members\";\n          break;\n\n        default:\n          break;\n      }\n\n      return buttonText;\n    }\n  }, {\n    key: \"renderTemplateButton\",\n    value: function renderTemplateButton() {\n      var _getEnv2 = getEnv(),\n          REACT_APP_API_URL = _getEnv2.REACT_APP_API_URL;\n\n      var currentType = this.props.currentType;\n\n      if (!DATA_IMPORT_TYPES.includes(currentType)) {\n        return null;\n      }\n\n      if (DYNAMICLY_TEMPLATE_TYPES.includes(currentType)) {\n        return this.renderColumnChooser(\"import\");\n      }\n\n      var name = \"product_template.xlsx\";\n\n      switch (currentType) {\n        case \"product\":\n          name = \"product_template.xlsx\";\n          break;\n\n        case \"deal\":\n        case \"task\":\n        case \"ticket\":\n          name = \"board_item_template.xlsx\";\n          break;\n\n        default:\n          break;\n      }\n\n      return React.createElement(Button, {\n        btnStyle: \"simple\",\n        size: \"small\",\n        icon: \"folder-download\",\n        href: \"\".concat(REACT_APP_API_URL, \"/download-template/?name=\").concat(name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, __(\"Download template\"));\n    }\n  }, {\n    key: \"renderDataImporter\",\n    value: function renderDataImporter() {\n      var currentType = this.props.currentType;\n\n      if (!DATA_IMPORT_TYPES.includes(currentType)) {\n        return null;\n      }\n\n      return React.createElement(DataImporter, {\n        type: currentType,\n        text: \"\".concat(__(\"Import\"), \" \").concat(this.getButtonText()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderExportPopupsData\",\n    value: function renderExportPopupsData() {\n      if (this.props.currentType !== \"customer\") {\n        return null;\n      }\n\n      return React.createElement(ExportPopupsData, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          currentType = _this$props2.currentType,\n          histories = _this$props2.histories,\n          loading = _this$props2.loading,\n          totalCount = _this$props2.totalCount;\n      var breadcrumb = [{\n        title: __(\"Settings\"),\n        link: \"/settings\"\n      }, {\n        title: __(\"Import & Export\"),\n        link: \"/settings/importHistories\"\n      }, {\n        title: __(currentType)\n      }];\n      return React.createElement(Wrapper, {\n        header: React.createElement(Wrapper.Header, {\n          title: __(currentType),\n          breadcrumb: breadcrumb,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }),\n        actionBar: React.createElement(Wrapper.ActionBar, {\n          left: React.createElement(HeaderDescription, {\n            icon: \"/images/actions/27.svg\",\n            title: __(\"Import & export\"),\n            description: __(\"Here you can find data of all your previous imports of companies and customers. Find out when they joined and their current status. Nothing goes missing around here.\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          }),\n          right: this.renderImportButton(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }),\n        leftSidebar: React.createElement(Sidebar, {\n          title: __(\"Import & export\"),\n          currentType: currentType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }),\n        footer: React.createElement(Pagination, {\n          count: totalCount,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        }),\n        content: React.createElement(DataWithLoader, {\n          data: this.renderHistories(),\n          loading: loading,\n          count: histories.length,\n          emptyContent: React.createElement(EmptyContent, {\n            content: EMPTY_IMPORT_CONTENT,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 284\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Histories;\n}(React.Component);\n\nexport default Histories;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/components/Histories.tsx"],"names":["getEnv","Button","DataWithLoader","EmptyContent","HeaderDescription","ModalTrigger","Pagination","Table","__","Wrapper","BarItems","EMPTY_IMPORT_CONTENT","DataImporter","ManageColumns","React","ExportPopupsData","HistoryRow","Sidebar","DATA_IMPORT_TYPES","DYNAMICLY_TEMPLATE_TYPES","Histories","renderHistories","props","histories","removeHistory","map","history","_id","onClick","renderColumnChooser","type","currentType","icon","btnStyle","text","getButtonText","manageColumns","editColumns","renderExportButton","REACT_APP_API_URL","exportData","window","open","includes","renderImportButton","renderTemplateButton","renderDataImporter","renderExportPopupsData","id","push","buttonText","name","loading","totalCount","breadcrumb","title","link","length","Component"],"mappings":"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","sourcesContent":["import { getEnv } from \"apolloClient\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport DataWithLoader from \"modules/common/components/DataWithLoader\";\nimport EmptyContent from \"modules/common/components/empty/EmptyContent\";\nimport HeaderDescription from \"modules/common/components/HeaderDescription\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport Pagination from \"modules/common/components/pagination/Pagination\";\nimport Table from \"modules/common/components/table\";\nimport { IRouterProps } from \"modules/common/types\";\nimport { __ } from \"modules/common/utils\";\nimport Wrapper from \"modules/layout/components/Wrapper\";\nimport { BarItems } from \"modules/layout/styles\";\nimport { EMPTY_IMPORT_CONTENT } from \"modules/settings/constants\";\nimport DataImporter from \"modules/settings/importHistory/containers/DataImporter\";\nimport ManageColumns from \"modules/settings/properties/containers/ManageColumns\";\nimport React from \"react\";\nimport ExportPopupsData from \"../containers/ExportPopupsData\";\nimport { IImportHistory } from \"../types\";\nimport HistoryRow from \"./Row\";\nimport Sidebar from \"./Sidebar\";\n\ntype Props = {\n  queryParams: any;\n  currentType: string;\n  histories: IImportHistory[];\n  removeHistory: (historyId: string) => void;\n  loading: boolean;\n  totalCount: number;\n};\n\n// currently support import data types\nconst DATA_IMPORT_TYPES = [\n  \"customer\",\n  \"company\",\n  \"product\",\n  \"deal\",\n  \"task\",\n  \"ticket\",\n  \"lead\",\n];\n\nconst DYNAMICLY_TEMPLATE_TYPES = [\"customer\", \"company\", \"product\", \"lead\"];\n\nclass Histories extends React.Component<Props & IRouterProps> {\n  renderHistories = () => {\n    const { histories, removeHistory } = this.props;\n\n    return (\n      <Table hover={true}>\n        <thead>\n          <tr>\n            <th>{__(\"Success\")}</th>\n            <th>{__(\"Failed\")}</th>\n            <th>{__(\"Total\")}</th>\n            <th>{__(\"Imported Date\")}</th>\n            <th>{__(\"Imported User\")}</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {histories.map((history) => {\n            return (\n              <HistoryRow\n                key={history._id}\n                history={history}\n                removeHistory={removeHistory}\n                onClick={this.onClick}\n              />\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  };\n\n  getButtonText() {\n    const { currentType } = this.props;\n    let buttonText = `${currentType}s`;\n\n    switch (currentType) {\n      case \"company\":\n        buttonText = \"companies\";\n        break;\n      case \"deal\":\n        buttonText = \"sales pipelines\";\n        break;\n      case \"user\":\n        buttonText = \"team members\";\n        break;\n      default:\n        break;\n    }\n\n    return buttonText;\n  }\n\n  renderColumnChooser = (type: string) => {\n    const { currentType } = this.props;\n\n    let icon = \"\";\n    let btnStyle = \"\";\n    let text = \"\";\n\n    switch (type) {\n      case \"import\":\n        icon = \"folder-download\";\n        btnStyle = \"success\";\n        text = \"Download template\";\n        break;\n      case \"export\":\n        icon = \"export\";\n        btnStyle = \"primary\";\n        text = `Export ${this.getButtonText()}`;\n        break;\n    }\n\n    const manageColumns = (props) => {\n      return <ManageColumns {...props} contentType={currentType} type={type} />;\n    };\n\n    const editColumns = (\n      <Button btnStyle={btnStyle} size=\"small\" icon={icon}>\n        {__(`${text}`)}\n      </Button>\n    );\n\n    return (\n      <ModalTrigger\n        title=\"Select Columns\"\n        trigger={editColumns}\n        content={manageColumns}\n        autoOpenKey=\"showManageColumnsModal\"\n      />\n    );\n  };\n\n  renderTemplateButton() {\n    const { REACT_APP_API_URL } = getEnv();\n    const { currentType } = this.props;\n\n    if (!DATA_IMPORT_TYPES.includes(currentType)) {\n      return null;\n    }\n\n    if (DYNAMICLY_TEMPLATE_TYPES.includes(currentType)) {\n      return this.renderColumnChooser(\"import\");\n    }\n\n    let name = \"product_template.xlsx\";\n\n    switch (currentType) {\n      case \"product\":\n        name = \"product_template.xlsx\";\n        break;\n      case \"deal\":\n      case \"task\":\n      case \"ticket\":\n        name = \"board_item_template.xlsx\";\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <Button\n        btnStyle=\"simple\"\n        size=\"small\"\n        icon=\"folder-download\"\n        href={`${REACT_APP_API_URL}/download-template/?name=${name}`}\n      >\n        {__(\"Download template\")}\n      </Button>\n    );\n  }\n\n  renderDataImporter() {\n    const { currentType } = this.props;\n\n    if (!DATA_IMPORT_TYPES.includes(currentType)) {\n      return null;\n    }\n\n    return (\n      <DataImporter\n        type={currentType}\n        text={`${__(\"Import\")} ${this.getButtonText()}`}\n      />\n    );\n  }\n\n  renderExportButton = () => {\n    const { currentType } = this.props;\n    const { REACT_APP_API_URL } = getEnv();\n\n    if (currentType === \"product\") {\n      return null;\n    }\n\n    const exportData = () => {\n      window.open(\n        `${REACT_APP_API_URL}/file-export?type=${currentType}`,\n        \"_blank\"\n      );\n    };\n\n    if (DYNAMICLY_TEMPLATE_TYPES.includes(currentType)) {\n      return this.renderColumnChooser(\"export\");\n    }\n\n    return (\n      <Button\n        icon=\"export\"\n        btnStyle=\"primary\"\n        size=\"small\"\n        onClick={exportData}\n      >\n        {__(`Export ${this.getButtonText()}`)}\n      </Button>\n    );\n  };\n\n  renderExportPopupsData() {\n    if (this.props.currentType !== \"customer\") {\n      return null;\n    }\n\n    return <ExportPopupsData />;\n  }\n\n  renderImportButton = () => {\n    return (\n      <BarItems>\n        {this.renderTemplateButton()}\n        {this.renderDataImporter()}\n        {this.renderExportButton()}\n        {this.renderExportPopupsData()}\n      </BarItems>\n    );\n  };\n\n  onClick = (id) => {\n    const { history } = this.props;\n\n    history.push(`/settings/importHistory/${id}`);\n  };\n\n  render() {\n    const { currentType, histories, loading, totalCount } = this.props;\n\n    const breadcrumb = [\n      { title: __(\"Settings\"), link: \"/settings\" },\n      { title: __(\"Import & Export\"), link: \"/settings/importHistories\" },\n      { title: __(currentType) },\n    ];\n\n    return (\n      <Wrapper\n        header={\n          <Wrapper.Header title={__(currentType)} breadcrumb={breadcrumb} />\n        }\n        actionBar={\n          <Wrapper.ActionBar\n            left={\n              <HeaderDescription\n                icon=\"/images/actions/27.svg\"\n                title={__(\"Import & export\")}\n                description={__(\n                  \"Here you can find data of all your previous imports of companies and customers. Find out when they joined and their current status. Nothing goes missing around here.\"\n                )}\n              />\n            }\n            right={this.renderImportButton()}\n          />\n        }\n        leftSidebar={\n          <Sidebar title={__(\"Import & export\")} currentType={currentType} />\n        }\n        footer={<Pagination count={totalCount} />}\n        content={\n          <DataWithLoader\n            data={this.renderHistories()}\n            loading={loading}\n            count={histories.length}\n            emptyContent={<EmptyContent content={EMPTY_IMPORT_CONTENT} />}\n          />\n        }\n      />\n    );\n  }\n}\n\nexport default Histories;\n"]},"metadata":{},"sourceType":"module"}