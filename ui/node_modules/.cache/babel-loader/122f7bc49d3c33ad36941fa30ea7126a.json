{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/messenger/AddOns.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql, withApollo } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport AddOns from '../../components/messenger/steps/AddOns';\n\nvar KnowledgeBaseContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(KnowledgeBaseContainer, _React$Component);\n\n  function KnowledgeBaseContainer() {\n    _classCallCheck(this, KnowledgeBaseContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(KnowledgeBaseContainer).apply(this, arguments));\n  }\n\n  _createClass(KnowledgeBaseContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          knowledgeBaseTopicsQuery = _this$props.knowledgeBaseTopicsQuery,\n          leadIntegrationsQuery = _this$props.leadIntegrationsQuery;\n\n      if (knowledgeBaseTopicsQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      var topics = knowledgeBaseTopicsQuery.knowledgeBaseTopics || [];\n      var leads = leadIntegrationsQuery.integrations || [];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        topics: topics,\n        leads: leads\n      });\n\n      return React.createElement(AddOns, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return KnowledgeBaseContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(kbQueries.knowledgeBaseTopics), {\n  name: 'knowledgeBaseTopicsQuery'\n}), graphql(gql(queries.integrations), {\n  name: 'leadIntegrationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        kind: 'lead'\n      }\n    };\n  }\n}), withApollo)(withRouter(KnowledgeBaseContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/messenger/AddOns.tsx"],"names":["gql","compose","Spinner","withProps","queries","kbQueries","React","graphql","withApollo","withRouter","AddOns","KnowledgeBaseContainer","props","knowledgeBaseTopicsQuery","leadIntegrationsQuery","loading","topics","knowledgeBaseTopics","leads","integrations","updatedProps","Component","name","options","variables","kind"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,+BAArC;AAEA,SAASD,OAAT,QAAwB,uCAAxB;AACA,OAAOE,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,cAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,yCAAnB;;IAuBMC,sB;;;;;;;;;;;;;6BACK;AAAA,wBACqD,KAAKC,KAD1D;AAAA,UACCC,wBADD,eACCA,wBADD;AAAA,UAC2BC,qBAD3B,eAC2BA,qBAD3B;;AAGP,UAAID,wBAAwB,CAACE,OAA7B,EAAsC;AACpC,eAAO,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAMC,MAAM,GAAGH,wBAAwB,CAACI,mBAAzB,IAAgD,EAA/D;AACA,UAAMC,KAAK,GAAGJ,qBAAqB,CAACK,YAAtB,IAAsC,EAApD;;AAEA,UAAMC,YAAY,qBACb,KAAKR,KADQ;AAEhBI,QAAAA,MAAM,EAANA,MAFgB;AAGhBE,QAAAA,KAAK,EAALA;AAHgB,QAAlB;;AAMA,aAAO,oBAAC,MAAD,oBAAYE,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAlBkCd,KAAK,CAACe,S;;AAqB3C,eAAelB,SAAS,CACtBF,OAAO,CACLM,OAAO,CAA6BP,GAAG,CAACK,SAAS,CAACY,mBAAX,CAAhC,EAAiE;AACtEK,EAAAA,IAAI,EAAE;AADgE,CAAjE,CADF,EAILf,OAAO,CAAmCP,GAAG,CAACI,OAAO,CAACe,YAAT,CAAtC,EAA8D;AACnEG,EAAAA,IAAI,EAAE,uBAD6D;AAEnEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAE;AADG;AADG,KAAP;AAAA;AAF0D,CAA9D,CAJF,EAYLjB,UAZK,CAAP,CAaEC,UAAU,CAAaE,sBAAb,CAbZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IRouterProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport { TopicsQueryResponse } from 'modules/knowledgeBase/types';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql, withApollo } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport AddOns from '../../components/messenger/steps/AddOns';\nimport {\n  ILeadMessengerApp,\n  IMessengerApps,\n  IntegrationsQueryResponse,\n  ITopicMessengerApp,\n  IWebsiteMessengerApp\n} from '../../types';\n\ntype Props = {\n  selectedBrand?: string;\n  handleMessengerApps: (messengerApps: IMessengerApps) => void;\n  leadMessengerApps?: ILeadMessengerApp[];\n  knowledgeBaseMessengerApps?: ITopicMessengerApp[];\n  websiteMessengerApps?: IWebsiteMessengerApp[];\n};\n\ntype FinalProps = {\n  knowledgeBaseTopicsQuery: TopicsQueryResponse;\n  leadIntegrationsQuery: IntegrationsQueryResponse;\n} & IRouterProps &\n  Props;\n\nclass KnowledgeBaseContainer extends React.Component<FinalProps> {\n  render() {\n    const { knowledgeBaseTopicsQuery, leadIntegrationsQuery } = this.props;\n\n    if (knowledgeBaseTopicsQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    const topics = knowledgeBaseTopicsQuery.knowledgeBaseTopics || [];\n    const leads = leadIntegrationsQuery.integrations || [];\n\n    const updatedProps = {\n      ...this.props,\n      topics,\n      leads\n    };\n\n    return <AddOns {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, TopicsQueryResponse>(gql(kbQueries.knowledgeBaseTopics), {\n      name: 'knowledgeBaseTopicsQuery'\n    }),\n    graphql<Props, IntegrationsQueryResponse>(gql(queries.integrations), {\n      name: 'leadIntegrationsQuery',\n      options: () => ({\n        variables: {\n          kind: 'lead'\n        }\n      })\n    }),\n    withApollo\n  )(withRouter<FinalProps>(KnowledgeBaseContainer))\n);\n"]},"metadata":{},"sourceType":"module"}