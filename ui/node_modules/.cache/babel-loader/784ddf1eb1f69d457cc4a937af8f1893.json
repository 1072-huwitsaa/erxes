{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/profile/containers/NotificationSettings.tsx\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n        mutation notificationsSaveConfig(\\n          $notifType: String!\\n          $isAllowed: Boolean\\n        ) {\\n          notificationsSaveConfig(\\n            notifType: $notifType\\n            isAllowed: $isAllowed\\n          ) {\\n            _id\\n          }\\n        }\\n      \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n        mutation usersConfigGetNotificationByEmail($isAllowed: Boolean) {\\n          usersConfigGetNotificationByEmail(isAllowed: $isAllowed) {\\n            _id\\n          }\\n        }\\n      \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n        query notificationsGetConfigurations {\\n          notificationsGetConfigurations {\\n            _id\\n            notifType\\n            isAllowed\\n          }\\n        }\\n      \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        query notificationsModules {\\n          notificationsModules\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/auth/graphql';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport NotificationSettings from '../components/NotificationSettings';\n\nvar NotificationSettingsContainer = function NotificationSettingsContainer(props) {\n  var notificationModulesQuery = props.notificationModulesQuery,\n      notificationConfigurationsQuery = props.notificationConfigurationsQuery,\n      configGetNotificationByEmailMutation = props.configGetNotificationByEmailMutation,\n      saveNotificationConfigurationsMutation = props.saveNotificationConfigurationsMutation,\n      currentUser = props.currentUser; // save get notification by email\n\n  var configGetNotificationByEmail = function configGetNotificationByEmail(variables) {\n    configGetNotificationByEmailMutation({\n      variables: variables\n    }).then(function () {\n      Alert.success('You successfully changed a notification setting');\n    }).catch(function (error) {\n      Alert.success(error.message);\n    });\n  }; // save notification configurations\n\n\n  var saveNotificationConfigurations = function saveNotificationConfigurations(variables) {\n    saveNotificationConfigurationsMutation({\n      variables: variables\n    }).then(function () {\n      Alert.success('You successfully changed a notification setting');\n      notificationConfigurationsQuery.refetch();\n    }).catch(function (error) {\n      Alert.success(error.message);\n    });\n  };\n\n  var configs = notificationConfigurationsQuery.notificationsGetConfigurations || []; // default value is checked\n\n  var getNotificationByEmail = currentUser.getNotificationByEmail;\n\n  if (getNotificationByEmail === undefined || getNotificationByEmail === null) {\n    getNotificationByEmail = false;\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    modules: notificationModulesQuery.notificationsModules || [],\n    configs: configs,\n    saveNotificationConfigurations: saveNotificationConfigurations,\n    getNotificationByEmail: getNotificationByEmail,\n    configGetNotificationByEmail: configGetNotificationByEmail\n  });\n\n  return React.createElement(NotificationSettings, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(_templateObject()), {\n  name: 'notificationModulesQuery'\n}), graphql(gql(_templateObject2()), {\n  name: 'notificationConfigurationsQuery'\n}), graphql(gql(_templateObject3()), {\n  name: 'configGetNotificationByEmailMutation',\n  options: function options() {\n    return {\n      refetchQueries: [{\n        query: gql(queries.currentUser)\n      }]\n    };\n  }\n}), graphql(gql(_templateObject4()), {\n  name: 'saveNotificationConfigurationsMutation'\n}))(NotificationSettingsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/profile/containers/NotificationSettings.tsx"],"names":["gql","compose","queries","Alert","withProps","React","graphql","NotificationSettings","NotificationSettingsContainer","props","notificationModulesQuery","notificationConfigurationsQuery","configGetNotificationByEmailMutation","saveNotificationConfigurationsMutation","currentUser","configGetNotificationByEmail","variables","then","success","catch","error","message","saveNotificationConfigurations","refetch","configs","notificationsGetConfigurations","getNotificationByEmail","undefined","updatedProps","modules","notificationsModules","name","options","refetchQueries","query"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/auth/graphql';\nimport { IUser } from 'modules/auth/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport {\n  GetNotificationByEmailMutationResponse,\n  GetNotificationByEmailMutationVariables,\n  NotificationConfigsQueryResponse,\n  NotificationModulesQueryResponse,\n  SaveNotificationConfigMutationResponse,\n  SaveNotificationConfigMutationVariables\n} from '../../../notifications/types';\nimport NotificationSettings from '../components/NotificationSettings';\n\ntype Props = {\n  notificationModulesQuery: NotificationModulesQueryResponse;\n  notificationConfigurationsQuery: NotificationConfigsQueryResponse;\n  currentUser: IUser;\n} & GetNotificationByEmailMutationResponse &\n  SaveNotificationConfigMutationResponse;\n\nconst NotificationSettingsContainer = (props: Props) => {\n  const {\n    notificationModulesQuery,\n    notificationConfigurationsQuery,\n    configGetNotificationByEmailMutation,\n    saveNotificationConfigurationsMutation,\n    currentUser\n  } = props;\n\n  // save get notification by email\n  const configGetNotificationByEmail = variables => {\n    configGetNotificationByEmailMutation({ variables })\n      .then(() => {\n        Alert.success('You successfully changed a notification setting');\n      })\n      .catch(error => {\n        Alert.success(error.message);\n      });\n  };\n\n  // save notification configurations\n  const saveNotificationConfigurations = variables => {\n    saveNotificationConfigurationsMutation({ variables })\n      .then(() => {\n        Alert.success('You successfully changed a notification setting');\n        notificationConfigurationsQuery.refetch();\n      })\n      .catch(error => {\n        Alert.success(error.message);\n      });\n  };\n\n  const configs =\n    notificationConfigurationsQuery.notificationsGetConfigurations || [];\n\n  // default value is checked\n  let getNotificationByEmail = currentUser.getNotificationByEmail;\n\n  if (getNotificationByEmail === undefined || getNotificationByEmail === null) {\n    getNotificationByEmail = false;\n  }\n\n  const updatedProps = {\n    ...props,\n    modules: notificationModulesQuery.notificationsModules || [],\n    configs,\n    saveNotificationConfigurations,\n\n    getNotificationByEmail,\n    configGetNotificationByEmail\n  };\n\n  return <NotificationSettings {...updatedProps} />;\n};\n\nexport default withProps<{}>(\n  compose(\n    graphql<{}, NotificationModulesQueryResponse>(\n      gql`\n        query notificationsModules {\n          notificationsModules\n        }\n      `,\n      {\n        name: 'notificationModulesQuery'\n      }\n    ),\n    graphql<{}, NotificationConfigsQueryResponse>(\n      gql`\n        query notificationsGetConfigurations {\n          notificationsGetConfigurations {\n            _id\n            notifType\n            isAllowed\n          }\n        }\n      `,\n      {\n        name: 'notificationConfigurationsQuery'\n      }\n    ),\n    graphql<\n      {},\n      GetNotificationByEmailMutationResponse,\n      GetNotificationByEmailMutationVariables\n    >(\n      gql`\n        mutation usersConfigGetNotificationByEmail($isAllowed: Boolean) {\n          usersConfigGetNotificationByEmail(isAllowed: $isAllowed) {\n            _id\n          }\n        }\n      `,\n      {\n        name: 'configGetNotificationByEmailMutation',\n        options: () => ({\n          refetchQueries: [\n            {\n              query: gql(queries.currentUser)\n            }\n          ]\n        })\n      }\n    ),\n    graphql<\n      {},\n      SaveNotificationConfigMutationResponse,\n      SaveNotificationConfigMutationVariables\n    >(\n      gql`\n        mutation notificationsSaveConfig(\n          $notifType: String!\n          $isAllowed: Boolean\n        ) {\n          notificationsSaveConfig(\n            notifType: $notifType\n            isAllowed: $isAllowed\n          ) {\n            _id\n          }\n        }\n      `,\n      {\n        name: 'saveNotificationConfigurationsMutation'\n      }\n    )\n  )(NotificationSettingsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}