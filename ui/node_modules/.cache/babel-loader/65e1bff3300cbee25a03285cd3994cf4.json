{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/common/CustomFieldsSection.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport GenerateCustomFields from 'modules/settings/properties/components/GenerateCustomFields';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from 'modules/settings/properties/constants';\nimport { queries as fieldQueries } from 'modules/settings/properties/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { mutations } from '../../graphql';\n\nvar CustomFieldsSection = function CustomFieldsSection(props) {\n  var customer = props.customer,\n      customersEdit = props.customersEdit,\n      fieldsGroupsQuery = props.fieldsGroupsQuery,\n      loading = props.loading;\n\n  if (fieldsGroupsQuery.loading) {\n    return React.createElement(Sidebar, {\n      full: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n  var _id = customer._id;\n\n  var save = function save(variables, callback) {\n    customersEdit({\n      variables: _objectSpread({\n        _id: _id\n      }, variables)\n    }).then(function () {\n      callback();\n    }).catch(function (e) {\n      callback(e);\n    });\n  };\n\n  var updatedProps = {\n    save: save,\n    loading: loading,\n    customFieldsData: customer.customFieldsData,\n    fieldsGroups: fieldsGroupsQuery.fieldsGroups || []\n  };\n  return React.createElement(GenerateCustomFields, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(fieldQueries.fieldsGroups), {\n  name: 'fieldsGroupsQuery',\n  options: function options() {\n    return {\n      variables: {\n        contentType: FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER\n      }\n    };\n  }\n}), // mutations\ngraphql(gql(mutations.customersEdit), {\n  name: 'customersEdit',\n  options: function options() {\n    return {\n      refetchQueries: ['customerDetail']\n    };\n  }\n}))(CustomFieldsSection));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/common/CustomFieldsSection.tsx"],"names":["gql","compose","Spinner","Sidebar","GenerateCustomFields","FIELDS_GROUPS_CONTENT_TYPES","queries","fieldQueries","React","graphql","withProps","mutations","CustomFieldsSection","props","customer","customersEdit","fieldsGroupsQuery","loading","_id","save","variables","callback","then","catch","e","updatedProps","customFieldsData","fieldsGroups","name","options","contentType","CUSTOMER","refetchQueries"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,oBAAP,MAAiC,6DAAjC;AACA,SAASC,2BAAT,QAA4C,uCAA5C;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,qCAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASC,SAAT,QAA0B,eAA1B;;AAaA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAuB;AAAA,MACzCC,QADyC,GACeD,KADf,CACzCC,QADyC;AAAA,MAC/BC,aAD+B,GACeF,KADf,CAC/BE,aAD+B;AAAA,MAChBC,iBADgB,GACeH,KADf,CAChBG,iBADgB;AAAA,MACGC,OADH,GACeJ,KADf,CACGI,OADH;;AAGjD,MAAID,iBAAiB,CAACC,OAAtB,EAA+B;AAC7B,WACE,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AATgD,MAWzCC,GAXyC,GAWjCJ,QAXiC,CAWzCI,GAXyC;;AAajD,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,SAAD,EAAYC,QAAZ,EAAyB;AACpCN,IAAAA,aAAa,CAAC;AACZK,MAAAA,SAAS;AAAIF,QAAAA,GAAG,EAAHA;AAAJ,SAAYE,SAAZ;AADG,KAAD,CAAb,CAGGE,IAHH,CAGQ,YAAM;AACVD,MAAAA,QAAQ;AACT,KALH,EAMGE,KANH,CAMS,UAAAC,CAAC,EAAI;AACVH,MAAAA,QAAQ,CAACG,CAAD,CAAR;AACD,KARH;AASD,GAVD;;AAYA,MAAMC,YAAY,GAAG;AACnBN,IAAAA,IAAI,EAAJA,IADmB;AAEnBF,IAAAA,OAAO,EAAPA,OAFmB;AAGnBS,IAAAA,gBAAgB,EAAEZ,QAAQ,CAACY,gBAHR;AAInBC,IAAAA,YAAY,EAAEX,iBAAiB,CAACW,YAAlB,IAAkC;AAJ7B,GAArB;AAOA,SAAO,oBAAC,oBAAD,oBAA0BF,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAjCD;;AAmCA,eAAef,SAAS,CACtBT,OAAO,CACLQ,OAAO,CACLT,GAAG,CAACO,YAAY,CAACoB,YAAd,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdT,MAAAA,SAAS,EAAE;AACTU,QAAAA,WAAW,EAAEzB,2BAA2B,CAAC0B;AADhC;AADG,KAAP;AAAA;AAFX,CAFK,CADF,EAaL;AACAtB,OAAO,CACLT,GAAG,CAACW,SAAS,CAACI,aAAX,CADE,EAEL;AACEa,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdG,MAAAA,cAAc,EAAE,CAAC,gBAAD;AADF,KAAP;AAAA;AAFX,CAFK,CAdF,CAAP,CAuBEpB,mBAvBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport GenerateCustomFields from 'modules/settings/properties/components/GenerateCustomFields';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from 'modules/settings/properties/constants';\nimport { queries as fieldQueries } from 'modules/settings/properties/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { FieldsGroupsQueryResponse } from '../../../settings/properties/types';\nimport { mutations } from '../../graphql';\nimport { EditMutationResponse, ICustomer } from '../../types';\n\ntype Props = {\n  customer: ICustomer;\n  loading?: boolean;\n};\n\ntype FinalProps = {\n  fieldsGroupsQuery: FieldsGroupsQueryResponse;\n} & Props &\n  EditMutationResponse;\n\nconst CustomFieldsSection = (props: FinalProps) => {\n  const { customer, customersEdit, fieldsGroupsQuery, loading } = props;\n\n  if (fieldsGroupsQuery.loading) {\n    return (\n      <Sidebar full={true}>\n        <Spinner />\n      </Sidebar>\n    );\n  }\n\n  const { _id } = customer;\n\n  const save = (variables, callback) => {\n    customersEdit({\n      variables: { _id, ...variables }\n    })\n      .then(() => {\n        callback();\n      })\n      .catch(e => {\n        callback(e);\n      });\n  };\n\n  const updatedProps = {\n    save,\n    loading,\n    customFieldsData: customer.customFieldsData,\n    fieldsGroups: fieldsGroupsQuery.fieldsGroups || []\n  };\n\n  return <GenerateCustomFields {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, FieldsGroupsQueryResponse, { contentType: string }>(\n      gql(fieldQueries.fieldsGroups),\n      {\n        name: 'fieldsGroupsQuery',\n        options: () => ({\n          variables: {\n            contentType: FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER\n          }\n        })\n      }\n    ),\n\n    // mutations\n    graphql<Props, EditMutationResponse, ICustomer>(\n      gql(mutations.customersEdit),\n      {\n        name: 'customersEdit',\n        options: () => ({\n          refetchQueries: ['customerDetail']\n        })\n      }\n    )\n  )(CustomFieldsSection)\n);\n"]},"metadata":{},"sourceType":"module"}