{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/editForm/CloseDate.tsx\";\nimport Datetime from '@nateradebaugh/react-datetime';\nimport dayjs from 'dayjs';\nimport { REMINDER_MINUTES } from 'modules/boards/constants';\nimport { Button, CalenderWrapper, CheckBoxWrapper, CloseDateContent, CloseDateWrapper, DateGrid } from 'modules/boards/styles/popup';\nimport FormControl from 'modules/common/components/form/Control';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Select from 'react-select-plus';\nimport { generateButtonClass, selectOptions } from '../../utils';\n\nvar CloseDate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CloseDate, _React$Component);\n\n  function CloseDate(props) {\n    var _this;\n\n    _classCallCheck(this, CloseDate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CloseDate).call(this, props));\n    _this.ref = void 0;\n    _this.overlay = void 0;\n\n    _this.setOverlay = function (overlay) {\n      _this.overlay = overlay;\n    };\n\n    _this.minuteOnChange = function (_ref) {\n      var value = _ref.value;\n\n      _this.props.onChangeField('reminderMinute', parseInt(value, 10));\n    };\n\n    _this.dateOnChange = function (date) {\n      _this.setState({\n        dueDate: date\n      });\n    };\n\n    _this.hideContent = function () {\n      _this.overlay.hide();\n    };\n\n    _this.onSave = function () {\n      var dueDate = _this.state.dueDate;\n\n      _this.props.onChangeField('closeDate', dueDate);\n\n      _this.hideContent();\n    };\n\n    _this.remove = function () {\n      _this.props.onChangeField('closeDate', null);\n\n      _this.hideContent();\n    };\n\n    _this.ref = React.createRef();\n    _this.state = {\n      dueDate: props.closeDate || dayjs()\n    };\n    return _this;\n  }\n\n  _createClass(CloseDate, [{\n    key: \"renderContent\",\n    value: function renderContent() {\n      var reminderMinute = this.props.reminderMinute;\n      var dueDate = this.state.dueDate;\n      var day = dayjs(dueDate).format('YYYY/MM/DD');\n      var time = dayjs(dueDate).format('HH:mm');\n      return React.createElement(Popover, {\n        id: \"pipeline-popover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(CloseDateContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, dueDate && React.createElement(DateGrid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, day)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Time\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, time))), React.createElement(CalenderWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Datetime, {\n        inputProps: {\n          placeholder: 'Click to select a date'\n        },\n        dateFormat: \"YYYY/MM/DD\",\n        timeFormat: \"HH:mm\",\n        value: dueDate,\n        closeOnSelect: true,\n        utc: true,\n        input: false,\n        onChange: this.dateOnChange,\n        defaultValue: dayjs().startOf('day').add(12, 'hour').format('YYYY-MM-DD HH:mm:ss'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Set reminder\"), React.createElement(Select, {\n        isRequired: true,\n        value: reminderMinute,\n        onChange: this.minuteOnChange,\n        options: selectOptions(REMINDER_MINUTES),\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(DateGrid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Button, {\n        colorName: \"red\",\n        onClick: this.remove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Remove\"), React.createElement(Button, {\n        colorName: \"green\",\n        onClick: this.onSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Save\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isComplete = _this$props.isComplete,\n          onChangeField = _this$props.onChangeField,\n          closeDate = _this$props.closeDate;\n      var time = dayjs(closeDate).format('HH:mm');\n\n      var onChange = function onChange(e) {\n        return onChangeField('isComplete', e.target.checked);\n      };\n\n      var trigger = React.createElement(Button, {\n        colorName: generateButtonClass(closeDate, isComplete),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, closeDate ? \"\".concat(dayjs(closeDate).format('MMM DD'), \" at \").concat(time) : 'Close date');\n      return React.createElement(CloseDateWrapper, {\n        innerRef: this.ref,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(OverlayTrigger, {\n        ref: this.setOverlay,\n        trigger: \"click\",\n        placement: \"bottom-end\",\n        overlay: this.renderContent(),\n        rootClose: true,\n        container: this.ref.current,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, closeDate && React.createElement(CheckBoxWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        checked: isComplete,\n        componentClass: \"checkbox\",\n        onChange: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), trigger)));\n    }\n  }]);\n\n  return CloseDate;\n}(React.Component);\n\nexport default CloseDate;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/editForm/CloseDate.tsx"],"names":["Datetime","dayjs","REMINDER_MINUTES","Button","CalenderWrapper","CheckBoxWrapper","CloseDateContent","CloseDateWrapper","DateGrid","FormControl","ControlLabel","React","OverlayTrigger","Popover","Select","generateButtonClass","selectOptions","CloseDate","props","ref","overlay","setOverlay","minuteOnChange","value","onChangeField","parseInt","dateOnChange","date","setState","dueDate","hideContent","hide","onSave","state","remove","createRef","closeDate","reminderMinute","day","format","time","placeholder","startOf","add","isComplete","onChange","e","target","checked","trigger","renderContent","current","Component"],"mappings":"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","sourcesContent":["import Datetime from '@nateradebaugh/react-datetime';\nimport dayjs from 'dayjs';\nimport { REMINDER_MINUTES } from 'modules/boards/constants';\nimport {\n  Button,\n  CalenderWrapper,\n  CheckBoxWrapper,\n  CloseDateContent,\n  CloseDateWrapper,\n  DateGrid\n} from 'modules/boards/styles/popup';\nimport FormControl from 'modules/common/components/form/Control';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Select from 'react-select-plus';\nimport { generateButtonClass, selectOptions } from '../../utils';\n\ntype Props = {\n  closeDate: Date;\n  isComplete: boolean;\n  reminderMinute: number;\n  onChangeField: (\n    name: 'closeDate' | 'reminderMinute' | 'isComplete',\n    value: any\n  ) => void;\n};\n\ntype State = {\n  dueDate: Date;\n};\n\nclass CloseDate extends React.Component<Props, State> {\n  private ref;\n  private overlay: any;\n\n  constructor(props) {\n    super(props);\n\n    this.ref = React.createRef();\n\n    this.state = {\n      dueDate: props.closeDate || dayjs()\n    };\n  }\n\n  setOverlay = overlay => {\n    this.overlay = overlay;\n  };\n\n  minuteOnChange = ({ value }: { value: string }) => {\n    this.props.onChangeField('reminderMinute', parseInt(value, 10));\n  };\n\n  dateOnChange = date => {\n    this.setState({ dueDate: date });\n  };\n\n  hideContent = () => {\n    this.overlay.hide();\n  };\n\n  onSave = () => {\n    const { dueDate } = this.state;\n\n    this.props.onChangeField('closeDate', dueDate);\n    this.hideContent();\n  };\n\n  remove = () => {\n    this.props.onChangeField('closeDate', null);\n    this.hideContent();\n  };\n\n  renderContent() {\n    const { reminderMinute } = this.props;\n    const { dueDate } = this.state;\n\n    const day = dayjs(dueDate).format('YYYY/MM/DD');\n    const time = dayjs(dueDate).format('HH:mm');\n\n    return (\n      <Popover id=\"pipeline-popover\">\n        <CloseDateContent>\n          {dueDate && (\n            <DateGrid>\n              <div>\n                <ControlLabel>Date</ControlLabel>\n                <span>{day}</span>\n              </div>\n              <div>\n                <ControlLabel>Time</ControlLabel>\n                <span>{time}</span>\n              </div>\n            </DateGrid>\n          )}\n\n          <CalenderWrapper>\n            <Datetime\n              inputProps={{ placeholder: 'Click to select a date' }}\n              dateFormat=\"YYYY/MM/DD\"\n              timeFormat=\"HH:mm\"\n              value={dueDate}\n              closeOnSelect={true}\n              utc={true}\n              input={false}\n              onChange={this.dateOnChange}\n              defaultValue={dayjs()\n                .startOf('day')\n                .add(12, 'hour')\n                .format('YYYY-MM-DD HH:mm:ss')}\n            />\n          </CalenderWrapper>\n\n          <ControlLabel>Set reminder</ControlLabel>\n\n          <Select\n            isRequired={true}\n            value={reminderMinute}\n            onChange={this.minuteOnChange}\n            options={selectOptions(REMINDER_MINUTES)}\n            clearable={false}\n          />\n\n          <DateGrid>\n            <Button colorName=\"red\" onClick={this.remove}>\n              Remove\n            </Button>\n            <Button colorName=\"green\" onClick={this.onSave}>\n              Save\n            </Button>\n          </DateGrid>\n        </CloseDateContent>\n      </Popover>\n    );\n  }\n\n  render() {\n    const { isComplete, onChangeField, closeDate } = this.props;\n    const time = dayjs(closeDate).format('HH:mm');\n\n    const onChange = e => onChangeField('isComplete', e.target.checked);\n\n    const trigger = (\n      <Button colorName={generateButtonClass(closeDate, isComplete)}>\n        {closeDate\n          ? `${dayjs(closeDate).format('MMM DD')} at ${time}`\n          : 'Close date'}\n      </Button>\n    );\n\n    return (\n      <CloseDateWrapper innerRef={this.ref}>\n        <OverlayTrigger\n          ref={this.setOverlay}\n          trigger=\"click\"\n          placement=\"bottom-end\"\n          overlay={this.renderContent()}\n          rootClose={true}\n          container={this.ref.current}\n        >\n          <div>\n            {closeDate && (\n              <CheckBoxWrapper>\n                <FormControl\n                  checked={isComplete}\n                  componentClass=\"checkbox\"\n                  onChange={onChange}\n                />\n              </CheckBoxWrapper>\n            )}\n            {trigger}\n          </div>\n        </OverlayTrigger>\n      </CloseDateWrapper>\n    );\n  }\n}\n\nexport default CloseDate;\n"]},"metadata":{},"sourceType":"module"}