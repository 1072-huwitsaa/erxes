{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/containers/Sidebar.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport inboxQueries from 'modules/inbox/graphql/queries';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar';\nimport { mutations, queries } from '../graphql';\n\nvar SidebarContainer = function SidebarContainer(props) {\n  var channelsQuery = props.channelsQuery,\n      channelsCountQuery = props.channelsCountQuery,\n      removeMutation = props.removeMutation,\n      queryParams = props.queryParams,\n      history = props.history,\n      currentChannelId = props.currentChannelId,\n      currentUserId = props.currentUserId;\n  var channels = channelsQuery.channels || [];\n  var channelsTotalCount = channelsCountQuery.channelsTotalCount || 0; // remove action\n\n  var remove = function remove(channelId) {\n    confirm().then(function () {\n      removeMutation({\n        variables: {\n          _id: channelId\n        }\n      }).then(function () {\n        Alert.success('You successfully deleted a channel.');\n        history.push('/settings/channels');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback,\n        object = _ref.object;\n    return React.createElement(ButtonMutate, {\n      mutation: object ? mutations.channelEdit : mutations.channelAdd,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(queryParams, currentChannelId, currentUserId),\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    channels: channels,\n    channelsTotalCount: channelsTotalCount,\n    remove: remove,\n    renderButton: renderButton,\n    loading: channelsQuery.loading\n  });\n\n  return React.createElement(Sidebar, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries(queryParams, currentChannelId, currentUserId) {\n  return [{\n    query: gql(queries.channels),\n    variables: {\n      perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n    }\n  }, {\n    query: gql(queries.channels),\n    variables: {}\n  }, {\n    query: gql(queries.integrationsCount),\n    variables: {}\n  }, {\n    query: gql(queries.channelDetail),\n    variables: {\n      _id: currentChannelId || ''\n    }\n  }, {\n    query: gql(queries.channelsCount)\n  }, {\n    query: gql(inboxQueries.channelList),\n    variables: {\n      memberIds: [currentUserId]\n    }\n  }];\n};\n\nvar WithProps = withProps(compose(graphql(gql(queries.channels), {\n  name: 'channelsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.channelsCount), {\n  name: 'channelsCountQuery'\n}), graphql(gql(mutations.channelRemove), {\n  name: 'removeMutation',\n  options: function options(_ref3) {\n    var queryParams = _ref3.queryParams,\n        currentChannelId = _ref3.currentChannelId,\n        currentUserId = _ref3.currentUserId;\n    return {\n      refetchQueries: getRefetchQueries(queryParams, currentChannelId, currentUserId)\n    };\n  }\n}))(withRouter(SidebarContainer)));\nexport default (function (props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, function (_ref4) {\n    var currentUser = _ref4.currentUser;\n    return React.createElement(WithProps, Object.assign({}, props, {\n      currentUserId: currentUser && currentUser._id || '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }));\n  });\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/containers/Sidebar.tsx"],"names":["AppConsumer","gql","compose","ButtonMutate","Alert","confirm","withProps","inboxQueries","React","graphql","withRouter","Sidebar","mutations","queries","SidebarContainer","props","channelsQuery","channelsCountQuery","removeMutation","queryParams","history","currentChannelId","currentUserId","channels","channelsTotalCount","remove","channelId","then","variables","_id","success","push","catch","error","message","renderButton","name","values","isSubmitted","callback","object","channelEdit","channelAdd","getRefetchQueries","updatedProps","loading","query","perPage","limit","parseInt","integrationsCount","channelDetail","channelsCount","channelList","memberIds","WithProps","options","fetchPolicy","channelRemove","refetchQueries","currentUser"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport inboxQueries from 'modules/inbox/graphql/queries';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar';\nimport { mutations, queries } from '../graphql';\nimport {\n  ChannelsCountQueryResponse,\n  ChannelsQueryResponse,\n  RemoveChannelMutationResponse,\n  RemoveChannelMutationVariables\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n  currentChannelId?: string;\n  currentUserId?: string;\n};\n\ntype FinalProps = {\n  channelsQuery: ChannelsQueryResponse;\n  channelsCountQuery: ChannelsCountQueryResponse;\n} & Props &\n  IRouterProps &\n  RemoveChannelMutationResponse;\n\nconst SidebarContainer = (props: FinalProps) => {\n  const {\n    channelsQuery,\n    channelsCountQuery,\n    removeMutation,\n    queryParams,\n    history,\n    currentChannelId,\n    currentUserId\n  } = props;\n\n  const channels = channelsQuery.channels || [];\n  const channelsTotalCount = channelsCountQuery.channelsTotalCount || 0;\n\n  // remove action\n  const remove = channelId => {\n    confirm().then(() => {\n      removeMutation({\n        variables: { _id: channelId }\n      })\n        .then(() => {\n          Alert.success('You successfully deleted a channel.');\n\n          history.push('/settings/channels');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={object ? mutations.channelEdit : mutations.channelAdd}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries(\n          queryParams,\n          currentChannelId,\n          currentUserId\n        )}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    channels,\n    channelsTotalCount,\n    remove,\n    renderButton,\n    loading: channelsQuery.loading\n  };\n\n  return <Sidebar {...updatedProps} />;\n};\n\nconst getRefetchQueries = (\n  queryParams,\n  currentChannelId?: string,\n  currentUserId?: string\n) => {\n  return [\n    {\n      query: gql(queries.channels),\n      variables: {\n        perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n      }\n    },\n    {\n      query: gql(queries.channels),\n      variables: {}\n    },\n    {\n      query: gql(queries.integrationsCount),\n      variables: {}\n    },\n    {\n      query: gql(queries.channelDetail),\n      variables: { _id: currentChannelId || '' }\n    },\n    { query: gql(queries.channelsCount) },\n    {\n      query: gql(inboxQueries.channelList),\n      variables: { memberIds: [currentUserId] }\n    }\n  ];\n};\n\nconst WithProps = withProps<Props>(\n  compose(\n    graphql<Props, ChannelsQueryResponse, { perPage: number }>(\n      gql(queries.channels),\n      {\n        name: 'channelsQuery',\n        options: ({ queryParams }: { queryParams: any }) => ({\n          variables: {\n            perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n          },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, ChannelsCountQueryResponse, {}>(gql(queries.channelsCount), {\n      name: 'channelsCountQuery'\n    }),\n    graphql<\n      Props,\n      RemoveChannelMutationResponse,\n      RemoveChannelMutationVariables\n    >(gql(mutations.channelRemove), {\n      name: 'removeMutation',\n      options: ({ queryParams, currentChannelId, currentUserId }: Props) => ({\n        refetchQueries: getRefetchQueries(\n          queryParams,\n          currentChannelId,\n          currentUserId\n        )\n      })\n    })\n  )(withRouter<FinalProps>(SidebarContainer))\n);\n\nexport default (props: Props) => (\n  <AppConsumer>\n    {({ currentUser }) => (\n      <WithProps\n        {...props}\n        currentUserId={(currentUser && currentUser._id) || ''}\n      />\n    )}\n  </AppConsumer>\n);\n"]},"metadata":{},"sourceType":"module"}