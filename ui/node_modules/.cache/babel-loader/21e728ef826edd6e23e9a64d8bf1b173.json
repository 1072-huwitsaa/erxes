{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/MessageList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { withProps } from '../../common/utils';\nimport routerUtils from '../../common/utils/router';\nimport MessageList from '../components/MessageList';\nimport { queries } from '../graphql';\nimport { generateListQueryVariables } from '../utils';\n\nvar MessageListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MessageListContainer, _React$Component);\n\n  function MessageListContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MessageListContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MessageListContainer).call(this, props));\n\n    _this.refetch = function () {\n      var _this$props = _this.props,\n          engageMessagesQuery = _this$props.engageMessagesQuery,\n          engageMessagesTotalCountQuery = _this$props.engageMessagesTotalCountQuery;\n      engageMessagesQuery.refetch();\n      engageMessagesTotalCountQuery.refetch();\n    };\n\n    _this.state = {\n      bulk: [],\n      isAllSelected: false\n    };\n    return _this;\n  }\n\n  _createClass(MessageListContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var history = this.props.history;\n      var shouldRefetchList = routerUtils.getParam(history, 'engageRefetchList');\n\n      if (shouldRefetchList) {\n        this.refetch();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          queryParams = _this$props2.queryParams,\n          engageMessagesQuery = _this$props2.engageMessagesQuery,\n          engageMessagesTotalCountQuery = _this$props2.engageMessagesTotalCountQuery;\n      var updatedProps = {\n        kind: queryParams.kind,\n        messages: engageMessagesQuery.engageMessages || [],\n        totalCount: engageMessagesTotalCountQuery.engageMessagesTotalCount || 0,\n        bulk: this.state.bulk,\n        isAllSelected: this.state.isAllSelected,\n        queryParams: queryParams,\n        loading: engageMessagesQuery.loading\n      };\n\n      var content = function content(props) {\n        return React.createElement(MessageList, Object.assign({}, updatedProps, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(Bulk, {\n        content: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MessageListContainer;\n}(React.Component);\n\nvar MessageListContainerWithData = withProps(compose(graphql(gql(queries.engageMessages), {\n  name: 'engageMessagesQuery',\n  options: function options(props) {\n    return {\n      variables: generateListQueryVariables(props)\n    };\n  }\n}), graphql(gql(queries.engageMessagesTotalCount), {\n  name: 'engageMessagesTotalCountQuery',\n  options: function options(props) {\n    return {\n      variables: generateListQueryVariables(props)\n    };\n  }\n}))(MessageListContainer));\n\nvar EngageListContainer = function EngageListContainer(props) {\n  var queryParams = queryString.parse(props.location.search);\n\n  var extendedProps = _objectSpread({}, props, {\n    queryParams: queryParams\n  });\n\n  return React.createElement(MessageListContainerWithData, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n};\n\nexport default withRouter(EngageListContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/MessageList.tsx"],"names":["gql","compose","Bulk","queryString","React","graphql","withRouter","withProps","routerUtils","MessageList","queries","generateListQueryVariables","MessageListContainer","props","refetch","engageMessagesQuery","engageMessagesTotalCountQuery","state","bulk","isAllSelected","history","shouldRefetchList","getParam","queryParams","updatedProps","kind","messages","engageMessages","totalCount","engageMessagesTotalCount","loading","content","Component","MessageListContainerWithData","name","options","variables","EngageListContainer","parse","location","search","extendedProps"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { IRouterProps } from 'modules/common/types';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { withProps } from '../../common/utils';\nimport routerUtils from '../../common/utils/router';\nimport MessageList from '../components/MessageList';\nimport { queries } from '../graphql';\nimport {\n  EngageMessagesQueryResponse,\n  EngageMessagesTotalCountQueryResponse,\n  ListQueryVariables\n} from '../types';\nimport { generateListQueryVariables } from '../utils';\n\ntype Props = {\n  type: string;\n  queryParams: any;\n  loading: boolean;\n};\n\ntype FinalProps = {\n  engageMessagesQuery: EngageMessagesQueryResponse;\n  engageMessagesTotalCountQuery: EngageMessagesTotalCountQueryResponse;\n} & Props &\n  IRouterProps;\n\ntype State = {\n  bulk: any[];\n  isAllSelected: boolean;\n};\n\nclass MessageListContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = {\n      bulk: [],\n      isAllSelected: false\n    };\n  }\n\n  componentDidMount() {\n    const { history } = this.props;\n\n    const shouldRefetchList = routerUtils.getParam(\n      history,\n      'engageRefetchList'\n    );\n\n    if (shouldRefetchList) {\n      this.refetch();\n    }\n  }\n\n  refetch = () => {\n    const { engageMessagesQuery, engageMessagesTotalCountQuery } = this.props;\n\n    engageMessagesQuery.refetch();\n    engageMessagesTotalCountQuery.refetch();\n  };\n\n  render() {\n    const {\n      queryParams,\n      engageMessagesQuery,\n      engageMessagesTotalCountQuery\n    } = this.props;\n\n    const updatedProps = {\n      kind: queryParams.kind,\n      messages: engageMessagesQuery.engageMessages || [],\n      totalCount: engageMessagesTotalCountQuery.engageMessagesTotalCount || 0,\n      bulk: this.state.bulk,\n      isAllSelected: this.state.isAllSelected,\n      queryParams,\n      loading: engageMessagesQuery.loading\n    };\n\n    const content = props => {\n      return <MessageList {...updatedProps} {...props} />;\n    };\n\n    return <Bulk content={content} />;\n  }\n}\n\nconst MessageListContainerWithData = withProps<Props>(\n  compose(\n    graphql<Props, EngageMessagesQueryResponse, ListQueryVariables>(\n      gql(queries.engageMessages),\n      {\n        name: 'engageMessagesQuery',\n        options: props => ({\n          variables: generateListQueryVariables(props)\n        })\n      }\n    ),\n    graphql<Props, EngageMessagesTotalCountQueryResponse, ListQueryVariables>(\n      gql(queries.engageMessagesTotalCount),\n      {\n        name: 'engageMessagesTotalCountQuery',\n        options: props => ({\n          variables: generateListQueryVariables(props)\n        })\n      }\n    )\n  )(MessageListContainer)\n);\n\nconst EngageListContainer = (props: IRouterProps & Props) => {\n  const queryParams = queryString.parse(props.location.search);\n\n  const extendedProps = { ...props, queryParams };\n\n  return <MessageListContainerWithData {...extendedProps} />;\n};\n\nexport default withRouter<IRouterProps & Props>(EngageListContainer);\n"]},"metadata":{},"sourceType":"module"}