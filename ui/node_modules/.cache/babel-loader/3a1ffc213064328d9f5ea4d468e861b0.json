{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/facebook/FacebookComment.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport FacebookComment from 'modules/inbox/components/conversationDetail/workarea/facebook/FacebookComment';\nimport { mutations } from 'modules/inbox/graphql';\nimport { queries } from 'modules/inbox/graphql';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar FacebookCommentContainer = function FacebookCommentContainer(props) {\n  var replyMutation = props.replyMutation,\n      comment = props.comment,\n      convertToInfoQuery = props.convertToInfoQuery,\n      resolveMutation = props.resolveMutation;\n\n  var replyComment = function replyComment(variables, callback) {\n    replyMutation({\n      variables: variables\n    }).then(function () {\n      callback();\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var changeStatusComment = function changeStatusComment() {\n    resolveMutation({\n      variables: {\n        commentId: comment.commentId\n      }\n    }).then(function () {\n      Alert.success('Success');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    replyComment: replyComment,\n    changeStatusComment: changeStatusComment,\n    comment: comment,\n    convertToInfo: convertToInfoQuery.convertToInfo || {},\n    refetch: convertToInfoQuery.refetch\n  });\n\n  return React.createElement(FacebookComment, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(mutations.conversationsReplyFacebookComment), {\n  name: 'replyMutation'\n}), graphql(gql(mutations.conversationsChangeStatusFacebookComment), {\n  name: 'resolveMutation'\n}), graphql(gql(queries.convertToInfo), {\n  name: 'convertToInfoQuery',\n  options: function options(_ref) {\n    var comment = _ref.comment;\n    return {\n      variables: {\n        conversationId: comment.commentId\n      }\n    };\n  }\n}))(FacebookCommentContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/facebook/FacebookComment.tsx"],"names":["gql","compose","Alert","withProps","FacebookComment","mutations","queries","React","graphql","FacebookCommentContainer","props","replyMutation","comment","convertToInfoQuery","resolveMutation","replyComment","variables","callback","then","catch","e","error","message","changeStatusComment","commentId","success","updatedProps","convertToInfo","refetch","conversationsReplyFacebookComment","name","conversationsChangeStatusFacebookComment","options","conversationId"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,eAAP,MAA4B,+EAA5B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AAQA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;;AAmBA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAAuB;AAAA,MAC9CC,aAD8C,GACkBD,KADlB,CAC9CC,aAD8C;AAAA,MAC/BC,OAD+B,GACkBF,KADlB,CAC/BE,OAD+B;AAAA,MACtBC,kBADsB,GACkBH,KADlB,CACtBG,kBADsB;AAAA,MACFC,eADE,GACkBJ,KADlB,CACFI,eADE;;AAGtD,MAAMC,YAAY,GAAG,SAAfA,YAAe,CACnBC,SADmB,EAEnBC,QAFmB,EAGhB;AACHN,IAAAA,aAAa,CAAC;AAAEK,MAAAA,SAAS,EAATA;AAAF,KAAD,CAAb,CACGE,IADH,CACQ,YAAM;AACVD,MAAAA,QAAQ;AACT,KAHH,EAIGE,KAJH,CAIS,UAAAC,CAAC,EAAI;AACVlB,MAAAA,KAAK,CAACmB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,KANH;AAOD,GAXD;;AAaA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCT,IAAAA,eAAe,CAAC;AAAEE,MAAAA,SAAS,EAAE;AAAEQ,QAAAA,SAAS,EAAEZ,OAAO,CAACY;AAArB;AAAb,KAAD,CAAf,CACGN,IADH,CACQ,YAAM;AACVhB,MAAAA,KAAK,CAACuB,OAAN,CAAc,SAAd;AACD,KAHH,EAIGN,KAJH,CAIS,UAAAC,CAAC,EAAI;AACVlB,MAAAA,KAAK,CAACmB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,KANH;AAOD,GARD;;AAUA,MAAMI,YAAY,qBACbhB,KADa;AAEhBK,IAAAA,YAAY,EAAZA,YAFgB;AAGhBQ,IAAAA,mBAAmB,EAAnBA,mBAHgB;AAIhBX,IAAAA,OAAO,EAAPA,OAJgB;AAKhBe,IAAAA,aAAa,EAAEd,kBAAkB,CAACc,aAAnB,IAAoC,EALnC;AAMhBC,IAAAA,OAAO,EAAEf,kBAAkB,CAACe;AANZ,IAAlB;;AASA,SAAO,oBAAC,eAAD,oBAAqBF,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CApCD;;AAsCA,eAAevB,SAAS,CACtBF,OAAO,CACLO,OAAO,CAILR,GAAG,CAACK,SAAS,CAACwB,iCAAX,CAJE,EAI6C;AAClDC,EAAAA,IAAI,EAAE;AAD4C,CAJ7C,CADF,EAQLtB,OAAO,CAILR,GAAG,CAACK,SAAS,CAAC0B,wCAAX,CAJE,EAIoD;AACzDD,EAAAA,IAAI,EAAE;AADmD,CAJpD,CARF,EAeLtB,OAAO,CAACR,GAAG,CAACM,OAAO,CAACqB,aAAT,CAAJ,EAA6B;AAClCG,EAAAA,IAAI,EAAE,oBAD4B;AAElCE,EAAAA,OAAO,EAAE;AAAA,QAAGpB,OAAH,QAAGA,OAAH;AAAA,WAAyB;AAChCI,MAAAA,SAAS,EAAE;AAAEiB,QAAAA,cAAc,EAAErB,OAAO,CAACY;AAA1B;AADqB,KAAzB;AAAA;AAFyB,CAA7B,CAfF,CAAP,CAqBEf,wBArBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport FacebookComment from 'modules/inbox/components/conversationDetail/workarea/facebook/FacebookComment';\nimport { mutations } from 'modules/inbox/graphql';\nimport { queries } from 'modules/inbox/graphql';\nimport {\n  IFacebookComment,\n  ReplyFacebookCommentMutationResponse,\n  ReplyFaceBookCommentMutationVariables,\n  ResolveFacebookCommentMutationVariables,\n  ResolveFacebookCommentResponse\n} from 'modules/inbox/types';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  comment: IFacebookComment;\n  isReply?: boolean;\n\n  fetchFacebook: ({\n    commentId,\n    postId\n  }: {\n    commentId?: string;\n    postId?: string;\n  }) => void;\n};\n\ntype FinalProps = { convertToInfoQuery: any } & Props &\n  ReplyFacebookCommentMutationResponse &\n  ResolveFacebookCommentResponse;\n\nconst FacebookCommentContainer = (props: FinalProps) => {\n  const { replyMutation, comment, convertToInfoQuery, resolveMutation } = props;\n\n  const replyComment = (\n    variables: ReplyFaceBookCommentMutationVariables,\n    callback: () => void\n  ) => {\n    replyMutation({ variables })\n      .then(() => {\n        callback();\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const changeStatusComment = () => {\n    resolveMutation({ variables: { commentId: comment.commentId } })\n      .then(() => {\n        Alert.success('Success');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    replyComment,\n    changeStatusComment,\n    comment,\n    convertToInfo: convertToInfoQuery.convertToInfo || {},\n    refetch: convertToInfoQuery.refetch\n  };\n\n  return <FacebookComment {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      ReplyFacebookCommentMutationResponse,\n      ReplyFaceBookCommentMutationVariables\n    >(gql(mutations.conversationsReplyFacebookComment), {\n      name: 'replyMutation'\n    }),\n    graphql<\n      Props,\n      ResolveFacebookCommentResponse,\n      ResolveFacebookCommentMutationVariables\n    >(gql(mutations.conversationsChangeStatusFacebookComment), {\n      name: 'resolveMutation'\n    }),\n    graphql(gql(queries.convertToInfo), {\n      name: 'convertToInfoQuery',\n      options: ({ comment }: Props) => ({\n        variables: { conversationId: comment.commentId }\n      })\n    })\n  )(FacebookCommentContainer)\n);\n"]},"metadata":{},"sourceType":"module"}