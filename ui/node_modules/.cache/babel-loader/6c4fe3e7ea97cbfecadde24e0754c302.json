{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/Resolver.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { CONVERSATION_STATUSES } from 'modules/inbox/constants';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Resolver from '../components/Resolver';\nimport { mutations } from '../graphql';\nimport { refetchSidebarConversationsOptions } from '../utils';\nimport { InboxManagementActionConsumer } from './Inbox';\n\nvar ResolverContainer = function ResolverContainer(props) {\n  var changeStatusMutation = props.changeStatusMutation,\n      emptyBulk = props.emptyBulk; // change conversation status\n\n  var changeStatus = function changeStatus(notifyHandler) {\n    return function (conversationIds, status) {\n      changeStatusMutation({\n        variables: {\n          _ids: conversationIds,\n          status: status\n        }\n      }).then(function () {\n        if (notifyHandler) {\n          notifyHandler();\n        }\n\n        if (status === CONVERSATION_STATUSES.CLOSED) {\n          Alert.success('The conversation has been resolved!'); // clear saved messages from storage\n\n          conversationIds.forEach(function (c) {\n            localStorage.removeItem(c);\n          });\n        } else {\n          Alert.info('The conversation has been reopened and restored to Inbox');\n        }\n\n        if (emptyBulk) {\n          emptyBulk();\n        }\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n  };\n\n  var updatedProps = _objectSpread({}, props);\n\n  return React.createElement(InboxManagementActionConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, function (_ref) {\n    var notifyConsumersOfManagementAction = _ref.notifyConsumersOfManagementAction;\n    return React.createElement(Resolver, Object.assign({}, updatedProps, {\n      changeStatus: changeStatus(notifyConsumersOfManagementAction),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default withProps(compose(graphql(gql(mutations.conversationsChangeStatus), {\n  name: 'changeStatusMutation',\n  options: function options() {\n    return refetchSidebarConversationsOptions();\n  }\n}))(ResolverContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/Resolver.tsx"],"names":["gql","compose","Alert","withProps","CONVERSATION_STATUSES","React","graphql","Resolver","mutations","refetchSidebarConversationsOptions","InboxManagementActionConsumer","ResolverContainer","props","changeStatusMutation","emptyBulk","changeStatus","notifyHandler","conversationIds","status","variables","_ids","then","CLOSED","success","forEach","c","localStorage","removeItem","info","catch","e","error","message","updatedProps","notifyConsumersOfManagementAction","conversationsChangeStatus","name","options"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAMA,SAASC,kCAAT,QAAmD,UAAnD;AACA,SAASC,6BAAT,QAA8C,SAA9C;;AASA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAuB;AAAA,MACvCC,oBADuC,GACHD,KADG,CACvCC,oBADuC;AAAA,MACjBC,SADiB,GACHF,KADG,CACjBE,SADiB,EAG/C;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,aAAa;AAAA,WAAI,UAACC,eAAD,EAA4BC,MAA5B,EAAuC;AAC3EL,MAAAA,oBAAoB,CAAC;AAAEM,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAEH,eAAR;AAAyBC,UAAAA,MAAM,EAANA;AAAzB;AAAb,OAAD,CAApB,CACGG,IADH,CACQ,YAAM;AACV,YAAIL,aAAJ,EAAmB;AACjBA,UAAAA,aAAa;AACd;;AAED,YAAIE,MAAM,KAAKd,qBAAqB,CAACkB,MAArC,EAA6C;AAC3CpB,UAAAA,KAAK,CAACqB,OAAN,CAAc,qCAAd,EAD2C,CAG3C;;AACAN,UAAAA,eAAe,CAACO,OAAhB,CAAwB,UAAAC,CAAC,EAAI;AAC3BC,YAAAA,YAAY,CAACC,UAAb,CAAwBF,CAAxB;AACD,WAFD;AAGD,SAPD,MAOO;AACLvB,UAAAA,KAAK,CAAC0B,IAAN,CACE,0DADF;AAGD;;AAED,YAAId,SAAJ,EAAe;AACbA,UAAAA,SAAS;AACV;AACF,OAtBH,EAuBGe,KAvBH,CAuBS,UAAAC,CAAC,EAAI;AACV5B,QAAAA,KAAK,CAAC6B,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,OAzBH;AA0BD,KA3BiC;AAAA,GAAlC;;AA6BA,MAAMC,YAAY,qBACbrB,KADa,CAAlB;;AAIA,SACE,oBAAC,6BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGsB,iCAAH,QAAGA,iCAAH;AAAA,WACC,oBAAC,QAAD,oBACMD,YADN;AAEE,MAAA,YAAY,EAAElB,YAAY,CAACmB,iCAAD,CAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD;AAAA,GADH,CADF;AAUD,CA/CD;;AAiDA,eAAe/B,SAAS,CACtBF,OAAO,CACLK,OAAO,CACLN,GAAG,CAACQ,SAAS,CAAC2B,yBAAX,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,sBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAM5B,kCAAkC,EAAxC;AAAA;AAFX,CAFK,CADF,CAAP,CAQEE,iBARF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { CONVERSATION_STATUSES } from 'modules/inbox/constants';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Resolver from '../components/Resolver';\nimport { mutations } from '../graphql';\nimport {\n  ChangeStatusMutationResponse,\n  ChangeStatusMutationVariables,\n  IConversation\n} from '../types';\nimport { refetchSidebarConversationsOptions } from '../utils';\nimport { InboxManagementActionConsumer } from './Inbox';\n\ntype Props = {\n  conversations: IConversation[];\n  emptyBulk?: () => void;\n};\n\ntype FinalProps = Props & ChangeStatusMutationResponse;\n\nconst ResolverContainer = (props: FinalProps) => {\n  const { changeStatusMutation, emptyBulk } = props;\n\n  // change conversation status\n  const changeStatus = notifyHandler => (conversationIds: string[], status) => {\n    changeStatusMutation({ variables: { _ids: conversationIds, status } })\n      .then(() => {\n        if (notifyHandler) {\n          notifyHandler();\n        }\n\n        if (status === CONVERSATION_STATUSES.CLOSED) {\n          Alert.success('The conversation has been resolved!');\n\n          // clear saved messages from storage\n          conversationIds.forEach(c => {\n            localStorage.removeItem(c);\n          });\n        } else {\n          Alert.info(\n            'The conversation has been reopened and restored to Inbox'\n          );\n        }\n\n        if (emptyBulk) {\n          emptyBulk();\n        }\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props\n  };\n\n  return (\n    <InboxManagementActionConsumer>\n      {({ notifyConsumersOfManagementAction }) => (\n        <Resolver\n          {...updatedProps}\n          changeStatus={changeStatus(notifyConsumersOfManagementAction)}\n        />\n      )}\n    </InboxManagementActionConsumer>\n  );\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, ChangeStatusMutationResponse, ChangeStatusMutationVariables>(\n      gql(mutations.conversationsChangeStatus),\n      {\n        name: 'changeStatusMutation',\n        options: () => refetchSidebarConversationsOptions()\n      }\n    )\n  )(ResolverContainer)\n);\n"]},"metadata":{},"sourceType":"module"}