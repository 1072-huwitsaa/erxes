{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/checklists/containers/List.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React, { useEffect } from 'react';\nimport { graphql } from 'react-apollo';\nimport List from '../components/List';\nimport { mutations, queries, subscriptions } from '../graphql';\n\nfunction ListContainer(props) {\n  var checklistDetailQuery = props.checklistDetailQuery,\n      listId = props.listId;\n  useEffect(function () {\n    return checklistDetailQuery.subscribeToMore({\n      document: gql(subscriptions.checklistDetailChanged),\n      variables: {\n        _id: listId\n      },\n      updateQuery: function updateQuery() {\n        checklistDetailQuery.refetch();\n      }\n    });\n  });\n\n  function updateOrderItems(sourceItem, destinationIndex) {\n    var checklistItemsOrderMutation = props.checklistItemsOrderMutation;\n    checklistItemsOrderMutation({\n      variables: {\n        _id: sourceItem._id,\n        destinationIndex: destinationIndex\n      }\n    });\n  }\n\n  function remove(checklistId) {\n    var removeMutation = props.removeMutation;\n    confirm().then(function () {\n      removeMutation({\n        variables: {\n          _id: checklistId\n        }\n      }).then(function () {\n        Alert.success('You successfully deleted a checklist');\n        localStorage.removeItem(checklistId);\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    });\n  }\n\n  function addItem(content) {\n    var addItemMutation = props.addItemMutation;\n    addItemMutation({\n      variables: {\n        checklistId: listId,\n        content: content\n      }\n    });\n  }\n\n  function convertToCard(name, callback) {\n    var stageId = props.stageId;\n\n    var afterConvert = function afterConvert() {\n      callback();\n      Alert.success('You successfully converted a card');\n    };\n\n    props.addItem({\n      stageId: stageId,\n      name: name\n    }, afterConvert);\n  }\n\n  function renderButton(_ref) {\n    var values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback;\n\n    var callBackResponse = function callBackResponse() {\n      if (callback) {\n        callback();\n      }\n    };\n\n    return React.createElement(ButtonMutate, {\n      mutation: mutations.checklistsEdit,\n      variables: values,\n      callback: callBackResponse,\n      refetchQueries: ['checklistDetail'],\n      isSubmitted: isSubmitted,\n      btnSize: \"small\",\n      type: \"submit\",\n      icon: \"check-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }\n\n  if (checklistDetailQuery.loading) {\n    return null;\n  }\n\n  var item = checklistDetailQuery.checklistDetail;\n  var listProps = {\n    item: item,\n    addItem: addItem,\n    renderButton: renderButton,\n    remove: remove,\n    convertToCard: convertToCard,\n    updateOrderItems: updateOrderItems\n  };\n  return React.createElement(List, Object.assign({}, listProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }));\n} // end ListContainer()\n\n\nvar options = function options(props) {\n  return {\n    refetchQueries: [{\n      query: gql(queries.checklistDetail),\n      variables: {\n        _id: props.listId\n      }\n    }]\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.checklistDetail), {\n  name: 'checklistDetailQuery',\n  options: function options(_ref2) {\n    var listId = _ref2.listId;\n    return {\n      variables: {\n        _id: listId\n      }\n    };\n  }\n}), graphql(gql(mutations.checklistItemsAdd), {\n  name: 'addItemMutation',\n  options: options\n}), graphql(gql(mutations.checklistItemsOrder), {\n  name: 'checklistItemsOrderMutation',\n  options: options\n}), graphql(gql(mutations.checklistsRemove), {\n  name: 'removeMutation',\n  options: function options() {\n    return {\n      refetchQueries: ['checklists']\n    };\n  }\n}))(ListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/checklists/containers/List.tsx"],"names":["gql","compose","ButtonMutate","Alert","confirm","withProps","React","useEffect","graphql","List","mutations","queries","subscriptions","ListContainer","props","checklistDetailQuery","listId","subscribeToMore","document","checklistDetailChanged","variables","_id","updateQuery","refetch","updateOrderItems","sourceItem","destinationIndex","checklistItemsOrderMutation","remove","checklistId","removeMutation","then","success","localStorage","removeItem","catch","e","error","message","addItem","content","addItemMutation","convertToCard","name","callback","stageId","afterConvert","renderButton","values","isSubmitted","callBackResponse","checklistsEdit","loading","item","checklistDetail","listProps","options","refetchQueries","query","checklistItemsAdd","checklistItemsOrder","checklistsRemove"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IItemParams } from 'modules/boards/types';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React, { useEffect } from 'react';\nimport { graphql } from 'react-apollo';\nimport List from '../components/List';\nimport { mutations, queries, subscriptions } from '../graphql';\nimport {\n  AddItemMutationResponse,\n  EditMutationResponse,\n  IChecklistItemDoc,\n  IChecklistItemsUpdateOrderDoc,\n  RemoveMutationResponse,\n  UpdateItemsOrderMutationResponse\n} from '../types';\n\ntype Props = {\n  listId: string;\n  stageId: string;\n  addItem: (doc: IItemParams, callback: () => void) => void;\n};\n\ntype FinalProps = {\n  checklistDetailQuery: any;\n  addItemMutation: AddItemMutationResponse;\n  checklistItemsOrderMutation: UpdateItemsOrderMutationResponse;\n  convertToCardMutations;\n  editMutation: EditMutationResponse;\n  removeMutation: RemoveMutationResponse;\n} & Props;\n\nfunction ListContainer(props: FinalProps) {\n  const { checklistDetailQuery, listId } = props;\n\n  useEffect(() => {\n    return checklistDetailQuery.subscribeToMore({\n      document: gql(subscriptions.checklistDetailChanged),\n      variables: { _id: listId },\n      updateQuery: () => {\n        checklistDetailQuery.refetch();\n      }\n    });\n  });\n\n  function updateOrderItems(sourceItem, destinationIndex) {\n    const { checklistItemsOrderMutation } = props;\n\n    checklistItemsOrderMutation({\n      variables: {\n        _id: sourceItem._id,\n        destinationIndex\n      }\n    });\n  }\n\n  function remove(checklistId: string) {\n    const { removeMutation } = props;\n\n    confirm().then(() => {\n      removeMutation({ variables: { _id: checklistId } })\n        .then(() => {\n          Alert.success('You successfully deleted a checklist');\n          localStorage.removeItem(checklistId);\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    });\n  }\n\n  function addItem(content: string) {\n    const { addItemMutation } = props;\n\n    addItemMutation({\n      variables: {\n        checklistId: listId,\n        content\n      }\n    });\n  }\n\n  function convertToCard(name: string, callback: () => void) {\n    const { stageId } = props;\n\n    const afterConvert = () => {\n      callback();\n      Alert.success('You successfully converted a card');\n    };\n\n    props.addItem({ stageId, name }, afterConvert);\n  }\n\n  function renderButton({ values, isSubmitted, callback }: IButtonMutateProps) {\n    const callBackResponse = () => {\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={mutations.checklistsEdit}\n        variables={values}\n        callback={callBackResponse}\n        refetchQueries={['checklistDetail']}\n        isSubmitted={isSubmitted}\n        btnSize=\"small\"\n        type=\"submit\"\n        icon=\"check-1\"\n      />\n    );\n  }\n\n  if (checklistDetailQuery.loading) {\n    return null;\n  }\n\n  const item = checklistDetailQuery.checklistDetail;\n\n  const listProps = {\n    item,\n    addItem,\n    renderButton,\n    remove,\n    convertToCard,\n    updateOrderItems\n  };\n\n  return <List {...listProps} />;\n} // end ListContainer()\n\nconst options = (props: Props) => ({\n  refetchQueries: [\n    {\n      query: gql(queries.checklistDetail),\n      variables: { _id: props.listId }\n    }\n  ]\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props>(gql(queries.checklistDetail), {\n      name: 'checklistDetailQuery',\n      options: ({ listId }) => ({\n        variables: {\n          _id: listId\n        }\n      })\n    }),\n    graphql<Props, AddItemMutationResponse, IChecklistItemDoc>(\n      gql(mutations.checklistItemsAdd),\n      {\n        name: 'addItemMutation',\n        options\n      }\n    ),\n    graphql<\n      Props,\n      UpdateItemsOrderMutationResponse,\n      IChecklistItemsUpdateOrderDoc\n    >(gql(mutations.checklistItemsOrder), {\n      name: 'checklistItemsOrderMutation',\n      options\n    }),\n    graphql<Props, RemoveMutationResponse, { _id: string }>(\n      gql(mutations.checklistsRemove),\n      {\n        name: 'removeMutation',\n        options: () => ({\n          refetchQueries: ['checklists']\n        })\n      }\n    )\n  )(ListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}