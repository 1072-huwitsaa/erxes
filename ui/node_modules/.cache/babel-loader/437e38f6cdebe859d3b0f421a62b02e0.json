{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserDetailForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as channelQueries } from '../../channels/graphql';\nimport UserDetailForm from '../components/detail/UserDetailForm';\nimport { mutations, queries } from '../graphql';\nimport UserForm from './UserForm';\n\nvar UserDetailFormContainer = function UserDetailFormContainer(props) {\n  var userDetailQuery = props.userDetailQuery,\n      channelsQuery = props.channelsQuery,\n      userConversationsQuery = props.userConversationsQuery,\n      renderEditForm = props.renderEditForm;\n\n  if (userDetailQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n  var _ref = userConversationsQuery.userConversations || {},\n      _ref$list = _ref.list,\n      list = _ref$list === void 0 ? [] : _ref$list,\n      _ref$totalCount = _ref.totalCount,\n      totalCount = _ref$totalCount === void 0 ? 0 : _ref$totalCount;\n\n  var renderButton = function renderButton(_ref2) {\n    var name = _ref2.name,\n        values = _ref2.values,\n        isSubmitted = _ref2.isSubmitted,\n        callback = _ref2.callback,\n        object = _ref2.object;\n\n    var afterMutate = function afterMutate() {\n      userDetailQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return React.createElement(ButtonMutate, {\n      mutation: mutations.usersEdit,\n      variables: values,\n      callback: afterMutate,\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      icon: \"check-circle\",\n      uppercase: false,\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  };\n\n  var editForm = function editForm(localProps) {\n    return React.createElement(UserForm, Object.assign({}, localProps, {\n      closeModal: localProps.closeModal,\n      object: localProps.user,\n      renderButton: renderButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  };\n\n  var updatedProps = {\n    renderEditForm: renderEditForm ? renderEditForm : editForm,\n    user: userDetailQuery.userDetail || {},\n    participatedConversations: list,\n    totalConversationCount: totalCount,\n    channels: channelsQuery.channels || []\n  };\n  return React.createElement(UserDetailForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n};\n\nvar commonOptions = function commonOptions(_ref3) {\n  var _id = _ref3._id;\n  return {\n    variables: {\n      _id: _id\n    }\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.userDetail), {\n  name: 'userDetailQuery',\n  options: function options(_ref4) {\n    var _id = _ref4._id;\n    return {\n      variables: {\n        _id: _id\n      }\n    };\n  }\n}), graphql(gql(queries.userConversations), {\n  name: 'userConversationsQuery',\n  options: function options(_ref5) {\n    var _id = _ref5._id,\n        queryParams = _ref5.queryParams;\n    return {\n      variables: {\n        _id: _id,\n        perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n      }\n    };\n  }\n}), graphql(gql(channelQueries.channels), {\n  name: 'channelsQuery',\n  options: commonOptions\n}))(UserDetailFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserDetailForm.tsx"],"names":["gql","compose","ButtonMutate","Spinner","React","graphql","withProps","queries","channelQueries","UserDetailForm","mutations","UserForm","UserDetailFormContainer","props","userDetailQuery","channelsQuery","userConversationsQuery","renderEditForm","loading","userConversations","list","totalCount","renderButton","name","values","isSubmitted","callback","object","afterMutate","refetch","usersEdit","editForm","localProps","closeModal","user","updatedProps","userDetail","participatedConversations","totalConversationCount","channels","commonOptions","_id","variables","options","queryParams","perPage","limit","parseInt"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as channelQueries } from '../../channels/graphql';\nimport { ChannelsQueryResponse } from '../../channels/types';\nimport UserDetailForm from '../components/detail/UserDetailForm';\nimport { mutations, queries } from '../graphql';\nimport {\n  UserConverationsQueryResponse,\n  UserDetailQueryResponse\n} from '../types';\nimport UserForm from './UserForm';\n\ntype Props = {\n  _id: string;\n  queryParams: any;\n  renderEditForm?: ({\n    closeModal,\n    user\n  }: {\n    closeModal: () => void;\n    user: IUser;\n  }) => React.ReactNode;\n};\n\ntype FinalProps = {\n  userDetailQuery: UserDetailQueryResponse;\n  channelsQuery: ChannelsQueryResponse;\n  userConversationsQuery: UserConverationsQueryResponse;\n};\n\nconst UserDetailFormContainer = (props: Props & FinalProps) => {\n  const {\n    userDetailQuery,\n    channelsQuery,\n    userConversationsQuery,\n    renderEditForm\n  } = props;\n\n  if (userDetailQuery.loading) {\n    return <Spinner />;\n  }\n\n  const { list = [], totalCount = 0 } =\n    userConversationsQuery.userConversations || {};\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    const afterMutate = () => {\n      userDetailQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={mutations.usersEdit}\n        variables={values}\n        callback={afterMutate}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        icon=\"check-circle\"\n        uppercase={false}\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const editForm = localProps => {\n    return (\n      <UserForm\n        {...localProps}\n        closeModal={localProps.closeModal}\n        object={localProps.user}\n        renderButton={renderButton}\n      />\n    );\n  };\n\n  const updatedProps = {\n    renderEditForm: renderEditForm ? renderEditForm : editForm,\n    user: userDetailQuery.userDetail || {},\n    participatedConversations: list,\n    totalConversationCount: totalCount,\n    channels: channelsQuery.channels || []\n  };\n\n  return <UserDetailForm {...updatedProps} />;\n};\n\nconst commonOptions = ({ _id }: { _id: string }) => ({\n  variables: { _id }\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, UserDetailQueryResponse, { _id: string }>(\n      gql(queries.userDetail),\n      {\n        name: 'userDetailQuery',\n        options: ({ _id }) => ({\n          variables: { _id }\n        })\n      }\n    ),\n    graphql<\n      Props,\n      UserConverationsQueryResponse,\n      { _id: string; perPage: number }\n    >(gql(queries.userConversations), {\n      name: 'userConversationsQuery',\n      options: ({ _id, queryParams }) => ({\n        variables: {\n          _id,\n          perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n        }\n      })\n    }),\n    graphql(gql(channelQueries.channels), {\n      name: 'channelsQuery',\n      options: commonOptions\n    })\n  )(UserDetailFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}