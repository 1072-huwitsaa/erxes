{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/article/ArticleList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ArticleList from '../../components/article/ArticleList';\nimport { mutations, queries } from '../../graphql';\n\nvar ArticleContainer = function ArticleContainer(props) {\n  var articlesQuery = props.articlesQuery,\n      removeArticlesMutation = props.removeArticlesMutation,\n      queryParams = props.queryParams,\n      currentCategoryId = props.currentCategoryId,\n      topicIds = props.topicIds; // remove action\n\n  var remove = function remove(articleId) {\n    confirm().then(function () {\n      removeArticlesMutation({\n        variables: {\n          _id: articleId\n        }\n      }).then(function () {\n        articlesQuery.refetch();\n        Alert.success('You successfully deleted an article');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var extendedProps = _objectSpread({}, props, {\n    remove: remove,\n    currentCategoryId: currentCategoryId,\n    topicIds: topicIds,\n    queryParams: queryParams,\n    articles: articlesQuery.knowledgeBaseArticles || [],\n    loading: articlesQuery.loading\n  });\n\n  return React.createElement(ArticleList, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.knowledgeBaseArticles), {\n  name: 'articlesQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams,\n        currentCategoryId = _ref.currentCategoryId;\n    return {\n      variables: _objectSpread({}, generatePaginationParams(queryParams), {\n        categoryIds: [currentCategoryId]\n      }),\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.knowledgeBaseArticlesRemove), {\n  name: 'removeArticlesMutation',\n  options: function options(_ref2) {\n    var currentCategoryId = _ref2.currentCategoryId,\n        topicIds = _ref2.topicIds;\n    return {\n      refetchQueries: [{\n        query: gql(queries.knowledgeBaseArticlesTotalCount),\n        variables: {\n          categoryIds: [currentCategoryId]\n        }\n      }, {\n        query: gql(queries.knowledgeBaseCategories),\n        variables: {\n          topicIds: [topicIds]\n        }\n      }, {\n        query: gql(queries.knowledgeBaseCategoryDetail),\n        variables: {\n          _id: currentCategoryId\n        }\n      }]\n    };\n  }\n}))(ArticleContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/article/ArticleList.tsx"],"names":["gql","compose","Alert","confirm","withProps","generatePaginationParams","React","graphql","ArticleList","mutations","queries","ArticleContainer","props","articlesQuery","removeArticlesMutation","queryParams","currentCategoryId","topicIds","remove","articleId","then","variables","_id","refetch","success","catch","error","message","extendedProps","articles","knowledgeBaseArticles","loading","name","options","categoryIds","fetchPolicy","knowledgeBaseArticlesRemove","refetchQueries","query","knowledgeBaseArticlesTotalCount","knowledgeBaseCategories","knowledgeBaseCategoryDetail"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ArticleList from '../../components/article/ArticleList';\nimport { mutations, queries } from '../../graphql';\nimport {\n  ArticlesQueryResponse,\n  RemoveArticlesMutationResponse\n} from '../../types';\n\ntype Props = {\n  queryParams: any;\n  currentCategoryId: string;\n  topicIds: string;\n};\n\ntype FinalProps = { articlesQuery: ArticlesQueryResponse } & Props &\n  RemoveArticlesMutationResponse;\n\nconst ArticleContainer = (props: FinalProps) => {\n  const {\n    articlesQuery,\n    removeArticlesMutation,\n    queryParams,\n    currentCategoryId,\n    topicIds\n  } = props;\n\n  // remove action\n  const remove = articleId => {\n    confirm().then(() => {\n      removeArticlesMutation({\n        variables: { _id: articleId }\n      })\n        .then(() => {\n          articlesQuery.refetch();\n\n          Alert.success('You successfully deleted an article');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const extendedProps = {\n    ...props,\n    remove,\n    currentCategoryId,\n    topicIds,\n    queryParams,\n    articles: articlesQuery.knowledgeBaseArticles || [],\n    loading: articlesQuery.loading\n  };\n\n  return <ArticleList {...extendedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      ArticlesQueryResponse,\n      { categoryIds: string[]; page: number; perPage: number }\n    >(gql(queries.knowledgeBaseArticles), {\n      name: 'articlesQuery',\n      options: ({ queryParams, currentCategoryId }) => ({\n        variables: {\n          ...generatePaginationParams(queryParams),\n          categoryIds: [currentCategoryId]\n        },\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, RemoveArticlesMutationResponse, { _id: string }>(\n      gql(mutations.knowledgeBaseArticlesRemove),\n      {\n        name: 'removeArticlesMutation',\n        options: ({ currentCategoryId, topicIds }) => {\n          return {\n            refetchQueries: [\n              {\n                query: gql(queries.knowledgeBaseArticlesTotalCount),\n                variables: { categoryIds: [currentCategoryId] }\n              },\n              {\n                query: gql(queries.knowledgeBaseCategories),\n                variables: { topicIds: [topicIds] }\n              },\n              {\n                query: gql(queries.knowledgeBaseCategoryDetail),\n                variables: { _id: currentCategoryId }\n              }\n            ]\n          };\n        }\n      }\n    )\n  )(ArticleContainer)\n);\n"]},"metadata":{},"sourceType":"module"}