{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/withFormMutations.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { mutations, queries } from '../graphql';\nimport { crudMutationsOptions } from '../utils';\n\nfunction withSaveAndEdit(Component) {\n  var Container =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Container, _React$Component);\n\n    function Container(props) {\n      var _this;\n\n      _classCallCheck(this, Container);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));\n      _this.state = {\n        isLoading: false\n      };\n      return _this;\n    }\n\n    _createClass(Container, [{\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        var _this$props = this.props,\n            history = _this$props.history,\n            kind = _this$props.kind,\n            messageId = _this$props.messageId,\n            usersQuery = _this$props.usersQuery,\n            engageMessageDetailQuery = _this$props.engageMessageDetailQuery,\n            addMutation = _this$props.addMutation,\n            editMutation = _this$props.editMutation;\n        var message = engageMessageDetailQuery.engageMessageDetail || {};\n        var users = usersQuery.allUsers || [];\n        var verifiedUsers = users.filter(function (user) {\n          return user.username;\n        }) || [];\n\n        var doMutation = function doMutation(mutation, variables, msg) {\n          _this2.setState({\n            isLoading: true\n          });\n\n          mutation({\n            variables: variables\n          }).then(function () {\n            Alert.success(msg);\n            history.push({\n              pathname: '/engage',\n              search: '?engageRefetchList=true'\n            });\n          }).catch(function (error) {\n            Alert.error(error.message);\n\n            _this2.setState({\n              isLoading: false\n            });\n          });\n        }; // save\n\n\n        var save = function save(doc) {\n          doc.kind = message.kind ? message.kind : kind;\n\n          if (messageId) {\n            return doMutation(editMutation, _objectSpread({}, doc, {\n              _id: messageId\n            }), \"You successfully updated a engagement message\");\n          }\n\n          return doMutation(addMutation, doc, \"You successfully added a engagement message\");\n        };\n\n        var messenger = message.messenger || {\n          brandId: '',\n          kind: '',\n          content: '',\n          sentAs: '',\n          rules: []\n        };\n        var email = message.email || {\n          subject: '',\n          attachments: [],\n          content: '',\n          templateId: ''\n        };\n        var scheduleDate = message.scheduleDate;\n\n        var updatedProps = _objectSpread({}, this.props, {\n          save: save,\n          users: verifiedUsers,\n          isActionLoading: this.state.isLoading,\n          message: _objectSpread({}, message, {\n            // excluding __type auto fields\n            messenger: {\n              brandId: messenger.brandId,\n              kind: messenger.kind,\n              content: messenger.content,\n              sentAs: messenger.sentAs,\n              rules: messenger.rules\n            },\n            email: {\n              subject: email.subject,\n              attachments: email.attachments,\n              content: email.content,\n              templateId: email.templateId\n            },\n            scheduleDate: scheduleDate ? {\n              type: scheduleDate.type,\n              month: scheduleDate.month,\n              day: scheduleDate.day\n            } : null\n          })\n        });\n\n        return React.createElement(Component, Object.assign({}, updatedProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Container;\n  }(React.Component);\n\n  return withProps(compose(graphql(gql(queries.engageMessageDetail), {\n    name: 'engageMessageDetailQuery',\n    options: function options(_ref) {\n      var messageId = _ref.messageId;\n      return {\n        variables: {\n          _id: messageId\n        }\n      };\n    }\n  }), graphql(gql(queries.users), {\n    name: 'usersQuery'\n  }), graphql(gql(mutations.messagesAdd), {\n    name: 'addMutation',\n    options: {\n      refetchQueries: engageRefetchQueries({})\n    }\n  }), graphql(gql(mutations.messagesEdit), {\n    name: 'editMutation',\n    options: {\n      refetchQueries: engageRefetchQueries({\n        isEdit: true\n      })\n    }\n  }))(withRouter(Container)));\n}\n\nexport var engageRefetchQueries = function engageRefetchQueries(_ref2) {\n  var isEdit = _ref2.isEdit;\n  return [].concat(_toConsumableArray(crudMutationsOptions().refetchQueries), _toConsumableArray(isEdit ? ['activityLogs'] : []), ['engageMessageDetail']);\n};\nexport default withSaveAndEdit;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/withFormMutations.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","withRouter","mutations","queries","crudMutationsOptions","withSaveAndEdit","Component","Container","props","state","isLoading","history","kind","messageId","usersQuery","engageMessageDetailQuery","addMutation","editMutation","message","engageMessageDetail","users","allUsers","verifiedUsers","filter","user","username","doMutation","mutation","variables","msg","setState","then","success","push","pathname","search","catch","error","save","doc","_id","messenger","brandId","content","sentAs","rules","email","subject","attachments","templateId","scheduleDate","updatedProps","isActionLoading","type","month","day","name","options","messagesAdd","refetchQueries","engageRefetchQueries","messagesEdit","isEdit"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { AllUsersQueryResponse } from '../../settings/team/types';\nimport { mutations, queries } from '../graphql';\nimport {\n  EngageMessageDetailQueryResponse,\n  WithFormAddMutationResponse,\n  WithFormEditMutationResponse,\n  WithFormMutationVariables\n} from '../types';\nimport { crudMutationsOptions } from '../utils';\n\ntype Props = {\n  messageId: string;\n  kind: string;\n};\n\ntype FinalProps = {\n  engageMessageDetailQuery: EngageMessageDetailQueryResponse;\n  usersQuery: AllUsersQueryResponse;\n} & IRouterProps &\n  Props &\n  WithFormAddMutationResponse &\n  WithFormEditMutationResponse;\n\nfunction withSaveAndEdit<IComponentProps>(Component) {\n  class Container extends React.Component<FinalProps, { isLoading: boolean }> {\n    constructor(props: FinalProps) {\n      super(props);\n\n      this.state = {\n        isLoading: false\n      };\n    }\n\n    render() {\n      const {\n        history,\n        kind,\n        messageId,\n        usersQuery,\n        engageMessageDetailQuery,\n        addMutation,\n        editMutation\n      } = this.props;\n\n      const message = engageMessageDetailQuery.engageMessageDetail || {};\n      const users = usersQuery.allUsers || [];\n      const verifiedUsers = users.filter(user => user.username) || [];\n\n      const doMutation = (mutation, variables, msg) => {\n        this.setState({ isLoading: true });\n\n        mutation({\n          variables\n        })\n          .then(() => {\n            Alert.success(msg);\n\n            history.push({\n              pathname: '/engage',\n              search: '?engageRefetchList=true'\n            });\n          })\n          .catch(error => {\n            Alert.error(error.message);\n\n            this.setState({ isLoading: false });\n          });\n      };\n\n      // save\n      const save = doc => {\n        doc.kind = message.kind ? message.kind : kind;\n\n        if (messageId) {\n          return doMutation(\n            editMutation,\n            { ...doc, _id: messageId },\n            `You successfully updated a engagement message`\n          );\n        }\n\n        return doMutation(\n          addMutation,\n          doc,\n          `You successfully added a engagement message`\n        );\n      };\n\n      const messenger = message.messenger || {\n        brandId: '',\n        kind: '',\n        content: '',\n        sentAs: '',\n        rules: []\n      };\n\n      const email = message.email || {\n        subject: '',\n        attachments: [],\n        content: '',\n        templateId: ''\n      };\n\n      const scheduleDate = message.scheduleDate;\n\n      const updatedProps = {\n        ...this.props,\n        save,\n        users: verifiedUsers,\n        isActionLoading: this.state.isLoading,\n        message: {\n          ...message,\n          // excluding __type auto fields\n          messenger: {\n            brandId: messenger.brandId,\n            kind: messenger.kind,\n            content: messenger.content,\n            sentAs: messenger.sentAs,\n            rules: messenger.rules\n          },\n          email: {\n            subject: email.subject,\n            attachments: email.attachments,\n            content: email.content,\n            templateId: email.templateId\n          },\n          scheduleDate: scheduleDate\n            ? {\n                type: scheduleDate.type,\n                month: scheduleDate.month,\n                day: scheduleDate.day\n              }\n            : null\n        }\n      };\n\n      return <Component {...updatedProps} />;\n    }\n  }\n\n  return withProps<IComponentProps>(\n    compose(\n      graphql<Props, EngageMessageDetailQueryResponse, { _id: string }>(\n        gql(queries.engageMessageDetail),\n        {\n          name: 'engageMessageDetailQuery',\n          options: ({ messageId }: { messageId: string }) => ({\n            variables: {\n              _id: messageId\n            }\n          })\n        }\n      ),\n      graphql<Props, AllUsersQueryResponse>(gql(queries.users), {\n        name: 'usersQuery'\n      }),\n      graphql<Props, WithFormAddMutationResponse, WithFormMutationVariables>(\n        gql(mutations.messagesAdd),\n        {\n          name: 'addMutation',\n          options: {\n            refetchQueries: engageRefetchQueries({})\n          }\n        }\n      ),\n      graphql<Props, WithFormEditMutationResponse, WithFormMutationVariables>(\n        gql(mutations.messagesEdit),\n        {\n          name: 'editMutation',\n          options: {\n            refetchQueries: engageRefetchQueries({ isEdit: true })\n          }\n        }\n      )\n    )(withRouter<FinalProps>(Container))\n  );\n}\n\nexport const engageRefetchQueries = ({\n  isEdit\n}: {\n  isEdit?: boolean;\n}): string[] => [\n  ...crudMutationsOptions().refetchQueries,\n  ...(isEdit ? ['activityLogs'] : []),\n  'engageMessageDetail'\n];\n\nexport default withSaveAndEdit;\n"]},"metadata":{},"sourceType":"module"}