{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/messenger/Create.tsx\";\nimport gql from 'graphql-tag';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __, Alert, withProps } from 'modules/common/utils';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport { queries as brandQueries } from 'modules/settings/brands/graphql';\nimport Form from 'modules/settings/integrations/components/messenger/Form';\nimport { integrationsListParams } from 'modules/settings/integrations/containers/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nvar CreateMessenger = function CreateMessenger(props) {\n  var history = props.history,\n      usersQuery = props.usersQuery,\n      brandsQuery = props.brandsQuery,\n      saveMessengerMutation = props.saveMessengerMutation,\n      saveConfigsMutation = props.saveConfigsMutation,\n      saveAppearanceMutation = props.saveAppearanceMutation,\n      messengerAppSaveMutation = props.messengerAppSaveMutation,\n      knowledgeBaseTopicsQuery = props.knowledgeBaseTopicsQuery;\n\n  if (usersQuery.loading || brandsQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n  var users = usersQuery.users || [];\n  var brands = brandsQuery.brands || [];\n  var topics = knowledgeBaseTopicsQuery.knowledgeBaseTopics || [];\n\n  var save = function save(doc) {\n    var name = doc.name,\n        brandId = doc.brandId,\n        languageCode = doc.languageCode,\n        messengerData = doc.messengerData,\n        uiOptions = doc.uiOptions,\n        channelIds = doc.channelIds,\n        messengerApps = doc.messengerApps;\n    var id = '';\n    saveMessengerMutation({\n      variables: {\n        name: name,\n        brandId: brandId,\n        languageCode: languageCode,\n        channelIds: channelIds\n      }\n    }).then(function (_ref) {\n      var data = _ref.data;\n      var integrationId = data.integrationsCreateMessengerIntegration._id;\n      id = integrationId;\n      return saveConfigsMutation({\n        variables: {\n          _id: integrationId,\n          messengerData: messengerData\n        }\n      });\n    }).then(function (_ref2) {\n      var data = _ref2.data;\n      var integrationId = data.integrationsSaveMessengerConfigs._id;\n      return saveAppearanceMutation({\n        variables: {\n          _id: integrationId,\n          uiOptions: uiOptions\n        }\n      });\n    }).then(function (_ref3) {\n      var data = _ref3.data;\n      var integrationId = data.integrationsSaveMessengerAppearanceData._id;\n      return messengerAppSaveMutation({\n        variables: {\n          integrationId: integrationId,\n          messengerApps: messengerApps\n        }\n      });\n    }).then(function () {\n      Alert.success('You successfully added an integration');\n      history.push(\"/settings/integrations?refetch=true&_id=\".concat(id, \"&kind=messenger\"));\n    }).catch(function (error) {\n      if (error.message.includes('Duplicated messenger for single brand')) {\n        return Alert.warning(__(\"You've already created a messenger for the brand you've selected. Please choose a different brand or edit the previously created messenger\"), 6000);\n      }\n\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    teamMembers: users || [],\n    brands: brands,\n    save: save,\n    topics: topics\n  });\n\n  return React.createElement(Form, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }));\n};\n\nvar commonOptions = function commonOptions(_ref4) {\n  var integrationId = _ref4.integrationId;\n  return {\n    refetchQueries: [{\n      query: gql(queries.integrationDetail),\n      variables: {\n        _id: integrationId || ''\n      },\n      fetchPolicy: 'network-only'\n    }]\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.users), {\n  name: 'usersQuery'\n}), graphql(gql(brandQueries.brands), {\n  name: 'brandsQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(kbQueries.knowledgeBaseTopics), {\n  name: 'knowledgeBaseTopicsQuery'\n}), graphql(gql(mutations.integrationsCreateMessenger), {\n  name: 'saveMessengerMutation',\n  options: function options(_ref5) {\n    var queryParams = _ref5.queryParams;\n    return {\n      refetchQueries: [{\n        query: gql(queries.integrations),\n        variables: integrationsListParams(queryParams)\n      }, {\n        query: gql(queries.integrationTotalCount)\n      }]\n    };\n  }\n}), graphql(gql(mutations.integrationsSaveMessengerConfigs), {\n  name: 'saveConfigsMutation',\n  options: commonOptions\n}), graphql(gql(mutations.messengerAppSave), {\n  name: 'messengerAppSaveMutation',\n  options: commonOptions\n}), graphql(gql(mutations.integrationsSaveMessengerAppearance), {\n  name: 'saveAppearanceMutation',\n  options: commonOptions\n}))(withRouter(CreateMessenger)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/messenger/Create.tsx"],"names":["gql","Spinner","__","Alert","withProps","queries","kbQueries","brandQueries","Form","integrationsListParams","mutations","compose","React","graphql","withRouter","CreateMessenger","props","history","usersQuery","brandsQuery","saveMessengerMutation","saveConfigsMutation","saveAppearanceMutation","messengerAppSaveMutation","knowledgeBaseTopicsQuery","loading","users","brands","topics","knowledgeBaseTopics","save","doc","name","brandId","languageCode","messengerData","uiOptions","channelIds","messengerApps","id","variables","then","data","integrationId","integrationsCreateMessengerIntegration","_id","integrationsSaveMessengerConfigs","integrationsSaveMessengerAppearanceData","success","push","catch","error","message","includes","warning","updatedProps","teamMembers","commonOptions","refetchQueries","query","integrationDetail","fetchPolicy","options","integrationsCreateMessenger","queryParams","integrations","integrationTotalCount","messengerAppSave","integrationsSaveMessengerAppearance"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,EAAT,EAAaC,KAAb,EAAoBC,SAApB,QAAqC,sBAArC;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,+BAArC;AACA,SAASD,OAAO,IAAIE,YAApB,QAAwC,iCAAxC;AACA,OAAOC,IAAP,MAAiB,yDAAjB;AACA,SAASC,sBAAT,QAAuC,gDAAvC;AACA,SAASC,SAAT,EAAoBL,OAApB,QAAmC,uCAAnC;AAEA,OAAO,KAAKM,OAAZ,MAAyB,kBAAzB;AAWA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAqBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAuB;AAAA,MAE3CC,OAF2C,GAUzCD,KAVyC,CAE3CC,OAF2C;AAAA,MAG3CC,UAH2C,GAUzCF,KAVyC,CAG3CE,UAH2C;AAAA,MAI3CC,WAJ2C,GAUzCH,KAVyC,CAI3CG,WAJ2C;AAAA,MAK3CC,qBAL2C,GAUzCJ,KAVyC,CAK3CI,qBAL2C;AAAA,MAM3CC,mBAN2C,GAUzCL,KAVyC,CAM3CK,mBAN2C;AAAA,MAO3CC,sBAP2C,GAUzCN,KAVyC,CAO3CM,sBAP2C;AAAA,MAQ3CC,wBAR2C,GAUzCP,KAVyC,CAQ3CO,wBAR2C;AAAA,MAS3CC,wBAT2C,GAUzCR,KAVyC,CAS3CQ,wBAT2C;;AAY7C,MAAIN,UAAU,CAACO,OAAX,IAAsBN,WAAW,CAACM,OAAtC,EAA+C;AAC7C,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,KAAK,GAAGR,UAAU,CAACQ,KAAX,IAAoB,EAAlC;AACA,MAAMC,MAAM,GAAGR,WAAW,CAACQ,MAAZ,IAAsB,EAArC;AACA,MAAMC,MAAM,GAAGJ,wBAAwB,CAACK,mBAAzB,IAAgD,EAA/D;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,GAAG,EAAI;AAAA,QAEhBC,IAFgB,GASdD,GATc,CAEhBC,IAFgB;AAAA,QAGhBC,OAHgB,GASdF,GATc,CAGhBE,OAHgB;AAAA,QAIhBC,YAJgB,GASdH,GATc,CAIhBG,YAJgB;AAAA,QAKhBC,aALgB,GASdJ,GATc,CAKhBI,aALgB;AAAA,QAMhBC,SANgB,GASdL,GATc,CAMhBK,SANgB;AAAA,QAOhBC,UAPgB,GASdN,GATc,CAOhBM,UAPgB;AAAA,QAQhBC,aARgB,GASdP,GATc,CAQhBO,aARgB;AAWlB,QAAIC,EAAE,GAAG,EAAT;AACAnB,IAAAA,qBAAqB,CAAC;AACpBoB,MAAAA,SAAS,EAAE;AAAER,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,OAAO,EAAPA,OAAR;AAAiBC,QAAAA,YAAY,EAAZA,YAAjB;AAA+BG,QAAAA,UAAU,EAAVA;AAA/B;AADS,KAAD,CAArB,CAGGI,IAHH,CAGQ,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AAClB,UAAMC,aAAa,GAAGD,IAAI,CAACE,sCAAL,CAA4CC,GAAlE;AACAN,MAAAA,EAAE,GAAGI,aAAL;AACA,aAAOtB,mBAAmB,CAAC;AACzBmB,QAAAA,SAAS,EAAE;AAAEK,UAAAA,GAAG,EAAEF,aAAP;AAAsBR,UAAAA,aAAa,EAAbA;AAAtB;AADc,OAAD,CAA1B;AAGD,KATH,EAUGM,IAVH,CAUQ,iBAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;AAClB,UAAMC,aAAa,GAAGD,IAAI,CAACI,gCAAL,CAAsCD,GAA5D;AAEA,aAAOvB,sBAAsB,CAAC;AAC5BkB,QAAAA,SAAS,EAAE;AAAEK,UAAAA,GAAG,EAAEF,aAAP;AAAsBP,UAAAA,SAAS,EAATA;AAAtB;AADiB,OAAD,CAA7B;AAGD,KAhBH,EAiBGK,IAjBH,CAiBQ,iBAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;AAClB,UAAMC,aAAa,GAAGD,IAAI,CAACK,uCAAL,CAA6CF,GAAnE;AAEA,aAAOtB,wBAAwB,CAAC;AAC9BiB,QAAAA,SAAS,EAAE;AAAEG,UAAAA,aAAa,EAAbA,aAAF;AAAiBL,UAAAA,aAAa,EAAbA;AAAjB;AADmB,OAAD,CAA/B;AAGD,KAvBH,EAwBGG,IAxBH,CAwBQ,YAAM;AACVtC,MAAAA,KAAK,CAAC6C,OAAN,CAAc,uCAAd;AACA/B,MAAAA,OAAO,CAACgC,IAAR,mDAC6CV,EAD7C;AAGD,KA7BH,EA8BGW,KA9BH,CA8BS,UAAAC,KAAK,EAAI;AACd,UAAIA,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAuB,uCAAvB,CAAJ,EAAqE;AACnE,eAAOlD,KAAK,CAACmD,OAAN,CACLpD,EAAE,CACA,4IADA,CADG,EAIL,IAJK,CAAP;AAMD;;AAEDC,MAAAA,KAAK,CAACgD,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,KAzCH;AA0CD,GAtDD;;AAwDA,MAAMG,YAAY,qBACbvC,KADa;AAEhBwC,IAAAA,WAAW,EAAE9B,KAAK,IAAI,EAFN;AAGhBC,IAAAA,MAAM,EAANA,MAHgB;AAIhBG,IAAAA,IAAI,EAAJA,IAJgB;AAKhBF,IAAAA,MAAM,EAANA;AALgB,IAAlB;;AAQA,SAAO,oBAAC,IAAD,oBAAU2B,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArFD;;AAuFA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,QAAmD;AAAA,MAAhDd,aAAgD,SAAhDA,aAAgD;AACvE,SAAO;AACLe,IAAAA,cAAc,EAAE,CACd;AACEC,MAAAA,KAAK,EAAE3D,GAAG,CAACK,OAAO,CAACuD,iBAAT,CADZ;AAEEpB,MAAAA,SAAS,EAAE;AAAEK,QAAAA,GAAG,EAAEF,aAAa,IAAI;AAAxB,OAFb;AAGEkB,MAAAA,WAAW,EAAE;AAHf,KADc;AADX,GAAP;AASD,CAVD;;AAYA,eAAezD,SAAS,CACtBO,OAAO,CACLE,OAAO,CAA4Bb,GAAG,CAACK,OAAO,CAACqB,KAAT,CAA/B,EAAgD;AACrDM,EAAAA,IAAI,EAAE;AAD+C,CAAhD,CADF,EAILnB,OAAO,CAA6Bb,GAAG,CAACO,YAAY,CAACoB,MAAd,CAAhC,EAAuD;AAC5DK,EAAAA,IAAI,EAAE,aADsD;AAE5D8B,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdD,MAAAA,WAAW,EAAE;AADC,KAAP;AAAA;AAFmD,CAAvD,CAJF,EAULhD,OAAO,CAA6Bb,GAAG,CAACM,SAAS,CAACuB,mBAAX,CAAhC,EAAiE;AACtEG,EAAAA,IAAI,EAAE;AADgE,CAAjE,CAVF,EAaLnB,OAAO,CAILb,GAAG,CAACU,SAAS,CAACqD,2BAAX,CAJE,EAIuC;AAC5C/B,EAAAA,IAAI,EAAE,uBADsC;AAE5C8B,EAAAA,OAAO,EAAE,wBAAqB;AAAA,QAAlBE,WAAkB,SAAlBA,WAAkB;AAC5B,WAAO;AACLN,MAAAA,cAAc,EAAE,CACd;AACEC,QAAAA,KAAK,EAAE3D,GAAG,CAACK,OAAO,CAAC4D,YAAT,CADZ;AAEEzB,QAAAA,SAAS,EAAE/B,sBAAsB,CAACuD,WAAD;AAFnC,OADc,EAKd;AACEL,QAAAA,KAAK,EAAE3D,GAAG,CAACK,OAAO,CAAC6D,qBAAT;AADZ,OALc;AADX,KAAP;AAWD;AAd2C,CAJvC,CAbF,EAiCLrD,OAAO,CAILb,GAAG,CAACU,SAAS,CAACoC,gCAAX,CAJE,EAI4C;AACjDd,EAAAA,IAAI,EAAE,qBAD2C;AAEjD8B,EAAAA,OAAO,EAAEL;AAFwC,CAJ5C,CAjCF,EAyCL5C,OAAO,CAILb,GAAG,CAACU,SAAS,CAACyD,gBAAX,CAJE,EAI4B;AACjCnC,EAAAA,IAAI,EAAE,0BAD2B;AAEjC8B,EAAAA,OAAO,EAAEL;AAFwB,CAJ5B,CAzCF,EAiDL5C,OAAO,CAILb,GAAG,CAACU,SAAS,CAAC0D,mCAAX,CAJE,EAI+C;AACpDpC,EAAAA,IAAI,EAAE,wBAD8C;AAEpD8B,EAAAA,OAAO,EAAEL;AAF2C,CAJ/C,CAjDF,CAAP,CAyDE3C,UAAU,CAAaC,eAAb,CAzDZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IRouterProps } from 'modules/common/types';\nimport { __, Alert, withProps } from 'modules/common/utils';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport { queries as brandQueries } from 'modules/settings/brands/graphql';\nimport Form from 'modules/settings/integrations/components/messenger/Form';\nimport { integrationsListParams } from 'modules/settings/integrations/containers/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\n\nimport * as compose from 'lodash.flowright';\nimport {\n  IMessengerApps,\n  IMessengerData,\n  IUiOptions,\n  SaveMessengerAppearanceMutationResponse,\n  SaveMessengerAppsMutationResponse,\n  SaveMessengerConfigsMutationResponse,\n  SaveMessengerMutationResponse,\n  SaveMessengerMutationVariables\n} from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { TopicsQueryResponse } from '../../../../knowledgeBase/types';\nimport { BrandsQueryResponse } from '../../../brands/types';\nimport { UsersQueryResponse } from '../../../team/types';\n\ntype Props = {\n  queryParams: any;\n  integrationId?: string;\n};\n\ntype FinalProps = {\n  usersQuery: UsersQueryResponse;\n  brandsQuery: BrandsQueryResponse;\n  knowledgeBaseTopicsQuery: TopicsQueryResponse;\n} & Props &\n  IRouterProps &\n  SaveMessengerMutationResponse &\n  SaveMessengerConfigsMutationResponse &\n  SaveMessengerAppsMutationResponse &\n  SaveMessengerAppearanceMutationResponse;\n\nconst CreateMessenger = (props: FinalProps) => {\n  const {\n    history,\n    usersQuery,\n    brandsQuery,\n    saveMessengerMutation,\n    saveConfigsMutation,\n    saveAppearanceMutation,\n    messengerAppSaveMutation,\n    knowledgeBaseTopicsQuery\n  } = props;\n\n  if (usersQuery.loading || brandsQuery.loading) {\n    return <Spinner />;\n  }\n\n  const users = usersQuery.users || [];\n  const brands = brandsQuery.brands || [];\n  const topics = knowledgeBaseTopicsQuery.knowledgeBaseTopics || [];\n\n  const save = doc => {\n    const {\n      name,\n      brandId,\n      languageCode,\n      messengerData,\n      uiOptions,\n      channelIds,\n      messengerApps\n    } = doc;\n\n    let id = '';\n    saveMessengerMutation({\n      variables: { name, brandId, languageCode, channelIds }\n    })\n      .then(({ data }) => {\n        const integrationId = data.integrationsCreateMessengerIntegration._id;\n        id = integrationId;\n        return saveConfigsMutation({\n          variables: { _id: integrationId, messengerData }\n        });\n      })\n      .then(({ data }) => {\n        const integrationId = data.integrationsSaveMessengerConfigs._id;\n\n        return saveAppearanceMutation({\n          variables: { _id: integrationId, uiOptions }\n        });\n      })\n      .then(({ data }) => {\n        const integrationId = data.integrationsSaveMessengerAppearanceData._id;\n\n        return messengerAppSaveMutation({\n          variables: { integrationId, messengerApps }\n        });\n      })\n      .then(() => {\n        Alert.success('You successfully added an integration');\n        history.push(\n          `/settings/integrations?refetch=true&_id=${id}&kind=messenger`\n        );\n      })\n      .catch(error => {\n        if (error.message.includes('Duplicated messenger for single brand')) {\n          return Alert.warning(\n            __(\n              \"You've already created a messenger for the brand you've selected. Please choose a different brand or edit the previously created messenger\"\n            ),\n            6000\n          );\n        }\n\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    teamMembers: users || [],\n    brands,\n    save,\n    topics\n  };\n\n  return <Form {...updatedProps} />;\n};\n\nconst commonOptions = ({ integrationId }: { integrationId?: string }) => {\n  return {\n    refetchQueries: [\n      {\n        query: gql(queries.integrationDetail),\n        variables: { _id: integrationId || '' },\n        fetchPolicy: 'network-only'\n      }\n    ]\n  };\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, UsersQueryResponse>(gql(queries.users), {\n      name: 'usersQuery'\n    }),\n    graphql<Props, BrandsQueryResponse>(gql(brandQueries.brands), {\n      name: 'brandsQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, TopicsQueryResponse>(gql(kbQueries.knowledgeBaseTopics), {\n      name: 'knowledgeBaseTopicsQuery'\n    }),\n    graphql<\n      Props,\n      SaveMessengerMutationResponse,\n      SaveMessengerMutationVariables\n    >(gql(mutations.integrationsCreateMessenger), {\n      name: 'saveMessengerMutation',\n      options: ({ queryParams }) => {\n        return {\n          refetchQueries: [\n            {\n              query: gql(queries.integrations),\n              variables: integrationsListParams(queryParams)\n            },\n            {\n              query: gql(queries.integrationTotalCount)\n            }\n          ]\n        };\n      }\n    }),\n    graphql<\n      Props,\n      SaveMessengerConfigsMutationResponse,\n      { _id: string; messengerData: IMessengerData }\n    >(gql(mutations.integrationsSaveMessengerConfigs), {\n      name: 'saveConfigsMutation',\n      options: commonOptions\n    }),\n    graphql<\n      Props,\n      SaveMessengerAppsMutationResponse,\n      { _id: string; messengerApps: IMessengerApps }\n    >(gql(mutations.messengerAppSave), {\n      name: 'messengerAppSaveMutation',\n      options: commonOptions\n    }),\n    graphql<\n      Props,\n      SaveMessengerAppearanceMutationResponse,\n      { _id: string; uiOptions: IUiOptions }\n    >(gql(mutations.integrationsSaveMessengerAppearance), {\n      name: 'saveAppearanceMutation',\n      options: commonOptions\n    })\n  )(withRouter<FinalProps>(CreateMessenger))\n);\n"]},"metadata":{},"sourceType":"module"}