{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/WorkArea.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport DumbWorkArea from 'modules/inbox/components/conversationDetail/workarea/WorkArea';\nimport { NOTIFICATION_TYPE } from 'modules/inbox/constants';\nimport { mutations, queries, subscriptions } from 'modules/inbox/graphql';\nimport { isConversationMailKind } from 'modules/inbox/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport strip from 'strip';\nimport { sendDesktopNotification, withProps } from '../../../common/utils';\n// messages limit\nvar initialLimit = 10;\n\nvar WorkArea =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WorkArea, _React$Component);\n\n  function WorkArea(props) {\n    var _this;\n\n    _classCallCheck(this, WorkArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorkArea).call(this, props));\n    _this.prevMessageInsertedSubscription = void 0;\n    _this.prevTypingInfoSubscription = void 0;\n\n    _this.addMessage = function (_ref) {\n      var variables = _ref.variables,\n          optimisticResponse = _ref.optimisticResponse,\n          callback = _ref.callback;\n      var _this$props = _this.props,\n          addMessageMutation = _this$props.addMessageMutation,\n          currentId = _this$props.currentId; // immediate ui update =======\n\n      var update;\n\n      if (optimisticResponse) {\n        update = function update(proxy, _ref2) {\n          var conversationMessageAdd = _ref2.data.conversationMessageAdd;\n          var message = conversationMessageAdd; // trying to read query by initial variables. Because currenty it is apollo bug.\n          // https://github.com/apollographql/apollo-client/issues/2499\n\n          var selector = {\n            query: gql(queries.conversationMessages),\n            variables: {\n              conversationId: currentId,\n              limit: initialLimit,\n              skip: 0\n            }\n          }; // Read the data from our cache for this query.\n\n          var data;\n\n          try {\n            data = proxy.readQuery(selector); // Do not do anything while reading query somewhere else\n          } catch (e) {\n            return;\n          }\n\n          var messages = data.conversationMessages; // check duplications\n\n          if (messages.find(function (m) {\n            return m._id === message._id;\n          })) {\n            return;\n          } // Add our comment from the mutation to the end.\n\n\n          messages.push(message); // Write our data back to the cache.\n\n          proxy.writeQuery(_objectSpread({}, selector, {\n            data: data\n          }));\n        };\n      }\n\n      addMessageMutation({\n        variables: variables,\n        optimisticResponse: optimisticResponse,\n        update: update\n      }).then(function () {\n        if (callback) {\n          callback(); // clear saved messages from storage\n\n          localStorage.removeItem(currentId || '');\n        }\n      }).catch(function (e) {\n        if (callback) {\n          callback(e);\n        }\n      });\n    };\n\n    _this.loadMoreMessages = function () {\n      var _this$props2 = _this.props,\n          currentId = _this$props2.currentId,\n          messagesTotalCountQuery = _this$props2.messagesTotalCountQuery,\n          messagesQuery = _this$props2.messagesQuery;\n      var conversationMessagesTotalCount = messagesTotalCountQuery.conversationMessagesTotalCount;\n      var conversationMessages = messagesQuery.conversationMessages || [];\n      var loading = messagesQuery.loading || messagesTotalCountQuery.loading;\n      var hasMore = conversationMessagesTotalCount > conversationMessages.length;\n\n      if (!loading && hasMore) {\n        _this.setState({\n          loadingMessages: true\n        });\n\n        messagesQuery.fetchMore({\n          variables: {\n            conversationId: currentId,\n            limit: 10,\n            skip: conversationMessages.length\n          },\n          updateQuery: function updateQuery(prev, _ref3) {\n            var fetchMoreResult = _ref3.fetchMoreResult;\n\n            _this.setState({\n              loadingMessages: false\n            });\n\n            if (!fetchMoreResult) {\n              return prev;\n            }\n\n            var prevConversationMessages = prev.conversationMessages || [];\n            var prevMessageIds = prevConversationMessages.map(function (m) {\n              return m._id;\n            });\n            var fetchedMessages = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = fetchMoreResult.conversationMessages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var message = _step.value;\n\n                if (!prevMessageIds.includes(message._id)) {\n                  fetchedMessages.push(message);\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            return _objectSpread({}, prev, {\n              conversationMessages: [].concat(fetchedMessages, _toConsumableArray(prevConversationMessages))\n            });\n          }\n        });\n      }\n    };\n\n    _this.state = {\n      loadingMessages: false,\n      typingInfo: ''\n    };\n    _this.prevMessageInsertedSubscription = null;\n    return _this;\n  }\n\n  _createClass(WorkArea, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      var currentId = nextProps.currentId,\n          currentConversation = nextProps.currentConversation,\n          messagesQuery = nextProps.messagesQuery; // It is first time or subsequent conversation change\n\n      if (!this.prevMessageInsertedSubscription || currentId !== this.props.currentId) {\n        // Unsubscribe previous subscription ==========\n        if (this.prevMessageInsertedSubscription) {\n          this.prevMessageInsertedSubscription();\n        }\n\n        if (this.prevTypingInfoSubscription) {\n          this.setState({\n            typingInfo: ''\n          });\n          this.prevTypingInfoSubscription();\n        } // Start new subscriptions =============\n\n\n        this.prevMessageInsertedSubscription = messagesQuery.subscribeToMore({\n          document: gql(subscriptions.conversationMessageInserted),\n          variables: {\n            _id: currentId\n          },\n          updateQuery: function updateQuery(prev, _ref4) {\n            var subscriptionData = _ref4.subscriptionData;\n            var message = subscriptionData.data.conversationMessageInserted;\n            var kind = currentConversation.integration.kind;\n\n            if (!prev) {\n              return;\n            } // Whenever mail thread receives a new message refetch for optimistic ui\n\n\n            if (kind === 'gmail' || kind.includes('nylas')) {\n              return messagesQuery.refetch();\n            } // current user's message is being showed after insert message\n            // mutation. So to prevent from duplication we are ignoring current\n            // user's messages from subscription\n\n\n            var isMessenger = kind === 'messenger';\n\n            if (isMessenger && message.userId === currentUser._id) {\n              return;\n            }\n\n            if (currentId !== _this2.props.currentId) {\n              return;\n            }\n\n            var messages = prev.conversationMessages; // Sometimes it is becoming undefined because of left sidebar query\n\n            if (!messages) {\n              return;\n            } // check whether or not already inserted\n\n\n            var prevEntry = messages.find(function (m) {\n              return m._id === message._id;\n            });\n\n            if (prevEntry) {\n              return;\n            } // add new message to messages list\n\n\n            var next = _objectSpread({}, prev, {\n              conversationMessages: [].concat(_toConsumableArray(messages), [message])\n            }); // send desktop notification\n\n\n            sendDesktopNotification({\n              title: NOTIFICATION_TYPE[kind],\n              content: strip(message.content) || ''\n            });\n            return next;\n          }\n        });\n        this.prevTypingInfoSubscription = messagesQuery.subscribeToMore({\n          document: gql(subscriptions.conversationClientTypingStatusChanged),\n          variables: {\n            _id: currentId\n          },\n          updateQuery: function updateQuery(prev, _ref5) {\n            var conversationClientTypingStatusChanged = _ref5.subscriptionData.data.conversationClientTypingStatusChanged;\n\n            _this2.setState({\n              typingInfo: conversationClientTypingStatusChanged.text\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loadingMessages = _this$state.loadingMessages,\n          typingInfo = _this$state.typingInfo;\n      var messagesQuery = this.props.messagesQuery;\n      var conversationMessages = messagesQuery.conversationMessages || [];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        conversationMessages: conversationMessages,\n        loadMoreMessages: this.loadMoreMessages,\n        addMessage: this.addMessage,\n        loading: messagesQuery.loading || loadingMessages,\n        refetchMessages: messagesQuery.refetch,\n        typingInfo: typingInfo\n      });\n\n      return React.createElement(DumbWorkArea, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WorkArea;\n}(React.Component);\n\nvar WithQuery = withProps(compose(graphql(gql(queries.conversationMessages), {\n  name: 'messagesQuery',\n  options: function options(_ref6) {\n    var currentId = _ref6.currentId,\n        currentConversation = _ref6.currentConversation;\n    var windowHeight = window.innerHeight;\n    var integration = currentConversation.integration;\n    var isMail = isConversationMailKind(currentConversation); // 330 - height of above and below sections of detail area\n    // 45 -  min height of per message\n\n    initialLimit = !isMail ? Math.round((windowHeight - 330) / 45 + 1) : 10;\n    return {\n      variables: {\n        conversationId: currentId,\n        limit: integration.kind === 'messenger' || isMail ? initialLimit : 0,\n        skip: 0\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.conversationMessagesTotalCount), {\n  name: 'messagesTotalCountQuery',\n  options: function options(_ref7) {\n    var currentId = _ref7.currentId;\n    return {\n      variables: {\n        conversationId: currentId\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.conversationMessageAdd), {\n  name: 'addMessageMutation'\n}))(WorkArea));\n\nvar WithConsumer = function WithConsumer(props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, function (_ref8) {\n    var currentUser = _ref8.currentUser;\n\n    if (!currentUser) {\n      return null;\n    }\n\n    return React.createElement(WithQuery, Object.assign({}, props, {\n      currentUser: currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default WithConsumer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/WorkArea.tsx"],"names":["AppConsumer","gql","compose","DumbWorkArea","NOTIFICATION_TYPE","mutations","queries","subscriptions","isConversationMailKind","React","graphql","strip","sendDesktopNotification","withProps","initialLimit","WorkArea","props","prevMessageInsertedSubscription","prevTypingInfoSubscription","addMessage","variables","optimisticResponse","callback","addMessageMutation","currentId","update","proxy","conversationMessageAdd","data","message","selector","query","conversationMessages","conversationId","limit","skip","readQuery","e","messages","find","m","_id","push","writeQuery","then","localStorage","removeItem","catch","loadMoreMessages","messagesTotalCountQuery","messagesQuery","conversationMessagesTotalCount","loading","hasMore","length","setState","loadingMessages","fetchMore","updateQuery","prev","fetchMoreResult","prevConversationMessages","prevMessageIds","map","fetchedMessages","includes","state","typingInfo","nextProps","currentUser","currentConversation","subscribeToMore","document","conversationMessageInserted","subscriptionData","kind","integration","refetch","isMessenger","userId","prevEntry","next","title","content","conversationClientTypingStatusChanged","text","updatedProps","refetchMessages","Component","WithQuery","name","options","windowHeight","window","innerHeight","isMail","Math","round","fetchPolicy","WithConsumer"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport DumbWorkArea from 'modules/inbox/components/conversationDetail/workarea/WorkArea';\nimport { NOTIFICATION_TYPE } from 'modules/inbox/constants';\nimport { mutations, queries, subscriptions } from 'modules/inbox/graphql';\nimport { isConversationMailKind } from 'modules/inbox/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport strip from 'strip';\nimport { IUser } from '../../../auth/types';\nimport { sendDesktopNotification, withProps } from '../../../common/utils';\nimport {\n  AddMessageMutationResponse,\n  AddMessageMutationVariables,\n  IConversation,\n  IMessage,\n  MessagesQueryResponse,\n  MessagesTotalCountQuery\n} from '../../types';\n\n// messages limit\nlet initialLimit = 10;\n\ntype Props = {\n  currentConversation: IConversation;\n  currentId?: string;\n  refetchDetail: () => void;\n};\n\ntype FinalProps = {\n  currentUser: IUser;\n  messagesQuery: MessagesQueryResponse;\n  messagesTotalCountQuery: MessagesTotalCountQuery;\n} & Props &\n  AddMessageMutationResponse;\n\ntype State = {\n  loadingMessages: boolean;\n  typingInfo?: string;\n};\n\nclass WorkArea extends React.Component<FinalProps, State> {\n  private prevMessageInsertedSubscription;\n  private prevTypingInfoSubscription;\n\n  constructor(props) {\n    super(props);\n\n    this.state = { loadingMessages: false, typingInfo: '' };\n\n    this.prevMessageInsertedSubscription = null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { currentUser } = this.props;\n\n    const { currentId, currentConversation, messagesQuery } = nextProps;\n\n    // It is first time or subsequent conversation change\n    if (\n      !this.prevMessageInsertedSubscription ||\n      currentId !== this.props.currentId\n    ) {\n      // Unsubscribe previous subscription ==========\n      if (this.prevMessageInsertedSubscription) {\n        this.prevMessageInsertedSubscription();\n      }\n\n      if (this.prevTypingInfoSubscription) {\n        this.setState({ typingInfo: '' });\n        this.prevTypingInfoSubscription();\n      }\n\n      // Start new subscriptions =============\n      this.prevMessageInsertedSubscription = messagesQuery.subscribeToMore({\n        document: gql(subscriptions.conversationMessageInserted),\n        variables: { _id: currentId },\n        updateQuery: (prev, { subscriptionData }) => {\n          const message = subscriptionData.data.conversationMessageInserted;\n          const kind = currentConversation.integration.kind;\n\n          if (!prev) {\n            return;\n          }\n\n          // Whenever mail thread receives a new message refetch for optimistic ui\n          if (kind === 'gmail' || kind.includes('nylas')) {\n            return messagesQuery.refetch();\n          }\n\n          // current user's message is being showed after insert message\n          // mutation. So to prevent from duplication we are ignoring current\n          // user's messages from subscription\n          const isMessenger = kind === 'messenger';\n\n          if (isMessenger && message.userId === currentUser._id) {\n            return;\n          }\n\n          if (currentId !== this.props.currentId) {\n            return;\n          }\n\n          const messages = prev.conversationMessages;\n\n          // Sometimes it is becoming undefined because of left sidebar query\n          if (!messages) {\n            return;\n          }\n\n          // check whether or not already inserted\n          const prevEntry = messages.find(m => m._id === message._id);\n\n          if (prevEntry) {\n            return;\n          }\n\n          // add new message to messages list\n          const next = {\n            ...prev,\n            conversationMessages: [...messages, message]\n          };\n\n          // send desktop notification\n          sendDesktopNotification({\n            title: NOTIFICATION_TYPE[kind],\n            content: strip(message.content) || ''\n          });\n\n          return next;\n        }\n      });\n\n      this.prevTypingInfoSubscription = messagesQuery.subscribeToMore({\n        document: gql(subscriptions.conversationClientTypingStatusChanged),\n        variables: { _id: currentId },\n        updateQuery: (\n          prev,\n          {\n            subscriptionData: {\n              data: { conversationClientTypingStatusChanged }\n            }\n          }\n        ) => {\n          this.setState({\n            typingInfo: conversationClientTypingStatusChanged.text\n          });\n        }\n      });\n    }\n  }\n\n  addMessage = ({\n    variables,\n    optimisticResponse,\n    callback\n  }: {\n    variables: any;\n    optimisticResponse: any;\n    callback?: (e?) => void;\n  }) => {\n    const { addMessageMutation, currentId } = this.props;\n\n    // immediate ui update =======\n    let update;\n\n    if (optimisticResponse) {\n      update = (proxy, { data: { conversationMessageAdd } }) => {\n        const message = conversationMessageAdd;\n\n        // trying to read query by initial variables. Because currenty it is apollo bug.\n        // https://github.com/apollographql/apollo-client/issues/2499\n        const selector = {\n          query: gql(queries.conversationMessages),\n          variables: {\n            conversationId: currentId,\n            limit: initialLimit,\n            skip: 0\n          }\n        };\n\n        // Read the data from our cache for this query.\n        let data;\n\n        try {\n          data = proxy.readQuery(selector);\n\n          // Do not do anything while reading query somewhere else\n        } catch (e) {\n          return;\n        }\n\n        const messages = data.conversationMessages;\n\n        // check duplications\n        if (messages.find(m => m._id === message._id)) {\n          return;\n        }\n\n        // Add our comment from the mutation to the end.\n        messages.push(message);\n\n        // Write our data back to the cache.\n        proxy.writeQuery({ ...selector, data });\n      };\n    }\n\n    addMessageMutation({ variables, optimisticResponse, update })\n      .then(() => {\n        if (callback) {\n          callback();\n\n          // clear saved messages from storage\n          localStorage.removeItem(currentId || '');\n        }\n      })\n      .catch(e => {\n        if (callback) {\n          callback(e);\n        }\n      });\n  };\n\n  loadMoreMessages = () => {\n    const { currentId, messagesTotalCountQuery, messagesQuery } = this.props;\n    const { conversationMessagesTotalCount } = messagesTotalCountQuery;\n    const conversationMessages = messagesQuery.conversationMessages || [];\n\n    const loading = messagesQuery.loading || messagesTotalCountQuery.loading;\n    const hasMore =\n      conversationMessagesTotalCount > conversationMessages.length;\n\n    if (!loading && hasMore) {\n      this.setState({ loadingMessages: true });\n\n      messagesQuery.fetchMore({\n        variables: {\n          conversationId: currentId,\n          limit: 10,\n          skip: conversationMessages.length\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          this.setState({ loadingMessages: false });\n\n          if (!fetchMoreResult) {\n            return prev;\n          }\n\n          const prevConversationMessages = prev.conversationMessages || [];\n          const prevMessageIds = prevConversationMessages.map(m => m._id);\n\n          const fetchedMessages: IMessage[] = [];\n\n          for (const message of fetchMoreResult.conversationMessages) {\n            if (!prevMessageIds.includes(message._id)) {\n              fetchedMessages.push(message);\n            }\n          }\n\n          return {\n            ...prev,\n            conversationMessages: [\n              ...fetchedMessages,\n              ...prevConversationMessages\n            ]\n          };\n        }\n      });\n    }\n  };\n\n  render() {\n    const { loadingMessages, typingInfo } = this.state;\n    const { messagesQuery } = this.props;\n\n    const conversationMessages = messagesQuery.conversationMessages || [];\n\n    const updatedProps = {\n      ...this.props,\n      conversationMessages,\n      loadMoreMessages: this.loadMoreMessages,\n      addMessage: this.addMessage,\n      loading: messagesQuery.loading || loadingMessages,\n      refetchMessages: messagesQuery.refetch,\n      typingInfo\n    };\n\n    return <DumbWorkArea {...updatedProps} />;\n  }\n}\n\nconst WithQuery = withProps<Props & { currentUser: IUser }>(\n  compose(\n    graphql<\n      Props,\n      MessagesQueryResponse,\n      { conversationId?: string; limit: number }\n    >(gql(queries.conversationMessages), {\n      name: 'messagesQuery',\n      options: ({ currentId, currentConversation }) => {\n        const windowHeight = window.innerHeight;\n        const { integration } = currentConversation;\n        const isMail = isConversationMailKind(currentConversation);\n\n        // 330 - height of above and below sections of detail area\n        // 45 -  min height of per message\n        initialLimit = !isMail ? Math.round((windowHeight - 330) / 45 + 1) : 10;\n\n        return {\n          variables: {\n            conversationId: currentId,\n            limit:\n              integration.kind === 'messenger' || isMail ? initialLimit : 0,\n            skip: 0\n          },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<Props, MessagesTotalCountQuery, { conversationId?: string }>(\n      gql(queries.conversationMessagesTotalCount),\n      {\n        name: 'messagesTotalCountQuery',\n        options: ({ currentId }) => ({\n          variables: { conversationId: currentId },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, AddMessageMutationResponse, AddMessageMutationVariables>(\n      gql(mutations.conversationMessageAdd),\n      {\n        name: 'addMessageMutation'\n      }\n    )\n  )(WorkArea)\n);\n\nconst WithConsumer = (props: Props) => {\n  return (\n    <AppConsumer>\n      {({ currentUser }) => {\n        if (!currentUser) {\n          return null;\n        }\n\n        return <WithQuery {...props} currentUser={currentUser} />;\n      }}\n    </AppConsumer>\n  );\n};\n\nexport default WithConsumer;\n"]},"metadata":{},"sourceType":"module"}