{"ast":null,"code":"'use strict';\n\nvar parser = require('slick/parser');\n\nmodule.exports = exports = Selector;\n/**\n * CSS selector constructor.\n *\n * @param {String} selector text\n * @param {Array} optionally, precalculated specificity\n * @api public\n */\n\nfunction Selector(text, styleAttribute) {\n  this.text = text;\n  this.spec = undefined;\n  this.styleAttribute = styleAttribute || false;\n}\n/**\n * Get parsed selector.\n *\n * @api public\n */\n\n\nSelector.prototype.parsed = function () {\n  if (!this.tokens) {\n    this.tokens = parse(this.text);\n  }\n\n  return this.tokens;\n};\n/**\n * Lazy specificity getter\n *\n * @api public\n */\n\n\nSelector.prototype.specificity = function () {\n  var styleAttribute = this.styleAttribute;\n\n  if (!this.spec) {\n    this.spec = specificity(this.text, this.parsed());\n  }\n\n  return this.spec;\n\n  function specificity(text, parsed) {\n    var expressions = parsed || parse(text);\n    var spec = [styleAttribute ? 1 : 0, 0, 0, 0];\n    var nots = [];\n\n    for (var i = 0; i < expressions.length; i++) {\n      var expression = expressions[i];\n      var pseudos = expression.pseudos; // id awards a point in the second column\n\n      if (expression.id) {\n        spec[1]++;\n      } // classes and attributes award a point each in the third column\n\n\n      if (expression.attributes) {\n        spec[2] += expression.attributes.length;\n      }\n\n      if (expression.classList) {\n        spec[2] += expression.classList.length;\n      } // tag awards a point in the fourth column\n\n\n      if (expression.tag && expression.tag !== '*') {\n        spec[3]++;\n      } // pseudos award a point each in the fourth column\n\n\n      if (pseudos) {\n        spec[3] += pseudos.length;\n\n        for (var p = 0; p < pseudos.length; p++) {\n          if (pseudos[p].name === 'not') {\n            nots.push(pseudos[p].value);\n            spec[3]--;\n          }\n        }\n      }\n    }\n\n    for (var ii = nots.length; ii--;) {\n      var not = specificity(nots[ii]);\n\n      for (var jj = 4; jj--;) {\n        spec[jj] += not[jj];\n      }\n    }\n\n    return spec;\n  }\n};\n/**\n * Parses a selector and returns the tokens.\n *\n * @param {String} selector\n * @api private.\n */\n\n\nfunction parse(text) {\n  try {\n    return parser(text)[0];\n  } catch (e) {\n    return [];\n  }\n}","map":null,"metadata":{},"sourceType":"script"}