{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/label/Form.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport Form from '../../components/label/Form';\nimport { mutations, queries } from '../../graphql';\n\nvar getRefetchQueries = function getRefetchQueries(pipelineId) {\n  return [{\n    query: gql(queries.pipelineLabels),\n    variables: {\n      pipelineId: pipelineId\n    }\n  }];\n};\n\nvar FormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FormContainer, _React$Component);\n\n  function FormContainer() {\n    _classCallCheck(this, FormContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FormContainer).apply(this, arguments));\n  }\n\n  _createClass(FormContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          pipelineId = _this$props.pipelineId,\n          pipelineLabelDetailQuery = _this$props.pipelineLabelDetailQuery,\n          removeMutation = _this$props.removeMutation,\n          toggleConfirm = _this$props.toggleConfirm,\n          afterSave = _this$props.afterSave,\n          showForm = _this$props.showForm,\n          selectedLabelIds = _this$props.selectedLabelIds,\n          onSelectLabels = _this$props.onSelectLabels;\n\n      var remove = function remove(pipelineLabelId) {\n        toggleConfirm(function () {\n          confirm('Are you sure? This cannot be undone.', {\n            beforeDismiss: function beforeDismiss() {\n              toggleConfirm();\n            }\n          }).then(function () {\n            removeMutation({\n              variables: {\n                _id: pipelineLabelId\n              }\n            }).then(function () {\n              Alert.success('You successfully deleted a label.');\n\n              if (selectedLabelIds.includes(pipelineLabelId)) {\n                var remained = selectedLabelIds.filter(function (id) {\n                  return pipelineLabelId !== id;\n                });\n                onSelectLabels(remained);\n              }\n            }).catch(function (error) {\n              Alert.error(error.message);\n            });\n          });\n        });\n      };\n\n      var renderButton = function renderButton(_ref) {\n        var name = _ref.name,\n            values = _ref.values,\n            isSubmitted = _ref.isSubmitted,\n            callback = _ref.callback,\n            object = _ref.object;\n        return React.createElement(ButtonMutate, {\n          mutation: object && object._id ? mutations.pipelineLabelsEdit : mutations.pipelineLabelsAdd,\n          variables: _objectSpread({\n            _id: object && object._id ? object._id : undefined,\n            pipelineId: pipelineId\n          }, values),\n          callback: callback,\n          refetchQueries: getRefetchQueries(pipelineId),\n          isSubmitted: isSubmitted,\n          type: \"submit\",\n          btnSize: \"small\",\n          block: !_this.props.labelId && true,\n          successMessage: \"You successfully \".concat(object && object._id ? 'updated' : 'added', \" a \").concat(name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n      };\n\n      var updatedProps = {\n        renderButton: renderButton,\n        afterSave: afterSave,\n        showForm: showForm,\n        remove: remove,\n        label: pipelineLabelDetailQuery ? pipelineLabelDetailQuery.pipelineLabelDetail : undefined\n      };\n      return React.createElement(Form, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FormContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.pipelineLabelDetail), {\n  name: 'pipelineLabelDetailQuery',\n  options: function options(_ref2) {\n    var labelId = _ref2.labelId;\n    return {\n      variables: {\n        _id: labelId || ''\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.pipelineLabelsRemove), {\n  name: 'removeMutation',\n  options: function options(_ref3) {\n    var pipelineId = _ref3.pipelineId;\n    return {\n      refetchQueries: getRefetchQueries(pipelineId)\n    };\n  }\n}))(FormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/label/Form.tsx"],"names":["gql","compose","ButtonMutate","Alert","confirm","withProps","React","graphql","Form","mutations","queries","getRefetchQueries","pipelineId","query","pipelineLabels","variables","FormContainer","props","pipelineLabelDetailQuery","removeMutation","toggleConfirm","afterSave","showForm","selectedLabelIds","onSelectLabels","remove","pipelineLabelId","beforeDismiss","then","_id","success","includes","remained","filter","id","catch","error","message","renderButton","name","values","isSubmitted","callback","object","pipelineLabelsEdit","pipelineLabelsAdd","undefined","labelId","updatedProps","label","pipelineLabelDetail","Component","options","fetchPolicy","pipelineLabelsRemove","refetchQueries"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport Form from '../../components/label/Form';\nimport { mutations, queries } from '../../graphql';\nimport {\n  AddPipelineLabelMutationResponse,\n  PipelineLabelDetailQueryResponse,\n  RemovePipelineLabelMutationResponse\n} from '../../types';\n\ntype Props = {\n  pipelineId: string;\n  afterSave: () => void;\n  labelId?: string;\n  toggleConfirm: (callback?: () => void) => void;\n  showForm: boolean;\n  selectedLabelIds: string[];\n  onSelectLabels: (selectedLabelIds: string[]) => void;\n};\n\ntype FinalProps = {\n  addMutation: AddPipelineLabelMutationResponse;\n  pipelineLabelDetailQuery: PipelineLabelDetailQueryResponse;\n} & Props &\n  RemovePipelineLabelMutationResponse;\n\nconst getRefetchQueries = (pipelineId: string) => {\n  return [\n    {\n      query: gql(queries.pipelineLabels),\n      variables: { pipelineId }\n    }\n  ];\n};\n\nclass FormContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      pipelineId,\n      pipelineLabelDetailQuery,\n      removeMutation,\n      toggleConfirm,\n      afterSave,\n      showForm,\n      selectedLabelIds,\n      onSelectLabels\n    } = this.props;\n\n    const remove = (pipelineLabelId: string) => {\n      toggleConfirm(() => {\n        confirm('Are you sure? This cannot be undone.', {\n          beforeDismiss: () => {\n            toggleConfirm();\n          }\n        }).then(() => {\n          removeMutation({\n            variables: { _id: pipelineLabelId }\n          })\n            .then(() => {\n              Alert.success('You successfully deleted a label.');\n\n              if (selectedLabelIds.includes(pipelineLabelId)) {\n                const remained = selectedLabelIds.filter(\n                  (id: string) => pipelineLabelId !== id\n                );\n\n                onSelectLabels(remained);\n              }\n            })\n            .catch(error => {\n              Alert.error(error.message);\n            });\n        });\n      });\n    };\n\n    const renderButton = ({\n      name,\n      values,\n      isSubmitted,\n      callback,\n      object\n    }: IButtonMutateProps) => {\n      return (\n        <ButtonMutate\n          mutation={\n            object && object._id\n              ? mutations.pipelineLabelsEdit\n              : mutations.pipelineLabelsAdd\n          }\n          variables={{\n            _id: object && object._id ? object._id : undefined,\n            pipelineId,\n            ...values\n          }}\n          callback={callback}\n          refetchQueries={getRefetchQueries(pipelineId)}\n          isSubmitted={isSubmitted}\n          type=\"submit\"\n          btnSize=\"small\"\n          block={!this.props.labelId && true}\n          successMessage={`You successfully ${\n            object && object._id ? 'updated' : 'added'\n          } a ${name}`}\n        />\n      );\n    };\n\n    const updatedProps = {\n      renderButton,\n      afterSave,\n      showForm,\n      remove,\n      label: pipelineLabelDetailQuery\n        ? pipelineLabelDetailQuery.pipelineLabelDetail\n        : undefined\n    };\n\n    return <Form {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, PipelineLabelDetailQueryResponse, { _id: string }>(\n      gql(queries.pipelineLabelDetail),\n      {\n        name: 'pipelineLabelDetailQuery',\n        options: ({ labelId }) => ({\n          variables: { _id: labelId || '' },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, RemovePipelineLabelMutationResponse, { _id: string }>(\n      gql(mutations.pipelineLabelsRemove),\n      {\n        name: 'removeMutation',\n        options: ({ pipelineId }) => ({\n          refetchQueries: getRefetchQueries(pipelineId)\n        })\n      }\n    )\n  )(FormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}