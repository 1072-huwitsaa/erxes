{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/editForm/Watch.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, renderWithProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport { Watch } from '../../components/editForm';\n\nvar WatchContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WatchContainer, _React$Component);\n\n  function WatchContainer() {\n    _classCallCheck(this, WatchContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WatchContainer).apply(this, arguments));\n  }\n\n  _createClass(WatchContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var onChangeWatch = function onChangeWatch(isAdd) {\n        var _this$props = _this.props,\n            watchMutation = _this$props.watchMutation,\n            options = _this$props.options,\n            item = _this$props.item;\n        watchMutation({\n          variables: {\n            _id: item._id,\n            isAdd: isAdd\n          }\n        }).then(function () {\n          Alert.success(options.texts.changeSuccessText);\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        onChangeWatch: onChangeWatch\n      });\n\n      return React.createElement(Watch, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WatchContainer;\n}(React.Component);\n\nexport default (function (props) {\n  var _options = props.options;\n  return renderWithProps(props, compose(graphql(gql(_options.mutations.watchMutation), {\n    name: 'watchMutation',\n    options: function options(_ref) {\n      var item = _ref.item;\n      return {\n        refetchQueries: [{\n          query: gql(_options.queries.detailQuery),\n          variables: {\n            _id: item._id\n          }\n        }]\n      };\n    }\n  }))(WatchContainer));\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/editForm/Watch.tsx"],"names":["gql","compose","Alert","renderWithProps","React","graphql","Watch","WatchContainer","onChangeWatch","isAdd","props","watchMutation","options","item","variables","_id","then","success","texts","changeSuccessText","catch","error","message","updatedProps","Component","mutations","name","refetchQueries","query","queries","detailQuery"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAOA,SAASC,KAAT,EAAgBC,eAAhB,QAAuC,sBAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,KAAT,QAAsB,2BAAtB;;IAYMC,c;;;;;;;;;;;;;6BACK;AAAA;;AACP,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAoB;AAAA,0BACC,KAAI,CAACC,KADN;AAAA,YAChCC,aADgC,eAChCA,aADgC;AAAA,YACjBC,OADiB,eACjBA,OADiB;AAAA,YACRC,IADQ,eACRA,IADQ;AAGxCF,QAAAA,aAAa,CAAC;AAAEG,UAAAA,SAAS,EAAE;AAAEC,YAAAA,GAAG,EAAEF,IAAI,CAACE,GAAZ;AAAiBN,YAAAA,KAAK,EAALA;AAAjB;AAAb,SAAD,CAAb,CACGO,IADH,CACQ,YAAM;AACVd,UAAAA,KAAK,CAACe,OAAN,CAAcL,OAAO,CAACM,KAAR,CAAcC,iBAA5B;AACD,SAHH,EAIGC,KAJH,CAIS,UAAAC,KAAK,EAAI;AACdnB,UAAAA,KAAK,CAACmB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,SANH;AAOD,OAVD;;AAYA,UAAMC,YAAY,qBACb,KAAKb,KADQ;AAEhBF,QAAAA,aAAa,EAAbA;AAFgB,QAAlB;;AAKA,aAAO,oBAAC,KAAD,oBAAWe,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EApB0BnB,KAAK,CAACoB,S;;AAuBnC,gBAAe,UAACd,KAAD,EAAmB;AAAA,MACxBE,QADwB,GACZF,KADY,CACxBE,OADwB;AAGhC,SAAOT,eAAe,CACpBO,KADoB,EAEpBT,OAAO,CACLI,OAAO,CACLL,GAAG,CAACY,QAAO,CAACa,SAAR,CAAkBd,aAAnB,CADE,EAEL;AACEe,IAAAA,IAAI,EAAE,eADR;AAEEd,IAAAA,OAAO,EAAE;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aAAgC;AACvCc,QAAAA,cAAc,EAAE,CACd;AACEC,UAAAA,KAAK,EAAE5B,GAAG,CAACY,QAAO,CAACiB,OAAR,CAAgBC,WAAjB,CADZ;AAEEhB,UAAAA,SAAS,EAAE;AAAEC,YAAAA,GAAG,EAAEF,IAAI,CAACE;AAAZ;AAFb,SADc;AADuB,OAAhC;AAAA;AAFX,GAFK,CADF,CAAP,CAeER,cAfF,CAFoB,CAAtB;AAmBD,CAtBD","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport {\n  IItem,\n  IOptions,\n  WatchMutation,\n  WatchVariables\n} from 'modules/boards/types';\nimport { Alert, renderWithProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport { Watch } from '../../components/editForm';\n\ntype IProps = {\n  item: IItem;\n  options: IOptions;\n  isSmall?: boolean;\n};\n\ntype FinalProps = {\n  watchMutation: WatchMutation;\n} & IProps;\n\nclass WatchContainer extends React.Component<FinalProps> {\n  render() {\n    const onChangeWatch = (isAdd: boolean) => {\n      const { watchMutation, options, item } = this.props;\n\n      watchMutation({ variables: { _id: item._id, isAdd } })\n        .then(() => {\n          Alert.success(options.texts.changeSuccessText);\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      onChangeWatch\n    };\n\n    return <Watch {...updatedProps} />;\n  }\n}\n\nexport default (props: IProps) => {\n  const { options } = props;\n\n  return renderWithProps<IProps>(\n    props,\n    compose(\n      graphql<IProps, WatchMutation, WatchVariables>(\n        gql(options.mutations.watchMutation),\n        {\n          name: 'watchMutation',\n          options: ({ item }: { item: IItem }) => ({\n            refetchQueries: [\n              {\n                query: gql(options.queries.detailQuery),\n                variables: { _id: item._id }\n              }\n            ]\n          })\n        }\n      )\n    )(WatchContainer)\n  );\n};\n"]},"metadata":{},"sourceType":"module"}