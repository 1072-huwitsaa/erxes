{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/containers/conversion/Stages.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport List from 'modules/deals/components/conversion/list/List';\nimport Table from 'modules/deals/components/conversion/table/Table';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar DealStagesContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DealStagesContainer, _React$Component);\n\n  function DealStagesContainer() {\n    _classCallCheck(this, DealStagesContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DealStagesContainer).apply(this, arguments));\n  }\n\n  _createClass(DealStagesContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          stagesQuery = _this$props.stagesQuery,\n          type = _this$props.type,\n          pipelineId = _this$props.pipelineId;\n\n      if (!stagesQuery || !stagesQuery.stages) {\n        return React.createElement(EmptyState, {\n          image: \"/images/actions/18.svg\",\n          text: \"Oh boy, looks like you need to get a head start on your board\",\n          size: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n      }\n\n      if (localStorage.getItem('cacheInvalidated') === 'true') {\n        stagesQuery.refetch({\n          pipelineId: pipelineId\n        });\n      }\n\n      if (stagesQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }\n\n      var stages = stagesQuery.stages || [];\n\n      if (type === 'more') {\n        return React.createElement(Table, Object.assign({}, this.props, {\n          stages: stages,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(List, {\n        stages: stages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return DealStagesContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.conversionStages), {\n  name: 'stagesQuery',\n  skip: function skip(_ref) {\n    var pipelineId = _ref.pipelineId;\n    return !pipelineId;\n  },\n  options: function options(_ref2) {\n    var pipelineId = _ref2.pipelineId,\n        queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        isNotLost: true,\n        pipelineId: pipelineId,\n        search: queryParams.search,\n        customerIds: queryParams.customerIds,\n        companyIds: queryParams.companyIds,\n        assignedUserIds: queryParams.assignedUserIds,\n        productIds: queryParams.productIds,\n        closeDateType: queryParams.closeDateType,\n        userIds: queryParams.userIds\n      }\n    };\n  }\n}))(DealStagesContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/containers/conversion/Stages.tsx"],"names":["gql","compose","queries","EmptyState","Spinner","withProps","List","Table","React","graphql","DealStagesContainer","props","stagesQuery","type","pipelineId","stages","localStorage","getItem","refetch","loading","Component","conversionStages","name","skip","options","queryParams","variables","isNotLost","search","customerIds","companyIds","assignedUserIds","productIds","closeDateType","userIds"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,IAAP,MAAiB,+CAAjB;AACA,OAAOC,KAAP,MAAkB,iDAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;;IAYMC,mB;;;;;;;;;;;;;6BACK;AAAA,wBACmC,KAAKC,KADxC;AAAA,UACCC,WADD,eACCA,WADD;AAAA,UACcC,IADd,eACcA,IADd;AAAA,UACoBC,UADpB,eACoBA,UADpB;;AAGP,UAAI,CAACF,WAAD,IAAgB,CAACA,WAAW,CAACG,MAAjC,EAAyC;AACvC,eACE,oBAAC,UAAD;AACE,UAAA,KAAK,EAAC,wBADR;AAEE,UAAA,IAAI,EAAC,+DAFP;AAGE,UAAA,IAAI,EAAC,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAED,UAAIC,YAAY,CAACC,OAAb,CAAqB,kBAArB,MAA6C,MAAjD,EAAyD;AACvDL,QAAAA,WAAW,CAACM,OAAZ,CAAoB;AAAEJ,UAAAA,UAAU,EAAVA;AAAF,SAApB;AACD;;AAED,UAAIF,WAAW,CAACO,OAAhB,EAAyB;AACvB,eAAO,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAMJ,MAAM,GAAGH,WAAW,CAACG,MAAZ,IAAsB,EAArC;;AAEA,UAAIF,IAAI,KAAK,MAAb,EAAqB;AACnB,eAAO,oBAAC,KAAD,oBAAW,KAAKF,KAAhB;AAAuB,UAAA,MAAM,EAAEI,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;;AAED,aAAO,oBAAC,IAAD;AAAM,QAAA,MAAM,EAAEA,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EA7B+BP,KAAK,CAACY,S;;AAgCxC,eAAef,SAAS,CACtBJ,OAAO,CACLQ,OAAO,CACLT,GAAG,CAACE,OAAO,CAACmB,gBAAT,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGT,UAAH,QAAGA,UAAH;AAAA,WAAoB,CAACA,UAArB;AAAA,GAFR;AAGEU,EAAAA,OAAO,EAAE;AAAA,QAAGV,UAAH,SAAGA,UAAH;AAAA,QAAeW,WAAf,SAAeA,WAAf;AAAA,WAAkC;AACzCC,MAAAA,SAAS,EAAE;AACTC,QAAAA,SAAS,EAAE,IADF;AAETb,QAAAA,UAAU,EAAVA,UAFS;AAGTc,QAAAA,MAAM,EAAEH,WAAW,CAACG,MAHX;AAITC,QAAAA,WAAW,EAAEJ,WAAW,CAACI,WAJhB;AAKTC,QAAAA,UAAU,EAAEL,WAAW,CAACK,UALf;AAMTC,QAAAA,eAAe,EAAEN,WAAW,CAACM,eANpB;AAOTC,QAAAA,UAAU,EAAEP,WAAW,CAACO,UAPf;AAQTC,QAAAA,aAAa,EAAER,WAAW,CAACQ,aARlB;AASTC,QAAAA,OAAO,EAAET,WAAW,CAACS;AATZ;AAD8B,KAAlC;AAAA;AAHX,CAFK,CADF,CAAP,CAqBExB,mBArBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport { ConversionStagesQueryResponse } from 'modules/boards/types';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport List from 'modules/deals/components/conversion/list/List';\nimport Table from 'modules/deals/components/conversion/table/Table';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  pipelineId: string;\n  queryParams: any;\n  type: string;\n};\n\ntype FinalProps = {\n  stagesQuery: ConversionStagesQueryResponse;\n} & Props;\n\nclass DealStagesContainer extends React.Component<FinalProps> {\n  render() {\n    const { stagesQuery, type, pipelineId } = this.props;\n\n    if (!stagesQuery || !stagesQuery.stages) {\n      return (\n        <EmptyState\n          image=\"/images/actions/18.svg\"\n          text=\"Oh boy, looks like you need to get a head start on your board\"\n          size=\"small\"\n        />\n      );\n    }\n\n    if (localStorage.getItem('cacheInvalidated') === 'true') {\n      stagesQuery.refetch({ pipelineId });\n    }\n\n    if (stagesQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    const stages = stagesQuery.stages || [];\n\n    if (type === 'more') {\n      return <Table {...this.props} stages={stages} />;\n    }\n\n    return <List stages={stages} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, ConversionStagesQueryResponse>(\n      gql(queries.conversionStages),\n      {\n        name: 'stagesQuery',\n        skip: ({ pipelineId }) => !pipelineId,\n        options: ({ pipelineId, queryParams }) => ({\n          variables: {\n            isNotLost: true,\n            pipelineId,\n            search: queryParams.search,\n            customerIds: queryParams.customerIds,\n            companyIds: queryParams.companyIds,\n            assignedUserIds: queryParams.assignedUserIds,\n            productIds: queryParams.productIds,\n            closeDateType: queryParams.closeDateType,\n            userIds: queryParams.userIds\n          }\n        })\n      }\n    )\n  )(DealStagesContainer)\n);\n"]},"metadata":{},"sourceType":"module"}