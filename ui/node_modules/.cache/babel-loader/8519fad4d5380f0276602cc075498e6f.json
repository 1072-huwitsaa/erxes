{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/containers/PropertyForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport PropertyForm from '../components/PropertyForm';\nimport { mutations, queries } from '../graphql';\n\nvar PropertyFormContainer = function PropertyFormContainer(props) {\n  var fieldsGroupsQuery = props.fieldsGroupsQuery,\n      queryParams = props.queryParams;\n  var type = queryParams.type;\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback,\n        object = _ref.object;\n    return React.createElement(ButtonMutate, {\n      mutation: object ? mutations.fieldsEdit : mutations.fieldsAdd,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(queryParams),\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      uppercase: false,\n      icon: \"check-circle\",\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    type: type,\n    renderButton: renderButton,\n    groups: fieldsGroupsQuery.fieldsGroups,\n    refetchQueries: getRefetchQueries(queryParams)\n  });\n\n  return React.createElement(PropertyForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries(queryParams) {\n  return [{\n    query: gql(queries.fieldsGroups),\n    variables: {\n      contentType: queryParams.type\n    }\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.fieldsGroups), {\n  name: 'fieldsGroupsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        contentType: queryParams.type\n      }\n    };\n  }\n}))(PropertyFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/containers/PropertyForm.tsx"],"names":["gql","compose","ButtonMutate","withProps","React","graphql","PropertyForm","mutations","queries","PropertyFormContainer","props","fieldsGroupsQuery","queryParams","type","renderButton","name","values","isSubmitted","callback","object","fieldsEdit","fieldsAdd","getRefetchQueries","updatedProps","groups","fieldsGroups","refetchQueries","query","variables","contentType","options"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;AAkBA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAuB;AAAA,MAC3CC,iBAD2C,GACRD,KADQ,CAC3CC,iBAD2C;AAAA,MACxBC,WADwB,GACRF,KADQ,CACxBE,WADwB;AAAA,MAE3CC,IAF2C,GAElCD,WAFkC,CAE3CC,IAF2C;;AAInD,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAMK;AAAA,QALxBC,IAKwB,QALxBA,IAKwB;AAAA,QAJxBC,MAIwB,QAJxBA,MAIwB;AAAA,QAHxBC,WAGwB,QAHxBA,WAGwB;AAAA,QAFxBC,QAEwB,QAFxBA,QAEwB;AAAA,QADxBC,MACwB,QADxBA,MACwB;AACxB,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEA,MAAM,GAAGZ,SAAS,CAACa,UAAb,GAA0Bb,SAAS,CAACc,SADtD;AAEE,MAAA,SAAS,EAAEL,MAFb;AAGE,MAAA,QAAQ,EAAEE,QAHZ;AAIE,MAAA,cAAc,EAAEI,iBAAiB,CAACV,WAAD,CAJnC;AAKE,MAAA,WAAW,EAAEK,WALf;AAME,MAAA,IAAI,EAAC,QANP;AAOE,MAAA,SAAS,EAAE,KAPb;AAQE,MAAA,IAAI,EAAC,cARP;AASE,MAAA,cAAc,6BACZE,MAAM,GAAG,SAAH,GAAe,OADT,gBAERJ,IAFQ,CAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAeD,GAtBD;;AAwBA,MAAMQ,YAAY,qBACbb,KADa;AAEhBG,IAAAA,IAAI,EAAJA,IAFgB;AAGhBC,IAAAA,YAAY,EAAZA,YAHgB;AAIhBU,IAAAA,MAAM,EAAEb,iBAAiB,CAACc,YAJV;AAKhBC,IAAAA,cAAc,EAAEJ,iBAAiB,CAACV,WAAD;AALjB,IAAlB;;AAQA,SAAO,oBAAC,YAAD,oBAAkBW,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArCD;;AAuCA,IAAMD,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAV,WAAW,EAAI;AACvC,SAAO,CACL;AACEe,IAAAA,KAAK,EAAE3B,GAAG,CAACQ,OAAO,CAACiB,YAAT,CADZ;AAEEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,WAAW,EAAEjB,WAAW,CAACC;AAA3B;AAFb,GADK,CAAP;AAMD,CAPD;;AASA,eAAeV,SAAS,CACtBF,OAAO,CACLI,OAAO,CACLL,GAAG,CAACQ,OAAO,CAACiB,YAAT,CADE,EAEL;AACEV,EAAAA,IAAI,EAAE,mBADR;AAEEe,EAAAA,OAAO,EAAE;AAAA,QAAGlB,WAAH,SAAGA,WAAH;AAAA,WAAsB;AAC7BgB,MAAAA,SAAS,EAAE;AACTC,QAAAA,WAAW,EAAEjB,WAAW,CAACC;AADhB;AADkB,KAAtB;AAAA;AAFX,CAFK,CADF,CAAP,CAYEJ,qBAZF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport PropertyForm from '../components/PropertyForm';\nimport { mutations, queries } from '../graphql';\nimport {\n  FieldsAddMutationResponse,\n  FieldsEditMutationResponse,\n  FieldsGroupsQueryResponse\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n  closeModal: () => void;\n};\n\ntype FinalProps = {\n  fieldsGroupsQuery: FieldsGroupsQueryResponse;\n} & Props &\n  FieldsAddMutationResponse &\n  FieldsEditMutationResponse;\n\nconst PropertyFormContainer = (props: FinalProps) => {\n  const { fieldsGroupsQuery, queryParams } = props;\n  const { type } = queryParams;\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={object ? mutations.fieldsEdit : mutations.fieldsAdd}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries(queryParams)}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        uppercase={false}\n        icon=\"check-circle\"\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    type,\n    renderButton,\n    groups: fieldsGroupsQuery.fieldsGroups,\n    refetchQueries: getRefetchQueries(queryParams)\n  };\n\n  return <PropertyForm {...updatedProps} />;\n};\n\nconst getRefetchQueries = queryParams => {\n  return [\n    {\n      query: gql(queries.fieldsGroups),\n      variables: { contentType: queryParams.type }\n    }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, FieldsGroupsQueryResponse, { contentType: string }>(\n      gql(queries.fieldsGroups),\n      {\n        name: 'fieldsGroupsQuery',\n        options: ({ queryParams }) => ({\n          variables: {\n            contentType: queryParams.type\n          }\n        })\n      }\n    )\n  )(PropertyFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}