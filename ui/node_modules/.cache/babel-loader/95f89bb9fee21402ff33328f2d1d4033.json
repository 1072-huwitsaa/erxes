{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/FunnelGroup.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport FunnelGroup from '../components/funnelImpact/FunnelGroup';\nimport { queries } from '../graphql';\nimport { getFilterParams } from '../utils';\n\nvar FunnelGroupContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FunnelGroupContainer, _React$Component);\n\n  function FunnelGroupContainer() {\n    _classCallCheck(this, FunnelGroupContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FunnelGroupContainer).apply(this, arguments));\n  }\n\n  _createClass(FunnelGroupContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          growthHacksQuery = _this$props.growthHacksQuery,\n          growthHacksTotalCountQuery = _this$props.growthHacksTotalCountQuery;\n      var growthHacks = growthHacksQuery ? growthHacksQuery.growthHacks || [] : [];\n\n      var props = _objectSpread({}, this.props, {\n        growthHacks: growthHacks,\n        totalCount: growthHacksTotalCountQuery.growthHacksTotalCount || 0\n      });\n\n      return React.createElement(FunnelGroup, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FunnelGroupContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.growthHacks), {\n  name: 'growthHacksQuery',\n  skip: function skip(_ref) {\n    var isOpen = _ref.isOpen;\n    return !isOpen;\n  },\n  options: function options(_ref2) {\n    var _ref2$queryParams = _ref2.queryParams,\n        queryParams = _ref2$queryParams === void 0 ? {} : _ref2$queryParams,\n        hackStage = _ref2.hackStage;\n    return {\n      variables: _objectSpread({}, getFilterParams(queryParams), {\n        hackStage: hackStage,\n        sortField: queryParams.sortField,\n        sortDirection: parseInt(queryParams.sortDirection, 10)\n      })\n    };\n  }\n}), graphql(gql(queries.growthHacksTotalCount), {\n  name: 'growthHacksTotalCountQuery',\n  options: function options(_ref3) {\n    var _ref3$queryParams = _ref3.queryParams,\n        queryParams = _ref3$queryParams === void 0 ? {} : _ref3$queryParams,\n        hackStage = _ref3.hackStage;\n    return {\n      variables: _objectSpread({}, getFilterParams(queryParams), {\n        hackStage: hackStage\n      })\n    };\n  }\n}))(FunnelGroupContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/FunnelGroup.tsx"],"names":["gql","compose","withProps","React","graphql","FunnelGroup","queries","getFilterParams","FunnelGroupContainer","props","growthHacksQuery","growthHacksTotalCountQuery","growthHacks","totalCount","growthHacksTotalCount","Component","name","skip","isOpen","options","queryParams","hackStage","variables","sortField","sortDirection","parseInt"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAMA,SAASC,eAAT,QAAgC,UAAhC;;IAcMC,oB;;;;;;;;;;;;;6BACK;AAAA,wBACkD,KAAKC,KADvD;AAAA,UACCC,gBADD,eACCA,gBADD;AAAA,UACmBC,0BADnB,eACmBA,0BADnB;AAGP,UAAMC,WAA0B,GAAGF,gBAAgB,GAC/CA,gBAAgB,CAACE,WAAjB,IAAgC,EADe,GAE/C,EAFJ;;AAIA,UAAMH,KAAK,qBACN,KAAKA,KADC;AAETG,QAAAA,WAAW,EAAXA,WAFS;AAGTC,QAAAA,UAAU,EAAEF,0BAA0B,CAACG,qBAA3B,IAAoD;AAHvD,QAAX;;AAMA,aAAO,oBAAC,WAAD,oBAAiBL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAfgCN,KAAK,CAACY,S;;AAkBzC,eAAeb,SAAS,CACtBD,OAAO,CACLG,OAAO,CAAQJ,GAAG,CAACM,OAAO,CAACM,WAAT,CAAX,EAAkC;AACvCI,EAAAA,IAAI,EAAE,kBADiC;AAEvCC,EAAAA,IAAI,EAAE;AAAA,QAAGC,MAAH,QAAGA,MAAH;AAAA,WAAgB,CAACA,MAAjB;AAAA,GAFiC;AAGvCC,EAAAA,OAAO,EAAE;AAAA,kCAAGC,WAAH;AAAA,QAAGA,WAAH,kCAAiB,EAAjB;AAAA,QAAqBC,SAArB,SAAqBA,SAArB;AAAA,WAAsC;AAC7CC,MAAAA,SAAS,oBACJf,eAAe,CAACa,WAAD,CADX;AAEPC,QAAAA,SAAS,EAATA,SAFO;AAGPE,QAAAA,SAAS,EAAEH,WAAW,CAACG,SAHhB;AAIPC,QAAAA,aAAa,EAAEC,QAAQ,CAACL,WAAW,CAACI,aAAb,EAA4B,EAA5B;AAJhB;AADoC,KAAtC;AAAA;AAH8B,CAAlC,CADF,EAaLpB,OAAO,CAAQJ,GAAG,CAACM,OAAO,CAACQ,qBAAT,CAAX,EAA4C;AACjDE,EAAAA,IAAI,EAAE,4BAD2C;AAEjDG,EAAAA,OAAO,EAAE;AAAA,kCAAGC,WAAH;AAAA,QAAGA,WAAH,kCAAiB,EAAjB;AAAA,QAAqBC,SAArB,SAAqBA,SAArB;AAAA,WAAsC;AAC7CC,MAAAA,SAAS,oBACJf,eAAe,CAACa,WAAD,CADX;AAEPC,QAAAA,SAAS,EAATA;AAFO;AADoC,KAAtC;AAAA;AAFwC,CAA5C,CAbF,CAAP,CAsBEb,oBAtBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport FunnelGroup from '../components/funnelImpact/FunnelGroup';\nimport { queries } from '../graphql';\nimport {\n  GrowthHacksCountQueryResponse,\n  GrowthHacksQueryResponse,\n  IGrowthHack\n} from '../types';\nimport { getFilterParams } from '../utils';\n\ntype Props = {\n  queryParams: any;\n  isOpen: boolean;\n  hackStage: string;\n  toggle(hackStage: string, isOpen: boolean): void;\n};\n\ntype FinalProps = {\n  growthHacksQuery?: GrowthHacksQueryResponse;\n  growthHacksTotalCountQuery: GrowthHacksCountQueryResponse;\n} & Props;\n\nclass FunnelGroupContainer extends React.Component<FinalProps> {\n  render() {\n    const { growthHacksQuery, growthHacksTotalCountQuery } = this.props;\n\n    const growthHacks: IGrowthHack[] = growthHacksQuery\n      ? growthHacksQuery.growthHacks || []\n      : [];\n\n    const props = {\n      ...this.props,\n      growthHacks,\n      totalCount: growthHacksTotalCountQuery.growthHacksTotalCount || 0\n    };\n\n    return <FunnelGroup {...props} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props>(gql(queries.growthHacks), {\n      name: 'growthHacksQuery',\n      skip: ({ isOpen }) => !isOpen,\n      options: ({ queryParams = {}, hackStage }) => ({\n        variables: {\n          ...getFilterParams(queryParams),\n          hackStage,\n          sortField: queryParams.sortField,\n          sortDirection: parseInt(queryParams.sortDirection, 10)\n        }\n      })\n    }),\n    graphql<Props>(gql(queries.growthHacksTotalCount), {\n      name: 'growthHacksTotalCountQuery',\n      options: ({ queryParams = {}, hackStage }) => ({\n        variables: {\n          ...getFilterParams(queryParams),\n          hackStage\n        }\n      })\n    })\n  )(FunnelGroupContainer)\n);\n"]},"metadata":{},"sourceType":"module"}