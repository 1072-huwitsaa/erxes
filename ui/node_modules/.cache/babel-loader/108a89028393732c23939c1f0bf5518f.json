{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/components/SegmentsForm.tsx\";\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Title } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport Wrapper from 'modules/layout/components/Wrapper';\nimport { FlexContent } from 'modules/layout/styles';\nimport React from 'react';\nimport Form from './common/Form';\nimport { ResultCount, SegmentResult } from './styles';\n\nvar SegmentsForm = function SegmentsForm(props) {\n  var renderSidebar = function renderSidebar() {\n    var count = props.count,\n        counterLoading = props.counterLoading;\n    return React.createElement(Sidebar, {\n      full: true,\n      wide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(FlexContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(SegmentResult, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(ResultCount, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      icon: \"users-alt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), ' ', counterLoading ? React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, count)), __('User(s) will receive this message'))));\n  };\n\n  var contentType = props.contentType,\n      fields = props.fields,\n      renderButton = props.renderButton,\n      segment = props.segment,\n      events = props.events,\n      headSegments = props.headSegments,\n      previewCount = props.previewCount;\n  var title = props.segment ? __(\"Editing \".concat(contentType, \" segment\")) : __(\"Creating \".concat(contentType, \" segment\"));\n  var pageTitle = React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, title);\n  var breadcrumb = [{\n    title: __('Segments'),\n    link: \"/segments/\".concat(contentType)\n  }, {\n    title: title\n  }];\n  return React.createElement(Wrapper, {\n    header: React.createElement(Wrapper.Header, {\n      title: title,\n      breadcrumb: breadcrumb,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }),\n    actionBar: React.createElement(Wrapper.ActionBar, {\n      left: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }),\n    content: React.createElement(Form, {\n      contentType: contentType,\n      fields: fields,\n      events: events,\n      renderButton: renderButton,\n      segment: segment,\n      headSegments: headSegments,\n      previewCount: previewCount,\n      isForm: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }),\n    rightSidebar: renderSidebar(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n};\n\nexport default SegmentsForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/components/SegmentsForm.tsx"],"names":["Icon","Spinner","Title","__","Sidebar","Wrapper","FlexContent","React","Form","ResultCount","SegmentResult","SegmentsForm","props","renderSidebar","count","counterLoading","contentType","fields","renderButton","segment","events","headSegments","previewCount","title","pageTitle","breadcrumb","link"],"mappings":"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","sourcesContent":["import Icon from 'erxes-common-ui/lib/components/icon';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Title } from 'modules/common/styles/main';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport Wrapper from 'modules/layout/components/Wrapper';\nimport { FlexContent } from 'modules/layout/styles';\nimport React from 'react';\nimport { IEvent, ISegment, ISegmentCondition } from '../types';\nimport Form from './common/Form';\nimport { ResultCount, SegmentResult } from './styles';\n\ntype Props = {\n  contentType: string;\n  fields: any[];\n  events: IEvent[];\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  segment: ISegment;\n  headSegments: ISegment[];\n  count: number;\n  previewCount: (conditions: ISegmentCondition[]) => void;\n  counterLoading: boolean;\n};\n\nconst SegmentsForm = (props: Props) => {\n  const renderSidebar = () => {\n    const { count, counterLoading } = props;\n\n    return (\n      <Sidebar full={true} wide={true}>\n        <FlexContent>\n          <SegmentResult>\n            <ResultCount>\n              <Icon icon=\"users-alt\" />{' '}\n              {counterLoading ? (\n                <Spinner objective={true} />\n              ) : (\n                <span>{count}</span>\n              )}\n            </ResultCount>\n            {__('User(s) will receive this message')}\n          </SegmentResult>\n        </FlexContent>\n      </Sidebar>\n    );\n  };\n\n  const {\n    contentType,\n    fields,\n    renderButton,\n    segment,\n    events,\n    headSegments,\n    previewCount\n  } = props;\n\n  const title = props.segment\n    ? __(`Editing ${contentType} segment`)\n    : __(`Creating ${contentType} segment`);\n\n  const pageTitle = <Title>{title}</Title>;\n  const breadcrumb = [\n    { title: __('Segments'), link: `/segments/${contentType}` },\n    { title }\n  ];\n\n  return (\n    <Wrapper\n      header={<Wrapper.Header title={title} breadcrumb={breadcrumb} />}\n      actionBar={<Wrapper.ActionBar left={pageTitle} />}\n      content={\n        <Form\n          contentType={contentType}\n          fields={fields}\n          events={events}\n          renderButton={renderButton}\n          segment={segment}\n          headSegments={headSegments}\n          previewCount={previewCount}\n          isForm={true}\n        />\n      }\n      rightSidebar={renderSidebar()}\n    />\n  );\n};\n\nexport default SegmentsForm;\n"]},"metadata":{},"sourceType":"module"}