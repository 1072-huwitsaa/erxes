{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/label/LabelChooser.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport LabelChooser from '../../components/label/LabelChooser';\nimport { mutations, queries } from '../../graphql';\n\nvar LabelChooserContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LabelChooserContainer, _React$Component);\n\n  function LabelChooserContainer(props) {\n    var _this;\n\n    _classCallCheck(this, LabelChooserContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LabelChooserContainer).call(this, props));\n\n    _this.toggleConfirm = function (callback) {\n      var isConfirmVisible = _this.state.isConfirmVisible;\n\n      _this.setState({\n        isConfirmVisible: !isConfirmVisible\n      }, callback);\n    };\n\n    _this.state = {\n      isConfirmVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(LabelChooserContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          pipelineLabelsQuery = _this$props.pipelineLabelsQuery,\n          pipelineLabelMutation = _this$props.pipelineLabelMutation,\n          item = _this$props.item,\n          onSelect = _this$props.onSelect;\n\n      if (pipelineLabelsQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n      }\n\n      var pipelineId = item.pipeline._id;\n      var labels = pipelineLabelsQuery.pipelineLabels || [];\n\n      var doLabel = function doLabel(selectedLabelIds) {\n        var variables = {\n          pipelineId: pipelineId,\n          targetId: item._id,\n          labelIds: selectedLabelIds\n        };\n        pipelineLabelMutation({\n          variables: variables\n        }).then(function () {\n          if (onSelect) {\n            onSelect(labels.filter(function (label) {\n              return selectedLabelIds.includes(label._id || '');\n            }));\n          }\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = {\n        pipelineId: item.pipeline._id,\n        selectedLabelIds: item.labelIds || [],\n        labels: labels,\n        doLabel: doLabel,\n        isConfirmVisible: this.state.isConfirmVisible,\n        toggleConfirm: this.toggleConfirm\n      };\n      return React.createElement(LabelChooser, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LabelChooserContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.pipelineLabelsLabel), {\n  name: 'pipelineLabelMutation'\n}), graphql(gql(queries.pipelineLabels), {\n  name: 'pipelineLabelsQuery',\n  options: function options(_ref) {\n    var item = _ref.item;\n    return {\n      variables: {\n        pipelineId: item.pipeline._id\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(LabelChooserContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/label/LabelChooser.tsx"],"names":["gql","compose","Spinner","Alert","withProps","React","graphql","LabelChooser","mutations","queries","LabelChooserContainer","props","toggleConfirm","callback","isConfirmVisible","state","setState","pipelineLabelsQuery","pipelineLabelMutation","item","onSelect","loading","pipelineId","pipeline","_id","labels","pipelineLabels","doLabel","selectedLabelIds","variables","targetId","labelIds","then","filter","label","includes","catch","error","message","updatedProps","Component","pipelineLabelsLabel","name","options","fetchPolicy"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport {\n  IItem,\n  IPipelineLabel,\n  PipelineLabelsQueryResponse\n} from 'modules/boards/types';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport LabelChooser from '../../components/label/LabelChooser';\nimport { mutations, queries } from '../../graphql';\nimport {\n  PipelineLabelMutationResponse,\n  PipelineLabelMutationVariables\n} from '../../types';\n\ntype Props = {\n  item: IItem;\n  onSelect?: (labels: IPipelineLabel[]) => void;\n};\n\ntype FinalProps = {\n  pipelineLabelsQuery: PipelineLabelsQueryResponse;\n} & Props &\n  PipelineLabelMutationResponse;\n\nclass LabelChooserContainer extends React.Component<\n  FinalProps,\n  { isConfirmVisible: boolean }\n> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = {\n      isConfirmVisible: false\n    };\n  }\n\n  toggleConfirm = (callback?: () => void) => {\n    const { isConfirmVisible } = this.state;\n\n    this.setState({ isConfirmVisible: !isConfirmVisible }, callback);\n  };\n\n  render() {\n    const {\n      pipelineLabelsQuery,\n      pipelineLabelMutation,\n      item,\n      onSelect\n    } = this.props;\n\n    if (pipelineLabelsQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    const pipelineId = item.pipeline._id;\n    const labels = pipelineLabelsQuery.pipelineLabels || [];\n\n    const doLabel = (selectedLabelIds: string[]) => {\n      const variables = {\n        pipelineId,\n        targetId: item._id,\n        labelIds: selectedLabelIds\n      };\n\n      pipelineLabelMutation({ variables })\n        .then(() => {\n          if (onSelect) {\n            onSelect(\n              labels.filter(label => selectedLabelIds.includes(label._id || ''))\n            );\n          }\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      pipelineId: item.pipeline._id,\n      selectedLabelIds: item.labelIds || [],\n      labels,\n      doLabel,\n      isConfirmVisible: this.state.isConfirmVisible,\n      toggleConfirm: this.toggleConfirm\n    };\n\n    return <LabelChooser {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      PipelineLabelMutationResponse,\n      PipelineLabelMutationVariables\n    >(gql(mutations.pipelineLabelsLabel), {\n      name: 'pipelineLabelMutation'\n    }),\n    graphql<Props, PipelineLabelsQueryResponse, { pipelineId: string }>(\n      gql(queries.pipelineLabels),\n      {\n        name: 'pipelineLabelsQuery',\n        options: ({ item }) => ({\n          variables: {\n            pipelineId: item.pipeline._id\n          },\n          fetchPolicy: 'network-only'\n        })\n      }\n    )\n  )(LabelChooserContainer)\n);\n"]},"metadata":{},"sourceType":"module"}