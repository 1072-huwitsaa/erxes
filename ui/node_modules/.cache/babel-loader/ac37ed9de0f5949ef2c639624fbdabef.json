{"ast":null,"code":"/*\n* Underscore.string\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n* Underscore.string is freely distributable under the terms of the MIT license.\n* Documentation: https://github.com/epeli/underscore.string\n* Some code is borrowed from MooTools and Alexandru Marasteanu.\n* Version '3.3.4'\n* @preserve\n*/\n'use strict';\n\nfunction s(value) {\n  /* jshint validthis: true */\n  if (!(this instanceof s)) return new s(value);\n  this._wrapped = value;\n}\n\ns.VERSION = '3.3.4';\ns.isBlank = require('./isBlank');\ns.stripTags = require('./stripTags');\ns.capitalize = require('./capitalize');\ns.decapitalize = require('./decapitalize');\ns.chop = require('./chop');\ns.trim = require('./trim');\ns.clean = require('./clean');\ns.cleanDiacritics = require('./cleanDiacritics');\ns.count = require('./count');\ns.chars = require('./chars');\ns.swapCase = require('./swapCase');\ns.escapeHTML = require('./escapeHTML');\ns.unescapeHTML = require('./unescapeHTML');\ns.splice = require('./splice');\ns.insert = require('./insert');\ns.replaceAll = require('./replaceAll');\ns.include = require('./include');\ns.join = require('./join');\ns.lines = require('./lines');\ns.dedent = require('./dedent');\ns.reverse = require('./reverse');\ns.startsWith = require('./startsWith');\ns.endsWith = require('./endsWith');\ns.pred = require('./pred');\ns.succ = require('./succ');\ns.titleize = require('./titleize');\ns.camelize = require('./camelize');\ns.underscored = require('./underscored');\ns.dasherize = require('./dasherize');\ns.classify = require('./classify');\ns.humanize = require('./humanize');\ns.ltrim = require('./ltrim');\ns.rtrim = require('./rtrim');\ns.truncate = require('./truncate');\ns.prune = require('./prune');\ns.words = require('./words');\ns.pad = require('./pad');\ns.lpad = require('./lpad');\ns.rpad = require('./rpad');\ns.lrpad = require('./lrpad');\ns.sprintf = require('./sprintf');\ns.vsprintf = require('./vsprintf');\ns.toNumber = require('./toNumber');\ns.numberFormat = require('./numberFormat');\ns.strRight = require('./strRight');\ns.strRightBack = require('./strRightBack');\ns.strLeft = require('./strLeft');\ns.strLeftBack = require('./strLeftBack');\ns.toSentence = require('./toSentence');\ns.toSentenceSerial = require('./toSentenceSerial');\ns.slugify = require('./slugify');\ns.surround = require('./surround');\ns.quote = require('./quote');\ns.unquote = require('./unquote');\ns.repeat = require('./repeat');\ns.naturalCmp = require('./naturalCmp');\ns.levenshtein = require('./levenshtein');\ns.toBoolean = require('./toBoolean');\ns.exports = require('./exports');\ns.escapeRegExp = require('./helper/escapeRegExp');\ns.wrap = require('./wrap');\ns.map = require('./map'); // Aliases\n\ns.strip = s.trim;\ns.lstrip = s.ltrim;\ns.rstrip = s.rtrim;\ns.center = s.lrpad;\ns.rjust = s.lpad;\ns.ljust = s.rpad;\ns.contains = s.include;\ns.q = s.quote;\ns.toBool = s.toBoolean;\ns.camelcase = s.camelize;\ns.mapChars = s.map; // Implement chaining\n\ns.prototype = {\n  value: function value() {\n    return this._wrapped;\n  }\n};\n\nfunction fn2method(key, fn) {\n  if (typeof fn !== 'function') return;\n\n  s.prototype[key] = function () {\n    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));\n    var res = fn.apply(null, args); // if the result is non-string stop the chain and return the value\n\n    return typeof res === 'string' ? new s(res) : res;\n  };\n} // Copy functions to instance methods for chaining\n\n\nfor (var key in s) {\n  fn2method(key, s[key]);\n}\n\nfn2method('tap', function tap(string, fn) {\n  return fn(string);\n});\n\nfunction prototype2method(methodName) {\n  fn2method(methodName, function (context) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return String.prototype[methodName].apply(context, args);\n  });\n}\n\nvar prototypeMethods = ['toUpperCase', 'toLowerCase', 'split', 'replace', 'slice', 'substring', 'substr', 'concat'];\n\nfor (var method in prototypeMethods) {\n  prototype2method(prototypeMethods[method]);\n}\n\nmodule.exports = s;","map":null,"metadata":{},"sourceType":"script"}