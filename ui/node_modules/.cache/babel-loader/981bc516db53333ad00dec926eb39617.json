{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport gql from 'graphql-tag';\nimport juice from 'juice';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport sanitizeHtml from 'sanitize-html';\nimport { queries } from '../graphql';\nexport var cleanHtml = function cleanHtml(content) {\n  // all style inlined\n  var inlineStyledContent = juice(content);\n  return sanitizeHtml(inlineStyledContent, {\n    allowedTags: false,\n    allowedAttributes: false,\n    transformTags: {\n      html: 'div',\n      body: 'div'\n    },\n    // remove some unusual tags\n    exclusiveFilter: function exclusiveFilter(n) {\n      return n.tag === 'meta' || n.tag === 'head' || n.tag === 'style' || n.tag === 'base' || n.tag === 'script';\n    }\n  });\n};\nexport var integrationsListParams = function integrationsListParams(queryParams) {\n  return _objectSpread({}, generatePaginationParams(queryParams), {\n    searchValue: queryParams.searchValue,\n    kind: queryParams.kind\n  });\n};\nexport var getRefetchQueries = function getRefetchQueries(kind) {\n  return [{\n    query: gql(queries.integrations),\n    variables: _objectSpread({}, integrationsListParams({}), {\n      kind: kind\n    })\n  }, {\n    query: gql(queries.integrationTotalCount),\n    variables: _objectSpread({}, integrationsListParams({}), {\n      kind: kind\n    })\n  }];\n};\nexport var formatStr = function formatStr(emailString) {\n  return emailString ? emailString.split(/[ ,]+/) : [];\n};\nexport var cleanIntegrationKind = function cleanIntegrationKind(name) {\n  if (name.includes('nylas')) {\n    name = name.replace('nylas-', '');\n  }\n\n  if (name.includes('smooch')) {\n    name = name.replace('smooch-', '');\n  }\n\n  if (name === 'lead') {\n    name = 'popups';\n  }\n\n  return name;\n};\nexport var formatObj = function formatObj(emailArray) {\n  if (!emailArray || emailArray.length === 0) {\n    return;\n  }\n\n  return emailArray ? emailArray.map(function (s) {\n    return s.email;\n  }).join(', ') : '';\n};\nexport var generateForwardMailContent = function generateForwardMailContent(params) {\n  var fromEmail = params.fromEmail,\n      date = params.date,\n      to = params.to,\n      cc = params.cc,\n      bcc = params.bcc,\n      subject = params.subject,\n      body = params.body,\n      emailSignature = params.emailSignature;\n  var generatedContent = \"\\n    <p>&nbsp;</p>\\n    ---------- Forwarded message ---------\\n    <br/>\\n    <b>From</b>: \".concat(fromEmail, \"\\n    <br/>\\n    <b>Sent</b>: \").concat(date, \"\\n    <br/>\\n    <b>To</b>: \").concat(formatObj(to), \"\\n    <br/>\\n    \").concat(cc.length > 0 ? \"\\n      <b>Cc</b>: \".concat(formatObj(cc), \"\\n      <br/>\\n      \") : '', \"\\n    \").concat(bcc.length > 0 ? \"\\n      <b>Bcc</b>: \".concat(formatObj(bcc), \"\\n      <br/>\\n      \") : '', \"\\n    <b>Subject</b>: \").concat(subject, \"\\n    \").concat(body, \"\\n    <p>&nbsp;</p>\\n    ---\\n    <br/>\\n     \").concat(emailSignature, \"\\n  \");\n  return cleanHtml(generatedContent);\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/utils.tsx"],"names":["gql","juice","generatePaginationParams","sanitizeHtml","queries","cleanHtml","content","inlineStyledContent","allowedTags","allowedAttributes","transformTags","html","body","exclusiveFilter","n","tag","integrationsListParams","queryParams","searchValue","kind","getRefetchQueries","query","integrations","variables","integrationTotalCount","formatStr","emailString","split","cleanIntegrationKind","name","includes","replace","formatObj","emailArray","length","map","s","email","join","generateForwardMailContent","params","fromEmail","date","to","cc","bcc","subject","emailSignature","generatedContent"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport juice from 'juice';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport { IEmail } from 'modules/inbox/types';\nimport sanitizeHtml from 'sanitize-html';\nimport { queries } from '../graphql';\n\nexport const cleanHtml = (content: string) => {\n  // all style inlined\n  const inlineStyledContent = juice(content);\n\n  return sanitizeHtml(inlineStyledContent, {\n    allowedTags: false,\n    allowedAttributes: false,\n    transformTags: {\n      html: 'div',\n      body: 'div'\n    },\n\n    // remove some unusual tags\n    exclusiveFilter: n => {\n      return (\n        n.tag === 'meta' ||\n        n.tag === 'head' ||\n        n.tag === 'style' ||\n        n.tag === 'base' ||\n        n.tag === 'script'\n      );\n    }\n  });\n};\n\nexport const integrationsListParams = queryParams => ({\n  ...generatePaginationParams(queryParams),\n  searchValue: queryParams.searchValue,\n  kind: queryParams.kind\n});\n\nexport const getRefetchQueries = (kind: string) => {\n  return [\n    {\n      query: gql(queries.integrations),\n      variables: {\n        ...integrationsListParams({}),\n        kind\n      }\n    },\n    {\n      query: gql(queries.integrationTotalCount),\n      variables: {\n        ...integrationsListParams({}),\n        kind\n      }\n    }\n  ];\n};\n\nexport const formatStr = (emailString?: string) => {\n  return emailString ? emailString.split(/[ ,]+/) : [];\n};\n\nexport const cleanIntegrationKind = (name: string) => {\n  if (name.includes('nylas')) {\n    name = name.replace('nylas-', '');\n  }\n  if (name.includes('smooch')) {\n    name = name.replace('smooch-', '');\n  }\n  if (name === 'lead') {\n    name = 'popups';\n  }\n  return name;\n};\n\nexport const formatObj = (emailArray: IEmail[]) => {\n  if (!emailArray || emailArray.length === 0) {\n    return;\n  }\n\n  return emailArray ? emailArray.map(s => s.email).join(', ') : '';\n};\n\ntype Params = {\n  fromEmail: string;\n  date: string;\n  to: IEmail[];\n  cc: IEmail[];\n  bcc: IEmail[];\n  subject: string;\n  body: string;\n  emailSignature: string;\n};\n\nexport const generateForwardMailContent = (params: Params) => {\n  const {\n    fromEmail,\n    date,\n    to,\n    cc,\n    bcc,\n    subject,\n    body,\n    emailSignature\n  } = params;\n\n  const generatedContent = `\n    <p>&nbsp;</p>\n    ---------- Forwarded message ---------\n    <br/>\n    <b>From</b>: ${fromEmail}\n    <br/>\n    <b>Sent</b>: ${date}\n    <br/>\n    <b>To</b>: ${formatObj(to)}\n    <br/>\n    ${\n      cc.length > 0\n        ? `\n      <b>Cc</b>: ${formatObj(cc)}\n      <br/>\n      `\n        : ''\n    }\n    ${\n      bcc.length > 0\n        ? `\n      <b>Bcc</b>: ${formatObj(bcc)}\n      <br/>\n      `\n        : ''\n    }\n    <b>Subject</b>: ${subject}\n    ${body}\n    <p>&nbsp;</p>\n    ---\n    <br/>\n     ${emailSignature}\n  `;\n\n  return cleanHtml(generatedContent);\n};\n"]},"metadata":{},"sourceType":"module"}