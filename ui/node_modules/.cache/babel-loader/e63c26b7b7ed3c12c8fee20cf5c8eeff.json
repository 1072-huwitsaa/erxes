{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/MessageListRow.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport MessageListRow from '../components/MessageListRow';\nimport { mutations, queries } from '../graphql';\nimport { crudMutationsOptions } from '../utils';\n\nvar MessageRowContainer = function MessageRowContainer(props) {\n  var history = props.history,\n      message = props.message,\n      removeMutation = props.removeMutation,\n      setPauseMutation = props.setPauseMutation,\n      setLiveMutation = props.setLiveMutation,\n      setLiveManualMutation = props.setLiveManualMutation,\n      isChecked = props.isChecked,\n      toggleBulk = props.toggleBulk;\n\n  var doMutation = function doMutation(mutation, msg) {\n    return mutation({\n      variables: {\n        _id: message._id\n      }\n    }).then(function () {\n      Alert.success(msg);\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var edit = function edit() {\n    history.push(\"/engage/messages/edit/\".concat(message._id));\n  };\n\n  var show = function show() {\n    history.push(\"/engage/messages/show/\".concat(message._id));\n  };\n\n  var remove = function remove() {\n    confirm().then(function () {\n      doMutation(removeMutation, \"You just deleted an engagement message.\").then(function () {\n        history.push('/engage');\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    });\n  };\n\n  var setLiveManual = function setLiveManual() {\n    return doMutation(setLiveManualMutation, 'Yay! Your engagement message is now live.');\n  };\n\n  var setLive = function setLive() {\n    return doMutation(setLiveMutation, 'Yay! Your engagement message is now live.');\n  };\n\n  var setPause = function setPause() {\n    return doMutation(setPauseMutation, 'Your engagement message is paused for now.');\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    edit: edit,\n    show: show,\n    remove: remove,\n    setLive: setLive,\n    setLiveManual: setLiveManual,\n    setPause: setPause,\n    isChecked: isChecked,\n    toggleBulk: toggleBulk\n  });\n\n  return React.createElement(MessageListRow, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n};\n\nvar statusMutationsOptions = function statusMutationsOptions(_ref) {\n  var queryParams = _ref.queryParams,\n      message = _ref.message;\n  return {\n    refetchQueries: [{\n      query: gql(queries.statusCounts),\n      variables: {\n        kind: queryParams.kind || ''\n      }\n    }, {\n      query: gql(queries.engageMessageDetail),\n      variables: {\n        _id: message._id\n      }\n    }]\n  };\n};\n\nexport default withProps(compose(graphql(gql(mutations.messageRemove), {\n  name: 'removeMutation',\n  options: crudMutationsOptions\n}), graphql(gql(mutations.setPause), {\n  name: 'setPauseMutation',\n  options: statusMutationsOptions\n}), graphql(gql(mutations.setLive), {\n  name: 'setLiveMutation',\n  options: statusMutationsOptions\n}), graphql(gql(mutations.setLiveManual), {\n  name: 'setLiveManualMutation',\n  options: statusMutationsOptions\n}))(withRouter(MessageRowContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/MessageListRow.tsx"],"names":["gql","compose","Alert","confirm","withProps","React","graphql","withRouter","MessageListRow","mutations","queries","crudMutationsOptions","MessageRowContainer","props","history","message","removeMutation","setPauseMutation","setLiveMutation","setLiveManualMutation","isChecked","toggleBulk","doMutation","mutation","msg","variables","_id","then","success","catch","error","edit","push","show","remove","e","setLiveManual","setLive","setPause","updatedProps","statusMutationsOptions","queryParams","refetchQueries","query","statusCounts","kind","engageMessageDetail","messageRemove","name","options"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport MessageListRow from '../components/MessageListRow';\nimport { mutations, queries } from '../graphql';\nimport {\n  IEngageMessage,\n  MutationVariables,\n  RemoveMutationResponse,\n  SetLiveManualMutationResponse,\n  SetLiveMutationResponse,\n  SetPauseMutationResponse\n} from '../types';\nimport { crudMutationsOptions } from '../utils';\n\ntype Props = {\n  isChecked: boolean;\n  toggleBulk: (value: IEngageMessage, isChecked: boolean) => void;\n  message: IEngageMessage;\n  queryParams: any;\n};\n\ntype FinalProps = Props &\n  RemoveMutationResponse &\n  SetPauseMutationResponse &\n  SetLiveMutationResponse &\n  SetLiveManualMutationResponse &\n  IRouterProps;\n\nconst MessageRowContainer = (props: FinalProps) => {\n  const {\n    history,\n    message,\n    removeMutation,\n    setPauseMutation,\n    setLiveMutation,\n    setLiveManualMutation,\n    isChecked,\n    toggleBulk\n  } = props;\n\n  const doMutation = (mutation, msg: string) =>\n    mutation({\n      variables: { _id: message._id }\n    })\n      .then(() => {\n        Alert.success(msg);\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n\n  const edit = () => {\n    history.push(`/engage/messages/edit/${message._id}`);\n  };\n\n  const show = () => {\n    history.push(`/engage/messages/show/${message._id}`);\n  };\n\n  const remove = () => {\n    confirm().then(() => {\n      doMutation(removeMutation, `You just deleted an engagement message.`)\n        .then(() => {\n          history.push('/engage');\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    });\n  };\n\n  const setLiveManual = () =>\n    doMutation(\n      setLiveManualMutation,\n      'Yay! Your engagement message is now live.'\n    );\n  const setLive = () =>\n    doMutation(setLiveMutation, 'Yay! Your engagement message is now live.');\n  const setPause = () =>\n    doMutation(setPauseMutation, 'Your engagement message is paused for now.');\n\n  const updatedProps = {\n    ...props,\n    edit,\n    show,\n    remove,\n    setLive,\n    setLiveManual,\n    setPause,\n    isChecked,\n    toggleBulk\n  };\n\n  return <MessageListRow {...updatedProps} />;\n};\n\nconst statusMutationsOptions = ({ queryParams, message }) => {\n  return {\n    refetchQueries: [\n      {\n        query: gql(queries.statusCounts),\n        variables: {\n          kind: queryParams.kind || ''\n        }\n      },\n      {\n        query: gql(queries.engageMessageDetail),\n        variables: {\n          _id: message._id\n        }\n      }\n    ]\n  };\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, RemoveMutationResponse, MutationVariables>(\n      gql(mutations.messageRemove),\n      {\n        name: 'removeMutation',\n        options: crudMutationsOptions\n      }\n    ),\n    graphql<Props, SetPauseMutationResponse, MutationVariables>(\n      gql(mutations.setPause),\n      {\n        name: 'setPauseMutation',\n        options: statusMutationsOptions\n      }\n    ),\n    graphql<Props, SetLiveMutationResponse, MutationVariables>(\n      gql(mutations.setLive),\n      {\n        name: 'setLiveMutation',\n        options: statusMutationsOptions\n      }\n    ),\n    graphql<Props, SetLiveManualMutationResponse, MutationVariables>(\n      gql(mutations.setLiveManual),\n      {\n        name: 'setLiveManualMutation',\n        options: statusMutationsOptions\n      }\n    )\n  )(withRouter<FinalProps>(MessageRowContainer))\n);\n"]},"metadata":{},"sourceType":"module"}