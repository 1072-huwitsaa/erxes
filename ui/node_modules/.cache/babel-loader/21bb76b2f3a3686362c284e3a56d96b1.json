{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/ProductBoard.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ProductBoard from '../components/ProductBoard';\nimport { mutations } from '../graphql';\nimport { refetchSidebarConversationsOptions } from '../utils';\nimport { InboxManagementActionConsumer } from './Inbox';\n\nvar ResolverContainer = function ResolverContainer(props) {\n  var createProductBoardMutation = props.createProductBoardMutation,\n      conversation = props.conversation; // create product board note from conversation\n\n  var createBoard = function createBoard(notifyHandler) {\n    return function (conversationId) {\n      createProductBoardMutation({\n        variables: {\n          _id: conversationId\n        }\n      }).then(function () {\n        if (notifyHandler) {\n          notifyHandler();\n        }\n\n        if (conversation.productBoardLink !== '') {\n          Alert.info('Already created product board');\n        } else {\n          Alert.success('Created product board note');\n        }\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n  };\n\n  var updatedProps = _objectSpread({}, props);\n\n  return React.createElement(InboxManagementActionConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, function (_ref) {\n    var notifyConsumersOfManagementAction = _ref.notifyConsumersOfManagementAction;\n    return React.createElement(ProductBoard, Object.assign({}, updatedProps, {\n      createBoard: createBoard(notifyConsumersOfManagementAction),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default withProps(compose(graphql(gql(mutations.createProductBoardNote), {\n  name: 'createProductBoardMutation',\n  options: function options() {\n    return refetchSidebarConversationsOptions();\n  }\n}))(ResolverContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/ProductBoard.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","ProductBoard","mutations","refetchSidebarConversationsOptions","InboxManagementActionConsumer","ResolverContainer","props","createProductBoardMutation","conversation","createBoard","notifyHandler","conversationId","variables","_id","then","productBoardLink","info","success","catch","e","error","message","updatedProps","notifyConsumersOfManagementAction","createProductBoardNote","name","options"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAMA,SAASC,kCAAT,QAAmD,UAAnD;AACA,SAASC,6BAAT,QAA8C,SAA9C;;AAQA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAuB;AAAA,MACvCC,0BADuC,GACMD,KADN,CACvCC,0BADuC;AAAA,MACXC,YADW,GACMF,KADN,CACXE,YADW,EAG/C;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,aAAa;AAAA,WAAI,UAACC,cAAD,EAA4B;AAC/DJ,MAAAA,0BAA0B,CAAC;AAAEK,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEF;AAAP;AAAb,OAAD,CAA1B,CACGG,IADH,CACQ,YAAM;AACV,YAAIJ,aAAJ,EAAmB;AACjBA,UAAAA,aAAa;AACd;;AAED,YAAIF,YAAY,CAACO,gBAAb,KAAkC,EAAtC,EAA0C;AACxClB,UAAAA,KAAK,CAACmB,IAAN,CAAW,+BAAX;AACD,SAFD,MAEO;AACLnB,UAAAA,KAAK,CAACoB,OAAN,CAAc,4BAAd;AACD;AACF,OAXH,EAYGC,KAZH,CAYS,UAAAC,CAAC,EAAI;AACVtB,QAAAA,KAAK,CAACuB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,OAdH;AAeD,KAhBgC;AAAA,GAAjC;;AAkBA,MAAMC,YAAY,qBACbhB,KADa,CAAlB;;AAIA,SACE,oBAAC,6BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGiB,iCAAH,QAAGA,iCAAH;AAAA,WACC,oBAAC,YAAD,oBACMD,YADN;AAEE,MAAA,WAAW,EAAEb,WAAW,CAACc,iCAAD,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD;AAAA,GADH,CADF;AAUD,CApCD;;AAsCA,eAAezB,SAAS,CACtBF,OAAO,CACLI,OAAO,CAILL,GAAG,CAACO,SAAS,CAACsB,sBAAX,CAJE,EAIkC;AACvCC,EAAAA,IAAI,EAAE,4BADiC;AAEvCC,EAAAA,OAAO,EAAE;AAAA,WAAMvB,kCAAkC,EAAxC;AAAA;AAF8B,CAJlC,CADF,CAAP,CASEE,iBATF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ProductBoard from '../components/ProductBoard';\nimport { mutations } from '../graphql';\nimport {\n  CreateProductBoardMutationResponse,\n  CreateProductBoardMutationVariables,\n  IConversation\n} from '../types';\nimport { refetchSidebarConversationsOptions } from '../utils';\nimport { InboxManagementActionConsumer } from './Inbox';\n\ntype Props = {\n  conversation: IConversation;\n};\n\ntype FinalProps = Props & CreateProductBoardMutationResponse;\n\nconst ResolverContainer = (props: FinalProps) => {\n  const { createProductBoardMutation, conversation } = props;\n\n  // create product board note from conversation\n  const createBoard = notifyHandler => (conversationId: string) => {\n    createProductBoardMutation({ variables: { _id: conversationId } })\n      .then(() => {\n        if (notifyHandler) {\n          notifyHandler();\n        }\n\n        if (conversation.productBoardLink !== '') {\n          Alert.info('Already created product board');\n        } else {\n          Alert.success('Created product board note');\n        }\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props\n  };\n\n  return (\n    <InboxManagementActionConsumer>\n      {({ notifyConsumersOfManagementAction }) => (\n        <ProductBoard\n          {...updatedProps}\n          createBoard={createBoard(notifyConsumersOfManagementAction)}\n        />\n      )}\n    </InboxManagementActionConsumer>\n  );\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      CreateProductBoardMutationResponse,\n      CreateProductBoardMutationVariables\n    >(gql(mutations.createProductBoardNote), {\n      name: 'createProductBoardMutation',\n      options: () => refetchSidebarConversationsOptions()\n    })\n  )(ResolverContainer)\n);\n"]},"metadata":{},"sourceType":"module"}