{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/containers/ImportIndicator.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ImportIndicator from '../components/ImportIndicator';\nimport { mutations, queries } from '../graphql';\n\nvar ImportIndicatorContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ImportIndicatorContainer, _React$Component);\n\n  function ImportIndicatorContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ImportIndicatorContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImportIndicatorContainer).call(this, props));\n    _this.state = {\n      percentage: 0\n    };\n    return _this;\n  }\n\n  _createClass(ImportIndicatorContainer, [{\n    key: \"clearStorage\",\n    value: function clearStorage() {\n      // clear local storage\n      localStorage.setItem('erxes_import_data', '');\n      localStorage.setItem('erxes_import_data_type', '');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          importHistoryDetailQuery = _this$props.importHistoryDetailQuery,\n          importCancel = _this$props.importCancel,\n          closeLoadingBar = _this$props.closeLoadingBar,\n          isRemovingImport = _this$props.isRemovingImport;\n      var importHistory = importHistoryDetailQuery.importHistoryDetail || {};\n      var errors = this.state.errors;\n      var percentage = Math.trunc(importHistory.percentage) || this.state.percentage;\n\n      var cancelImport = function cancelImport(id) {\n        confirm().then(function () {\n          importCancel({\n            variables: {\n              _id: id\n            }\n          }).then(function () {\n            Alert.success('You canceled importing action.');\n            closeLoadingBar();\n          }).catch(function (e) {\n            Alert.error(e.message);\n            closeLoadingBar();\n          });\n        });\n      };\n\n      return React.createElement(ImportIndicator, Object.assign({}, this.props, {\n        percentage: percentage,\n        importHistory: importHistory,\n        cancel: cancelImport,\n        isRemovingImport: isRemovingImport,\n        errors: errors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ImportIndicatorContainer;\n}(React.Component);\n\nvar ImportIndicatorWithProps = withProps(compose(graphql(gql(queries.historyDetailForLoad), {\n  name: 'importHistoryDetailQuery',\n  options: function options(_ref) {\n    var id = _ref.id;\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        _id: id\n      },\n      pollInterval: 3000\n    };\n  }\n}), graphql(gql(mutations.importCancel), {\n  name: 'importCancel'\n}))(ImportIndicatorContainer));\n\nvar WithConsumer = function WithConsumer(props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, function (_ref2) {\n    var closeLoadingBar = _ref2.closeLoadingBar,\n        isRemovingImport = _ref2.isRemovingImport,\n        doneIndicatorAction = _ref2.doneIndicatorAction;\n    return React.createElement(ImportIndicatorWithProps, Object.assign({}, props, {\n      closeLoadingBar: closeLoadingBar,\n      isRemovingImport: isRemovingImport,\n      doneIndicatorAction: doneIndicatorAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default WithConsumer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/containers/ImportIndicator.tsx"],"names":["AppConsumer","gql","compose","Alert","confirm","withProps","React","graphql","ImportIndicator","mutations","queries","ImportIndicatorContainer","props","state","percentage","localStorage","setItem","importHistoryDetailQuery","importCancel","closeLoadingBar","isRemovingImport","importHistory","importHistoryDetail","errors","Math","trunc","cancelImport","id","then","variables","_id","success","catch","e","error","message","Component","ImportIndicatorWithProps","historyDetailForLoad","name","options","fetchPolicy","pollInterval","WithConsumer","doneIndicatorAction"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ImportIndicator from '../components/ImportIndicator';\nimport { mutations, queries } from '../graphql';\nimport {\n  CancelMutationResponse,\n  ImportHistoryDetailQueryResponse\n} from '../types';\n\ntype Props = {\n  id: string;\n  close: () => void;\n  importHistoryDetailQuery: ImportHistoryDetailQueryResponse;\n  closeLoadingBar: () => void;\n  doneIndicatorAction: () => void;\n  isRemovingImport: boolean;\n};\n\ntype State = {\n  percentage: number;\n  errors?: string[];\n};\n\nclass ImportIndicatorContainer extends React.Component<\n  Props & CancelMutationResponse,\n  State\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      percentage: 0\n    };\n  }\n\n  clearStorage() {\n    // clear local storage\n    localStorage.setItem('erxes_import_data', '');\n    localStorage.setItem('erxes_import_data_type', '');\n  }\n\n  render() {\n    const {\n      importHistoryDetailQuery,\n      importCancel,\n      closeLoadingBar,\n      isRemovingImport\n    } = this.props;\n\n    const importHistory = importHistoryDetailQuery.importHistoryDetail || {};\n    const errors = this.state.errors;\n    const percentage =\n      Math.trunc(importHistory.percentage) || this.state.percentage;\n\n    const cancelImport = id => {\n      confirm().then(() => {\n        importCancel({\n          variables: { _id: id }\n        })\n          .then(() => {\n            Alert.success('You canceled importing action.');\n            closeLoadingBar();\n          })\n          .catch(e => {\n            Alert.error(e.message);\n            closeLoadingBar();\n          });\n      });\n    };\n\n    return (\n      <ImportIndicator\n        {...this.props}\n        percentage={percentage}\n        importHistory={importHistory}\n        cancel={cancelImport}\n        isRemovingImport={isRemovingImport}\n        errors={errors}\n      />\n    );\n  }\n}\n\nconst ImportIndicatorWithProps = withProps<{ id: string; close?: () => void }>(\n  compose(\n    graphql<{ id: string }, ImportHistoryDetailQueryResponse, { _id: string }>(\n      gql(queries.historyDetailForLoad),\n      {\n        name: 'importHistoryDetailQuery',\n        options: ({ id }) => ({\n          fetchPolicy: 'network-only',\n          variables: {\n            _id: id\n          },\n          pollInterval: 3000\n        })\n      }\n    ),\n    graphql<Props, CancelMutationResponse, { _id: string }>(\n      gql(mutations.importCancel),\n      {\n        name: 'importCancel'\n      }\n    )\n  )(ImportIndicatorContainer)\n);\n\nconst WithConsumer = props => {\n  return (\n    <AppConsumer>\n      {({ closeLoadingBar, isRemovingImport, doneIndicatorAction }) => (\n        <ImportIndicatorWithProps\n          {...props}\n          closeLoadingBar={closeLoadingBar}\n          isRemovingImport={isRemovingImport}\n          doneIndicatorAction={doneIndicatorAction}\n        />\n      )}\n    </AppConsumer>\n  );\n};\n\nexport default WithConsumer;\n"]},"metadata":{},"sourceType":"module"}