{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/facebook/FacebookConversation.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport FacebookConversation from 'modules/inbox/components/conversationDetail/workarea/facebook/FacebookConversation';\nimport { queries, subscriptions } from 'modules/inbox/graphql';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar FacebookPostContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FacebookPostContainer, _React$Component);\n\n  function FacebookPostContainer(props) {\n    var _this;\n\n    _classCallCheck(this, FacebookPostContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FacebookPostContainer).call(this, props));\n    _this.subscription = void 0;\n\n    _this.fetchMoreComments = function (variables, isSubscriptions) {\n      var commentsQuery = _this.props.commentsQuery;\n      commentsQuery.fetchMore({\n        variables: variables,\n        updateQuery: function updateQuery(prev, _ref) {\n          var fetchMoreResult = _ref.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            return prev;\n          }\n\n          var prevComments = prev.converstationFacebookComments || [];\n          var prevCommentIds = prevComments.map(function (comment) {\n            return comment.commentId;\n          });\n          var fetchedComments = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = fetchMoreResult.converstationFacebookComments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var comment = _step.value;\n\n              if (!prevCommentIds.includes(comment.commentId)) {\n                fetchedComments.push(comment);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          if (isSubscriptions) {\n            return _objectSpread({}, prev, {\n              converstationFacebookComments: [].concat(_toConsumableArray(prevComments), fetchedComments)\n            });\n          }\n\n          return _objectSpread({}, prev, {\n            converstationFacebookComments: [].concat(fetchedComments, _toConsumableArray(prevComments))\n          });\n        }\n      });\n    };\n\n    _this.fetchFacebook = function (_ref2) {\n      var commentId = _ref2.commentId,\n          postId = _ref2.postId,\n          limit = _ref2.limit;\n      var variables = {};\n\n      if (commentId) {\n        variables.commentId = commentId;\n        variables.limit = 999;\n      }\n\n      if (postId) {\n        variables.postId = postId;\n      }\n\n      variables.limit = limit || 5;\n\n      _this.fetchMoreComments(variables);\n    };\n\n    _this.subscription = null;\n    return _this;\n  }\n\n  _createClass(FacebookPostContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var conversation = nextProps.conversation,\n          commentsQuery = nextProps.commentsQuery; // It is first time or subsequent conversation change\n\n      if (!this.subscription || conversation._id !== this.props.conversation._id) {\n        // Unsubscribe previous subscription ==========\n        if (this.subscription) {\n          this.subscription();\n        }\n\n        this.subscription = commentsQuery.subscribeToMore({\n          document: gql(subscriptions.conversationExternalIntegrationMessageInserted),\n          updateQuery: function updateQuery() {\n            var comments = commentsQuery.converstationFacebookComments || [];\n            var limit = comments.length + 10;\n\n            _this2.fetchMoreComments({\n              limit: limit\n            }, {\n              isSubscriptions: true\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          commentsQuery = _this$props.commentsQuery,\n          conversation = _this$props.conversation,\n          internalNotesQuery = _this$props.internalNotesQuery,\n          commentsCountQuery = _this$props.commentsCountQuery;\n\n      if (commentsQuery.loading || internalNotesQuery.loading || commentsCountQuery.loading) {\n        return null;\n      }\n\n      var post = conversation.facebookPost || {};\n      var comments = commentsQuery.converstationFacebookComments || [];\n      var commentCounts = commentsCountQuery.converstationFacebookCommentsCount || {};\n      var hasMore = commentCounts.commentCountWithoutReplies > comments.length;\n      var commentCount = commentCounts.commentCount;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        commentCount: commentCount,\n        post: post,\n        customer: conversation.customer || {},\n        comments: comments,\n        internalNotes: internalNotesQuery.conversationMessages,\n        hasMore: hasMore,\n        fetchFacebook: this.fetchFacebook\n      });\n\n      return React.createElement(FacebookConversation, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FacebookPostContainer;\n}(React.Component);\n\nvar WithQuery = withProps(compose(graphql(gql(queries.converstationFacebookComments), {\n  name: 'commentsQuery',\n  options: function options(_ref3) {\n    var conversation = _ref3.conversation,\n        isResolved = _ref3.isResolved;\n    return {\n      variables: {\n        postId: conversation._id,\n        isResolved: isResolved\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.converstationFacebookCommentsCount), {\n  name: 'commentsCountQuery',\n  options: function options(_ref4) {\n    var conversation = _ref4.conversation,\n        isResolved = _ref4.isResolved;\n    return {\n      variables: {\n        postId: conversation._id,\n        isResolved: isResolved\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.conversationMessages), {\n  name: 'internalNotesQuery',\n  options: function options(_ref5) {\n    var conversation = _ref5.conversation;\n    return {\n      variables: {\n        conversationId: conversation._id\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(FacebookPostContainer));\n\nvar WithConsumer = function WithConsumer(props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, function (_ref6) {\n    var currentUser = _ref6.currentUser;\n    return React.createElement(WithQuery, Object.assign({}, props, {\n      currentUser: currentUser || {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default WithConsumer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/facebook/FacebookConversation.tsx"],"names":["AppConsumer","gql","compose","withProps","FacebookConversation","queries","subscriptions","React","graphql","FacebookPostContainer","props","subscription","fetchMoreComments","variables","isSubscriptions","commentsQuery","fetchMore","updateQuery","prev","fetchMoreResult","prevComments","converstationFacebookComments","prevCommentIds","map","comment","commentId","fetchedComments","includes","push","fetchFacebook","postId","limit","nextProps","conversation","_id","subscribeToMore","document","conversationExternalIntegrationMessageInserted","comments","length","internalNotesQuery","commentsCountQuery","loading","post","facebookPost","commentCounts","converstationFacebookCommentsCount","hasMore","commentCountWithoutReplies","commentCount","updatedProps","customer","internalNotes","conversationMessages","Component","WithQuery","name","options","isResolved","fetchPolicy","conversationId","WithConsumer","currentUser"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { withProps } from 'modules/common/utils';\nimport FacebookConversation from 'modules/inbox/components/conversationDetail/workarea/facebook/FacebookConversation';\nimport { queries, subscriptions } from 'modules/inbox/graphql';\nimport {\n  FacebookCommentsCountQueryResponse,\n  FacebookCommentsQueryResponse,\n  IConversation,\n  IFacebookComment,\n  IFacebookPost,\n  MessagesQueryResponse\n} from 'modules/inbox/types';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  conversation: IConversation;\n  isResolved: boolean;\n  onToggleClick: () => void;\n  scrollBottom: () => void;\n};\n\ntype FinalProps = {\n  currentUser: IUser;\n  commentsQuery: FacebookCommentsQueryResponse;\n  commentsCountQuery: FacebookCommentsCountQueryResponse;\n  internalNotesQuery: MessagesQueryResponse;\n} & Props;\n\nclass FacebookPostContainer extends React.Component<FinalProps> {\n  private subscription;\n\n  constructor(props) {\n    super(props);\n\n    this.subscription = null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { conversation, commentsQuery } = nextProps;\n\n    // It is first time or subsequent conversation change\n    if (\n      !this.subscription ||\n      conversation._id !== this.props.conversation._id\n    ) {\n      // Unsubscribe previous subscription ==========\n      if (this.subscription) {\n        this.subscription();\n      }\n\n      this.subscription = commentsQuery.subscribeToMore({\n        document: gql(\n          subscriptions.conversationExternalIntegrationMessageInserted\n        ),\n        updateQuery: () => {\n          const comments = commentsQuery.converstationFacebookComments || [];\n          const limit = comments.length + 10;\n\n          this.fetchMoreComments({ limit }, { isSubscriptions: true });\n        }\n      });\n    }\n  }\n\n  fetchMoreComments = (variables, isSubscriptions?) => {\n    const { commentsQuery } = this.props;\n\n    commentsQuery.fetchMore({\n      variables,\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        const prevComments = prev.converstationFacebookComments || [];\n\n        const prevCommentIds = prevComments.map(\n          (comment: IFacebookComment) => comment.commentId\n        );\n\n        const fetchedComments: IFacebookComment[] = [];\n        for (const comment of fetchMoreResult.converstationFacebookComments) {\n          if (!prevCommentIds.includes(comment.commentId)) {\n            fetchedComments.push(comment);\n          }\n        }\n\n        if (isSubscriptions) {\n          return {\n            ...prev,\n            converstationFacebookComments: [...prevComments, ...fetchedComments]\n          };\n        }\n\n        return {\n          ...prev,\n          converstationFacebookComments: [...fetchedComments, ...prevComments]\n        };\n      }\n    });\n  };\n\n  fetchFacebook = ({\n    commentId,\n    postId,\n    limit\n  }: {\n    commentId?: string;\n    postId?: string;\n    limit?: number;\n  }) => {\n    const variables: { [key: string]: string | number } = {};\n\n    if (commentId) {\n      variables.commentId = commentId;\n      variables.limit = 999;\n    }\n\n    if (postId) {\n      variables.postId = postId;\n    }\n\n    variables.limit = limit || 5;\n\n    this.fetchMoreComments(variables);\n  };\n\n  render() {\n    const {\n      commentsQuery,\n      conversation,\n      internalNotesQuery,\n      commentsCountQuery\n    } = this.props;\n\n    if (\n      commentsQuery.loading ||\n      internalNotesQuery.loading ||\n      commentsCountQuery.loading\n    ) {\n      return null;\n    }\n\n    const post = conversation.facebookPost || ({} as IFacebookPost);\n    const comments = commentsQuery.converstationFacebookComments || [];\n    const commentCounts =\n      commentsCountQuery.converstationFacebookCommentsCount || {};\n\n    const hasMore = commentCounts.commentCountWithoutReplies > comments.length;\n    const commentCount = commentCounts.commentCount;\n\n    const updatedProps = {\n      ...this.props,\n      commentCount,\n      post,\n      customer: conversation.customer || {},\n      comments,\n      internalNotes: internalNotesQuery.conversationMessages,\n      hasMore,\n      fetchFacebook: this.fetchFacebook\n    };\n\n    return <FacebookConversation {...updatedProps} />;\n  }\n}\n\nconst WithQuery = withProps<Props & { currentUser: IUser }>(\n  compose(\n    graphql<\n      Props,\n      FacebookCommentsQueryResponse,\n      { postId: string; isResolved: boolean }\n    >(gql(queries.converstationFacebookComments), {\n      name: 'commentsQuery',\n      options: ({\n        conversation,\n        isResolved\n      }: {\n        conversation: IConversation;\n        isResolved: boolean;\n      }) => {\n        return {\n          variables: {\n            postId: conversation._id,\n            isResolved\n          },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<\n      Props,\n      FacebookCommentsCountQueryResponse,\n      { postId: string; isResolved: boolean }\n    >(gql(queries.converstationFacebookCommentsCount), {\n      name: 'commentsCountQuery',\n      options: ({\n        conversation,\n        isResolved\n      }: {\n        conversation: IConversation;\n        isResolved: boolean;\n      }) => {\n        return {\n          variables: {\n            postId: conversation._id,\n            isResolved\n          },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<Props, MessagesQueryResponse, { conversationId: string }>(\n      gql(queries.conversationMessages),\n      {\n        name: 'internalNotesQuery',\n        options: ({ conversation }: { conversation: IConversation }) => {\n          return {\n            variables: {\n              conversationId: conversation._id\n            },\n            fetchPolicy: 'network-only'\n          };\n        }\n      }\n    )\n  )(FacebookPostContainer)\n);\n\nconst WithConsumer = (props: Props) => {\n  return (\n    <AppConsumer>\n      {({ currentUser }) => (\n        <WithQuery {...props} currentUser={currentUser || ({} as IUser)} />\n      )}\n    </AppConsumer>\n  );\n};\n\nexport default WithConsumer;\n"]},"metadata":{},"sourceType":"module"}