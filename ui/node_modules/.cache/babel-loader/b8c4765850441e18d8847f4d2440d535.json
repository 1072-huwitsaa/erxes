{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/Timer.tsx\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 0;\\n  font-size: 28px;\\n\\n  span {\\n    font-size: 14px;\\n    opacity: 0.6;\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 15px;\\n\\n  label span {\\n    opacity: 0.6;\\n    text-transform: capitalize;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      background-color: #e3f9e5;\\n      background-image: linear-gradient(\\n        to bottom right,\\n        rgba(0, 0, 0, 0.03) 25%,\\n        transparent 0,\\n        transparent 50%,\\n        rgba(0, 0, 0, 0.03) 0,\\n        rgba(0, 0, 0, 0.03) 75%,\\n        transparent 0,\\n        transparent\\n      );\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 15px 20px 20px 20px;\\n  color: #243B53;\\n\\n  \", \";\\n  \\n\\n  button {\\n    width: 39px;\\n    height: 39px;\\n    padding: 8px 12px;\\n    font-size: 15px;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Box from 'modules/common/components/Box';\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport styledTS from 'styled-components-ts';\nimport { Alert } from '../utils';\nimport Button from './Button';\nimport Tip from './Tip';\nvar Container = styledTS(styled.div)(_templateObject(), function (props) {\n  return props.isComplete && css(_templateObject2());\n});\nvar TimeWrapper = styled.div(_templateObject3());\nvar Time = styled.h4(_templateObject4());\nexport var STATUS_TYPES = {\n  COMPLETED: 'completed',\n  STOPPED: 'stopped',\n  STARTED: 'started',\n  PAUSED: 'paused'\n};\n\nfunction formatNumber(n) {\n  return n.toLocaleString('en-US', {\n    minimumIntegerDigits: 2,\n    useGrouping: false\n  });\n}\n\nfunction getSpentTime(seconds) {\n  var days = Math.floor(seconds / (3600 * 24));\n  seconds -= days * 3600 * 24;\n  var hours = Math.floor(seconds / 3600);\n  seconds -= hours * 3600;\n  var minutes = Math.floor(seconds / 60);\n  seconds -= minutes * 60;\n  return React.createElement(Time, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, days !== 0 && React.createElement(React.Fragment, null, formatNumber(days), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"d\")), formatNumber(hours), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"h\"), formatNumber(minutes), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"m\"), formatNumber(seconds), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"s\"));\n}\n\nvar TaskTimer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTimer, _React$Component);\n\n  function TaskTimer(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTimer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTimer).call(this, props));\n    _this.timer = void 0;\n\n    _this.onSubmit = function () {\n      var _this$props = _this.props,\n          taskId = _this$props.taskId,\n          update = _this$props.update;\n      var _this$state = _this.state,\n          status = _this$state.status,\n          timeSpent = _this$state.timeSpent;\n      var doc = {\n        _id: taskId,\n        status: status,\n        timeSpent: timeSpent\n      };\n\n      if (status === STATUS_TYPES.STARTED && timeSpent === 0) {\n        doc.startDate = new Date();\n      }\n\n      return update(doc);\n    };\n\n    _this.onChangeStatus = function (status, callback) {\n      _this.setState({\n        status: status\n      }, callback);\n    };\n\n    _this.handleReset = function () {\n      Alert.info('Task reset!');\n\n      _this.stopTimer();\n\n      return _this.setState({\n        status: STATUS_TYPES.STOPPED,\n        timeSpent: 0\n      }, function () {\n        return _this.onSubmit();\n      });\n    };\n\n    _this.timer = {};\n    var _status = props.status,\n        startDate = props.startDate,\n        _timeSpent = props.timeSpent;\n    var absentTime = _status === STATUS_TYPES.STARTED && startDate && Math.floor((new Date().getTime() - new Date(startDate).getTime()) / 1000);\n    _this.state = {\n      status: _status,\n      timeSpent: absentTime ? _timeSpent + absentTime : _timeSpent\n    };\n    return _this;\n  }\n\n  _createClass(TaskTimer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var status = this.props.status;\n\n      if (status === STATUS_TYPES.STARTED) {\n        this.startTimer();\n      }\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      var _this2 = this;\n\n      this.timer = setInterval(function () {\n        _this2.setState(function (prevState) {\n          return {\n            timeSpent: prevState.timeSpent + 1\n          };\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"stopTimer\",\n    value: function stopTimer() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      var _this3 = this;\n\n      var status = this.state.status;\n      var isComplete = status === STATUS_TYPES.COMPLETED;\n\n      var handleComplete = function handleComplete() {\n        Alert.info('Task completed!');\n\n        _this3.stopTimer();\n\n        return _this3.onChangeStatus(STATUS_TYPES.COMPLETED, function () {\n          return _this3.onSubmit();\n        });\n      };\n\n      return React.createElement(Tip, {\n        text: isComplete ? 'Completed' : 'Complete',\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: isComplete,\n        btnStyle: isComplete ? 'success' : 'default',\n        onClick: handleComplete,\n        icon: \"check-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderActions\",\n    value: function renderActions() {\n      var _this4 = this;\n\n      var status = this.state.status;\n      var isComplete = status === STATUS_TYPES.COMPLETED;\n\n      var handleClick = function handleClick() {\n        if ([STATUS_TYPES.STOPPED, STATUS_TYPES.PAUSED].includes(status)) {\n          _this4.startTimer();\n\n          return _this4.onChangeStatus(STATUS_TYPES.STARTED, function () {\n            return _this4.onSubmit();\n          });\n        }\n\n        _this4.stopTimer();\n\n        return _this4.onChangeStatus(STATUS_TYPES.PAUSED, function () {\n          return _this4.onSubmit();\n        });\n      };\n\n      return React.createElement(React.Fragment, null, [STATUS_TYPES.COMPLETED, STATUS_TYPES.PAUSED, STATUS_TYPES.STOPPED].includes(status) ? React.createElement(Tip, {\n        text: \"Start\",\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: isComplete,\n        icon: \"play-1\",\n        btnStyle: \"primary\",\n        onClick: handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })) : React.createElement(Tip, {\n        text: \"Pause\",\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"danger\",\n        icon: \"pause-1\",\n        onClick: handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      })), React.createElement(Tip, {\n        text: \"Reset\",\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"warning\",\n        icon: \"redo\",\n        onClick: this.handleReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      })), this.renderButton());\n    }\n  }, {\n    key: \"renderTime\",\n    value: function renderTime() {\n      var _this$state2 = this.state,\n          timeSpent = _this$state2.timeSpent,\n          status = _this$state2.status;\n      return React.createElement(TimeWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"Time spent on this task \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"(\", status, \")\")), getSpentTime(timeSpent));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var status = this.state.status;\n      var isComplete = status === STATUS_TYPES.COMPLETED;\n      return React.createElement(Box, {\n        title: \"Time tracking\",\n        isOpen: true,\n        name: \"showCustomers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(Container, {\n        isComplete: isComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, this.renderTime(), this.renderActions()));\n    }\n  }]);\n\n  return TaskTimer;\n}(React.Component);\n\nexport default TaskTimer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/Timer.tsx"],"names":["Box","React","styled","css","styledTS","Alert","Button","Tip","Container","div","props","isComplete","TimeWrapper","Time","h4","STATUS_TYPES","COMPLETED","STOPPED","STARTED","PAUSED","formatNumber","n","toLocaleString","minimumIntegerDigits","useGrouping","getSpentTime","seconds","days","Math","floor","hours","minutes","TaskTimer","timer","onSubmit","taskId","update","state","status","timeSpent","doc","_id","startDate","Date","onChangeStatus","callback","setState","handleReset","info","stopTimer","absentTime","getTime","startTimer","setInterval","prevState","clearInterval","handleComplete","handleClick","includes","renderButton","renderTime","renderActions","Component"],"mappings":"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","sourcesContent":["import Box from 'modules/common/components/Box';\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport styledTS from 'styled-components-ts';\nimport { Alert } from '../utils';\nimport Button from './Button';\nimport Tip from './Tip';\n\nconst Container = styledTS<{ isComplete: boolean }>(styled.div)`\n  padding: 15px 20px 20px 20px;\n  color: #243B53;\n\n  ${props =>\n    props.isComplete &&\n    css`\n      background-color: #e3f9e5;\n      background-image: linear-gradient(\n        to bottom right,\n        rgba(0, 0, 0, 0.03) 25%,\n        transparent 0,\n        transparent 50%,\n        rgba(0, 0, 0, 0.03) 0,\n        rgba(0, 0, 0, 0.03) 75%,\n        transparent 0,\n        transparent\n      );\n    `};\n  \n\n  button {\n    width: 39px;\n    height: 39px;\n    padding: 8px 12px;\n    font-size: 15px;\n  }\n`;\n\nconst TimeWrapper = styled.div`\n  margin-bottom: 15px;\n\n  label span {\n    opacity: 0.6;\n    text-transform: capitalize;\n  }\n`;\n\nconst Time = styled.h4`\n  margin-bottom: 0;\n  font-size: 28px;\n\n  span {\n    font-size: 14px;\n    opacity: 0.6;\n  }\n`;\n\nexport const STATUS_TYPES = {\n  COMPLETED: 'completed',\n  STOPPED: 'stopped',\n  STARTED: 'started',\n  PAUSED: 'paused'\n};\n\nfunction formatNumber(n: number) {\n  return n.toLocaleString('en-US', {\n    minimumIntegerDigits: 2,\n    useGrouping: false\n  });\n}\n\nfunction getSpentTime(seconds: number): React.ReactNode {\n  const days = Math.floor(seconds / (3600 * 24));\n\n  seconds -= days * 3600 * 24;\n\n  const hours = Math.floor(seconds / 3600);\n\n  seconds -= hours * 3600;\n\n  const minutes = Math.floor(seconds / 60);\n\n  seconds -= minutes * 60;\n\n  return (\n    <Time>\n      {days !== 0 && (\n        <>\n          {formatNumber(days)} <span>d</span>\n        </>\n      )}\n      {formatNumber(hours)}\n      <span>h</span>\n      {formatNumber(minutes)}\n      <span>m</span>\n      {formatNumber(seconds)}\n      <span>s</span>\n    </Time>\n  );\n}\n\ntype Props = {\n  taskId: string;\n  status: string;\n  timeSpent: number;\n  startDate?: string;\n  update: (\n    {\n      _id,\n      status,\n      timeSpent,\n      startDate\n    }: { _id: string; status: string; timeSpent: number; startDate?: string },\n    callback?: () => void\n  ) => void;\n};\n\ntype State = {\n  status: string;\n  timeSpent: number;\n};\n\nclass TaskTimer extends React.Component<Props, State> {\n  timer: NodeJS.Timeout;\n\n  constructor(props) {\n    super(props);\n\n    this.timer = {} as NodeJS.Timeout;\n\n    const { status, startDate, timeSpent } = props;\n\n    const absentTime =\n      status === STATUS_TYPES.STARTED &&\n      startDate &&\n      Math.floor((new Date().getTime() - new Date(startDate).getTime()) / 1000);\n\n    this.state = {\n      status,\n      timeSpent: absentTime ? timeSpent + absentTime : timeSpent\n    };\n  }\n\n  componentDidMount() {\n    const { status } = this.props;\n\n    if (status === STATUS_TYPES.STARTED) {\n      this.startTimer();\n    }\n  }\n\n  onSubmit = () => {\n    const { taskId, update } = this.props;\n    const { status, timeSpent } = this.state;\n\n    const doc: any = {\n      _id: taskId,\n      status,\n      timeSpent\n    };\n\n    if (status === STATUS_TYPES.STARTED && timeSpent === 0) {\n      doc.startDate = new Date();\n    }\n\n    return update(doc);\n  };\n\n  onChangeStatus = (status: string, callback) => {\n    this.setState({ status }, callback);\n  };\n\n  handleReset = () => {\n    Alert.info('Task reset!');\n\n    this.stopTimer();\n\n    return this.setState({ status: STATUS_TYPES.STOPPED, timeSpent: 0 }, () => {\n      return this.onSubmit();\n    });\n  };\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      this.setState(prevState => ({\n        timeSpent: prevState.timeSpent + 1\n      }));\n    }, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  renderButton() {\n    const { status } = this.state;\n\n    const isComplete = status === STATUS_TYPES.COMPLETED;\n\n    const handleComplete = () => {\n      Alert.info('Task completed!');\n\n      this.stopTimer();\n\n      return this.onChangeStatus(STATUS_TYPES.COMPLETED, () => {\n        return this.onSubmit();\n      });\n    };\n\n    return (\n      <Tip text={isComplete ? 'Completed' : 'Complete'} placement=\"top\">\n        <Button\n          disabled={isComplete}\n          btnStyle={isComplete ? 'success' : 'default'}\n          onClick={handleComplete}\n          icon=\"check-1\"\n        />\n      </Tip>\n    );\n  }\n\n  renderActions() {\n    const { status } = this.state;\n\n    const isComplete = status === STATUS_TYPES.COMPLETED;\n\n    const handleClick = () => {\n      if ([STATUS_TYPES.STOPPED, STATUS_TYPES.PAUSED].includes(status)) {\n        this.startTimer();\n\n        return this.onChangeStatus(STATUS_TYPES.STARTED, () => {\n          return this.onSubmit();\n        });\n      }\n\n      this.stopTimer();\n\n      return this.onChangeStatus(STATUS_TYPES.PAUSED, () => {\n        return this.onSubmit();\n      });\n    };\n\n    return (\n      <>\n        {[\n          STATUS_TYPES.COMPLETED,\n          STATUS_TYPES.PAUSED,\n          STATUS_TYPES.STOPPED\n        ].includes(status) ? (\n          <Tip text=\"Start\" placement=\"top\">\n            <Button\n              disabled={isComplete}\n              icon=\"play-1\"\n              btnStyle=\"primary\"\n              onClick={handleClick}\n            />\n          </Tip>\n        ) : (\n          <Tip text=\"Pause\" placement=\"top\">\n            <Button btnStyle=\"danger\" icon=\"pause-1\" onClick={handleClick} />\n          </Tip>\n        )}\n\n        <Tip text=\"Reset\" placement=\"top\">\n          <Button btnStyle=\"warning\" icon=\"redo\" onClick={this.handleReset} />\n        </Tip>\n        {this.renderButton()}\n      </>\n    );\n  }\n\n  renderTime() {\n    const { timeSpent, status } = this.state;\n\n    return (\n      <TimeWrapper>\n        <label>\n          Time spent on this task <span>({status})</span>\n        </label>\n        {getSpentTime(timeSpent)}\n      </TimeWrapper>\n    );\n  }\n\n  render() {\n    const { status } = this.state;\n    const isComplete = status === STATUS_TYPES.COMPLETED;\n\n    return (\n      <Box title=\"Time tracking\" isOpen={true} name=\"showCustomers\">\n        <Container isComplete={isComplete}>\n          {this.renderTime()}\n          {this.renderActions()}\n        </Container>\n      </Box>\n    );\n  }\n}\n\nexport default TaskTimer;\n"]},"metadata":{},"sourceType":"module"}