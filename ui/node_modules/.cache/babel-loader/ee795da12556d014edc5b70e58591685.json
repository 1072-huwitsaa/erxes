{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/containers/SegmentsForm.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SegmentsForm from '../components/SegmentsForm';\nimport { mutations, queries } from '../graphql';\n\nvar SegmentsFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SegmentsFormContainer, _React$Component);\n\n  function SegmentsFormContainer(props) {\n    var _this;\n\n    _classCallCheck(this, SegmentsFormContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SegmentsFormContainer).call(this, props));\n\n    _this.renderButton = function (_ref) {\n      var name = _ref.name,\n          values = _ref.values,\n          isSubmitted = _ref.isSubmitted,\n          callback = _ref.callback,\n          object = _ref.object;\n      var _this$props = _this.props,\n          contentType = _this$props.contentType,\n          history = _this$props.history;\n\n      var callBackResponse = function callBackResponse() {\n        history.push(\"/segments/\".concat(contentType));\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      return React.createElement(ButtonMutate, {\n        mutation: object ? mutations.segmentsEdit : mutations.segmentsAdd,\n        variables: values,\n        callback: callBackResponse,\n        isSubmitted: isSubmitted,\n        uppercase: false,\n        icon: \"check-circle\",\n        type: \"submit\",\n        successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    };\n\n    _this.previewCount = function (conditions, subOf) {\n      var contentType = _this.props.contentType;\n\n      _this.setState({\n        loading: true\n      });\n\n      client.query({\n        query: gql(queries.segmentsPreviewCount),\n        variables: {\n          contentType: contentType,\n          conditions: conditions,\n          subOf: subOf\n        }\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n\n        _this.setState({\n          count: data.segmentsPreviewCount,\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      loading: false,\n      count: 0\n    };\n    return _this;\n  }\n\n  _createClass(SegmentsFormContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var headSegmentsQuery = this.props.headSegmentsQuery;\n      headSegmentsQuery.refetch();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          contentType = _this$props2.contentType,\n          segmentDetailQuery = _this$props2.segmentDetailQuery,\n          headSegmentsQuery = _this$props2.headSegmentsQuery,\n          eventsQuery = _this$props2.eventsQuery,\n          combinedFieldsQuery = _this$props2.combinedFieldsQuery;\n\n      if (segmentDetailQuery.loading || combinedFieldsQuery.loading) {\n        return null;\n      }\n\n      var events = eventsQuery.segmentsEvents || [];\n      var fields = combinedFieldsQuery.fieldsCombinedByContentType || [];\n      var segment = segmentDetailQuery.segmentDetail;\n      var headSegments = headSegmentsQuery.segmentsGetHeads || [];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        fields: fields,\n        segment: segment,\n        headSegments: headSegments.filter(function (s) {\n          return s.contentType === contentType;\n        }),\n        events: events,\n        renderButton: this.renderButton,\n        previewCount: this.previewCount,\n        count: this.state.count,\n        counterLoading: this.state.loading\n      });\n\n      return React.createElement(SegmentsForm, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SegmentsFormContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.segmentDetail), {\n  name: 'segmentDetailQuery',\n  options: function options(_ref3) {\n    var id = _ref3.id;\n    return {\n      variables: {\n        _id: id\n      }\n    };\n  }\n}), graphql(gql(queries.headSegments), {\n  name: 'headSegmentsQuery'\n}), graphql(gql(queries.events), {\n  name: 'eventsQuery',\n  options: function options(_ref4) {\n    var contentType = _ref4.contentType;\n    return {\n      variables: {\n        contentType: contentType\n      }\n    };\n  }\n}), graphql(gql(queries.combinedFields), {\n  name: 'combinedFieldsQuery',\n  options: function options(_ref5) {\n    var contentType = _ref5.contentType;\n    return {\n      variables: {\n        contentType: ['visitor', 'lead', 'customer'].includes(contentType) ? 'customer' : contentType\n      }\n    };\n  }\n}))(SegmentsFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/containers/SegmentsForm.tsx"],"names":["client","gql","compose","ButtonMutate","withProps","React","graphql","SegmentsForm","mutations","queries","SegmentsFormContainer","props","renderButton","name","values","isSubmitted","callback","object","contentType","history","callBackResponse","push","segmentsEdit","segmentsAdd","previewCount","conditions","subOf","setState","loading","query","segmentsPreviewCount","variables","then","data","count","state","headSegmentsQuery","refetch","segmentDetailQuery","eventsQuery","combinedFieldsQuery","events","segmentsEvents","fields","fieldsCombinedByContentType","segment","segmentDetail","headSegments","segmentsGetHeads","updatedProps","filter","s","counterLoading","Component","options","id","_id","combinedFields","includes"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { FieldsCombinedByTypeQueryResponse } from '../../settings/properties/types';\nimport SegmentsForm from '../components/SegmentsForm';\nimport { mutations, queries } from '../graphql';\nimport {\n  AddMutationResponse,\n  EditMutationResponse,\n  EventsQueryResponse,\n  HeadSegmentsQueryResponse,\n  ISegmentCondition,\n  SegmentDetailQueryResponse\n} from '../types';\n\ntype Props = {\n  contentType: string;\n  history: any;\n  id?: string;\n};\n\ntype FinalProps = {\n  segmentDetailQuery: SegmentDetailQueryResponse;\n  headSegmentsQuery: HeadSegmentsQueryResponse;\n  eventsQuery: EventsQueryResponse;\n  combinedFieldsQuery: FieldsCombinedByTypeQueryResponse;\n} & Props &\n  AddMutationResponse &\n  EditMutationResponse;\n\nclass SegmentsFormContainer extends React.Component<\n  FinalProps,\n  { loading: boolean; count: number }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      count: 0\n    };\n  }\n\n  componentWillMount() {\n    const { headSegmentsQuery } = this.props;\n\n    headSegmentsQuery.refetch();\n  }\n\n  renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    const { contentType, history } = this.props;\n\n    const callBackResponse = () => {\n      history.push(`/segments/${contentType}`);\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={object ? mutations.segmentsEdit : mutations.segmentsAdd}\n        variables={values}\n        callback={callBackResponse}\n        isSubmitted={isSubmitted}\n        uppercase={false}\n        icon=\"check-circle\"\n        type=\"submit\"\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  previewCount = (conditions: ISegmentCondition[], subOf?: string) => {\n    const { contentType } = this.props;\n\n    this.setState({ loading: true });\n\n    client\n      .query({\n        query: gql(queries.segmentsPreviewCount),\n        variables: {\n          contentType,\n          conditions,\n          subOf\n        }\n      })\n      .then(({ data }) => {\n        this.setState({\n          count: data.segmentsPreviewCount,\n          loading: false\n        });\n      });\n  };\n\n  render() {\n    const {\n      contentType,\n      segmentDetailQuery,\n      headSegmentsQuery,\n      eventsQuery,\n      combinedFieldsQuery\n    } = this.props;\n\n    if (segmentDetailQuery.loading || combinedFieldsQuery.loading) {\n      return null;\n    }\n\n    const events = eventsQuery.segmentsEvents || [];\n    const fields = combinedFieldsQuery.fieldsCombinedByContentType || [];\n\n    const segment = segmentDetailQuery.segmentDetail;\n    const headSegments = headSegmentsQuery.segmentsGetHeads || [];\n\n    const updatedProps = {\n      ...this.props,\n      fields,\n      segment,\n      headSegments: headSegments.filter(s => s.contentType === contentType),\n      events,\n      renderButton: this.renderButton,\n      previewCount: this.previewCount,\n      count: this.state.count,\n      counterLoading: this.state.loading\n    };\n\n    return <SegmentsForm {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, SegmentDetailQueryResponse, { _id?: string }>(\n      gql(queries.segmentDetail),\n      {\n        name: 'segmentDetailQuery',\n        options: ({ id }) => ({\n          variables: { _id: id }\n        })\n      }\n    ),\n    graphql<Props, HeadSegmentsQueryResponse, { contentType: string }>(\n      gql(queries.headSegments),\n      {\n        name: 'headSegmentsQuery'\n      }\n    ),\n    graphql<Props>(gql(queries.events), {\n      name: 'eventsQuery',\n      options: ({ contentType }) => ({\n        variables: { contentType }\n      })\n    }),\n    graphql<Props>(gql(queries.combinedFields), {\n      name: 'combinedFieldsQuery',\n      options: ({ contentType }) => ({\n        variables: {\n          contentType: ['visitor', 'lead', 'customer'].includes(contentType)\n            ? 'customer'\n            : contentType\n        }\n      })\n    })\n  )(SegmentsFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}