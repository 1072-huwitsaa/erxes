{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/components/LogModalContent.tsx\";\nimport dayjs from 'dayjs';\nimport TextInfo from 'modules/common/components/TextInfo';\nimport colors from 'modules/common/styles/colors';\nimport React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { LogBox } from '../styles';\nimport { flattenObject, isObjectEmpty } from '../utils'; // field names used to show properly formatted date values\n\nvar DATE_FIELD_NAMES = ['createdAt', 'createdDate', 'modifiedAt', 'lastSeenAt', 'closeDate', 'modifiedDate'];\n\nvar LogModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LogModal, _React$Component);\n\n  function LogModal(props) {\n    var _this;\n\n    _classCallCheck(this, LogModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LogModal).call(this, props));\n    _this.extraDesc = [];\n    _this.extraDesc = JSON.parse(props.log.extraDesc || '[]') || [];\n    return _this;\n  }\n  /**\n   * Builds an html list from given array\n   * @param {Object|string|number[]]} array List of values\n   * @param {string} name Field name at database\n   */\n\n\n  _createClass(LogModal, [{\n    key: \"buildListFromArray\",\n    value: function buildListFromArray() {\n      var _this2 = this;\n\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var list = [];\n      array.forEach(function (elem, index) {\n        if (typeof elem !== 'object') {\n          var value = elem.toString(); // Finding mapped name behind id field\n\n          if (_this2.extraDesc) {\n            var found = _this2.extraDesc.find(function (item) {\n              return item[name] === value;\n            });\n\n            if (found) {\n              value = found.name;\n            }\n          }\n\n          list.push(React.createElement(\"li\", {\n            key: Math.random(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, value));\n        }\n\n        if (typeof elem === 'object') {\n          var sub = _this2.buildListFromObject(elem);\n\n          list.push(React.createElement(\"li\", {\n            key: Math.random(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, index + 1, \":\"));\n          list.push(React.createElement(\"ul\", {\n            key: Math.random(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, sub));\n        }\n      });\n\n      if (list.length > 0) {\n        return React.createElement(\"ul\", {\n          key: Math.random(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, list);\n      }\n\n      return React.createElement(\"ul\", {\n        key: \"array\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"buildListFromObject\",\n    value: function buildListFromObject() {\n      var _this3 = this;\n\n      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var schemaLabelMaps = this.props.schemaLabelMaps;\n      var flatObject = flattenObject(obj);\n      var names = flatObject ? Object.getOwnPropertyNames(flatObject).sort() : [];\n      var list = [];\n\n      if (isObjectEmpty(flatObject)) {\n        return [React.createElement(\"span\", {\n          key: 'empty-object',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        })];\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var name = _step.value;\n          var field = flatObject[name];\n          var mappedItem = schemaLabelMaps.find(function (fn) {\n            return fn.name === name;\n          });\n\n          if (!mappedItem) {\n            return \"continue\";\n          }\n\n          var label = mappedItem.label;\n          var value = String(field);\n\n          if (DATE_FIELD_NAMES.includes(name)) {\n            value = dayjs(field).format('YYYY-MM-DD HH:mm');\n          }\n\n          if (_this3.extraDesc) {\n            var found = _this3.extraDesc.find(function (fieldItem) {\n              return fieldItem[name] === value;\n            });\n\n            if (found) {\n              value = found.name;\n            }\n          }\n\n          var item = React.createElement(\"li\", {\n            key: name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"field-name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }, label, \":\"), React.createElement(\"span\", {\n            className: \"field-value\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }, value));\n\n          if (typeof field === 'object') {\n            if (Array.isArray(field)) {\n              item = _this3.buildListFromArray(field, name);\n              list.push(React.createElement(\"li\", {\n                className: \"field-name\",\n                key: Math.random(),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 128\n                },\n                __self: this\n              }, label, \":\"));\n              list.push(item);\n            } else {\n              var sub = _this3.buildListFromObject(field);\n\n              item = React.createElement(\"li\", {\n                key: Math.random(),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 137\n                },\n                __self: this\n              }, name, \":\");\n              list.push(React.createElement(\"li\", {\n                className: \"field-name\",\n                key: Math.random(),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 140\n                },\n                __self: this\n              }, label, \":\"));\n              list.push(React.createElement(\"ul\", {\n                key: Math.random(),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 145\n                },\n                __self: this\n              }, sub));\n            }\n          } else {\n            // primary types\n            list.push(item);\n          }\n        };\n\n        for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        } // end for loop\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return list;\n    }\n    /**\n     * Reads a stringified json and builds a list using its attributes.\n     * @param {string} jsonString A stringified JSON object\n     */\n\n  }, {\n    key: \"prettyJSON\",\n    value: function prettyJSON(jsonString) {\n      if (!jsonString) {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }\n\n      var clean = jsonString.replace('\\n', '');\n      var parsed = JSON.parse(clean);\n\n      if (isObjectEmpty(parsed)) {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        });\n      }\n\n      if (typeof parsed === 'object' && !Array.isArray(parsed)) {\n        return React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, this.buildListFromObject(parsed));\n      }\n\n      if (Array.isArray(parsed)) {\n        return React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, this.buildListFromArray(parsed));\n      }\n\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(data, label, cls) {\n      if (!data) {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        });\n      }\n\n      var color = colors.colorPrimary;\n\n      switch (cls) {\n        case 'success':\n          color = colors.colorCoreGreen;\n          break;\n\n        case 'warning':\n          color = colors.colorCoreYellow;\n          break;\n\n        case 'danger':\n          color = colors.colorCoreRed;\n          break;\n\n        default:\n          break;\n      }\n\n      return React.createElement(Col, {\n        sm: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(LogBox, {\n        color: color,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(TextInfo, {\n        textStyle: cls,\n        hugeness: \"big\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, label), this.prettyJSON(data)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var log = this.props.log;\n\n      if (!log) {\n        return null;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, this.renderData(log.oldData, 'Before any changes', 'default'), this.renderData(log.addedData, 'Added fields', 'success'), this.renderData(log.changedData, 'Changed fields', 'warning'), this.renderData(log.removedData, 'Removed fields', 'danger')));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.extraDesc = [];\n    }\n  }]);\n\n  return LogModal;\n}(React.Component);\n\nexport { LogModal as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/components/LogModalContent.tsx"],"names":["dayjs","TextInfo","colors","React","Col","Row","LogBox","flattenObject","isObjectEmpty","DATE_FIELD_NAMES","LogModal","props","extraDesc","JSON","parse","log","array","name","list","forEach","elem","index","value","toString","found","find","item","push","Math","random","sub","buildListFromObject","length","obj","schemaLabelMaps","flatObject","names","Object","getOwnPropertyNames","sort","field","mappedItem","fn","label","String","includes","format","fieldItem","Array","isArray","buildListFromArray","jsonString","clean","replace","parsed","data","cls","color","colorPrimary","colorCoreGreen","colorCoreYellow","colorCoreRed","prettyJSON","renderData","oldData","addedData","changedData","removedData","Component"],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport TextInfo from 'modules/common/components/TextInfo';\nimport colors from 'modules/common/styles/colors';\nimport React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { LogBox } from '../styles';\nimport { ILog, ILogDesc } from '../types';\nimport { flattenObject, isObjectEmpty } from '../utils';\n\n// field names used to show properly formatted date values\nconst DATE_FIELD_NAMES = [\n  'createdAt',\n  'createdDate',\n  'modifiedAt',\n  'lastSeenAt',\n  'closeDate',\n  'modifiedDate'\n];\n\ntype Props = {\n  log: ILog;\n  schemaLabelMaps: ILogDesc[];\n};\n\nexport default class LogModal extends React.Component<Props> {\n  private extraDesc: any[] = [];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.extraDesc = JSON.parse(props.log.extraDesc || '[]') || [];\n  }\n\n  /**\n   * Builds an html list from given array\n   * @param {Object|string|number[]]} array List of values\n   * @param {string} name Field name at database\n   */\n  buildListFromArray(array: any[] = [], name: string = ''): JSX.Element {\n    const list: JSX.Element[] = [];\n\n    array.forEach((elem, index) => {\n      if (typeof elem !== 'object') {\n        let value: string = elem.toString();\n\n        // Finding mapped name behind id field\n        if (this.extraDesc) {\n          const found: ILogDesc = this.extraDesc.find(\n            item => item[name] === value\n          );\n\n          if (found) {\n            value = found.name;\n          }\n        }\n\n        list.push(<li key={Math.random()}>{value}</li>);\n      }\n\n      if (typeof elem === 'object') {\n        const sub: JSX.Element[] = this.buildListFromObject(elem);\n\n        list.push(<li key={Math.random()}>{index + 1}:</li>);\n        list.push(<ul key={Math.random()}>{sub}</ul>);\n      }\n    });\n\n    if (list.length > 0) {\n      return <ul key={Math.random()}>{list}</ul>;\n    }\n\n    return <ul key=\"array\" />;\n  }\n\n  buildListFromObject(obj = {}): JSX.Element[] {\n    const { schemaLabelMaps } = this.props;\n\n    const flatObject: object = flattenObject(obj);\n    const names: string[] = flatObject\n      ? Object.getOwnPropertyNames(flatObject).sort()\n      : [];\n    const list: JSX.Element[] = [];\n\n    if (isObjectEmpty(flatObject)) {\n      return [<span key={'empty-object'} />];\n    }\n\n    for (const name of names) {\n      const field: any = flatObject[name];\n      const mappedItem: ILogDesc | undefined = schemaLabelMaps.find(\n        fn => fn.name === name\n      );\n\n      if (!mappedItem) {\n        continue;\n      }\n\n      const label: string = mappedItem.label;\n      let value: string = String(field);\n\n      if (DATE_FIELD_NAMES.includes(name)) {\n        value = dayjs(field).format('YYYY-MM-DD HH:mm');\n      }\n\n      if (this.extraDesc) {\n        const found: ILogDesc = this.extraDesc.find(\n          fieldItem => fieldItem[name] === value\n        );\n\n        if (found) {\n          value = found.name;\n        }\n      }\n\n      let item: JSX.Element = (\n        <li key={name}>\n          <span className=\"field-name\">{label}:</span>\n          <span className=\"field-value\">{value}</span>\n        </li>\n      );\n\n      if (typeof field === 'object') {\n        if (Array.isArray(field)) {\n          item = this.buildListFromArray(field, name);\n\n          list.push(\n            <li className=\"field-name\" key={Math.random()}>\n              {label}:\n            </li>\n          );\n\n          list.push(item);\n        } else {\n          const sub = this.buildListFromObject(field);\n\n          item = <li key={Math.random()}>{name}:</li>;\n\n          list.push(\n            <li className=\"field-name\" key={Math.random()}>\n              {label}:\n            </li>\n          );\n\n          list.push(<ul key={Math.random()}>{sub}</ul>);\n        }\n      } else {\n        // primary types\n        list.push(item);\n      }\n    } // end for loop\n\n    return list;\n  }\n\n  /**\n   * Reads a stringified json and builds a list using its attributes.\n   * @param {string} jsonString A stringified JSON object\n   */\n  prettyJSON(jsonString: string): JSX.Element {\n    if (!jsonString) {\n      return <span />;\n    }\n\n    const clean = jsonString.replace('\\n', '');\n    const parsed = JSON.parse(clean);\n\n    if (isObjectEmpty(parsed)) {\n      return <span />;\n    }\n\n    if (typeof parsed === 'object' && !Array.isArray(parsed)) {\n      return <ul>{this.buildListFromObject(parsed)}</ul>;\n    }\n\n    if (Array.isArray(parsed)) {\n      return <ul>{this.buildListFromArray(parsed)}</ul>;\n    }\n\n    return <span />;\n  }\n\n  renderData(data: string, label: string, cls: string): JSX.Element {\n    if (!data) {\n      return <span />;\n    }\n\n    let color: string = colors.colorPrimary;\n\n    switch (cls) {\n      case 'success':\n        color = colors.colorCoreGreen;\n        break;\n      case 'warning':\n        color = colors.colorCoreYellow;\n        break;\n      case 'danger':\n        color = colors.colorCoreRed;\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <Col sm={6}>\n        <LogBox color={color}>\n          <TextInfo textStyle={cls} hugeness=\"big\">\n            {label}\n          </TextInfo>\n          {this.prettyJSON(data)}\n        </LogBox>\n      </Col>\n    );\n  }\n\n  render() {\n    const { log } = this.props;\n\n    if (!log) {\n      return null;\n    }\n\n    return (\n      <>\n        <Row>\n          {this.renderData(log.oldData, 'Before any changes', 'default')}\n          {this.renderData(log.addedData, 'Added fields', 'success')}\n          {this.renderData(log.changedData, 'Changed fields', 'warning')}\n          {this.renderData(log.removedData, 'Removed fields', 'danger')}\n        </Row>\n      </>\n    );\n  }\n\n  componentWillUnmount() {\n    this.extraDesc = [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}