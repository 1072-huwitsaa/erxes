{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/containers/Channels.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport DumbChannels from '../components/Channels';\nimport Empty from '../components/Empty';\nimport { queries } from '../graphql';\n\nvar Channels =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Channels, _React$Component);\n\n  function Channels() {\n    _classCallCheck(this, Channels);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Channels).apply(this, arguments));\n  }\n\n  _createClass(Channels, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channelDetailQuery = _this$props.channelDetailQuery,\n          location = _this$props.location,\n          integrationsCountQuery = _this$props.integrationsCountQuery,\n          currentChannelId = _this$props.currentChannelId;\n      var integrationsCount = 0;\n\n      if (!integrationsCountQuery.loading) {\n        var byChannel = integrationsCountQuery.integrationsTotalCount.byChannel;\n        integrationsCount = byChannel[currentChannelId];\n      }\n\n      var extendedProps = _objectSpread({}, this.props, {\n        queryParams: queryString.parse(location.search),\n        currentChannel: channelDetailQuery.channelDetail || {},\n        loading: channelDetailQuery.loading,\n        integrationsCount: integrationsCount\n      });\n\n      return React.createElement(DumbChannels, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Channels;\n}(React.Component);\n\nvar ChannelsContainer = withProps(compose(graphql(gql(queries.channelDetail), {\n  name: 'channelDetailQuery',\n  options: function options(_ref) {\n    var currentChannelId = _ref.currentChannelId;\n    return {\n      variables: {\n        _id: currentChannelId\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.integrationsCount), {\n  name: 'integrationsCountQuery',\n  options: function options(_ref2) {\n    var currentChannelId = _ref2.currentChannelId;\n    return {\n      variables: {\n        channelId: currentChannelId\n      }\n    };\n  }\n}))(Channels));\n\n// tslint:disable-next-line:max-classes-per-file\nvar WithCurrentId =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(WithCurrentId, _React$Component2);\n\n  function WithCurrentId() {\n    _classCallCheck(this, WithCurrentId);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WithCurrentId).apply(this, arguments));\n  }\n\n  _createClass(WithCurrentId, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _nextProps$lastChanne = nextProps.lastChannelQuery,\n          lastChannelQuery = _nextProps$lastChanne === void 0 ? {} : _nextProps$lastChanne,\n          history = nextProps.history,\n          _id = nextProps.queryParams._id;\n      var channelsGetLast = lastChannelQuery.channelsGetLast,\n          loading = lastChannelQuery.loading;\n\n      if (!_id && channelsGetLast && !loading && !history.location.hash) {\n        routerUtils.setParams(history, {\n          _id: channelsGetLast._id\n        }, true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _id = this.props.queryParams._id;\n\n      if (!_id) {\n        return React.createElement(Empty, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }));\n      }\n\n      var updatedProps = _objectSpread({}, this.props, {\n        currentChannelId: _id\n      });\n\n      return React.createElement(ChannelsContainer, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WithCurrentId;\n}(React.Component);\n\nvar WithLastChannel = withProps(compose(graphql(gql(queries.channelsGetLast), {\n  name: 'lastChannelQuery',\n  skip: function skip(_ref3) {\n    var queryParams = _ref3.queryParams;\n    return queryParams._id;\n  },\n  options: function options(_ref4) {\n    var queryParams = _ref4.queryParams;\n    return {\n      variables: {\n        _id: queryParams._id\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(WithCurrentId));\n\nvar WithQueryParams = function WithQueryParams(props) {\n  var location = props.location;\n  var queryParams = queryString.parse(location.search);\n\n  var extendedProps = _objectSpread({}, props, {\n    queryParams: queryParams\n  });\n\n  return React.createElement(WithLastChannel, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }));\n};\n\nexport default withRouter(WithQueryParams);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/containers/Channels.tsx"],"names":["gql","compose","router","routerUtils","withProps","queryString","React","graphql","withRouter","DumbChannels","Empty","queries","Channels","props","channelDetailQuery","location","integrationsCountQuery","currentChannelId","integrationsCount","loading","byChannel","integrationsTotalCount","extendedProps","queryParams","parse","search","currentChannel","channelDetail","Component","ChannelsContainer","name","options","variables","_id","fetchPolicy","channelId","WithCurrentId","nextProps","lastChannelQuery","history","channelsGetLast","hash","setParams","updatedProps","WithLastChannel","skip","WithQueryParams"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IntegrationsCountQueryResponse } from '../../integrations/types';\nimport DumbChannels from '../components/Channels';\nimport Empty from '../components/Empty';\nimport { queries } from '../graphql';\nimport {\n  ChannelDetailQueryResponse,\n  ChannelsGetLastQueryResponse,\n  IChannel\n} from '../types';\n\ntype Props = {\n  currentChannelId: string;\n};\n\ntype FinalProps = {\n  integrationsCountQuery: IntegrationsCountQueryResponse;\n  channelDetailQuery: ChannelDetailQueryResponse;\n} & Props &\n  IRouterProps;\n\nclass Channels extends React.Component<FinalProps> {\n  render() {\n    const {\n      channelDetailQuery,\n      location,\n      integrationsCountQuery,\n      currentChannelId\n    } = this.props;\n\n    let integrationsCount = 0;\n\n    if (!integrationsCountQuery.loading) {\n      const byChannel = integrationsCountQuery.integrationsTotalCount.byChannel;\n      integrationsCount = byChannel[currentChannelId];\n    }\n\n    const extendedProps = {\n      ...this.props,\n      queryParams: queryString.parse(location.search),\n      currentChannel: channelDetailQuery.channelDetail || {},\n      loading: channelDetailQuery.loading,\n      integrationsCount\n    };\n\n    return <DumbChannels {...extendedProps} />;\n  }\n}\n\nconst ChannelsContainer = withProps<Props>(\n  compose(\n    graphql<Props, ChannelDetailQueryResponse, { _id: string }>(\n      gql(queries.channelDetail),\n      {\n        name: 'channelDetailQuery',\n        options: ({ currentChannelId }: { currentChannelId: string }) => ({\n          variables: { _id: currentChannelId },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, IntegrationsCountQueryResponse, { channelId: string }>(\n      gql(queries.integrationsCount),\n      {\n        name: 'integrationsCountQuery',\n        options: ({ currentChannelId }: { currentChannelId: string }) => ({\n          variables: { channelId: currentChannelId }\n        })\n      }\n    )\n  )(Channels)\n);\n\ntype withCurrentIdProps = {\n  queryParams?: any;\n};\n\ntype withCurrentIdFinalProps = {\n  lastChannelQuery: IChannel;\n} & IRouterProps &\n  withCurrentIdProps;\n\n// tslint:disable-next-line:max-classes-per-file\nclass WithCurrentId extends React.Component<withCurrentIdFinalProps> {\n  componentWillReceiveProps(nextProps) {\n    const {\n      lastChannelQuery = {},\n      history,\n      queryParams: { _id }\n    } = nextProps;\n\n    const { channelsGetLast, loading } = lastChannelQuery;\n\n    if (!_id && channelsGetLast && !loading && !history.location.hash) {\n      routerUtils.setParams(history, { _id: channelsGetLast._id }, true);\n    }\n  }\n\n  render() {\n    const {\n      queryParams: { _id }\n    } = this.props;\n\n    if (!_id) {\n      return <Empty {...this.props} />;\n    }\n\n    const updatedProps = {\n      ...this.props,\n      currentChannelId: _id\n    };\n\n    return <ChannelsContainer {...updatedProps} />;\n  }\n}\n\nconst WithLastChannel = withProps<withCurrentIdProps>(\n  compose(\n    graphql<withCurrentIdProps, ChannelsGetLastQueryResponse, { _id: string }>(\n      gql(queries.channelsGetLast),\n      {\n        name: 'lastChannelQuery',\n        skip: ({ queryParams }) => queryParams._id,\n        options: ({ queryParams }: withCurrentIdProps) => ({\n          variables: { _id: queryParams._id },\n          fetchPolicy: 'network-only'\n        })\n      }\n    )\n  )(WithCurrentId)\n);\n\nconst WithQueryParams = (props: IRouterProps) => {\n  const { location } = props;\n  const queryParams = queryString.parse(location.search);\n\n  const extendedProps = { ...props, queryParams };\n\n  return <WithLastChannel {...extendedProps} />;\n};\n\nexport default withRouter<IRouterProps>(WithQueryParams);\n"]},"metadata":{},"sourceType":"module"}