{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/filters/BrandFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport BrandFilter from 'modules/customers/components/list/BrandFilter';\nimport { queries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { queries as companyQueries } from '../../graphql';\n\nvar BrandFilterContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BrandFilterContainer, _React$Component);\n\n  function BrandFilterContainer() {\n    _classCallCheck(this, BrandFilterContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BrandFilterContainer).apply(this, arguments));\n  }\n\n  _createClass(BrandFilterContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          companyCountsQuery = _this$props.companyCountsQuery,\n          brandsQuery = _this$props.brandsQuery;\n      var counts = (companyCountsQuery ? companyCountsQuery.companyCounts : null) || {\n        byBrand: {}\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        brands: (brandsQuery ? brandsQuery.brands : null) || [],\n        loading: (brandsQuery ? brandsQuery.loading : null) || false,\n        counts: counts.byBrand || {}\n      });\n\n      return React.createElement(BrandFilter, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BrandFilterContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery',\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  }\n}), graphql(gql(companyQueries.companyCounts), {\n  name: 'companyCountsQuery',\n  skip: function skip(_ref2) {\n    var loadingMainQuery = _ref2.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: {\n    variables: {\n      only: 'byBrand'\n    }\n  }\n}))(BrandFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/filters/BrandFilter.tsx"],"names":["gql","compose","BrandFilter","queries","React","graphql","withProps","companyQueries","BrandFilterContainer","props","companyCountsQuery","brandsQuery","counts","companyCounts","byBrand","updatedProps","brands","loading","Component","name","skip","loadingMainQuery","options","variables","only"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,+CAAxB;AACA,SAASC,OAAT,QAAwB,iCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASH,OAAO,IAAII,cAApB,QAA0C,eAA1C;;IAQMC,oB;;;;;;;;;;;;;6BACK;AAAA,wBACqC,KAAKC,KAD1C;AAAA,UACCC,kBADD,eACCA,kBADD;AAAA,UACqBC,WADrB,eACqBA,WADrB;AAGP,UAAMC,MAAM,GAAG,CAACF,kBAAkB,GAC9BA,kBAAkB,CAACG,aADW,GAE9B,IAFW,KAEF;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFb;;AAIA,UAAMC,YAAY,qBACb,KAAKN,KADQ;AAEhBO,QAAAA,MAAM,EAAE,CAACL,WAAW,GAAGA,WAAW,CAACK,MAAf,GAAwB,IAApC,KAA6C,EAFrC;AAGhBC,QAAAA,OAAO,EAAE,CAACN,WAAW,GAAGA,WAAW,CAACM,OAAf,GAAyB,IAArC,KAA8C,KAHvC;AAIhBL,QAAAA,MAAM,EAAEA,MAAM,CAACE,OAAP,IAAkB;AAJV,QAAlB;;AAOA,aAAO,oBAAC,WAAD,oBAAiBC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAhBgCX,KAAK,CAACc,S;;AAuBzC,eAAeZ,SAAS,CACtBL,OAAO,CACLI,OAAO,CAA6BL,GAAG,CAACG,OAAO,CAACa,MAAT,CAAhC,EAAkD;AACvDG,EAAAA,IAAI,EAAE,aADiD;AAEvDC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA;AAFiD,CAAlD,CADF,EAKLhB,OAAO,CACLL,GAAG,CAACO,cAAc,CAACM,aAAhB,CADE,EAEL;AACEM,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,SAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADJ;AAHX,CAFK,CALF,CAAP,CAeEhB,oBAfF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport BrandFilter from 'modules/customers/components/list/BrandFilter';\nimport { queries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { BrandsQueryResponse } from '../../../settings/brands/types';\nimport { queries as companyQueries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\ntype FinalProps = {\n  brandsQuery?: BrandsQueryResponse;\n  companyCountsQuery?: CountQueryResponse;\n} & Props;\n\nclass BrandFilterContainer extends React.Component<FinalProps> {\n  render() {\n    const { companyCountsQuery, brandsQuery } = this.props;\n\n    const counts = (companyCountsQuery\n      ? companyCountsQuery.companyCounts\n      : null) || { byBrand: {} };\n\n    const updatedProps = {\n      ...this.props,\n      brands: (brandsQuery ? brandsQuery.brands : null) || [],\n      loading: (brandsQuery ? brandsQuery.loading : null) || false,\n      counts: counts.byBrand || {}\n    };\n\n    return <BrandFilter {...updatedProps} />;\n  }\n}\n\ntype Props = {\n  loadingMainQuery: boolean;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n      name: 'brandsQuery',\n      skip: ({ loadingMainQuery }) => loadingMainQuery\n    }),\n    graphql<Props, CountQueryResponse, { only: string }>(\n      gql(companyQueries.companyCounts),\n      {\n        name: 'companyCountsQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: {\n          variables: { only: 'byBrand' }\n        }\n      }\n    )\n  )(BrandFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}