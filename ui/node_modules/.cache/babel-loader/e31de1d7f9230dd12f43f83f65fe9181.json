{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/leftSidebar/ConversationList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport ConversationList from 'modules/inbox/components/leftSidebar/ConversationList';\nimport { queries, subscriptions } from 'modules/inbox/graphql';\nimport { generateParams } from 'modules/inbox/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { InboxManagementActionConsumer } from '../Inbox';\n\nvar ConversationListContainer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ConversationListContainer, _React$PureComponent);\n\n  function ConversationListContainer() {\n    _classCallCheck(this, ConversationListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConversationListContainer).apply(this, arguments));\n  }\n\n  _createClass(ConversationListContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          currentUser = _this$props.currentUser,\n          conversationsQuery = _this$props.conversationsQuery,\n          totalCountQuery = _this$props.totalCountQuery,\n          updateCountsForNewMessage = _this$props.updateCountsForNewMessage;\n      conversationsQuery.subscribeToMore({\n        document: gql(subscriptions.conversationClientMessageInserted),\n        variables: {\n          userId: currentUser ? currentUser._id : null\n        },\n        updateQuery: function updateQuery() {\n          if (updateCountsForNewMessage) {\n            updateCountsForNewMessage();\n          }\n\n          conversationsQuery.refetch();\n          totalCountQuery.refetch();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          history = _this$props2.history,\n          conversationsQuery = _this$props2.conversationsQuery,\n          totalCountQuery = _this$props2.totalCountQuery;\n      var conversations = conversationsQuery.conversations || []; // on change conversation\n\n      var onChangeConversation = function onChangeConversation(conversation) {\n        routerUtils.setParams(history, {\n          _id: conversation._id\n        });\n      };\n\n      var totalCount = totalCountQuery.conversationsTotalCount || 0;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        conversations: conversations,\n        onChangeConversation: onChangeConversation,\n        totalCount: totalCount,\n        loading: conversationsQuery.loading\n      });\n\n      return React.createElement(ConversationList, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ConversationListContainer;\n}(React.PureComponent);\n\nvar ConversationListContainerWithRefetch = function ConversationListContainerWithRefetch(props) {\n  return React.createElement(InboxManagementActionConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, function (_ref) {\n    var notifyConsumersOfManagementAction = _ref.notifyConsumersOfManagementAction;\n    return React.createElement(ConversationListContainer, Object.assign({}, props, {\n      updateCountsForNewMessage: notifyConsumersOfManagementAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  });\n};\n\nvar generateOptions = function generateOptions(queryParams) {\n  return _objectSpread({}, queryParams, {\n    limit: queryParams.limit ? parseInt(queryParams.limit, 10) : 10\n  });\n};\n\nexport default withProps(compose(graphql(gql(queries.sidebarConversations), {\n  name: 'conversationsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: generateParams(queryParams),\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: 'network-only',\n      // every minute\n      pollInterval: 60000\n    };\n  }\n}), graphql(gql(queries.totalConversationsCount), {\n  name: 'totalCountQuery',\n  options: function options(_ref3) {\n    var queryParams = _ref3.queryParams;\n    return {\n      notifyOnNetworkStatusChange: true,\n      variables: generateOptions(queryParams)\n    };\n  }\n}))(ConversationListContainerWithRefetch));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/leftSidebar/ConversationList.tsx"],"names":["gql","compose","router","routerUtils","withProps","ConversationList","queries","subscriptions","generateParams","React","graphql","InboxManagementActionConsumer","ConversationListContainer","props","currentUser","conversationsQuery","totalCountQuery","updateCountsForNewMessage","subscribeToMore","document","conversationClientMessageInserted","variables","userId","_id","updateQuery","refetch","history","conversations","onChangeConversation","conversation","setParams","totalCount","conversationsTotalCount","updatedProps","loading","PureComponent","ConversationListContainerWithRefetch","notifyConsumersOfManagementAction","generateOptions","queryParams","limit","parseInt","sidebarConversations","name","options","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","totalConversationsCount"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,MAAM,IAAIC,WAAnB,EAAgCC,SAAhC,QAAiD,sBAAjD;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,uBAAvC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAOA,SAASC,6BAAT,QAA8C,UAA9C;;IAiBMC,yB;;;;;;;;;;;;;yCACiB;AAAA,wBAMf,KAAKC,KANU;AAAA,UAEjBC,WAFiB,eAEjBA,WAFiB;AAAA,UAGjBC,kBAHiB,eAGjBA,kBAHiB;AAAA,UAIjBC,eAJiB,eAIjBA,eAJiB;AAAA,UAKjBC,yBALiB,eAKjBA,yBALiB;AAQnBF,MAAAA,kBAAkB,CAACG,eAAnB,CAAmC;AACjCC,QAAAA,QAAQ,EAAEnB,GAAG,CAACO,aAAa,CAACa,iCAAf,CADoB;AAEjCC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,MAAM,EAAER,WAAW,GAAGA,WAAW,CAACS,GAAf,GAAqB;AAA1C,SAFsB;AAGjCC,QAAAA,WAAW,EAAE,uBAAM;AACjB,cAAIP,yBAAJ,EAA+B;AAC7BA,YAAAA,yBAAyB;AAC1B;;AAEDF,UAAAA,kBAAkB,CAACU,OAAnB;AACAT,UAAAA,eAAe,CAACS,OAAhB;AACD;AAVgC,OAAnC;AAYD;;;6BAEQ;AAAA,yBACkD,KAAKZ,KADvD;AAAA,UACCa,OADD,gBACCA,OADD;AAAA,UACUX,kBADV,gBACUA,kBADV;AAAA,UAC8BC,eAD9B,gBAC8BA,eAD9B;AAGP,UAAMW,aAAa,GAAGZ,kBAAkB,CAACY,aAAnB,IAAoC,EAA1D,CAHO,CAKP;;AACA,UAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,YAAY,EAAI;AAC3C1B,QAAAA,WAAW,CAAC2B,SAAZ,CAAsBJ,OAAtB,EAA+B;AAAEH,UAAAA,GAAG,EAAEM,YAAY,CAACN;AAApB,SAA/B;AACD,OAFD;;AAIA,UAAMQ,UAAU,GAAGf,eAAe,CAACgB,uBAAhB,IAA2C,CAA9D;;AAEA,UAAMC,YAAY,qBACb,KAAKpB,KADQ;AAEhBc,QAAAA,aAAa,EAAbA,aAFgB;AAGhBC,QAAAA,oBAAoB,EAApBA,oBAHgB;AAIhBG,QAAAA,UAAU,EAAVA,UAJgB;AAKhBG,QAAAA,OAAO,EAAEnB,kBAAkB,CAACmB;AALZ,QAAlB;;AAQA,aAAO,oBAAC,gBAAD,oBAAsBD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA5CqCxB,KAAK,CAAC0B,a;;AA+C9C,IAAMC,oCAAoC,GAAG,SAAvCA,oCAAuC,CAAAvB,KAAK;AAAA,SAChD,oBAAC,6BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGwB,iCAAH,QAAGA,iCAAH;AAAA,WACC,oBAAC,yBAAD,oBACMxB,KADN;AAEE,MAAA,yBAAyB,EAAEwB,iCAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD;AAAA,GADH,CADgD;AAAA,CAAlD;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW;AAAA,2BAC9BA,WAD8B;AAEjCC,IAAAA,KAAK,EAAED,WAAW,CAACC,KAAZ,GAAoBC,QAAQ,CAACF,WAAW,CAACC,KAAb,EAAoB,EAApB,CAA5B,GAAsD;AAF5B;AAAA,CAAnC;;AAKA,eAAepC,SAAS,CACtBH,OAAO,CACLS,OAAO,CACLV,GAAG,CAACM,OAAO,CAACoC,oBAAT,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGL,WAAH,SAAGA,WAAH;AAAA,WAAsB;AAC7BlB,MAAAA,SAAS,EAAEb,cAAc,CAAC+B,WAAD,CADI;AAE7BM,MAAAA,2BAA2B,EAAE,IAFA;AAG7BC,MAAAA,WAAW,EAAE,cAHgB;AAI7B;AACAC,MAAAA,YAAY,EAAE;AALe,KAAtB;AAAA;AAFX,CAFK,CADF,EAcLrC,OAAO,CACLV,GAAG,CAACM,OAAO,CAAC0C,uBAAT,CADE,EAEL;AACEL,EAAAA,IAAI,EAAE,iBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGL,WAAH,SAAGA,WAAH;AAAA,WAAsB;AAC7BM,MAAAA,2BAA2B,EAAE,IADA;AAE7BxB,MAAAA,SAAS,EAAEiB,eAAe,CAACC,WAAD;AAFG,KAAtB;AAAA;AAFX,CAFK,CAdF,CAAP,CAwBEH,oCAxBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport ConversationList from 'modules/inbox/components/leftSidebar/ConversationList';\nimport { queries, subscriptions } from 'modules/inbox/graphql';\nimport { generateParams } from 'modules/inbox/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport {\n  ConversationsQueryResponse,\n  ConvesationsQueryVariables,\n  IConversation\n} from '../../types';\nimport { ConversationsTotalCountQueryResponse } from '../../types';\nimport { InboxManagementActionConsumer } from '../Inbox';\n\ntype Props = {\n  currentUser?: IUser;\n  history: any;\n  currentConversationId?: string;\n  toggleRowCheckbox: (conversation: IConversation[], checked: boolean) => void;\n  selectedConversations: IConversation[];\n  queryParams: any;\n};\n\ntype FinalProps = {\n  conversationsQuery: ConversationsQueryResponse;\n  totalCountQuery: ConversationsTotalCountQueryResponse;\n  updateCountsForNewMessage: () => void;\n} & Props;\n\nclass ConversationListContainer extends React.PureComponent<FinalProps> {\n  componentWillMount() {\n    const {\n      currentUser,\n      conversationsQuery,\n      totalCountQuery,\n      updateCountsForNewMessage\n    } = this.props;\n\n    conversationsQuery.subscribeToMore({\n      document: gql(subscriptions.conversationClientMessageInserted),\n      variables: { userId: currentUser ? currentUser._id : null },\n      updateQuery: () => {\n        if (updateCountsForNewMessage) {\n          updateCountsForNewMessage();\n        }\n\n        conversationsQuery.refetch();\n        totalCountQuery.refetch();\n      }\n    });\n  }\n\n  render() {\n    const { history, conversationsQuery, totalCountQuery } = this.props;\n\n    const conversations = conversationsQuery.conversations || [];\n\n    // on change conversation\n    const onChangeConversation = conversation => {\n      routerUtils.setParams(history, { _id: conversation._id });\n    };\n\n    const totalCount = totalCountQuery.conversationsTotalCount || 0;\n\n    const updatedProps = {\n      ...this.props,\n      conversations,\n      onChangeConversation,\n      totalCount,\n      loading: conversationsQuery.loading\n    };\n\n    return <ConversationList {...updatedProps} />;\n  }\n}\n\nconst ConversationListContainerWithRefetch = props => (\n  <InboxManagementActionConsumer>\n    {({ notifyConsumersOfManagementAction }) => (\n      <ConversationListContainer\n        {...props}\n        updateCountsForNewMessage={notifyConsumersOfManagementAction}\n      />\n    )}\n  </InboxManagementActionConsumer>\n);\n\nconst generateOptions = queryParams => ({\n  ...queryParams,\n  limit: queryParams.limit ? parseInt(queryParams.limit, 10) : 10\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, ConversationsQueryResponse, ConvesationsQueryVariables>(\n      gql(queries.sidebarConversations),\n      {\n        name: 'conversationsQuery',\n        options: ({ queryParams }) => ({\n          variables: generateParams(queryParams),\n          notifyOnNetworkStatusChange: true,\n          fetchPolicy: 'network-only',\n          // every minute\n          pollInterval: 60000\n        })\n      }\n    ),\n    graphql<Props, ConversationsTotalCountQueryResponse>(\n      gql(queries.totalConversationsCount),\n      {\n        name: 'totalCountQuery',\n        options: ({ queryParams }) => ({\n          notifyOnNetworkStatusChange: true,\n          variables: generateOptions(queryParams)\n        })\n      }\n    )\n  )(ConversationListContainerWithRefetch)\n);\n"]},"metadata":{},"sourceType":"module"}