{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/filters/SegmentFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport Segments from 'modules/segments/containers/Filter';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../../graphql';\n\nvar SegmentFilterContainer = function SegmentFilterContainer(props) {\n  var companyCountsQuery = props.companyCountsQuery;\n  var counts = (companyCountsQuery ? companyCountsQuery.companyCounts : null) || {\n    bySegment: {}\n  };\n  return React.createElement(Segments, {\n    contentType: \"company\",\n    counts: counts.bySegment || {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  });\n};\n\nexport default withProps(compose(graphql(gql(queries.companyCounts), {\n  name: 'companyCountsQuery',\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: {\n    variables: {\n      only: 'bySegment'\n    }\n  }\n}))(SegmentFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/filters/SegmentFilter.tsx"],"names":["gql","compose","withProps","Segments","React","graphql","queries","SegmentFilterContainer","props","companyCountsQuery","counts","companyCounts","bySegment","name","skip","loadingMainQuery","options","variables","only"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAGA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAEzB;AAAA,MACIC,kBADJ,GAC2BD,KAD3B,CACIC,kBADJ;AAGJ,MAAMC,MAAM,GAAG,CAACD,kBAAkB,GAC9BA,kBAAkB,CAACE,aADW,GAE9B,IAFW,KAEF;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAFb;AAIA,SAAO,oBAAC,QAAD;AAAU,IAAA,WAAW,EAAC,SAAtB;AAAgC,IAAA,MAAM,EAAEF,MAAM,CAACE,SAAP,IAAoB,EAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAVD;;AAYA,eAAeV,SAAS,CACtBD,OAAO,CACLI,OAAO,CAILL,GAAG,CAACM,OAAO,CAACK,aAAT,CAJE,EAIuB;AAC5BE,EAAAA,IAAI,EAAE,oBADsB;AAE5BC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFsB;AAG5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADJ;AAHmB,CAJvB,CADF,CAAP,CAYEX,sBAZF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport Segments from 'modules/segments/containers/Filter';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\nconst SegmentFilterContainer = (props: {\n  companyCountsQuery?: CountQueryResponse;\n}) => {\n  const { companyCountsQuery } = props;\n\n  const counts = (companyCountsQuery\n    ? companyCountsQuery.companyCounts\n    : null) || { bySegment: {} };\n\n  return <Segments contentType=\"company\" counts={counts.bySegment || {}} />;\n};\n\nexport default withProps<{ loadingMainQuery: boolean }>(\n  compose(\n    graphql<\n      { loadingMainQuery: boolean },\n      CountQueryResponse,\n      { only: string }\n    >(gql(queries.companyCounts), {\n      name: 'companyCountsQuery',\n      skip: ({ loadingMainQuery }) => loadingMainQuery,\n      options: {\n        variables: { only: 'bySegment' }\n      }\n    })\n  )(SegmentFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}