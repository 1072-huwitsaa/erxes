{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/MessageForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport MessageForm from '../components/MessageForm';\nimport { queries } from '../graphql';\n\nvar MessageFormContainer = function MessageFormContainer(props) {\n  var engageMessageDetailQuery = props.engageMessageDetailQuery,\n      brandsQuery = props.brandsQuery,\n      kind = props.kind;\n\n  if (engageMessageDetailQuery.loading || brandsQuery.loading) {\n    return null;\n  }\n\n  var message = engageMessageDetailQuery.engageMessageDetail;\n  var brands = brandsQuery.brands || [];\n\n  var updatedProps = _objectSpread({}, props, {\n    kind: message ? message.kind : kind,\n    brands: brands,\n    scheduleDate: message && message.scheduleDate\n  });\n\n  return React.createElement(MessageForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.engageMessageDetail), {\n  name: 'engageMessageDetailQuery',\n  options: function options(_ref) {\n    var messageId = _ref.messageId;\n    return {\n      variables: {\n        _id: messageId\n      }\n    };\n  }\n}), graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}))(MessageFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/MessageForm.tsx"],"names":["gql","compose","React","graphql","withProps","MessageForm","queries","MessageFormContainer","props","engageMessageDetailQuery","brandsQuery","kind","loading","message","engageMessageDetail","brands","updatedProps","scheduleDate","name","options","messageId","variables","_id"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAaA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAuB;AAAA,MAC1CC,wBAD0C,GACMD,KADN,CAC1CC,wBAD0C;AAAA,MAChBC,WADgB,GACMF,KADN,CAChBE,WADgB;AAAA,MACHC,IADG,GACMH,KADN,CACHG,IADG;;AAGlD,MAAIF,wBAAwB,CAACG,OAAzB,IAAoCF,WAAW,CAACE,OAApD,EAA6D;AAC3D,WAAO,IAAP;AACD;;AAED,MAAMC,OAAO,GAAGJ,wBAAwB,CAACK,mBAAzC;AACA,MAAMC,MAAM,GAAGL,WAAW,CAACK,MAAZ,IAAsB,EAArC;;AAEA,MAAMC,YAAY,qBACbR,KADa;AAEhBG,IAAAA,IAAI,EAAEE,OAAO,GAAGA,OAAO,CAACF,IAAX,GAAkBA,IAFf;AAGhBI,IAAAA,MAAM,EAANA,MAHgB;AAIhBE,IAAAA,YAAY,EAAEJ,OAAO,IAAIA,OAAO,CAACI;AAJjB,IAAlB;;AAOA,SAAO,oBAAC,WAAD,oBAAiBD,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAlBD;;AAoBA,eAAeZ,SAAS,CACtBH,OAAO,CACLE,OAAO,CACLH,GAAG,CAACM,OAAO,CAACQ,mBAAT,CADE,EAEL;AACEI,EAAAA,IAAI,EAAE,0BADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,SAAH,QAAGA,SAAH;AAAA,WAAoB;AAC3BC,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEF;AADI;AADgB,KAApB;AAAA;AAFX,CAFK,CADF,EAYLjB,OAAO,CAA6BH,GAAG,CAACM,OAAO,CAACS,MAAT,CAAhC,EAAkD;AACvDG,EAAAA,IAAI,EAAE;AADiD,CAAlD,CAZF,CAAP,CAeEX,oBAfF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport MessageForm from '../components/MessageForm';\nimport { queries } from '../graphql';\nimport { EngageMessageDetailQueryResponse } from '../types';\n\ntype Props = {\n  kind?: string;\n  messageId?: string;\n};\n\ntype FinalProps = {\n  engageMessageDetailQuery: EngageMessageDetailQueryResponse;\n  brandsQuery: BrandsQueryResponse;\n} & Props;\n\nconst MessageFormContainer = (props: FinalProps) => {\n  const { engageMessageDetailQuery, brandsQuery, kind } = props;\n\n  if (engageMessageDetailQuery.loading || brandsQuery.loading) {\n    return null;\n  }\n\n  const message = engageMessageDetailQuery.engageMessageDetail;\n  const brands = brandsQuery.brands || [];\n\n  const updatedProps = {\n    ...props,\n    kind: message ? message.kind : kind,\n    brands,\n    scheduleDate: message && message.scheduleDate\n  };\n\n  return <MessageForm {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, EngageMessageDetailQueryResponse, { _id?: string }>(\n      gql(queries.engageMessageDetail),\n      {\n        name: 'engageMessageDetailQuery',\n        options: ({ messageId }) => ({\n          variables: {\n            _id: messageId\n          }\n        })\n      }\n    ),\n    graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n      name: 'brandsQuery'\n    })\n  )(MessageFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}