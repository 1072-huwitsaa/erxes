{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/Vote.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport { Vote } from '../components/editForm';\nimport { mutations, queries } from '../graphql';\n\nvar VoteContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VoteContainer, _React$Component);\n\n  function VoteContainer() {\n    _classCallCheck(this, VoteContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VoteContainer).apply(this, arguments));\n  }\n\n  _createClass(VoteContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var onChangeVote = function onChangeVote(isVote) {\n        var _this$props = _this.props,\n            voteMutation = _this$props.voteMutation,\n            item = _this$props.item;\n        voteMutation({\n          variables: {\n            _id: item._id,\n            isVote: isVote\n          }\n        }).then(function (_ref) {\n          var growthHacksVote = _ref.data.growthHacksVote;\n          Alert.success('You successfully changed an experiment');\n\n          _this.props.onUpdate(growthHacksVote);\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        onChangeVote: onChangeVote\n      });\n\n      return React.createElement(Vote, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VoteContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.growthHacksVote), {\n  name: 'voteMutation',\n  options: function options(_ref2) {\n    var item = _ref2.item;\n    return {\n      refetchQueries: [{\n        query: gql(queries.growthHackDetail),\n        variables: {\n          _id: item._id\n        }\n      }]\n    };\n  }\n}))(VoteContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/Vote.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","Vote","mutations","queries","VoteContainer","onChangeVote","isVote","props","voteMutation","item","variables","_id","then","growthHacksVote","data","success","onUpdate","catch","error","message","updatedProps","Component","name","options","refetchQueries","query","growthHackDetail"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AAMA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;IAWMC,a;;;;;;;;;;;;;6BACK;AAAA;;AACP,UAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAqB;AAAA,0BACT,KAAI,CAACC,KADI;AAAA,YAChCC,YADgC,eAChCA,YADgC;AAAA,YAClBC,IADkB,eAClBA,IADkB;AAGxCD,QAAAA,YAAY,CAAC;AAAEE,UAAAA,SAAS,EAAE;AAAEC,YAAAA,GAAG,EAAEF,IAAI,CAACE,GAAZ;AAAiBL,YAAAA,MAAM,EAANA;AAAjB;AAAb,SAAD,CAAZ,CACGM,IADH,CACQ,gBAAmC;AAAA,cAAxBC,eAAwB,QAAhCC,IAAgC,CAAxBD,eAAwB;AACvChB,UAAAA,KAAK,CAACkB,OAAN,CAAc,wCAAd;;AAEA,UAAA,KAAI,CAACR,KAAL,CAAWS,QAAX,CAAoBH,eAApB;AACD,SALH,EAMGI,KANH,CAMS,UAAAC,KAAK,EAAI;AACdrB,UAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,SARH;AASD,OAZD;;AAcA,UAAMC,YAAY,qBACb,KAAKb,KADQ;AAEhBF,QAAAA,YAAY,EAAZA;AAFgB,QAAlB;;AAKA,aAAO,oBAAC,IAAD,oBAAUe,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAtByBrB,KAAK,CAACsB,S;;AAyBlC,eAAevB,SAAS,CACtBF,OAAO,CACLI,OAAO,CACLL,GAAG,CAACO,SAAS,CAACW,eAAX,CADE,EAEL;AACES,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGd,IAAH,SAAGA,IAAH;AAAA,WAAsC;AAC7Ce,MAAAA,cAAc,EAAE,CACd;AACEC,QAAAA,KAAK,EAAE9B,GAAG,CAACQ,OAAO,CAACuB,gBAAT,CADZ;AAEEhB,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEF,IAAI,CAACE;AAAZ;AAFb,OADc;AAD6B,KAAtC;AAAA;AAFX,CAFK,CADF,CAAP,CAeEP,aAfF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport {\n  IGrowthHack,\n  VoteMutation,\n  VoteVariables\n} from 'modules/growthHacks/types';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport { Vote } from '../components/editForm';\nimport { mutations, queries } from '../graphql';\n\ntype Props = {\n  item: IGrowthHack;\n  onUpdate: (item, prevStageId?: string) => void;\n};\n\ntype FinalProps = {\n  voteMutation: VoteMutation;\n} & Props;\n\nclass VoteContainer extends React.Component<FinalProps> {\n  render() {\n    const onChangeVote = (isVote: boolean) => {\n      const { voteMutation, item } = this.props;\n\n      voteMutation({ variables: { _id: item._id, isVote } })\n        .then(({ data: { growthHacksVote } }) => {\n          Alert.success('You successfully changed an experiment');\n\n          this.props.onUpdate(growthHacksVote);\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      onChangeVote\n    };\n\n    return <Vote {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, VoteMutation, VoteVariables>(\n      gql(mutations.growthHacksVote),\n      {\n        name: 'voteMutation',\n        options: ({ item }: { item: IGrowthHack }) => ({\n          refetchQueries: [\n            {\n              query: gql(queries.growthHackDetail),\n              variables: { _id: item._id }\n            }\n          ]\n        })\n      }\n    )\n  )(VoteContainer)\n);\n"]},"metadata":{},"sourceType":"module"}