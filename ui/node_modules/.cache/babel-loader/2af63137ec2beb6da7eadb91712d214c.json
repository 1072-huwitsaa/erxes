{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/BrandFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport BrandFilter from '../../components/list/BrandFilter';\nimport { queries as customerQueries } from '../../graphql';\n\nvar BrandFilterContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BrandFilterContainer, _React$Component);\n\n  function BrandFilterContainer() {\n    _classCallCheck(this, BrandFilterContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BrandFilterContainer).apply(this, arguments));\n  }\n\n  _createClass(BrandFilterContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          brandsQuery = _this$props.brandsQuery,\n          customersCountQuery = _this$props.customersCountQuery;\n      var counts = (customersCountQuery ? customersCountQuery.customerCounts : null) || {\n        byBrand: {}\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        brands: (brandsQuery ? brandsQuery.brands : []) || [],\n        loading: brandsQuery && brandsQuery.loading || false,\n        counts: counts.byBrand\n      });\n\n      return React.createElement(BrandFilter, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BrandFilterContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery',\n  skip: function skip(_ref) {\n    var loadingMainQuery = _ref.loadingMainQuery;\n    return loadingMainQuery;\n  }\n}), graphql(gql(customerQueries.customerCounts), {\n  name: 'customersCountQuery',\n  skip: function skip(_ref2) {\n    var loadingMainQuery = _ref2.loadingMainQuery;\n    return loadingMainQuery;\n  },\n  options: function options(_ref3) {\n    var type = _ref3.type;\n    return {\n      variables: {\n        type: type,\n        only: 'byBrand'\n      }\n    };\n  }\n}))(BrandFilterContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/filters/BrandFilter.tsx"],"names":["gql","compose","queries","React","graphql","withProps","BrandFilter","customerQueries","BrandFilterContainer","props","brandsQuery","customersCountQuery","counts","customerCounts","byBrand","updatedProps","brands","loading","Component","name","skip","loadingMainQuery","options","type","variables","only"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,iCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASJ,OAAO,IAAIK,eAApB,QAA2C,eAA3C;;IAQMC,oB;;;;;;;;;;;;;6BACK;AAAA,wBACsC,KAAKC,KAD3C;AAAA,UACCC,WADD,eACCA,WADD;AAAA,UACcC,mBADd,eACcA,mBADd;AAGP,UAAMC,MAAM,GAAG,CAACD,mBAAmB,GAC/BA,mBAAmB,CAACE,cADW,GAE/B,IAFW,KAEF;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFb;;AAIA,UAAMC,YAAY,qBACb,KAAKN,KADQ;AAEhBO,QAAAA,MAAM,EAAE,CAACN,WAAW,GAAGA,WAAW,CAACM,MAAf,GAAwB,EAApC,KAA2C,EAFnC;AAGhBC,QAAAA,OAAO,EAAGP,WAAW,IAAIA,WAAW,CAACO,OAA5B,IAAwC,KAHjC;AAIhBL,QAAAA,MAAM,EAAEA,MAAM,CAACE;AAJC,QAAlB;;AAOA,aAAO,oBAAC,WAAD,oBAAiBC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAhBgCZ,KAAK,CAACe,S;;AAwBzC,eAAeb,SAAS,CACtBJ,OAAO,CACLG,OAAO,CAAwCJ,GAAG,CAACE,OAAO,CAACc,MAAT,CAA3C,EAA6D;AAClEG,EAAAA,IAAI,EAAE,aAD4D;AAElEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,QAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA;AAF4D,CAA7D,CADF,EAKLjB,OAAO,CACLJ,GAAG,CAACO,eAAe,CAACM,cAAjB,CADE,EAEL;AACEM,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGC,gBAAH,SAAGA,gBAAH;AAAA,WAA0BA,gBAA1B;AAAA,GAFR;AAGEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,WAAe;AACtBC,MAAAA,SAAS,EAAE;AAAED,QAAAA,IAAI,EAAJA,IAAF;AAAQE,QAAAA,IAAI,EAAE;AAAd;AADW,KAAf;AAAA;AAHX,CAFK,CALF,CAAP,CAeEjB,oBAfF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { BrandsQueryResponse } from '../../../settings/brands/types';\nimport BrandFilter from '../../components/list/BrandFilter';\nimport { queries as customerQueries } from '../../graphql';\nimport { CountQueryResponse } from '../../types';\n\ntype Props = {\n  brandsQuery?: BrandsQueryResponse;\n  customersCountQuery?: CountQueryResponse;\n};\n\nclass BrandFilterContainer extends React.Component<Props> {\n  render() {\n    const { brandsQuery, customersCountQuery } = this.props;\n\n    const counts = (customersCountQuery\n      ? customersCountQuery.customerCounts\n      : null) || { byBrand: {} };\n\n    const updatedProps = {\n      ...this.props,\n      brands: (brandsQuery ? brandsQuery.brands : []) || [],\n      loading: (brandsQuery && brandsQuery.loading) || false,\n      counts: counts.byBrand\n    };\n\n    return <BrandFilter {...updatedProps} />;\n  }\n}\n\ntype WrapperProps = {\n  type: string;\n  loadingMainQuery: boolean;\n};\n\nexport default withProps<WrapperProps>(\n  compose(\n    graphql<WrapperProps, BrandsQueryResponse, {}>(gql(queries.brands), {\n      name: 'brandsQuery',\n      skip: ({ loadingMainQuery }) => loadingMainQuery\n    }),\n    graphql<WrapperProps, CountQueryResponse, { only: string }>(\n      gql(customerQueries.customerCounts),\n      {\n        name: 'customersCountQuery',\n        skip: ({ loadingMainQuery }) => loadingMainQuery,\n        options: ({ type }) => ({\n          variables: { type, only: 'byBrand' }\n        })\n      }\n    )\n  )(BrandFilterContainer)\n);\n"]},"metadata":{},"sourceType":"module"}