{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/components/Sidebar.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport EmptyState from \"modules/common/components/EmptyState\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport Spinner from \"modules/common/components/Spinner\";\nimport { TopHeader } from \"modules/common/styles/main\";\nimport LeftSidebar from \"modules/layout/components/Sidebar\";\nimport { SidebarList } from \"modules/layout/styles\";\nimport React from \"react\";\nimport ChannelForm from \"../containers/ChannelForm\";\nimport ChannelRow from \"./ChannelRow\";\n\nvar Sidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n\n  function Sidebar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderItems = function () {\n      var _this$props = _this.props,\n          channels = _this$props.channels,\n          remove = _this$props.remove,\n          currentChannelId = _this$props.currentChannelId,\n          renderButton = _this$props.renderButton;\n      return channels.map(function (channel) {\n        return React.createElement(ChannelRow, {\n          key: channel._id,\n          isActive: currentChannelId === channel._id,\n          channel: channel,\n          members: channel.members,\n          remove: remove,\n          renderButton: renderButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: \"renderSidebarHeader\",\n    value: function renderSidebarHeader() {\n      var renderButton = this.props.renderButton;\n      var addChannel = React.createElement(Button, {\n        btnStyle: \"success\",\n        block: true,\n        uppercase: false,\n        icon: \"plus-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Add New Channel\");\n\n      var content = function content(props) {\n        return React.createElement(ChannelForm, Object.assign({}, props, {\n          renderButton: renderButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(TopHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(ModalTrigger, {\n        title: \"New Channel\",\n        autoOpenKey: \"showChannelAddModal\",\n        trigger: addChannel,\n        content: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          loading = _this$props2.loading,\n          channelsTotalCount = _this$props2.channelsTotalCount;\n      return React.createElement(LeftSidebar, {\n        wide: true,\n        full: true,\n        header: this.renderSidebarHeader(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(SidebarList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.renderItems()), loading && React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), !loading && channelsTotalCount === 0 && React.createElement(EmptyState, {\n        image: \"/images/actions/18.svg\",\n        text: \"There is no channel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Sidebar;\n}(React.Component);\n\nexport default Sidebar;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/components/Sidebar.tsx"],"names":["Button","EmptyState","ModalTrigger","Spinner","TopHeader","LeftSidebar","SidebarList","React","ChannelForm","ChannelRow","Sidebar","renderItems","props","channels","remove","currentChannelId","renderButton","map","channel","_id","members","addChannel","content","loading","channelsTotalCount","renderSidebarHeader","Component"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,uCAAnB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,4BAA1B;AAEA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;IAWMC,O;;;;;;;;;;;;;;;;;;UACJC,W,GAAc,YAAM;AAAA,wBAC2C,MAAKC,KADhD;AAAA,UACVC,QADU,eACVA,QADU;AAAA,UACAC,MADA,eACAA,MADA;AAAA,UACQC,gBADR,eACQA,gBADR;AAAA,UAC0BC,YAD1B,eAC0BA,YAD1B;AAGlB,aAAOH,QAAQ,CAACI,GAAT,CAAa,UAACC,OAAD;AAAA,eAClB,oBAAC,UAAD;AACE,UAAA,GAAG,EAAEA,OAAO,CAACC,GADf;AAEE,UAAA,QAAQ,EAAEJ,gBAAgB,KAAKG,OAAO,CAACC,GAFzC;AAGE,UAAA,OAAO,EAAED,OAHX;AAIE,UAAA,OAAO,EAAEA,OAAO,CAACE,OAJnB;AAKE,UAAA,MAAM,EAAEN,MALV;AAME,UAAA,YAAY,EAAEE,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADkB;AAAA,OAAb,CAAP;AAUD,K;;;;;;;0CAEqB;AAAA,UACZA,YADY,GACK,KAAKJ,KADV,CACZI,YADY;AAGpB,UAAMK,UAAU,GACd,oBAAC,MAAD;AACE,QAAA,QAAQ,EAAC,SADX;AAEE,QAAA,KAAK,EAAE,IAFT;AAGE,QAAA,SAAS,EAAE,KAHb;AAIE,QAAA,IAAI,EAAC,aAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF;;AAWA,UAAMC,OAAO,GAAG,SAAVA,OAAU,CAACV,KAAD;AAAA,eACd,oBAAC,WAAD,oBAAiBA,KAAjB;AAAwB,UAAA,YAAY,EAAEI,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADc;AAAA,OAAhB;;AAIA,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAC,aADR;AAEE,QAAA,WAAW,EAAC,qBAFd;AAGE,QAAA,OAAO,EAAEK,UAHX;AAIE,QAAA,OAAO,EAAEC,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAUD;;;6BAEQ;AAAA,yBACiC,KAAKV,KADtC;AAAA,UACCW,OADD,gBACCA,OADD;AAAA,UACUC,kBADV,gBACUA,kBADV;AAGP,aACE,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAE,IAAnB;AAAyB,QAAA,IAAI,EAAE,IAA/B;AAAqC,QAAA,MAAM,EAAE,KAAKC,mBAAL,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAc,KAAKd,WAAL,EAAd,CADF,EAEGY,OAAO,IAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFd,EAGG,CAACA,OAAD,IAAYC,kBAAkB,KAAK,CAAnC,IACC,oBAAC,UAAD;AACE,QAAA,KAAK,EAAC,wBADR;AAEE,QAAA,IAAI,EAAC,qBAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADF;AAYD;;;;EA7DmBjB,KAAK,CAACmB,S;;AAgE5B,eAAehB,OAAf","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport EmptyState from \"modules/common/components/EmptyState\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport Spinner from \"modules/common/components/Spinner\";\nimport { TopHeader } from \"modules/common/styles/main\";\nimport { IButtonMutateProps } from \"modules/common/types\";\nimport LeftSidebar from \"modules/layout/components/Sidebar\";\nimport { SidebarList } from \"modules/layout/styles\";\nimport React from \"react\";\nimport ChannelForm from \"../containers/ChannelForm\";\nimport { IChannel } from \"../types\";\nimport ChannelRow from \"./ChannelRow\";\n\ntype Props = {\n  channels: IChannel[];\n  remove: (channelId: string) => void;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  loading: boolean;\n  currentChannelId?: string;\n  channelsTotalCount: number;\n};\n\nclass Sidebar extends React.Component<Props, {}> {\n  renderItems = () => {\n    const { channels, remove, currentChannelId, renderButton } = this.props;\n\n    return channels.map((channel) => (\n      <ChannelRow\n        key={channel._id}\n        isActive={currentChannelId === channel._id}\n        channel={channel}\n        members={channel.members}\n        remove={remove}\n        renderButton={renderButton}\n      />\n    ));\n  };\n\n  renderSidebarHeader() {\n    const { renderButton } = this.props;\n\n    const addChannel = (\n      <Button\n        btnStyle=\"success\"\n        block={true}\n        uppercase={false}\n        icon=\"plus-circle\"\n      >\n        Add New Channel\n      </Button>\n    );\n\n    const content = (props) => (\n      <ChannelForm {...props} renderButton={renderButton} />\n    );\n\n    return (\n      <TopHeader>\n        <ModalTrigger\n          title=\"New Channel\"\n          autoOpenKey=\"showChannelAddModal\"\n          trigger={addChannel}\n          content={content}\n        />\n      </TopHeader>\n    );\n  }\n\n  render() {\n    const { loading, channelsTotalCount } = this.props;\n\n    return (\n      <LeftSidebar wide={true} full={true} header={this.renderSidebarHeader()}>\n        <SidebarList>{this.renderItems()}</SidebarList>\n        {loading && <Spinner />}\n        {!loading && channelsTotalCount === 0 && (\n          <EmptyState\n            image=\"/images/actions/18.svg\"\n            text=\"There is no channel\"\n          />\n        )}\n      </LeftSidebar>\n    );\n  }\n}\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}