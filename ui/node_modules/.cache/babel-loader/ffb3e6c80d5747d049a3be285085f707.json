{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/containers/Boards.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { STORAGE_BOARD_KEY } from 'modules/boards/constants';\nimport { getDefaultBoardAndPipelines } from 'modules/boards/utils';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport routerUtils from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Boards from '../components/Boards';\nimport { getWarningMessage } from '../constants';\nimport { mutations, queries } from '../graphql';\n\nvar BoardsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BoardsContainer, _React$Component);\n\n  function BoardsContainer() {\n    _classCallCheck(this, BoardsContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BoardsContainer).apply(this, arguments));\n  }\n\n  _createClass(BoardsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          history = _this$props.history,\n          boardsQuery = _this$props.boardsQuery,\n          removeMutation = _this$props.removeMutation,\n          type = _this$props.type;\n      var boards = boardsQuery.boards || [];\n\n      var removeHash = function removeHash() {\n        var location = history.location;\n\n        if (location.hash.includes('showBoardModal')) {\n          routerUtils.removeHash(history, 'showBoardModal');\n        }\n      }; // remove action\n\n\n      var remove = function remove(boardId) {\n        confirm(getWarningMessage('Board'), {\n          hasDeleteConfirm: true\n        }).then(function () {\n          removeMutation({\n            variables: {\n              _id: boardId\n            },\n            refetchQueries: getRefetchQueries()\n          }).then(function () {\n            // if deleted board is default board\n            var _getDefaultBoardAndPi = getDefaultBoardAndPipelines(),\n                defaultBoards = _getDefaultBoardAndPi.defaultBoards;\n\n            var defaultBoardId = defaultBoards[type];\n\n            if (defaultBoardId === boardId) {\n              delete defaultBoards[type];\n              localStorage.setItem(STORAGE_BOARD_KEY, JSON.stringify(defaultBoards));\n            }\n\n            Alert.success('You successfully deleted a board');\n          }).catch(function (error) {\n            Alert.error(error.message);\n          });\n        });\n      };\n\n      var renderButton = function renderButton(_ref) {\n        var name = _ref.name,\n            values = _ref.values,\n            isSubmitted = _ref.isSubmitted,\n            callback = _ref.callback,\n            object = _ref.object;\n        return React.createElement(ButtonMutate, {\n          mutation: object ? mutations.boardEdit : mutations.boardAdd,\n          variables: values,\n          callback: callback,\n          refetchQueries: getRefetchQueries(),\n          isSubmitted: isSubmitted,\n          type: \"submit\",\n          beforeSubmit: removeHash,\n          successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      };\n\n      var extendedProps = _objectSpread({}, this.props, {\n        boards: boards,\n        renderButton: renderButton,\n        remove: remove,\n        removeHash: removeHash,\n        loading: boardsQuery.loading\n      });\n\n      return React.createElement(Boards, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BoardsContainer;\n}(React.Component);\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return ['boards', 'boardGetLast', 'pipelines'];\n};\n\nvar generateOptions = function generateOptions() {\n  return {\n    refetchQueries: getRefetchQueries()\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.boards), {\n  name: 'boardsQuery',\n  options: function options(_ref2) {\n    var type = _ref2.type;\n    return {\n      variables: {\n        type: type\n      }\n    };\n  }\n}), graphql(gql(mutations.boardRemove), {\n  name: 'removeMutation',\n  options: generateOptions()\n}))(withRouter(BoardsContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/containers/Boards.tsx"],"names":["gql","compose","STORAGE_BOARD_KEY","getDefaultBoardAndPipelines","ButtonMutate","Alert","confirm","withProps","routerUtils","React","graphql","withRouter","Boards","getWarningMessage","mutations","queries","BoardsContainer","props","history","boardsQuery","removeMutation","type","boards","removeHash","location","hash","includes","remove","boardId","hasDeleteConfirm","then","variables","_id","refetchQueries","getRefetchQueries","defaultBoards","defaultBoardId","localStorage","setItem","JSON","stringify","success","catch","error","message","renderButton","name","values","isSubmitted","callback","object","boardEdit","boardAdd","extendedProps","loading","Component","generateOptions","options","boardRemove"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { STORAGE_BOARD_KEY } from 'modules/boards/constants';\nimport { BoardsQueryResponse } from 'modules/boards/types';\nimport { getDefaultBoardAndPipelines } from 'modules/boards/utils';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport routerUtils from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Boards from '../components/Boards';\nimport { getWarningMessage } from '../constants';\nimport { mutations, queries } from '../graphql';\nimport { IOption, RemoveBoardMutationResponse } from '../types';\n\ntype Props = {\n  history?: any;\n  currentBoardId?: string;\n  type: string;\n  options?: IOption;\n};\n\ntype FinalProps = {\n  boardsQuery: BoardsQueryResponse;\n} & Props &\n  IRouterProps &\n  RemoveBoardMutationResponse;\n\nclass BoardsContainer extends React.Component<FinalProps> {\n  render() {\n    const { history, boardsQuery, removeMutation, type } = this.props;\n\n    const boards = boardsQuery.boards || [];\n\n    const removeHash = () => {\n      const { location } = history;\n\n      if (location.hash.includes('showBoardModal')) {\n        routerUtils.removeHash(history, 'showBoardModal');\n      }\n    };\n\n    // remove action\n    const remove = boardId => {\n      confirm(getWarningMessage('Board'), { hasDeleteConfirm: true }).then(\n        () => {\n          removeMutation({\n            variables: { _id: boardId },\n            refetchQueries: getRefetchQueries()\n          })\n            .then(() => {\n              // if deleted board is default board\n              const { defaultBoards } = getDefaultBoardAndPipelines();\n              const defaultBoardId = defaultBoards[type];\n\n              if (defaultBoardId === boardId) {\n                delete defaultBoards[type];\n\n                localStorage.setItem(\n                  STORAGE_BOARD_KEY,\n                  JSON.stringify(defaultBoards)\n                );\n              }\n\n              Alert.success('You successfully deleted a board');\n            })\n            .catch(error => {\n              Alert.error(error.message);\n            });\n        }\n      );\n    };\n\n    const renderButton = ({\n      name,\n      values,\n      isSubmitted,\n      callback,\n      object\n    }: IButtonMutateProps) => {\n      return (\n        <ButtonMutate\n          mutation={object ? mutations.boardEdit : mutations.boardAdd}\n          variables={values}\n          callback={callback}\n          refetchQueries={getRefetchQueries()}\n          isSubmitted={isSubmitted}\n          type=\"submit\"\n          beforeSubmit={removeHash}\n          successMessage={`You successfully ${\n            object ? 'updated' : 'added'\n          } a ${name}`}\n        />\n      );\n    };\n\n    const extendedProps = {\n      ...this.props,\n      boards,\n      renderButton,\n      remove,\n      removeHash,\n      loading: boardsQuery.loading\n    };\n\n    return <Boards {...extendedProps} />;\n  }\n}\n\nconst getRefetchQueries = () => {\n  return ['boards', 'boardGetLast', 'pipelines'];\n};\n\nconst generateOptions = () => ({\n  refetchQueries: getRefetchQueries()\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BoardsQueryResponse, {}>(gql(queries.boards), {\n      name: 'boardsQuery',\n      options: ({ type }) => ({\n        variables: { type }\n      })\n    }),\n    graphql<Props, RemoveBoardMutationResponse, {}>(\n      gql(mutations.boardRemove),\n      {\n        name: 'removeMutation',\n        options: generateOptions()\n      }\n    )\n  )(withRouter<FinalProps>(BoardsContainer))\n);\n"]},"metadata":{},"sourceType":"module"}