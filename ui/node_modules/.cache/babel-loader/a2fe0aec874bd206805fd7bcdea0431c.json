{"ast":null,"code":"import gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport { commonListComposer } from '../../utils';\nimport GroupList from '../components/GroupList';\nimport { mutations, queries } from '../graphql';\n\nvar commonOptions = function commonOptions() {\n  return {\n    refetchQueries: [{\n      query: gql(queries.usersGroups)\n    }]\n  };\n};\n\nexport default commonListComposer({\n  label: 'usersGroups',\n  text: 'user group',\n  stringEditMutation: mutations.usersGroupsEdit,\n  stringAddMutation: mutations.usersGroupsAdd,\n  stringCopyMutation: mutations.usersGroupsCopy,\n  gqlListQuery: graphql(gql(queries.usersGroups), {\n    name: 'listQuery',\n    options: function options(_ref) {\n      var queryParams = _ref.queryParams;\n      return {\n        notifyOnNetworkStatusChange: true,\n        variables: {\n          perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n        }\n      };\n    }\n  }),\n  gqlTotalCountQuery: graphql(gql(queries.userTotalCount), {\n    name: 'totalCountQuery'\n  }),\n  gqlAddMutation: graphql(gql(mutations.usersGroupsAdd), {\n    name: 'addMutation',\n    options: commonOptions()\n  }),\n  gqlEditMutation: graphql(gql(mutations.usersGroupsEdit), {\n    name: 'editMutation',\n    options: commonOptions()\n  }),\n  gqlRemoveMutation: graphql(gql(mutations.usersGroupsRemove), {\n    name: 'removeMutation',\n    options: commonOptions()\n  }),\n  gqlCopyMutation: graphql(gql(mutations.usersGroupsCopy), {\n    name: 'copyMutation',\n    options: commonOptions()\n  }),\n  ListComponent: GroupList\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/permissions/containers/GroupList.tsx"],"names":["gql","graphql","commonListComposer","GroupList","mutations","queries","commonOptions","refetchQueries","query","usersGroups","label","text","stringEditMutation","usersGroupsEdit","stringAddMutation","usersGroupsAdd","stringCopyMutation","usersGroupsCopy","gqlListQuery","name","options","queryParams","notifyOnNetworkStatusChange","variables","perPage","limit","parseInt","gqlTotalCountQuery","userTotalCount","gqlAddMutation","gqlEditMutation","gqlRemoveMutation","usersGroupsRemove","gqlCopyMutation","ListComponent"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;AAcA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAO;AAC3BC,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAER,GAAG,CAACK,OAAO,CAACI,WAAT;AAAZ,KAAD;AADW,GAAP;AAAA,CAAtB;;AAIA,eAAeP,kBAAkB,CAAQ;AACvCQ,EAAAA,KAAK,EAAE,aADgC;AAEvCC,EAAAA,IAAI,EAAE,YAFiC;AAGvCC,EAAAA,kBAAkB,EAAER,SAAS,CAACS,eAHS;AAIvCC,EAAAA,iBAAiB,EAAEV,SAAS,CAACW,cAJU;AAKvCC,EAAAA,kBAAkB,EAAEZ,SAAS,CAACa,eALS;AAOvCC,EAAAA,YAAY,EAAEjB,OAAO,CACnBD,GAAG,CAACK,OAAO,CAACI,WAAT,CADgB,EAEnB;AACEU,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE,uBAAqB;AAAA,UAAlBC,WAAkB,QAAlBA,WAAkB;AAC5B,aAAO;AACLC,QAAAA,2BAA2B,EAAE,IADxB;AAELC,QAAAA,SAAS,EAAE;AACTC,UAAAA,OAAO,EAAEH,WAAW,CAACI,KAAZ,GAAoBC,QAAQ,CAACL,WAAW,CAACI,KAAb,EAAoB,EAApB,CAA5B,GAAsD;AADtD;AAFN,OAAP;AAMD;AATH,GAFmB,CAPkB;AAsBvCE,EAAAA,kBAAkB,EAAE1B,OAAO,CACzBD,GAAG,CAACK,OAAO,CAACuB,cAAT,CADsB,EAEzB;AACET,IAAAA,IAAI,EAAE;AADR,GAFyB,CAtBY;AA6BvCU,EAAAA,cAAc,EAAE5B,OAAO,CACrBD,GAAG,CAACI,SAAS,CAACW,cAAX,CADkB,EAErB;AACEI,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,OAAO,EAAEd,aAAa;AAFxB,GAFqB,CA7BgB;AAqCvCwB,EAAAA,eAAe,EAAE7B,OAAO,CACtBD,GAAG,CAACI,SAAS,CAACS,eAAX,CADmB,EAEtB;AACEM,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAEd,aAAa;AAFxB,GAFsB,CArCe;AA6CvCyB,EAAAA,iBAAiB,EAAE9B,OAAO,CACxBD,GAAG,CAACI,SAAS,CAAC4B,iBAAX,CADqB,EAExB;AACEb,IAAAA,IAAI,EAAE,gBADR;AAEEC,IAAAA,OAAO,EAAEd,aAAa;AAFxB,GAFwB,CA7Ca;AAqDvC2B,EAAAA,eAAe,EAAEhC,OAAO,CACtBD,GAAG,CAACI,SAAS,CAACa,eAAX,CADmB,EAEtB;AACEE,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAEd,aAAa;AAFxB,GAFsB,CArDe;AA6DvC4B,EAAAA,aAAa,EAAE/B;AA7DwB,CAAR,CAAjC","sourcesContent":["import gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport { commonListComposer } from '../../utils';\nimport GroupList from '../components/GroupList';\nimport { mutations, queries } from '../graphql';\nimport {\n  UsersGroupsAddMutation,\n  UsersGroupsCopyMutation,\n  UsersGroupsEditMutation,\n  UsersGroupsQueryResponse,\n  UsersGroupsRemoveMutation,\n  UsersGroupsTotalCountQueryResponse\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n};\n\nconst commonOptions = () => ({\n  refetchQueries: [{ query: gql(queries.usersGroups) }]\n});\n\nexport default commonListComposer<Props>({\n  label: 'usersGroups',\n  text: 'user group',\n  stringEditMutation: mutations.usersGroupsEdit,\n  stringAddMutation: mutations.usersGroupsAdd,\n  stringCopyMutation: mutations.usersGroupsCopy,\n\n  gqlListQuery: graphql<Props, UsersGroupsQueryResponse>(\n    gql(queries.usersGroups),\n    {\n      name: 'listQuery',\n      options: ({ queryParams }) => {\n        return {\n          notifyOnNetworkStatusChange: true,\n          variables: {\n            perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n          }\n        };\n      }\n    }\n  ),\n\n  gqlTotalCountQuery: graphql<{}, UsersGroupsTotalCountQueryResponse>(\n    gql(queries.userTotalCount),\n    {\n      name: 'totalCountQuery'\n    }\n  ),\n\n  gqlAddMutation: graphql<{}, UsersGroupsAddMutation>(\n    gql(mutations.usersGroupsAdd),\n    {\n      name: 'addMutation',\n      options: commonOptions()\n    }\n  ),\n\n  gqlEditMutation: graphql<{}, UsersGroupsEditMutation>(\n    gql(mutations.usersGroupsEdit),\n    {\n      name: 'editMutation',\n      options: commonOptions()\n    }\n  ),\n\n  gqlRemoveMutation: graphql<{}, UsersGroupsRemoveMutation>(\n    gql(mutations.usersGroupsRemove),\n    {\n      name: 'removeMutation',\n      options: commonOptions()\n    }\n  ),\n\n  gqlCopyMutation: graphql<{}, UsersGroupsCopyMutation>(\n    gql(mutations.usersGroupsCopy),\n    {\n      name: 'copyMutation',\n      options: commonOptions()\n    }\n  ),\n\n  ListComponent: GroupList\n});\n"]},"metadata":{},"sourceType":"module"}