{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/containers/ManageIntegrations.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ManageIntegrations from 'modules/settings/integrations/containers/common/ManageIntegrations';\nimport { integrationsListParams } from 'modules/settings/integrations/containers/utils';\nimport { queries as integQueries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\n\nvar ManageIntegrationsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ManageIntegrationsContainer, _React$Component);\n\n  function ManageIntegrationsContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ManageIntegrationsContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ManageIntegrationsContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.save = function (integrationIds) {\n      var _this$props = _this.props,\n          currentChannel = _this$props.currentChannel,\n          editMutation = _this$props.editMutation;\n      return editMutation({\n        variables: {\n          _id: currentChannel._id,\n          name: currentChannel.name,\n          integrationIds: integrationIds,\n          memberIds: currentChannel.memberIds\n        }\n      }).then(function () {\n        Alert.success('You successfully managed an integration');\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ManageIntegrationsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var currentChannel = this.props.currentChannel;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        current: currentChannel,\n        save: this.save\n      });\n\n      return React.createElement(ManageIntegrations, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ManageIntegrationsContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.channelEdit), {\n  name: 'editMutation',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams,\n        currentChannel = _ref.currentChannel;\n    return {\n      refetchQueries: [{\n        query: gql(integQueries.integrations),\n        variables: _objectSpread({\n          channelId: currentChannel._id\n        }, integrationsListParams(queryParams))\n      }, {\n        query: gql(queries.channelDetail),\n        variables: {\n          _id: currentChannel._id\n        }\n      }, {\n        query: gql(queries.integrationsCount),\n        variables: {\n          channelId: currentChannel._id\n        }\n      }]\n    };\n  }\n}))(ManageIntegrationsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/channels/containers/ManageIntegrations.tsx"],"names":["gql","compose","Alert","withProps","ManageIntegrations","integrationsListParams","queries","integQueries","React","graphql","mutations","ManageIntegrationsContainer","save","integrationIds","props","currentChannel","editMutation","variables","_id","name","memberIds","then","success","catch","e","error","message","updatedProps","current","Component","channelEdit","options","queryParams","refetchQueries","query","integrations","channelId","channelDetail","integrationsCount"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,SAASC,sBAAT,QAAuC,gDAAvC;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,uCAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,EAAoBJ,OAApB,QAAmC,YAAnC;;IAcMK,2B;;;;;;;;;;;;;;;;;;UACJC,I,GAAO,UAACC,cAAD,EAA4C;AAAA,wBACR,MAAKC,KADG;AAAA,UACzCC,cADyC,eACzCA,cADyC;AAAA,UACzBC,YADyB,eACzBA,YADyB;AAGjD,aAAOA,YAAY,CAAC;AAClBC,QAAAA,SAAS,EAAE;AACTC,UAAAA,GAAG,EAAEH,cAAc,CAACG,GADX;AAETC,UAAAA,IAAI,EAAEJ,cAAc,CAACI,IAFZ;AAGTN,UAAAA,cAAc,EAAdA,cAHS;AAITO,UAAAA,SAAS,EAAEL,cAAc,CAACK;AAJjB;AADO,OAAD,CAAZ,CAQJC,IARI,CAQC,YAAM;AACVnB,QAAAA,KAAK,CAACoB,OAAN,CAAc,yCAAd;AACD,OAVI,EAWJC,KAXI,CAWE,UAAAC,CAAC,EAAI;AACVtB,QAAAA,KAAK,CAACuB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,OAbI,CAAP;AAcD,K;;;;;;;6BAEQ;AAAA,UACCX,cADD,GACoB,KAAKD,KADzB,CACCC,cADD;;AAGP,UAAMY,YAAY,qBACb,KAAKb,KADQ;AAEhBc,QAAAA,OAAO,EAAEb,cAFO;AAGhBH,QAAAA,IAAI,EAAE,KAAKA;AAHK,QAAlB;;AAMA,aAAO,oBAAC,kBAAD,oBAAwBe,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA9BuCnB,KAAK,CAACqB,S;;AAiChD,eAAe1B,SAAS,CACtBF,OAAO,CACLQ,OAAO,CACLT,GAAG,CAACU,SAAS,CAACoB,WAAX,CADE,EAEL;AACEX,EAAAA,IAAI,EAAE,cADR;AAEEY,EAAAA,OAAO,EAAE,uBAMH;AAAA,QALJC,WAKI,QALJA,WAKI;AAAA,QAJJjB,cAII,QAJJA,cAII;AACJ,WAAO;AACLkB,MAAAA,cAAc,EAAE,CACd;AACEC,QAAAA,KAAK,EAAElC,GAAG,CAACO,YAAY,CAAC4B,YAAd,CADZ;AAEElB,QAAAA,SAAS;AACPmB,UAAAA,SAAS,EAAErB,cAAc,CAACG;AADnB,WAEJb,sBAAsB,CAAC2B,WAAD,CAFlB;AAFX,OADc,EAQd;AACEE,QAAAA,KAAK,EAAElC,GAAG,CAACM,OAAO,CAAC+B,aAAT,CADZ;AAEEpB,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEH,cAAc,CAACG;AAAtB;AAFb,OARc,EAYd;AACEgB,QAAAA,KAAK,EAAElC,GAAG,CAACM,OAAO,CAACgC,iBAAT,CADZ;AAEErB,QAAAA,SAAS,EAAE;AAAEmB,UAAAA,SAAS,EAAErB,cAAc,CAACG;AAA5B;AAFb,OAZc;AADX,KAAP;AAmBD;AA5BH,CAFK,CADF,CAAP,CAkCEP,2BAlCF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ManageIntegrations from 'modules/settings/integrations/containers/common/ManageIntegrations';\nimport { integrationsListParams } from 'modules/settings/integrations/containers/utils';\nimport { queries as integQueries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport {\n  EditChannelMutationResponse,\n  EditChannelMutationVariables,\n  IChannelDoc\n} from '../types';\n\ntype Props = {\n  currentChannel: IChannelDoc;\n  queryParams: any;\n};\n\ntype FinalProps = Props & EditChannelMutationResponse;\n\nclass ManageIntegrationsContainer extends React.Component<FinalProps, {}> {\n  save = (integrationIds: string[]): Promise<any> => {\n    const { currentChannel, editMutation } = this.props;\n\n    return editMutation({\n      variables: {\n        _id: currentChannel._id,\n        name: currentChannel.name,\n        integrationIds,\n        memberIds: currentChannel.memberIds\n      }\n    })\n      .then(() => {\n        Alert.success('You successfully managed an integration');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  render() {\n    const { currentChannel } = this.props;\n\n    const updatedProps = {\n      ...this.props,\n      current: currentChannel,\n      save: this.save\n    };\n\n    return <ManageIntegrations {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, EditChannelMutationResponse, EditChannelMutationVariables>(\n      gql(mutations.channelEdit),\n      {\n        name: 'editMutation',\n        options: ({\n          queryParams,\n          currentChannel\n        }: {\n          queryParams: any;\n          currentChannel: IChannelDoc;\n        }) => {\n          return {\n            refetchQueries: [\n              {\n                query: gql(integQueries.integrations),\n                variables: {\n                  channelId: currentChannel._id,\n                  ...integrationsListParams(queryParams)\n                }\n              },\n              {\n                query: gql(queries.channelDetail),\n                variables: { _id: currentChannel._id }\n              },\n              {\n                query: gql(queries.integrationsCount),\n                variables: { channelId: currentChannel._id }\n              }\n            ]\n          };\n        }\n      }\n    )\n  )(ManageIntegrationsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}