{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/TagStep.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport TagStep from 'modules/engage/components/step/TagStep';\nimport { mutations } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../graphql';\nimport { sumCounts } from '../utils';\n\nvar TagStepContianer = function TagStepContianer(props) {\n  var tagsQuery = props.tagsQuery,\n      customerCountsQuery = props.customerCountsQuery;\n  var customerCounts = customerCountsQuery.customerCounts || {\n    byTag: {}\n  };\n  var countValues = customerCounts.byTag || {};\n\n  var customersCount = function customersCount(ids) {\n    return sumCounts(ids, countValues);\n  };\n\n  var renderButton = function renderButton(_ref) {\n    var values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback;\n    return React.createElement(ButtonMutate, {\n      mutation: mutations.add,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(),\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      successMessage: \"You successfully added a tag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    tags: tagsQuery.tags || [],\n    targetCount: countValues,\n    customersCount: customersCount,\n    renderButton: renderButton\n  });\n\n  return React.createElement(TagStep, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return [{\n    query: gql(queries.customerCounts),\n    variables: {\n      only: 'byTag'\n    }\n  }, {\n    query: gql(queries.tags),\n    variables: {\n      type: 'customer'\n    }\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.tags), {\n  name: 'tagsQuery',\n  options: function options() {\n    return {\n      variables: {\n        type: 'customer'\n      }\n    };\n  }\n}), graphql(gql(queries.customerCounts), {\n  name: 'customerCountsQuery',\n  options: {\n    variables: {\n      only: 'byTag'\n    }\n  }\n}))(TagStepContianer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/TagStep.tsx"],"names":["gql","compose","ButtonMutate","withProps","TagStep","mutations","React","graphql","queries","sumCounts","TagStepContianer","props","tagsQuery","customerCountsQuery","customerCounts","byTag","countValues","customersCount","ids","renderButton","values","isSubmitted","callback","add","getRefetchQueries","updatedProps","tags","targetCount","query","variables","only","type","name","options"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport { CountQueryResponse } from 'modules/customers/types';\nimport TagStep from 'modules/engage/components/step/TagStep';\nimport { mutations } from 'modules/tags/graphql';\nimport { TagsQueryResponse } from 'modules/tags/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../graphql';\nimport { sumCounts } from '../utils';\n\ntype Props = {\n  tagIds: string[];\n  messageType: string;\n  renderContent: ({\n    actionSelector,\n    selectedComponent,\n    customerCounts\n  }: {\n    actionSelector: React.ReactNode;\n    selectedComponent: React.ReactNode;\n    customerCounts: React.ReactNode;\n  }) => React.ReactNode;\n  onChange: (name: string, value: string[]) => void;\n};\n\ntype FinalProps = {\n  tagsQuery: TagsQueryResponse;\n  customerCountsQuery: CountQueryResponse;\n} & Props;\n\nconst TagStepContianer = (props: FinalProps) => {\n  const { tagsQuery, customerCountsQuery } = props;\n\n  const customerCounts = customerCountsQuery.customerCounts || {\n    byTag: {}\n  };\n\n  const countValues = customerCounts.byTag || {};\n  const customersCount = (ids: string[]) => sumCounts(ids, countValues);\n\n  const renderButton = ({\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={mutations.add}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries()}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully added a tag`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    tags: tagsQuery.tags || [],\n    targetCount: countValues,\n    customersCount,\n    renderButton\n  };\n\n  return <TagStep {...updatedProps} />;\n};\n\nconst getRefetchQueries = () => {\n  return [\n    {\n      query: gql(queries.customerCounts),\n      variables: { only: 'byTag' }\n    },\n    {\n      query: gql(queries.tags),\n      variables: { type: 'customer' }\n    }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, TagsQueryResponse>(gql(queries.tags), {\n      name: 'tagsQuery',\n      options: () => ({ variables: { type: 'customer' } })\n    }),\n    graphql<Props, CountQueryResponse, { only: string }>(\n      gql(queries.customerCounts),\n      {\n        name: 'customerCountsQuery',\n        options: {\n          variables: {\n            only: 'byTag'\n          }\n        }\n      }\n    )\n  )(TagStepContianer)\n);\n"]},"metadata":{},"sourceType":"module"}