{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/components/product/ProductTotal.tsx\";\nimport { FormControl } from 'modules/common/components/form';\nimport { Amount, ContentColumn, ContentRow, Measure } from 'modules/deals/styles';\nimport React from 'react';\n\nvar ProductTotal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductTotal, _React$Component);\n\n  function ProductTotal(props) {\n    var _this;\n\n    _classCallCheck(this, ProductTotal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProductTotal).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.props.updateTotal();\n    };\n\n    _this.taxAmountLogic = function (amount, pData) {\n      if (amount > 0) {\n        pData.tax = (amount - pData.discount) * pData.taxPercent / 100;\n        pData.amount = amount - (pData.discount || 0) + (pData.tax || 0);\n      } else {\n        pData.amount = 0;\n        pData.discount = 0;\n        pData.tax = 0;\n      }\n    };\n\n    _this.onChangePercent = function (e) {\n      var value = Number(e.target.value);\n      var _this$props = _this.props,\n          productsData = _this$props.productsData,\n          kindTxt = _this$props.kindTxt,\n          onChangeProductsData = _this$props.onChangeProductsData,\n          updateTotal = _this$props.updateTotal,\n          currency = _this$props.currency;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = productsData.filter(function (item) {\n          return item.currency === currency;\n        })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pData = _step.value;\n          var amount = pData.unitPrice * pData.quantity;\n\n          switch (kindTxt) {\n            case 'discount':\n              {\n                pData.discountPercent = value;\n                pData.discount = amount * value / 100;\n                break;\n              }\n\n            case 'tax':\n              {\n                pData.taxPercent = value;\n                break;\n              }\n          }\n\n          _this.taxAmountLogic(amount, pData);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      onChangeProductsData(productsData);\n      updateTotal();\n    };\n\n    _this.onChange = function (e) {\n      // only total discount has editable\n      var value = Number(e.target.value);\n      var _this$props2 = _this.props,\n          productsData = _this$props2.productsData,\n          onChangeProductsData = _this$props2.onChangeProductsData,\n          updateTotal = _this$props2.updateTotal,\n          currency = _this$props2.currency;\n      var currencyProData = productsData.filter(function (item) {\n        return item.currency === currency;\n      });\n      var sumAmount = currencyProData.reduce(function (sum, cur) {\n        return sum + cur.unitPrice * cur.quantity;\n      }, 0);\n      var tmpPercent = value * 100 / sumAmount;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = currencyProData[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var pData = _step2.value;\n          var amount = pData.unitPrice * pData.quantity;\n          pData.discount = amount / sumAmount * value;\n          pData.discountPercent = tmpPercent;\n\n          _this.taxAmountLogic(amount, pData);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      onChangeProductsData(productsData);\n      updateTotal();\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(ProductTotal, [{\n    key: \"renderTotalPercent\",\n    value: function renderTotalPercent() {\n      var _this$props3 = this.props,\n          totalKind = _this$props3.totalKind,\n          kindTxt = _this$props3.kindTxt;\n\n      if (kindTxt === 'total') {\n        return;\n      }\n\n      return React.createElement(ContentRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        value: parseFloat((totalKind.percent || 0).toFixed(3)),\n        type: \"number\",\n        min: 0,\n        max: 100,\n        placeholder: \"0\",\n        name: kindTxt,\n        onChange: this.onChangePercent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(Measure, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"%\"));\n    }\n  }, {\n    key: \"renderTotalDiscount\",\n    value: function renderTotalDiscount() {\n      var _this$props4 = this.props,\n          currency = _this$props4.currency,\n          kindTxt = _this$props4.kindTxt,\n          totalKind = _this$props4.totalKind;\n\n      if (kindTxt !== 'discount') {\n        return;\n      }\n\n      return React.createElement(ContentRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        value: parseFloat(totalKind.value.toFixed(3)),\n        type: \"number\",\n        placeholder: \"0\",\n        name: kindTxt,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(Measure, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, currency));\n    }\n  }, {\n    key: \"renderTax\",\n    value: function renderTax() {\n      var _this$props5 = this.props,\n          currency = _this$props5.currency,\n          kindTxt = _this$props5.kindTxt,\n          totalKind = _this$props5.totalKind;\n\n      if (kindTxt !== 'tax') {\n        return;\n      }\n\n      return React.createElement(Amount, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, totalKind.value.toLocaleString(), \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, currency));\n    }\n  }, {\n    key: \"renderTotal\",\n    value: function renderTotal() {\n      var _this$props6 = this.props,\n          currency = _this$props6.currency,\n          kindTxt = _this$props6.kindTxt,\n          totalKind = _this$props6.totalKind;\n\n      if (kindTxt !== 'total') {\n        return;\n      }\n\n      return React.createElement(Amount, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, totalKind.toLocaleString(), \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, currency));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ContentRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(ContentColumn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, this.renderTotalPercent()), React.createElement(ContentColumn, {\n        flex: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, this.renderTotalDiscount(), this.renderTax(), this.renderTotal()));\n    }\n  }]);\n\n  return ProductTotal;\n}(React.Component);\n\nexport default ProductTotal;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/components/product/ProductTotal.tsx"],"names":["FormControl","Amount","ContentColumn","ContentRow","Measure","React","ProductTotal","props","componentDidMount","updateTotal","taxAmountLogic","amount","pData","tax","discount","taxPercent","onChangePercent","e","value","Number","target","productsData","kindTxt","onChangeProductsData","currency","filter","item","unitPrice","quantity","discountPercent","onChange","currencyProData","sumAmount","reduce","sum","cur","tmpPercent","state","totalKind","parseFloat","percent","toFixed","toLocaleString","renderTotalPercent","renderTotalDiscount","renderTax","renderTotal","Component"],"mappings":"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","sourcesContent":["import { FormControl } from 'modules/common/components/form';\nimport {\n  Amount,\n  ContentColumn,\n  ContentRow,\n  Measure\n} from 'modules/deals/styles';\nimport { IProductData } from 'modules/deals/types';\nimport React from 'react';\n\ntype Props = {\n  kindTxt: string;\n  totalKind: { value: number; percent?: number };\n  currency: string;\n  productsData: IProductData[];\n  updateTotal: () => void;\n  onChangeProductsData: (productsData: IProductData[]) => void;\n};\n\ntype State = {};\n\nclass ProductTotal extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount = () => {\n    this.props.updateTotal();\n  };\n\n  taxAmountLogic = (amount, pData) => {\n    if (amount > 0) {\n      pData.tax = ((amount - pData.discount) * pData.taxPercent) / 100;\n      pData.amount = amount - (pData.discount || 0) + (pData.tax || 0);\n    } else {\n      pData.amount = 0;\n      pData.discount = 0;\n      pData.tax = 0;\n    }\n  };\n\n  onChangePercent = e => {\n    const value = Number((e.target as HTMLInputElement).value);\n    const {\n      productsData,\n      kindTxt,\n      onChangeProductsData,\n      updateTotal,\n      currency\n    } = this.props;\n\n    for (const pData of productsData.filter(\n      item => item.currency === currency\n    )) {\n      const amount = pData.unitPrice * pData.quantity;\n      switch (kindTxt) {\n        case 'discount': {\n          pData.discountPercent = value;\n          pData.discount = (amount * value) / 100;\n          break;\n        }\n        case 'tax': {\n          pData.taxPercent = value;\n          break;\n        }\n      }\n      this.taxAmountLogic(amount, pData);\n    }\n\n    onChangeProductsData(productsData);\n    updateTotal();\n  };\n\n  onChange = e => {\n    // only total discount has editable\n    const value = Number((e.target as HTMLInputElement).value);\n    const {\n      productsData,\n      onChangeProductsData,\n      updateTotal,\n      currency\n    } = this.props;\n\n    const currencyProData = productsData.filter(\n      item => item.currency === currency\n    );\n    const sumAmount = currencyProData.reduce(\n      (sum, cur) => sum + cur.unitPrice * cur.quantity,\n      0\n    );\n    const tmpPercent = (value * 100) / sumAmount;\n\n    for (const pData of currencyProData) {\n      const amount = pData.unitPrice * pData.quantity;\n      pData.discount = (amount / sumAmount) * value;\n      pData.discountPercent = tmpPercent;\n      this.taxAmountLogic(amount, pData);\n    }\n\n    onChangeProductsData(productsData);\n    updateTotal();\n  };\n\n  renderTotalPercent() {\n    const { totalKind, kindTxt } = this.props;\n\n    if (kindTxt === 'total') {\n      return;\n    }\n\n    return (\n      <ContentRow>\n        <FormControl\n          value={parseFloat((totalKind.percent || 0).toFixed(3))}\n          type=\"number\"\n          min={0}\n          max={100}\n          placeholder=\"0\"\n          name={kindTxt}\n          onChange={this.onChangePercent}\n        />\n        <Measure>%</Measure>\n      </ContentRow>\n    );\n  }\n\n  renderTotalDiscount() {\n    const { currency, kindTxt, totalKind } = this.props;\n\n    if (kindTxt !== 'discount') {\n      return;\n    }\n\n    return (\n      <ContentRow>\n        <FormControl\n          value={parseFloat(totalKind.value.toFixed(3))}\n          type=\"number\"\n          placeholder=\"0\"\n          name={kindTxt}\n          onChange={this.onChange}\n        />\n        <Measure>{currency}</Measure>\n      </ContentRow>\n    );\n  }\n\n  renderTax() {\n    const { currency, kindTxt, totalKind } = this.props;\n\n    if (kindTxt !== 'tax') {\n      return;\n    }\n\n    return (\n      <Amount>\n        {totalKind.value.toLocaleString()} <b>{currency}</b>\n      </Amount>\n    );\n  }\n\n  renderTotal() {\n    const { currency, kindTxt, totalKind } = this.props;\n\n    if (kindTxt !== 'total') {\n      return;\n    }\n\n    return (\n      <Amount>\n        {totalKind.toLocaleString()} <b>{currency}</b>\n      </Amount>\n    );\n  }\n\n  render() {\n    return (\n      <ContentRow>\n        <ContentColumn>{this.renderTotalPercent()}</ContentColumn>\n        <ContentColumn flex=\"2\">\n          {this.renderTotalDiscount()}\n          {this.renderTax()}\n          {this.renderTotal()}\n        </ContentColumn>\n      </ContentRow>\n    );\n  }\n}\n\nexport default ProductTotal;\n"]},"metadata":{},"sourceType":"module"}