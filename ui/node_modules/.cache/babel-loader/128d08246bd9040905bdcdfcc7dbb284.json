{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport { toggleCheckBoxes } from '../utils';\n\nvar Bulk =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Bulk, _React$Component);\n\n  function Bulk(props) {\n    var _this;\n\n    _classCallCheck(this, Bulk);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bulk).call(this, props));\n\n    _this.toggleBulk = function (target, toAdd) {\n      var bulk = _this.state.bulk; // remove old entry\n\n      bulk = bulk.filter(function (el) {\n        return el._id !== target._id;\n      });\n\n      if (toAdd) {\n        bulk.push(target);\n      }\n\n      _this.setState({\n        bulk: bulk\n      });\n    };\n\n    _this.toggleAll = function (targets, containerId) {\n      if (_this.state.isAllSelected) {\n        _this.emptyBulk();\n      } else {\n        _this.setState({\n          bulk: targets\n        });\n      }\n\n      var isAllSelected = _this.state.isAllSelected;\n      toggleCheckBoxes(containerId, !isAllSelected);\n\n      _this.setState({\n        isAllSelected: !isAllSelected\n      });\n    };\n\n    _this.emptyBulk = function () {\n      var refetch = _this.props.refetch;\n\n      if (refetch) {\n        refetch();\n      }\n\n      _this.setState({\n        bulk: [],\n        isAllSelected: false\n      });\n    };\n\n    _this.state = {\n      bulk: [],\n      isAllSelected: false\n    };\n    return _this;\n  }\n\n  _createClass(Bulk, [{\n    key: \"render\",\n    value: function render() {\n      var toggleBulk = this.toggleBulk,\n          toggleAll = this.toggleAll,\n          emptyBulk = this.emptyBulk;\n      var _this$state = this.state,\n          bulk = _this$state.bulk,\n          isAllSelected = _this$state.isAllSelected;\n      return this.props.content({\n        bulk: bulk,\n        isAllSelected: isAllSelected,\n        emptyBulk: emptyBulk,\n        toggleBulk: toggleBulk,\n        toggleAll: toggleAll\n      });\n    }\n  }]);\n\n  return Bulk;\n}(React.Component);\n\nexport { Bulk as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/Bulk.tsx"],"names":["React","toggleCheckBoxes","Bulk","props","toggleBulk","target","toAdd","bulk","state","filter","el","_id","push","setState","toggleAll","targets","containerId","isAllSelected","emptyBulk","refetch","content","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,UAAjC;;IAoB8BC,I;;;;;AAC5B,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;;AADiB,UAMnBC,UANmB,GAMN,UAACC,MAAD,EAASC,KAAT,EAAmB;AAAA,UACxBC,IADwB,GACf,MAAKC,KADU,CACxBD,IADwB,EAE9B;;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAY,UAACC,EAAD;AAAA,eAAaA,EAAE,CAACC,GAAH,KAAWN,MAAM,CAACM,GAA/B;AAAA,OAAZ,CAAP;;AAEA,UAAIL,KAAJ,EAAW;AACTC,QAAAA,IAAI,CAACK,IAAL,CAAUP,MAAV;AACD;;AAED,YAAKQ,QAAL,CAAc;AAAEN,QAAAA,IAAI,EAAJA;AAAF,OAAd;AACD,KAhBkB;;AAAA,UAkBnBO,SAlBmB,GAkBP,UAACC,OAAD,EAAUC,WAAV,EAA0B;AACpC,UAAI,MAAKR,KAAL,CAAWS,aAAf,EAA8B;AAC5B,cAAKC,SAAL;AACD,OAFD,MAEO;AACL,cAAKL,QAAL,CAAc;AAAEN,UAAAA,IAAI,EAAEQ;AAAR,SAAd;AACD;;AALmC,UAO5BE,aAP4B,GAOV,MAAKT,KAPK,CAO5BS,aAP4B;AASpChB,MAAAA,gBAAgB,CAACe,WAAD,EAAc,CAACC,aAAf,CAAhB;;AAEA,YAAKJ,QAAL,CAAc;AAAEI,QAAAA,aAAa,EAAE,CAACA;AAAlB,OAAd;AACD,KA9BkB;;AAAA,UAgCnBC,SAhCmB,GAgCP,YAAM;AAAA,UACRC,OADQ,GACI,MAAKhB,KADT,CACRgB,OADQ;;AAGhB,UAAIA,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;;AAED,YAAKN,QAAL,CAAc;AAAEN,QAAAA,IAAI,EAAE,EAAR;AAAYU,QAAAA,aAAa,EAAE;AAA3B,OAAd;AACD,KAxCkB;;AAGjB,UAAKT,KAAL,GAAa;AAAED,MAAAA,IAAI,EAAE,EAAR;AAAYU,MAAAA,aAAa,EAAE;AAA3B,KAAb;AAHiB;AAIlB;;;;6BAsCQ;AAAA,UACCb,UADD,GACsC,IADtC,CACCA,UADD;AAAA,UACaU,SADb,GACsC,IADtC,CACaA,SADb;AAAA,UACwBI,SADxB,GACsC,IADtC,CACwBA,SADxB;AAAA,wBAEyB,KAAKV,KAF9B;AAAA,UAECD,IAFD,eAECA,IAFD;AAAA,UAEOU,aAFP,eAEOA,aAFP;AAIP,aAAO,KAAKd,KAAL,CAAWiB,OAAX,CAAmB;AACxBb,QAAAA,IAAI,EAAJA,IADwB;AAExBU,QAAAA,aAAa,EAAbA,aAFwB;AAGxBC,QAAAA,SAAS,EAATA,SAHwB;AAIxBd,QAAAA,UAAU,EAAVA,UAJwB;AAKxBU,QAAAA,SAAS,EAATA;AALwB,OAAnB,CAAP;AAOD;;;;EAtDwCd,KAAK,CAACqB,S;;SAAnBnB,I","sourcesContent":["import React from 'react';\nimport { toggleCheckBoxes } from '../utils';\n\nexport interface IBulkContentProps {\n  isAllSelected: boolean;\n  bulk: any[];\n  emptyBulk: () => void;\n  toggleBulk: (target: any, toAdd: boolean) => void;\n  toggleAll: (targets: any[], containerId: string) => void;\n}\n\ntype Props = {\n  content: (props: IBulkContentProps) => React.ReactNode;\n  refetch?: () => void;\n};\n\ntype State = {\n  bulk: string[];\n  isAllSelected: boolean;\n};\n\nexport default abstract class Bulk extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = { bulk: [], isAllSelected: false };\n  }\n\n  toggleBulk = (target, toAdd) => {\n    let { bulk } = this.state;\n    // remove old entry\n    bulk = bulk.filter((el: any) => el._id !== target._id);\n\n    if (toAdd) {\n      bulk.push(target);\n    }\n\n    this.setState({ bulk });\n  };\n\n  toggleAll = (targets, containerId) => {\n    if (this.state.isAllSelected) {\n      this.emptyBulk();\n    } else {\n      this.setState({ bulk: targets });\n    }\n\n    const { isAllSelected } = this.state;\n\n    toggleCheckBoxes(containerId, !isAllSelected);\n\n    this.setState({ isAllSelected: !isAllSelected });\n  };\n\n  emptyBulk = () => {\n    const { refetch } = this.props;\n\n    if (refetch) {\n      refetch();\n    }\n\n    this.setState({ bulk: [], isAllSelected: false });\n  };\n\n  render() {\n    const { toggleBulk, toggleAll, emptyBulk } = this;\n    const { bulk, isAllSelected } = this.state;\n\n    return this.props.content({\n      bulk,\n      isAllSelected,\n      emptyBulk,\n      toggleBulk,\n      toggleAll\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}