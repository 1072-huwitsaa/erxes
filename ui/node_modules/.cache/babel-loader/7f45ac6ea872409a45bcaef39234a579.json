{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomerForm.tsx\";\nimport { AppConsumer } from 'appContext';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport CustomerForm from '../components/list/CustomerForm';\nimport { mutations, queries } from '../graphql';\n\nvar CustomerFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomerFormContainer, _React$Component);\n\n  function CustomerFormContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CustomerFormContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomerFormContainer).call(this, props));\n\n    _this.changeRedirectType = function (redirectType) {\n      _this.setState({\n        redirectType: redirectType\n      });\n    };\n\n    _this.state = {\n      redirectType: undefined\n    };\n    return _this;\n  }\n\n  _createClass(CustomerFormContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          closeModal = _this$props.closeModal,\n          type = _this$props.type,\n          history = _this$props.history,\n          getAssociatedCustomer = _this$props.getAssociatedCustomer;\n      var redirectType = this.state.redirectType;\n\n      var renderButton = function renderButton(_ref) {\n        var name = _ref.name,\n            values = _ref.values,\n            isSubmitted = _ref.isSubmitted,\n            object = _ref.object,\n            resetSubmit = _ref.resetSubmit;\n\n        var afterSave = function afterSave(data) {\n          closeModal();\n\n          if (redirectType === 'detail') {\n            return history.push(\"/contacts/details/\".concat(data.customersAdd._id));\n          }\n\n          var currentLocation = \"\".concat(window.location.pathname).concat(window.location.search);\n\n          if (getAssociatedCustomer) {\n            getAssociatedCustomer(data.customersAdd);\n          }\n\n          if (redirectType === 'new') {\n            history.push(\"/contacts\");\n            history.replace(\"\".concat(currentLocation, \"#showCustomerModal=true\"));\n          }\n        };\n\n        values.state = type || 'customer';\n        return React.createElement(ButtonMutate, {\n          mutation: object ? mutations.customersEdit : mutations.customersAdd,\n          variables: values,\n          callback: afterSave,\n          refetchQueries: getRefetchQueries(),\n          isSubmitted: isSubmitted,\n          disableLoading: redirectType ? true : false,\n          disabled: isSubmitted,\n          type: \"submit\",\n          icon: \"check-circle\",\n          resetSubmit: resetSubmit,\n          uppercase: false,\n          successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        changeRedirectType: this.changeRedirectType,\n        renderButton: renderButton\n      });\n\n      return React.createElement(AppConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, function (_ref2) {\n        var currentUser = _ref2.currentUser;\n        return React.createElement(CustomerForm, Object.assign({}, updatedProps, {\n          currentUser: currentUser || {},\n          autoCompletionQuery: queries.customers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return CustomerFormContainer;\n}(React.Component);\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return ['customersMain', 'customers', 'customerCounts'];\n};\n\nexport default withRouter(CustomerFormContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomerForm.tsx"],"names":["AppConsumer","ButtonMutate","React","withRouter","CustomerForm","mutations","queries","CustomerFormContainer","props","changeRedirectType","redirectType","setState","state","undefined","closeModal","type","history","getAssociatedCustomer","renderButton","name","values","isSubmitted","object","resetSubmit","afterSave","data","push","customersAdd","_id","currentLocation","window","location","pathname","search","replace","customersEdit","getRefetchQueries","updatedProps","currentUser","customers","Component"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport { IUser } from 'modules/auth/types';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport {\n  IButtonMutateProps,\n  IQueryParams,\n  IRouterProps\n} from 'modules/common/types';\nimport { ICustomer } from 'modules/customers/types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport CustomerForm from '../components/list/CustomerForm';\nimport { mutations, queries } from '../graphql';\n\ntype Props = {\n  type?: string;\n  customer: ICustomer;\n  closeModal: () => void;\n  getAssociatedCustomer?: (customerId: string) => void;\n  queryParams: IQueryParams;\n};\n\ntype State = {\n  redirectType?: string;\n};\n\ntype FinalProps = {} & Props & IRouterProps;\nclass CustomerFormContainer extends React.Component<FinalProps, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectType: undefined\n    };\n  }\n\n  changeRedirectType = (redirectType: string) => {\n    this.setState({ redirectType });\n  };\n\n  render() {\n    const { closeModal, type, history, getAssociatedCustomer } = this.props;\n    const { redirectType } = this.state;\n\n    const renderButton = ({\n      name,\n      values,\n      isSubmitted,\n      object,\n      resetSubmit\n    }: IButtonMutateProps) => {\n      const afterSave = data => {\n        closeModal();\n\n        if (redirectType === 'detail') {\n          return history.push(`/contacts/details/${data.customersAdd._id}`);\n        }\n\n        const currentLocation = `${window.location.pathname}${window.location.search}`;\n\n        if (getAssociatedCustomer) {\n          getAssociatedCustomer(data.customersAdd);\n        }\n\n        if (redirectType === 'new') {\n          history.push(`/contacts`);\n          history.replace(`${currentLocation}#showCustomerModal=true`);\n        }\n      };\n\n      values.state = type || 'customer';\n\n      return (\n        <ButtonMutate\n          mutation={object ? mutations.customersEdit : mutations.customersAdd}\n          variables={values}\n          callback={afterSave}\n          refetchQueries={getRefetchQueries()}\n          isSubmitted={isSubmitted}\n          disableLoading={redirectType ? true : false}\n          disabled={isSubmitted}\n          type=\"submit\"\n          icon=\"check-circle\"\n          resetSubmit={resetSubmit}\n          uppercase={false}\n          successMessage={`You successfully ${\n            object ? 'updated' : 'added'\n          } a ${name}`}\n        />\n      );\n    };\n\n    const updatedProps = {\n      ...this.props,\n      changeRedirectType: this.changeRedirectType,\n      renderButton\n    };\n\n    return (\n      <AppConsumer>\n        {({ currentUser }) => (\n          <CustomerForm\n            {...updatedProps}\n            currentUser={currentUser || ({} as IUser)}\n            autoCompletionQuery={queries.customers}\n          />\n        )}\n      </AppConsumer>\n    );\n  }\n}\n\nconst getRefetchQueries = () => {\n  return ['customersMain', 'customers', 'customerCounts'];\n};\n\nexport default withRouter<FinalProps>(CustomerFormContainer);\n"]},"metadata":{},"sourceType":"module"}