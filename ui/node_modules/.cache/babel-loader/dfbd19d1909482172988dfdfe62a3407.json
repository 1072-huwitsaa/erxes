{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/productService/containers/product/detail/BasicInfo.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport BasicInfo from 'modules/settings/productService/components/product/detail/BasicInfo';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { mutations } from '../../../graphql';\n\nvar BasicInfoContainer = function BasicInfoContainer(props) {\n  var product = props.product,\n      productsRemove = props.productsRemove,\n      history = props.history;\n  var _id = product._id;\n\n  var remove = function remove() {\n    productsRemove({\n      variables: {\n        productIds: [_id]\n      }\n    }).then(function () {\n      Alert.success('You successfully deleted a product');\n      history.push('/settings/product-service');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    remove: remove\n  });\n\n  return React.createElement(BasicInfo, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n};\n\nvar generateOptions = function generateOptions() {\n  return {\n    refetchQueries: ['products', 'productCategories', 'productsTotalCount']\n  };\n};\n\nexport default withProps(compose(graphql(gql(mutations.productsRemove), {\n  name: 'productsRemove',\n  options: generateOptions\n}))(withRouter(BasicInfoContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/productService/containers/product/detail/BasicInfo.tsx"],"names":["gql","compose","Alert","withProps","BasicInfo","React","graphql","withRouter","mutations","BasicInfoContainer","props","product","productsRemove","history","_id","remove","variables","productIds","then","success","push","catch","e","error","message","updatedProps","generateOptions","refetchQueries","name","options"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,SAAP,MAAsB,qEAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAKA,SAASC,SAAT,QAA0B,kBAA1B;;AAWA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAuB;AAAA,MACxCC,OADwC,GACHD,KADG,CACxCC,OADwC;AAAA,MAC/BC,cAD+B,GACHF,KADG,CAC/BE,cAD+B;AAAA,MACfC,OADe,GACHH,KADG,CACfG,OADe;AAAA,MAGxCC,GAHwC,GAGhCH,OAHgC,CAGxCG,GAHwC;;AAKhD,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBH,IAAAA,cAAc,CAAC;AAAEI,MAAAA,SAAS,EAAE;AAAEC,QAAAA,UAAU,EAAE,CAACH,GAAD;AAAd;AAAb,KAAD,CAAd,CACGI,IADH,CACQ,YAAM;AACVhB,MAAAA,KAAK,CAACiB,OAAN,CAAc,oCAAd;AACAN,MAAAA,OAAO,CAACO,IAAR,CAAa,2BAAb;AACD,KAJH,EAKGC,KALH,CAKS,UAAAC,CAAC,EAAI;AACVpB,MAAAA,KAAK,CAACqB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,KAPH;AAQD,GATD;;AAWA,MAAMC,YAAY,qBACbf,KADa;AAEhBK,IAAAA,MAAM,EAANA;AAFgB,IAAlB;;AAKA,SAAO,oBAAC,SAAD,oBAAeU,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAtBD;;AAwBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AAC7BC,IAAAA,cAAc,EAAE,CAAC,UAAD,EAAa,mBAAb,EAAkC,oBAAlC;AADa,GAAP;AAAA,CAAxB;;AAIA,eAAexB,SAAS,CACtBF,OAAO,CACLK,OAAO,CACLN,GAAG,CAACQ,SAAS,CAACI,cAAX,CADE,EAEL;AACEgB,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,OAAO,EAAEH;AAFX,CAFK,CADF,CAAP,CAQEnB,UAAU,CAAaE,kBAAb,CARZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport BasicInfo from 'modules/settings/productService/components/product/detail/BasicInfo';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IUser } from '../../../../../auth/types';\nimport { IRouterProps } from '../../../../../common/types';\n\nimport { IProduct } from 'modules/settings/productService/types';\nimport { mutations } from '../../../graphql';\nimport { ProductRemoveMutationResponse } from '../../../types';\n\ntype Props = {\n  product: IProduct;\n};\n\ntype FinalProps = { currentUser: IUser } & Props &\n  IRouterProps &\n  ProductRemoveMutationResponse;\n\nconst BasicInfoContainer = (props: FinalProps) => {\n  const { product, productsRemove, history } = props;\n\n  const { _id } = product;\n\n  const remove = () => {\n    productsRemove({ variables: { productIds: [_id] } })\n      .then(() => {\n        Alert.success('You successfully deleted a product');\n        history.push('/settings/product-service');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    remove\n  };\n\n  return <BasicInfo {...updatedProps} />;\n};\n\nconst generateOptions = () => ({\n  refetchQueries: ['products', 'productCategories', 'productsTotalCount']\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<{}, ProductRemoveMutationResponse, { productIds: string[] }>(\n      gql(mutations.productsRemove),\n      {\n        name: 'productsRemove',\n        options: generateOptions\n      }\n    )\n  )(withRouter<FinalProps>(BasicInfoContainer))\n);\n"]},"metadata":{},"sourceType":"module"}