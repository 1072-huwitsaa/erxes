{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/responseTemplate/ResponseTemplate.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport ResponseTemplate from 'modules/inbox/components/conversationDetail/workarea/responseTemplate/ResponseTemplate';\nimport { queries } from 'modules/inbox/graphql';\nimport { queries as brandQuery } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar ResponseTemplateContainer = function ResponseTemplateContainer(props) {\n  var brandsQuery = props.brandsQuery;\n\n  if (brandsQuery.loading) {\n    return null;\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    brands: brandsQuery.brands\n  });\n\n  return React.createElement(ResponseTemplate, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(brandQuery.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(queries.responseTemplateList), {\n  name: 'responseTemplatesQuery'\n}))(ResponseTemplateContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/responseTemplate/ResponseTemplate.tsx"],"names":["gql","compose","withProps","ResponseTemplate","queries","brandQuery","React","graphql","ResponseTemplateContainer","props","brandsQuery","loading","updatedProps","brands","name","responseTemplateList"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,gBAAP,MAA6B,wFAA7B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASA,OAAO,IAAIC,UAApB,QAAsC,iCAAtC;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;;AAeA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAuB;AAAA,MAC/CC,WAD+C,GAC/BD,KAD+B,CAC/CC,WAD+C;;AAGvD,MAAIA,WAAW,CAACC,OAAhB,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MAAMC,YAAY,qBACbH,KADa;AAEhBI,IAAAA,MAAM,EAAEH,WAAW,CAACG;AAFJ,IAAlB;;AAKA,SAAO,oBAAC,gBAAD,oBAAsBD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAbD;;AAeA,eAAeV,SAAS,CACtBD,OAAO,CACLM,OAAO,CAA6BP,GAAG,CAACK,UAAU,CAACQ,MAAZ,CAAhC,EAAqD;AAC1DC,EAAAA,IAAI,EAAE;AADoD,CAArD,CADF,EAILP,OAAO,CAACP,GAAG,CAACI,OAAO,CAACW,oBAAT,CAAJ,EAAoC;AACzCD,EAAAA,IAAI,EAAE;AADmC,CAApC,CAJF,CAAP,CAOEN,yBAPF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport ResponseTemplate from 'modules/inbox/components/conversationDetail/workarea/responseTemplate/ResponseTemplate';\nimport { queries } from 'modules/inbox/graphql';\nimport { queries as brandQuery } from 'modules/settings/brands/graphql';\nimport { BrandsQueryResponse } from 'modules/settings/brands/types';\nimport {\n  IResponseTemplate,\n  ResponseTemplatesQueryResponse,\n  SaveResponseTemplateMutationResponse\n} from 'modules/settings/responseTemplates/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  onSelect: (responseTemplate?: IResponseTemplate) => void;\n  brandId?: string;\n  attachments: any[];\n  content: string;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n  responseTemplatesQuery: ResponseTemplatesQueryResponse;\n} & Props &\n  SaveResponseTemplateMutationResponse;\n\nconst ResponseTemplateContainer = (props: FinalProps) => {\n  const { brandsQuery } = props;\n\n  if (brandsQuery.loading) {\n    return null;\n  }\n\n  const updatedProps = {\n    ...props,\n    brands: brandsQuery.brands\n  };\n\n  return <ResponseTemplate {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse>(gql(brandQuery.brands), {\n      name: 'brandsQuery'\n    }),\n    graphql(gql(queries.responseTemplateList), {\n      name: 'responseTemplatesQuery'\n    })\n  )(ResponseTemplateContainer)\n);\n"]},"metadata":{},"sourceType":"module"}