{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _draftJs = require('draft-js');\n\nvar _Entry = require('./Entry');\n\nvar _Entry2 = _interopRequireDefault(_Entry);\n\nvar _addEmoji = require('../../modifiers/addEmoji');\n\nvar _addEmoji2 = _interopRequireDefault(_addEmoji);\n\nvar _getSearchText3 = require('../../utils/getSearchText');\n\nvar _getSearchText4 = _interopRequireDefault(_getSearchText3);\n\nvar _decodeOffsetKey = require('../../utils/decodeOffsetKey');\n\nvar _decodeOffsetKey2 = _interopRequireDefault(_decodeOffsetKey);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EmojiSuggestions = function (_Component) {\n  _inherits(EmojiSuggestions, _Component);\n\n  function EmojiSuggestions() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, EmojiSuggestions);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EmojiSuggestions.__proto__ || Object.getPrototypeOf(EmojiSuggestions)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isActive: false,\n      focusedOptionIndex: 0\n    }, _this.componentDidUpdate = function (prevProps, prevState) {\n      if (_this.popover) {\n        // In case the list shrinks there should be still an option focused.\n        // Note: this might run multiple times and deduct 1 until the condition is\n        // not fullfilled anymore.\n        var size = _this.filteredEmojis.size;\n\n        if (size > 0 && _this.state.focusedOptionIndex >= size) {\n          _this.setState({\n            focusedOptionIndex: size - 1\n          });\n        }\n\n        if (size <= 0) {\n          _this.closeDropdown();\n        }\n\n        var decoratorRect = _this.props.store.getPortalClientRect(_this.activeOffsetKey);\n\n        var newStyles = _this.props.positionSuggestions({\n          decoratorRect: decoratorRect,\n          prevProps: prevProps,\n          prevState: prevState,\n          props: _this.props,\n          state: _this.state,\n          filteredEmojis: _this.filteredEmojis,\n          popover: _this.popover\n        });\n\n        Object.keys(newStyles).forEach(function (key) {\n          _this.popover.style[key] = newStyles[key];\n        });\n      }\n    }, _this.componentWillUnmount = function () {\n      _this.props.callbacks.onChange = undefined;\n    }, _this.onEditorStateChange = function (editorState) {\n      var searches = _this.props.store.getAllSearches(); // if no search portal is active there is no need to show the popover\n\n\n      if (searches.size === 0) {\n        return editorState;\n      }\n\n      var removeList = function removeList() {\n        _this.props.store.resetEscapedSearch();\n\n        _this.closeDropdown();\n\n        return editorState;\n      }; // get the current selection\n\n\n      var selection = editorState.getSelection();\n      var anchorKey = selection.getAnchorKey();\n      var anchorOffset = selection.getAnchorOffset(); // the list should not be visible if a range is selected or the editor has no focus\n\n      if (!selection.isCollapsed() || !selection.getHasFocus()) return removeList(); // identify the start & end positon of each search-text\n\n      var offsetDetails = searches.map(function (offsetKey) {\n        return (0, _decodeOffsetKey2.default)(offsetKey);\n      }); // a leave can be empty when it is removed due e.g. using backspace\n\n      var leaves = offsetDetails.filter(function (_ref2) {\n        var blockKey = _ref2.blockKey;\n        return blockKey === anchorKey;\n      }).map(function (_ref3) {\n        var blockKey = _ref3.blockKey,\n            decoratorKey = _ref3.decoratorKey,\n            leafKey = _ref3.leafKey;\n        return editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]);\n      }); // if all leaves are undefined the popover should be removed\n\n      if (leaves.every(function (leave) {\n        return leave === undefined;\n      })) {\n        return removeList();\n      } // Checks that the cursor is after the @ character but still somewhere in\n      // the word (search term). Setting it to allow the cursor to be left of\n      // the @ causes troubles due selection confusion.\n\n\n      var plainText = editorState.getCurrentContent().getPlainText();\n      var selectionIsInsideWord = leaves.filter(function (leave) {\n        return leave !== undefined;\n      }).map(function (_ref4) {\n        var start = _ref4.start,\n            end = _ref4.end;\n        return start === 0 && anchorOffset === 1 && plainText.charAt(anchorOffset) !== ':' && /(\\s|^):[\\w]*/.test(plainText) && anchorOffset <= end || // : is the first character\n        anchorOffset > start + 1 && anchorOffset <= end // : is in the text or at the end\n        ;\n      });\n      if (selectionIsInsideWord.every(function (isInside) {\n        return isInside === false;\n      })) return removeList();\n      _this.activeOffsetKey = selectionIsInsideWord.filter(function (value) {\n        return value === true;\n      }).keySeq().first();\n\n      _this.onSearchChange(editorState, selection); // make sure the escaped search is reseted in the cursor since the user\n      // already switched to another emoji search\n\n\n      if (!_this.props.store.isEscaped(_this.activeOffsetKey)) {\n        _this.props.store.resetEscapedSearch();\n      } // If none of the above triggered to close the window, it's safe to assume\n      // the dropdown should be open. This is useful when a user focuses on another\n      // input field and then comes back: the dropdown will again.\n\n\n      if (!_this.state.isActive && !_this.props.store.isEscaped(_this.activeOffsetKey)) {\n        _this.openDropdown();\n      } // makes sure the focused index is reseted every time a new selection opens\n      // or the selection was moved to another emoji search\n\n\n      if (_this.lastSelectionIsInsideWord === undefined || !selectionIsInsideWord.equals(_this.lastSelectionIsInsideWord)) {\n        _this.setState({\n          focusedOptionIndex: 0\n        });\n      }\n\n      _this.lastSelectionIsInsideWord = selectionIsInsideWord;\n      return editorState;\n    }, _this.onSearchChange = function (editorState, selection) {\n      var _getSearchText = (0, _getSearchText4.default)(editorState, selection),\n          word = _getSearchText.word;\n\n      var searchValue = word.substring(1, word.length);\n\n      if (_this.lastSearchValue !== searchValue && typeof _this.props.onSearchChange === 'function') {\n        _this.lastSearchValue = searchValue;\n\n        _this.props.onSearchChange({\n          value: searchValue\n        });\n      }\n    }, _this.onDownArrow = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n      var newIndex = _this.state.focusedOptionIndex + 1;\n\n      _this.onEmojiFocus(newIndex >= _this.filteredEmojis.size ? 0 : newIndex);\n    }, _this.onTab = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n\n      _this.commitSelection();\n    }, _this.onUpArrow = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n\n      if (_this.filteredEmojis.size > 0) {\n        var newIndex = _this.state.focusedOptionIndex - 1;\n\n        _this.onEmojiFocus(Math.max(newIndex, 0));\n      }\n    }, _this.onEscape = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n\n      var activeOffsetKey = _this.lastSelectionIsInsideWord.filter(function (value) {\n        return value === true;\n      }).keySeq().first();\n\n      _this.props.store.escapeSearch(activeOffsetKey);\n\n      _this.closeDropdown(); // to force a re-render of the outer component to change the aria props\n\n\n      _this.props.store.setEditorState(_this.props.store.getEditorState());\n    }, _this.onEmojiSelect = function (emoji) {\n      _this.closeDropdown();\n\n      var newEditorState = (0, _addEmoji2.default)(_this.props.store.getEditorState(), emoji, _addEmoji.Mode.REPLACE);\n\n      _this.props.store.setEditorState(newEditorState);\n    }, _this.onEmojiFocus = function (index) {\n      var descendant = 'emoji-option-' + _this.key + '-' + index;\n      _this.props.ariaProps.ariaActiveDescendantID = descendant;\n\n      _this.setState({\n        focusedOptionIndex: index\n      }); // to force a re-render of the outer component to change the aria props\n\n\n      _this.props.store.setEditorState(_this.props.store.getEditorState());\n    }, _this.getEmojisForFilter = function () {\n      var selection = _this.props.store.getEditorState().getSelection();\n\n      var _getSearchText2 = (0, _getSearchText4.default)(_this.props.store.getEditorState(), selection),\n          word = _getSearchText2.word;\n\n      var emojiValue = word.substring(1, word.length).toLowerCase();\n\n      var filteredValues = _this.props.shortNames.filter(function (emojiShortName) {\n        return !emojiValue || emojiShortName.indexOf(emojiValue) > -1;\n      });\n\n      var size = filteredValues.size < 9 ? filteredValues.size : 9;\n      return filteredValues.setSize(size);\n    }, _this.commitSelection = function () {\n      _this.onEmojiSelect(_this.filteredEmojis.get(_this.state.focusedOptionIndex));\n\n      return 'handled';\n    }, _this.openDropdown = function () {\n      // This is a really nasty way of attaching & releasing the key related functions.\n      // It assumes that the keyFunctions object will not loose its reference and\n      // by this we can replace inner parameters spread over different modules.\n      // This better be some registering & unregistering logic. PRs are welcome :)\n      _this.props.callbacks.onDownArrow = _this.onDownArrow;\n      _this.props.callbacks.onUpArrow = _this.onUpArrow;\n      _this.props.callbacks.onEscape = _this.onEscape;\n      _this.props.callbacks.handleReturn = _this.commitSelection;\n      _this.props.callbacks.onTab = _this.onTab;\n      var descendant = 'emoji-option-' + _this.key + '-' + _this.state.focusedOptionIndex;\n      _this.props.ariaProps.ariaActiveDescendantID = descendant;\n      _this.props.ariaProps.ariaOwneeID = 'emojis-list-' + _this.key;\n      _this.props.ariaProps.ariaHasPopup = 'true';\n      _this.props.ariaProps.ariaExpanded = true;\n\n      _this.setState({\n        isActive: true\n      });\n\n      if (_this.props.onOpen) {\n        _this.props.onOpen();\n      }\n    }, _this.closeDropdown = function () {\n      // make sure none of these callbacks are triggered\n      _this.props.callbacks.onDownArrow = undefined;\n      _this.props.callbacks.onUpArrow = undefined;\n      _this.props.callbacks.onTab = undefined;\n      _this.props.callbacks.onEscape = undefined;\n      _this.props.callbacks.handleReturn = undefined;\n      _this.props.ariaProps.ariaHasPopup = 'false';\n      _this.props.ariaProps.ariaExpanded = false;\n      _this.props.ariaProps.ariaActiveDescendantID = undefined;\n      _this.props.ariaProps.ariaOwneeID = undefined;\n\n      _this.setState({\n        isActive: false\n      });\n\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(EmojiSuggestions, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.key = (0, _draftJs.genKey)();\n      this.props.callbacks.onChange = this.onEditorStateChange;\n    } // Get the first 6 emojis that match\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.isActive) {\n        return null;\n      }\n\n      this.filteredEmojis = this.getEmojisForFilter();\n\n      var _props = this.props,\n          _props$theme = _props.theme,\n          theme = _props$theme === undefined ? {} : _props$theme,\n          cacheBustParam = _props.cacheBustParam,\n          imagePath = _props.imagePath,\n          imageType = _props.imageType,\n          ariaProps = _props.ariaProps,\n          callbacks = _props.callbacks,\n          onClose = _props.onClose,\n          onOpen = _props.onOpen,\n          onSearchChange = _props.onSearchChange,\n          positionSuggestions = _props.positionSuggestions,\n          shortNames = _props.shortNames,\n          store = _props.store,\n          useNativeArt = _props.useNativeArt,\n          restProps = _objectWithoutProperties(_props, ['theme', 'cacheBustParam', 'imagePath', 'imageType', 'ariaProps', 'callbacks', 'onClose', 'onOpen', 'onSearchChange', 'positionSuggestions', 'shortNames', 'store', 'useNativeArt']);\n\n      return _react2.default.createElement('div', _extends({}, restProps, {\n        className: theme.emojiSuggestions,\n        role: 'listbox',\n        id: 'emojis-list-' + this.key,\n        ref: function ref(element) {\n          _this2.popover = element;\n        }\n      }), this.filteredEmojis.map(function (emoji, index) {\n        return _react2.default.createElement(_Entry2.default, {\n          key: emoji,\n          onEmojiSelect: _this2.onEmojiSelect,\n          onEmojiFocus: _this2.onEmojiFocus,\n          isFocused: _this2.state.focusedOptionIndex === index,\n          emoji: emoji,\n          index: index,\n          id: 'emoji-option-' + _this2.key + '-' + index,\n          theme: theme,\n          imagePath: imagePath,\n          imageType: imageType,\n          cacheBustParam: cacheBustParam,\n          useNativeArt: useNativeArt\n        });\n      }).toJS());\n    }\n  }]);\n\n  return EmojiSuggestions;\n}(_react.Component);\n\nexports.default = EmojiSuggestions;","map":null,"metadata":{},"sourceType":"script"}