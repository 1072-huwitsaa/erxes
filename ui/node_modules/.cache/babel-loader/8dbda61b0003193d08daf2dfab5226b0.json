{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/step/SegmentStep.tsx\";\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport Common from './Common';\nimport SegmentsForm from './forms/SegmentsForm';\n\nvar SegmentStep = function SegmentStep(props) {\n  var renderButton = props.renderButton,\n      onChange = props.onChange,\n      segments = props.segments,\n      segmentIds = props.segmentIds,\n      targetCount = props.targetCount,\n      customersCount = props.customersCount,\n      messageType = props.messageType,\n      renderContent = props.renderContent,\n      segmentFields = props.segmentFields,\n      headSegments = props.headSegments;\n  var formProps = {\n    fields: segmentFields,\n    headSegments: headSegments\n  };\n  var orderedSegments = [];\n  var icons = [];\n  segments.forEach(function (segment) {\n    if (!segment.subOf) {\n      orderedSegments.push.apply(orderedSegments, [segment].concat(_toConsumableArray(segment.getSubSegments)));\n    }\n  });\n  orderedSegments.forEach(function (segment) {\n    icons.push(React.createElement(React.Fragment, null, segment.subOf ? \"\\xA0\\xA0\\xA0\\xA0\\xA0\" : null, React.createElement(Icon, {\n      icon: \"chart-pie icon\",\n      style: {\n        color: segment.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  });\n  return React.createElement(Common, {\n    name: \"segmentIds\",\n    label: __('Create a segment'),\n    targetIds: segmentIds,\n    messageType: messageType,\n    targets: orderedSegments,\n    targetCount: targetCount,\n    customersCount: customersCount,\n    onChange: onChange,\n    renderButton: renderButton,\n    Form: SegmentsForm,\n    content: renderContent,\n    formProps: formProps,\n    icons: icons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  });\n};\n\nexport default SegmentStep;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/step/SegmentStep.tsx"],"names":["Icon","__","React","Common","SegmentsForm","SegmentStep","props","renderButton","onChange","segments","segmentIds","targetCount","customersCount","messageType","renderContent","segmentFields","headSegments","formProps","fields","orderedSegments","icons","forEach","segment","subOf","push","getSubSegments","color"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,qCAAjB;AAEA,SAASC,EAAT,QAAmB,sBAAnB;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAuBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAkB;AAAA,MAElCC,YAFkC,GAYhCD,KAZgC,CAElCC,YAFkC;AAAA,MAGlCC,QAHkC,GAYhCF,KAZgC,CAGlCE,QAHkC;AAAA,MAIlCC,QAJkC,GAYhCH,KAZgC,CAIlCG,QAJkC;AAAA,MAKlCC,UALkC,GAYhCJ,KAZgC,CAKlCI,UALkC;AAAA,MAMlCC,WANkC,GAYhCL,KAZgC,CAMlCK,WANkC;AAAA,MAOlCC,cAPkC,GAYhCN,KAZgC,CAOlCM,cAPkC;AAAA,MAQlCC,WARkC,GAYhCP,KAZgC,CAQlCO,WARkC;AAAA,MASlCC,aATkC,GAYhCR,KAZgC,CASlCQ,aATkC;AAAA,MAUlCC,aAVkC,GAYhCT,KAZgC,CAUlCS,aAVkC;AAAA,MAWlCC,YAXkC,GAYhCV,KAZgC,CAWlCU,YAXkC;AAcpC,MAAMC,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAEH,aADQ;AAEhBC,IAAAA,YAAY,EAAZA;AAFgB,GAAlB;AAKA,MAAMG,eAA2B,GAAG,EAApC;AACA,MAAMC,KAAwB,GAAG,EAAjC;AAEAX,EAAAA,QAAQ,CAACY,OAAT,CAAiB,UAAAC,OAAO,EAAI;AAC1B,QAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClBJ,MAAAA,eAAe,CAACK,IAAhB,OAAAL,eAAe,GAAMG,OAAN,4BAAkBA,OAAO,CAACG,cAA1B,GAAf;AACD;AACF,GAJD;AAMAN,EAAAA,eAAe,CAACE,OAAhB,CAAwB,UAAAC,OAAO,EAAI;AACjCF,IAAAA,KAAK,CAACI,IAAN,CACE,0CACGF,OAAO,CAACC,KAAR,GAAgB,sBAAhB,GAAmD,IADtD,EAEE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,gBAAX;AAA4B,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAEJ,OAAO,CAACI;AAAjB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAPD;AASA,SACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,YADP;AAEE,IAAA,KAAK,EAAEzB,EAAE,CAAC,kBAAD,CAFX;AAGE,IAAA,SAAS,EAAES,UAHb;AAIE,IAAA,WAAW,EAAEG,WAJf;AAKE,IAAA,OAAO,EAAEM,eALX;AAME,IAAA,WAAW,EAAER,WANf;AAOE,IAAA,cAAc,EAAEC,cAPlB;AAQE,IAAA,QAAQ,EAAEJ,QARZ;AASE,IAAA,YAAY,EAAED,YAThB;AAUE,IAAA,IAAI,EAAEH,YAVR;AAWE,IAAA,OAAO,EAAEU,aAXX;AAYE,IAAA,SAAS,EAAEG,SAZb;AAaE,IAAA,KAAK,EAAEG,KAbT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAiBD,CAtDD;;AAwDA,eAAef,WAAf","sourcesContent":["import Icon from 'erxes-common-ui/lib/components/icon';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport { TargetCount } from 'modules/engage/types';\nimport { ISegment } from 'modules/segments/types';\nimport React from 'react';\nimport Common from './Common';\nimport SegmentsForm from './forms/SegmentsForm';\n\ntype Props = {\n  messageType: string;\n  targetCount: TargetCount;\n  segmentIds: string[];\n  segments: ISegment[];\n  headSegments: ISegment[];\n  segmentFields: any[];\n  customersCount: (ids: string[]) => number;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  onChange: (name: string, value: string[]) => void;\n  renderContent: ({\n    actionSelector,\n    selectedComponent,\n    customerCounts\n  }: {\n    actionSelector: React.ReactNode;\n    selectedComponent: React.ReactNode;\n    customerCounts: React.ReactNode;\n  }) => React.ReactNode;\n};\n\nconst SegmentStep = (props: Props) => {\n  const {\n    renderButton,\n    onChange,\n    segments,\n    segmentIds,\n    targetCount,\n    customersCount,\n    messageType,\n    renderContent,\n    segmentFields,\n    headSegments\n  } = props;\n\n  const formProps = {\n    fields: segmentFields,\n    headSegments\n  };\n\n  const orderedSegments: ISegment[] = [];\n  const icons: React.ReactNode[] = [];\n\n  segments.forEach(segment => {\n    if (!segment.subOf) {\n      orderedSegments.push(segment, ...segment.getSubSegments);\n    }\n  });\n\n  orderedSegments.forEach(segment => {\n    icons.push(\n      <>\n        {segment.subOf ? '\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0' : null}\n        <Icon icon=\"chart-pie icon\" style={{ color: segment.color }} />\n      </>\n    );\n  });\n\n  return (\n    <Common<ISegment, IButtonMutateProps>\n      name=\"segmentIds\"\n      label={__('Create a segment')}\n      targetIds={segmentIds}\n      messageType={messageType}\n      targets={orderedSegments}\n      targetCount={targetCount}\n      customersCount={customersCount}\n      onChange={onChange}\n      renderButton={renderButton}\n      Form={SegmentsForm}\n      content={renderContent}\n      formProps={formProps}\n      icons={icons}\n    />\n  );\n};\n\nexport default SegmentStep;\n"]},"metadata":{},"sourceType":"module"}