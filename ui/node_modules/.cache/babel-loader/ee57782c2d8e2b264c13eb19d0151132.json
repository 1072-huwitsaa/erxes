{"ast":null,"code":"import _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/components/detail/CustomersMerge.tsx\";\nimport Button from 'erxes-common-ui/lib/components/button';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { SmallLoader } from 'modules/common/components/ButtonMutate';\nimport { Column, Columns, Title } from 'modules/common/styles/chooser';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __, renderFullName } from 'modules/common/utils';\nimport React from 'react';\nimport { CUSTOMER_BASIC_INFO, CUSTOMER_DATAS, CUSTOMER_LINKS } from '../../constants';\nimport { Info, InfoAvatar, InfoDetail, InfoTitle } from '../../styles';\n\nvar CustomersMerge =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomersMerge, _React$Component);\n\n  function CustomersMerge(props) {\n    var _this;\n\n    _classCallCheck(this, CustomersMerge);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomersMerge).call(this, props));\n\n    _this.save = function (e) {\n      e.preventDefault();\n      var objects = _this.props.objects;\n\n      var selectedValues = _objectSpread({}, _this.state.selectedValues);\n\n      var owner = selectedValues.owner;\n\n      if (owner) {\n        selectedValues.ownerId = owner._id;\n        delete selectedValues.owner;\n      }\n\n      _this.props.save({\n        ids: objects.map(function (customer) {\n          return customer._id;\n        }),\n        data: _objectSpread({}, selectedValues),\n        callback: function callback() {\n          _this.props.closeModal();\n        }\n      });\n    };\n\n    _this.handleChange = function (type, key, value) {\n      var selectedValues = _objectSpread({}, _this.state.selectedValues);\n\n      if (type === 'plus-1') {\n        selectedValues[key] = value;\n\n        if (key === 'links') {\n          var links = Object.assign(_objectSpread({}, _this.state.selectedValues.links), value);\n          selectedValues[key] = links;\n        }\n      } else {\n        delete selectedValues[key];\n      }\n\n      _this.setState({\n        selectedValues: selectedValues\n      });\n    };\n\n    _this.renderCustomer = function (customer, icon) {\n      var properties = CUSTOMER_BASIC_INFO.ALL.concat(CUSTOMER_DATAS.ALL);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, renderFullName(customer)), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, properties.map(function (info) {\n        var key = info.field;\n\n        if (!customer[key]) {\n          return null;\n        }\n\n        if (info.field === 'links') {\n          return _this.renderLinks(customer[key], icon);\n        }\n\n        return _this.renderCustomerProperties(key, customer[key], icon);\n      })));\n    };\n\n    _this.renderLinks = function (data, icon) {\n      return CUSTOMER_LINKS.ALL.map(function (info) {\n        var field = info.field;\n        var value = data[field];\n\n        if (!data[field]) {\n          return null;\n        }\n\n        return React.createElement(\"li\", {\n          key: field,\n          onClick: _this.handleChange.bind(_assertThisInitialized(_this), icon, \"links\", _defineProperty({}, field, value)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(InfoTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, info.label, \":\"), React.createElement(InfoDetail, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, value), React.createElement(Icon, {\n          icon: icon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }));\n      });\n    };\n\n    _this.state = {\n      selectedValues: {}\n    };\n    return _this;\n  }\n\n  _createClass(CustomersMerge, [{\n    key: \"renderCustomerProperties\",\n    value: function renderCustomerProperties(key, value, icon) {\n      return React.createElement(\"li\", {\n        key: key,\n        onClick: this.handleChange.bind(this, icon, key, value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, this.renderTitle(key), this.renderValue(key, value), React.createElement(Icon, {\n        icon: icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderTitle\",\n    value: function renderTitle(key) {\n      var title = CUSTOMER_BASIC_INFO[key] || CUSTOMER_DATAS[key];\n      return React.createElement(InfoTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, title, \":\");\n    }\n  }, {\n    key: \"renderValue\",\n    value: function renderValue(field, value) {\n      switch (field) {\n        case 'visitorContactInfo':\n          return this.renderVisitorContactInfo(value);\n\n        case 'owner':\n          return this.renderOwner(value);\n\n        case 'avatar':\n          return React.createElement(InfoAvatar, {\n            src: value,\n            alt: \"avatar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(InfoDetail, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, value);\n      }\n    }\n  }, {\n    key: \"renderVisitorContactInfo\",\n    value: function renderVisitorContactInfo(data) {\n      return React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(InfoTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, __('E-mail'), \": \"), React.createElement(InfoDetail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, data.email), React.createElement(InfoTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, __('Phone'), \": \"), React.createElement(InfoDetail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, data.phone));\n    }\n  }, {\n    key: \"renderOwner\",\n    value: function renderOwner(data) {\n      return React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(InfoTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Name: \"), React.createElement(InfoDetail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, data.details && data.details.fullName));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var selectedValues = this.state.selectedValues;\n      var _this$props = this.props,\n          objects = _this$props.objects,\n          closeModal = _this$props.closeModal,\n          mergeCustomerLoading = _this$props.mergeCustomerLoading;\n\n      var _objects = _slicedToArray(objects, 2),\n          customer1 = _objects[0],\n          customer2 = _objects[1];\n\n      return React.createElement(\"form\", {\n        onSubmit: this.save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Columns, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Column, {\n        className: \"multiple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, this.renderCustomer(customer1, 'plus-1')), React.createElement(Column, {\n        className: \"multiple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, this.renderCustomer(customer2, 'plus-1')), React.createElement(Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, this.renderCustomer(selectedValues, 'times'))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        onClick: closeModal,\n        icon: \"times-circle\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        type: \"submit\",\n        btnStyle: \"success\",\n        uppercase: false,\n        icon: mergeCustomerLoading ? undefined : 'check-circle',\n        disabled: mergeCustomerLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, mergeCustomerLoading && React.createElement(SmallLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), \"Save\")));\n    }\n  }]);\n\n  return CustomersMerge;\n}(React.Component);\n\nexport default CustomersMerge;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/components/detail/CustomersMerge.tsx"],"names":["Button","Icon","SmallLoader","Column","Columns","Title","ModalFooter","__","renderFullName","React","CUSTOMER_BASIC_INFO","CUSTOMER_DATAS","CUSTOMER_LINKS","Info","InfoAvatar","InfoDetail","InfoTitle","CustomersMerge","props","save","e","preventDefault","objects","selectedValues","state","owner","ownerId","_id","ids","map","customer","data","callback","closeModal","handleChange","type","key","value","links","Object","assign","setState","renderCustomer","icon","properties","ALL","concat","info","field","renderLinks","renderCustomerProperties","bind","label","renderTitle","renderValue","title","renderVisitorContactInfo","renderOwner","email","phone","details","fullName","mergeCustomerLoading","customer1","customer2","undefined","Component"],"mappings":"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","sourcesContent":["import Button from 'erxes-common-ui/lib/components/button';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { SmallLoader } from 'modules/common/components/ButtonMutate';\nimport { Column, Columns, Title } from 'modules/common/styles/chooser';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __, renderFullName } from 'modules/common/utils';\nimport React from 'react';\nimport { IUser } from '../../../auth/types';\nimport {\n  CUSTOMER_BASIC_INFO,\n  CUSTOMER_DATAS,\n  CUSTOMER_LINKS\n} from '../../constants';\nimport { Info, InfoAvatar, InfoDetail, InfoTitle } from '../../styles';\nimport {\n  ICustomer,\n  ICustomerDoc,\n  ICustomerLinks,\n  IVisitorContact\n} from '../../types';\n\ntype Props = {\n  objects: ICustomer[];\n  mergeCustomerLoading: boolean;\n  save: (doc: {\n    ids: string[];\n    data: ICustomerDoc;\n    callback: () => void;\n  }) => void;\n  closeModal: () => void;\n};\n\ntype State = {\n  selectedValues: any;\n};\n\nclass CustomersMerge extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedValues: {}\n    };\n  }\n\n  save = (e: React.FormEvent) => {\n    e.preventDefault();\n    const { objects } = this.props;\n    const selectedValues = { ...this.state.selectedValues };\n    const owner = selectedValues.owner;\n\n    if (owner) {\n      selectedValues.ownerId = owner._id;\n\n      delete selectedValues.owner;\n    }\n\n    this.props.save({\n      ids: objects.map(customer => customer._id),\n      data: { ...selectedValues },\n      callback: () => {\n        this.props.closeModal();\n      }\n    });\n  };\n\n  handleChange = (\n    type: string,\n    key: string,\n    value: string | ICustomerLinks\n  ) => {\n    const selectedValues = { ...this.state.selectedValues };\n\n    if (type === 'plus-1') {\n      selectedValues[key] = value;\n\n      if (key === 'links') {\n        const links = Object.assign(\n          { ...this.state.selectedValues.links },\n          value\n        );\n        selectedValues[key] = links;\n      }\n    } else {\n      delete selectedValues[key];\n    }\n\n    this.setState({ selectedValues });\n  };\n\n  renderCustomer = (customer: ICustomerDoc, icon: string) => {\n    const properties = CUSTOMER_BASIC_INFO.ALL.concat(CUSTOMER_DATAS.ALL);\n\n    return (\n      <React.Fragment>\n        <Title>{renderFullName(customer)}</Title>\n        <ul>\n          {properties.map(info => {\n            const key = info.field;\n\n            if (!customer[key]) {\n              return null;\n            }\n\n            if (info.field === 'links') {\n              return this.renderLinks(customer[key], icon);\n            }\n\n            return this.renderCustomerProperties(key, customer[key], icon);\n          })}\n        </ul>\n      </React.Fragment>\n    );\n  };\n\n  renderCustomerProperties(key: string, value: string, icon: string) {\n    return (\n      <li key={key} onClick={this.handleChange.bind(this, icon, key, value)}>\n        {this.renderTitle(key)}\n        {this.renderValue(key, value)}\n\n        <Icon icon={icon} />\n      </li>\n    );\n  }\n\n  renderTitle(key: string) {\n    const title = CUSTOMER_BASIC_INFO[key] || CUSTOMER_DATAS[key];\n\n    return <InfoTitle>{title}:</InfoTitle>;\n  }\n\n  renderValue(field: string, value: any) {\n    switch (field) {\n      case 'visitorContactInfo':\n        return this.renderVisitorContactInfo(value);\n      case 'owner':\n        return this.renderOwner(value);\n      case 'avatar':\n        return <InfoAvatar src={value} alt=\"avatar\" />;\n\n      default:\n        return <InfoDetail>{value}</InfoDetail>;\n    }\n  }\n\n  renderVisitorContactInfo(data: IVisitorContact) {\n    return (\n      <Info>\n        <InfoTitle>{__('E-mail')}: </InfoTitle>\n        <InfoDetail>{data.email}</InfoDetail>\n        <InfoTitle>{__('Phone')}: </InfoTitle>\n        <InfoDetail>{data.phone}</InfoDetail>\n      </Info>\n    );\n  }\n\n  renderOwner(data: IUser) {\n    return (\n      <Info>\n        <InfoTitle>Name: </InfoTitle>\n        <InfoDetail>{data.details && data.details.fullName}</InfoDetail>\n      </Info>\n    );\n  }\n\n  renderLinks = (data: ICustomerLinks, icon: string) => {\n    return CUSTOMER_LINKS.ALL.map(info => {\n      const field = info.field;\n      const value = data[field];\n\n      if (!data[field]) {\n        return null;\n      }\n\n      return (\n        <li\n          key={field}\n          onClick={this.handleChange.bind(this, icon, `links`, {\n            [field]: value\n          })}\n        >\n          <InfoTitle>{info.label}:</InfoTitle>\n          <InfoDetail>{value}</InfoDetail>\n          <Icon icon={icon} />\n        </li>\n      );\n    });\n  };\n\n  render() {\n    const { selectedValues } = this.state;\n    const { objects, closeModal, mergeCustomerLoading } = this.props;\n    const [customer1, customer2] = objects;\n\n    return (\n      <form onSubmit={this.save}>\n        <Columns>\n          <Column className=\"multiple\">\n            {this.renderCustomer(customer1, 'plus-1')}\n          </Column>\n\n          <Column className=\"multiple\">\n            {this.renderCustomer(customer2, 'plus-1')}\n          </Column>\n\n          <Column>{this.renderCustomer(selectedValues, 'times')}</Column>\n        </Columns>\n\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            onClick={closeModal}\n            icon=\"times-circle\"\n            uppercase={false}\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            btnStyle=\"success\"\n            uppercase={false}\n            icon={mergeCustomerLoading ? undefined : 'check-circle'}\n            disabled={mergeCustomerLoading}\n          >\n            {mergeCustomerLoading && <SmallLoader />}\n            Save\n          </Button>\n        </ModalFooter>\n      </form>\n    );\n  }\n}\n\nexport default CustomersMerge;\n"]},"metadata":{},"sourceType":"module"}