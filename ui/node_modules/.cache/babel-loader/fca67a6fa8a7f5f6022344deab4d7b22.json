{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/home/Home.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport { queries as ghQueries } from 'modules/growthHacks/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Home from '../../components/home/Home';\n\nvar HomeContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomeContainer, _React$Component);\n\n  function HomeContainer() {\n    _classCallCheck(this, HomeContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HomeContainer).apply(this, arguments));\n  }\n\n  _createClass(HomeContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          boardCountsQuery = _this$props.boardCountsQuery,\n          queryParams = _this$props.queryParams,\n          pipelineStateCountQuery = _this$props.pipelineStateCountQuery;\n\n      if (pipelineStateCountQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      }\n\n      var props = {\n        queryParams: queryParams,\n        boardsWithCount: boardCountsQuery.boardCounts || [],\n        counts: pipelineStateCountQuery.pipelineStateCount || {}\n      };\n      return React.createElement(Home, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return HomeContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.boardCounts), {\n  name: 'boardCountsQuery',\n  options: function options() {\n    return {\n      variables: {\n        type: 'growthHack'\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(ghQueries.pipelineStateCount), {\n  name: 'pipelineStateCountQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      variables: {\n        boardId: queryParams && queryParams.id,\n        type: 'growthHack'\n      }\n    };\n  }\n}))(HomeContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/home/Home.tsx"],"names":["gql","compose","queries","Spinner","withProps","ghQueries","React","graphql","Home","HomeContainer","props","boardCountsQuery","queryParams","pipelineStateCountQuery","loading","boardsWithCount","boardCounts","counts","pipelineStateCount","Component","name","options","variables","type","fetchPolicy","boardId","id"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASF,OAAO,IAAIG,SAApB,QAAqC,6BAArC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;;IAWMC,a;;;;;;;;;;;;;6BACK;AAAA,wBAKH,KAAKC,KALF;AAAA,UAELC,gBAFK,eAELA,gBAFK;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILC,uBAJK,eAILA,uBAJK;;AAOP,UAAIA,uBAAuB,CAACC,OAA5B,EAAqC;AACnC,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAMJ,KAAK,GAAG;AACZE,QAAAA,WAAW,EAAXA,WADY;AAEZG,QAAAA,eAAe,EAAEJ,gBAAgB,CAACK,WAAjB,IAAgC,EAFrC;AAGZC,QAAAA,MAAM,EAAEJ,uBAAuB,CAACK,kBAAxB,IAA8C;AAH1C,OAAd;AAMA,aAAO,oBAAC,IAAD,oBAAUR,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAnByBJ,KAAK,CAACa,S;;AAsBlC,eAAef,SAAS,CACtBH,OAAO,CACLM,OAAO,CAAkCP,GAAG,CAACE,OAAO,CAACc,WAAT,CAArC,EAA4D;AACjEI,EAAAA,IAAI,EAAE,kBAD2D;AAEjEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADG;AAEdC,MAAAA,WAAW,EAAE;AAFC,KAAP;AAAA;AAFwD,CAA5D,CADF,EAQLjB,OAAO,CAAQP,GAAG,CAACK,SAAS,CAACa,kBAAX,CAAX,EAA2C;AAChDE,EAAAA,IAAI,EAAE,yBAD0C;AAEhDC,EAAAA,OAAO,EAAE;AAAA,QAAGT,WAAH,QAAGA,WAAH;AAAA,WAAsB;AAC7BU,MAAAA,SAAS,EAAE;AACTG,QAAAA,OAAO,EAAEb,WAAW,IAAIA,WAAW,CAACc,EAD3B;AAETH,QAAAA,IAAI,EAAE;AAFG;AADkB,KAAtB;AAAA;AAFuC,CAA3C,CARF,CAAP,CAiBEd,aAjBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport { BoardCountsQueryResponse } from 'modules/boards/types';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport { queries as ghQueries } from 'modules/growthHacks/graphql';\nimport { StateCountsQueryResponse } from 'modules/growthHacks/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Home from '../../components/home/Home';\n\ntype Props = {\n  queryParams: any;\n};\n\ntype FinalProps = {\n  boardCountsQuery: BoardCountsQueryResponse;\n  pipelineStateCountQuery: StateCountsQueryResponse;\n} & Props;\n\nclass HomeContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      boardCountsQuery,\n      queryParams,\n      pipelineStateCountQuery\n    } = this.props;\n\n    if (pipelineStateCountQuery.loading) {\n      return <Spinner />;\n    }\n\n    const props = {\n      queryParams,\n      boardsWithCount: boardCountsQuery.boardCounts || [],\n      counts: pipelineStateCountQuery.pipelineStateCount || {}\n    };\n\n    return <Home {...props} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BoardCountsQueryResponse>(gql(queries.boardCounts), {\n      name: 'boardCountsQuery',\n      options: () => ({\n        variables: { type: 'growthHack' },\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props>(gql(ghQueries.pipelineStateCount), {\n      name: 'pipelineStateCountQuery',\n      options: ({ queryParams }) => ({\n        variables: {\n          boardId: queryParams && queryParams.id,\n          type: 'growthHack'\n        }\n      })\n    })\n  )(HomeContainer)\n);\n"]},"metadata":{},"sourceType":"module"}