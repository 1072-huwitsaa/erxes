{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/components/list/CustomersList.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport gql from \"graphql-tag\";\nimport DataWithLoader from \"modules/common/components/DataWithLoader\";\nimport DateFilter from \"modules/common/components/DateFilter\";\nimport DropdownToggle from \"modules/common/components/DropdownToggle\";\nimport EmptyContent from \"modules/common/components/empty/EmptyContent\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport Pagination from \"modules/common/components/pagination/Pagination\";\nimport SortHandler from \"modules/common/components/SortHandler\";\nimport Table from \"modules/common/components/table\";\nimport { menuContacts } from \"modules/common/utils/menus\";\nimport routerUtils from \"modules/common/utils/router\";\nimport { EMAIL_VALIDATION_STATUSES, PHONE_VALIDATION_STATUSES } from \"modules/customers/constants\";\nimport { queries } from \"modules/customers/graphql\";\nimport { EMPTY_CONTENT_CONTACTS } from \"modules/settings/constants\";\nimport React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { withRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { __, Alert, confirm, router } from \"../../../common/utils\";\nimport Widget from \"../../../engage/containers/Widget\";\nimport Wrapper from \"../../../layout/components/Wrapper\";\nimport { BarItems } from \"../../../layout/styles\";\nimport ManageColumns from \"../../../settings/properties/containers/ManageColumns\";\nimport TaggerPopover from \"../../../tags/components/TaggerPopover\";\nimport CustomerForm from \"../../containers/CustomerForm\";\nimport CustomersMerge from \"../detail/CustomersMerge\";\nimport CustomerRow from \"./CustomerRow\";\nimport Sidebar from \"./Sidebar\";\n\nvar CustomersList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomersList, _React$Component);\n\n  function CustomersList(props) {\n    var _this;\n\n    _classCallCheck(this, CustomersList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomersList).call(this, props));\n    _this.timer = void 0;\n\n    _this.onChange = function () {\n      var _this$props = _this.props,\n          toggleAll = _this$props.toggleAll,\n          customers = _this$props.customers;\n      toggleAll(customers, \"customers\");\n    };\n\n    _this.removeCustomers = function (customers) {\n      var customerIds = [];\n      customers.forEach(function (customer) {\n        customerIds.push(customer._id);\n      });\n      var _this$props2 = _this.props,\n          removeCustomers = _this$props2.removeCustomers,\n          emptyBulk = _this$props2.emptyBulk;\n      removeCustomers({\n        customerIds: customerIds\n      }, emptyBulk);\n    };\n\n    _this.verifyCustomers = function (verificationType) {\n      var verifyCustomers = _this.props.verifyCustomers;\n      verifyCustomers({\n        verificationType: verificationType\n      });\n    };\n\n    _this.onTargetSelect = function () {\n      if (_this.state.showDropDown) {\n        _this.setState({\n          showDropDown: false\n        });\n      } else {\n        _this.setState({\n          showDropDown: true\n        });\n      }\n    };\n\n    _this.changeVerificationStatus = function (type, status, customers) {\n      var customerIds = [];\n      customers.forEach(function (customer) {\n        customerIds.push(customer._id);\n      });\n      var changeVerificationStatus = _this.props.changeVerificationStatus;\n      changeVerificationStatus({\n        verificationType: type,\n        status: status,\n        customerIds: customerIds\n      });\n    };\n\n    _this.search = function (e) {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n      }\n\n      var _this$props3 = _this.props,\n          history = _this$props3.history,\n          type = _this$props3.type;\n      var searchValue = e.target.value;\n\n      _this.setState({\n        searchValue: searchValue,\n        searchType: type\n      });\n\n      _this.timer = setTimeout(function () {\n        router.removeParams(history, \"page\");\n        router.setParams(history, {\n          searchValue: searchValue\n        });\n      }, 500);\n    };\n\n    _this.afterTag = function () {\n      _this.props.emptyBulk();\n\n      if (_this.props.refetch) {\n        _this.props.refetch();\n      }\n    };\n\n    _this.state = {\n      searchValue: _this.props.searchValue\n    };\n    return _this;\n  }\n\n  _createClass(CustomersList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props4 = this.props,\n          queryParams = _this$props4.queryParams,\n          history = _this$props4.history,\n          type = _this$props4.type;\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          searchType = _this$state.searchType;\n\n      if (searchValue && !queryParams.searchValue) {\n        if (searchType === type) {\n          routerUtils.setParams(history, {\n            searchValue: searchValue\n          });\n        } else {\n          this.setState({\n            searchValue: \"\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this$props5 = this.props,\n          customers = _this$props5.customers,\n          columnsConfig = _this$props5.columnsConfig,\n          bulk = _this$props5.bulk,\n          toggleBulk = _this$props5.toggleBulk,\n          history = _this$props5.history,\n          isAllSelected = _this$props5.isAllSelected;\n      return React.createElement(Table, {\n        whiteSpace: \"nowrap\",\n        hover: true,\n        bordered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        checked: isAllSelected,\n        componentClass: \"checkbox\",\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), columnsConfig.map(function (_ref) {\n        var name = _ref.name,\n            label = _ref.label;\n        return React.createElement(\"th\", {\n          key: name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(SortHandler, {\n          sortField: name,\n          label: __(label),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }));\n      }), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, __(\"Tags\")))), React.createElement(\"tbody\", {\n        id: \"customers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, customers.map(function (customer) {\n        return React.createElement(CustomerRow, {\n          customer: customer,\n          columnsConfig: columnsConfig,\n          key: customer._id,\n          isChecked: bulk.includes(customer),\n          toggleBulk: toggleBulk,\n          history: history,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        });\n      })));\n    }\n  }, {\n    key: \"moveCursorAtTheEnd\",\n    value: function moveCursorAtTheEnd(e) {\n      var tmpValue = e.target.value;\n      e.target.value = \"\";\n      e.target.value = tmpValue;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props6 = this.props,\n          type = _this$props6.type,\n          totalCount = _this$props6.totalCount,\n          bulk = _this$props6.bulk,\n          emptyBulk = _this$props6.emptyBulk,\n          loading = _this$props6.loading,\n          customers = _this$props6.customers,\n          mergeCustomers = _this$props6.mergeCustomers,\n          location = _this$props6.location,\n          history = _this$props6.history,\n          queryParams = _this$props6.queryParams,\n          exportData = _this$props6.exportData,\n          mergeCustomerLoading = _this$props6.mergeCustomerLoading;\n      var addTrigger = React.createElement(Button, {\n        btnStyle: \"success\",\n        size: \"small\",\n        icon: \"plus-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Add \", type || \"customer\");\n\n      var onEmailStatusClick = function onEmailStatusClick(e) {\n        _this2.changeVerificationStatus(\"email\", e.target.id, bulk);\n      };\n\n      var onPhoneStatusClick = function onPhoneStatusClick(e) {\n        _this2.changeVerificationStatus(\"phone\", e.target.id, bulk);\n      };\n\n      var emailVerificationStatusList = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = EMAIL_VALIDATION_STATUSES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var status = _step.value;\n          emailVerificationStatusList.push(React.createElement(\"li\", {\n            key: status.value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 257\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            id: status.value,\n            href: \"#changeStatus\",\n            onClick: onEmailStatusClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258\n            },\n            __self: this\n          }, status.label)));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var phoneVerificationStatusList = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = PHONE_VALIDATION_STATUSES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _status = _step2.value;\n          phoneVerificationStatusList.push(React.createElement(\"li\", {\n            key: _status.value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            id: _status.value,\n            href: \"#changeStatus\",\n            onClick: onPhoneStatusClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }, _status.label)));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var editColumns = React.createElement(\"a\", {\n        href: \"#edit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, __(\"Choose Properties/View\"));\n      var dateFilter = queryParams.form && React.createElement(DateFilter, {\n        queryParams: queryParams,\n        history: history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      });\n\n      var manageColumns = function manageColumns(props) {\n        return React.createElement(ManageColumns, Object.assign({}, props, {\n          contentType: type,\n          location: location,\n          history: history,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }));\n      };\n\n      var customerForm = function customerForm(props) {\n        return React.createElement(CustomerForm, Object.assign({}, props, {\n          type: type,\n          size: \"lg\",\n          queryParams: queryParams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        }));\n      };\n\n      var customersMerge = function customersMerge(props) {\n        return React.createElement(CustomersMerge, Object.assign({}, props, {\n          objects: bulk,\n          save: mergeCustomers,\n          mergeCustomerLoading: mergeCustomerLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          },\n          __self: this\n        }));\n      };\n\n      var actionBarRight = React.createElement(BarItems, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        type: \"text\",\n        placeholder: __(\"Type to search\"),\n        onChange: this.search,\n        value: this.state.searchValue,\n        autoFocus: true,\n        onFocus: this.moveCursorAtTheEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }), dateFilter, React.createElement(Dropdown, {\n        className: \"dropdown-btn\",\n        alignRight: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        as: DropdownToggle,\n        id: \"dropdown-customize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, __(\"Customize \"), \" \", React.createElement(Icon, {\n        icon: \"angle-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, React.createElement(ModalTrigger, {\n        title: \"Manage Columns\",\n        trigger: editColumns,\n        content: manageColumns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      })), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/settings/properties?type=customer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, __(\"Manage properties\"))), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#export\",\n        onClick: exportData.bind(this, bulk),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, type === \"lead\" ? __(\"Export this leads\") : __(\"Export this contacts\"))), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#verifyEmail\",\n        onClick: this.verifyCustomers.bind(this, \"email\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, __(\"Verify emails\"))), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#verifyPhone\",\n        onClick: this.verifyCustomers.bind(this, \"phone\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, __(\"Verify phone numbers\"))))), React.createElement(Link, {\n        to: \"/settings/importHistories?type=\".concat(type),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"primary\",\n        size: \"small\",\n        icon: \"arrow-from-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, __(\"Go to import\"))), type === \"visitor\" ? null : React.createElement(ModalTrigger, {\n        title: \"New customer\",\n        autoOpenKey: \"showCustomerModal\",\n        trigger: addTrigger,\n        size: \"lg\",\n        content: customerForm,\n        backDrop: \"static\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }));\n      var actionBarLeft;\n      var mergeButton = React.createElement(Button, {\n        btnStyle: \"primary\",\n        size: \"small\",\n        icon: \"merge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, \"Merge\");\n\n      if (bulk.length > 0) {\n        var tagButton = React.createElement(Button, {\n          btnStyle: \"simple\",\n          size: \"small\",\n          icon: \"tag-alt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 410\n          },\n          __self: this\n        }, \"Tag\");\n\n        var onClick = function onClick() {\n          return confirm().then(function () {\n            _this2.removeCustomers(bulk);\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        };\n\n        var refetchQuery = {\n          query: gql(queries.customerCounts),\n          variables: {\n            type: type,\n            only: \"byTag\"\n          }\n        };\n        actionBarLeft = React.createElement(BarItems, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430\n          },\n          __self: this\n        }, React.createElement(Widget, {\n          customers: bulk,\n          emptyBulk: emptyBulk,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 431\n          },\n          __self: this\n        }), React.createElement(TaggerPopover, {\n          type: \"customer\",\n          successCallback: this.afterTag,\n          targets: bulk,\n          trigger: tagButton,\n          refetchQueries: [refetchQuery],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433\n          },\n          __self: this\n        }), bulk.length === 2 && React.createElement(ModalTrigger, {\n          title: \"Merge Customers\",\n          size: \"lg\",\n          dialogClassName: \"modal-1000w\",\n          trigger: mergeButton,\n          content: customersMerge,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441\n          },\n          __self: this\n        }), React.createElement(Dropdown, {\n          className: \"dropdown-btn\",\n          alignRight: true,\n          onClick: this.onTargetSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450\n          },\n          __self: this\n        }, React.createElement(Dropdown.Toggle, {\n          as: DropdownToggle,\n          id: \"dropdown-customize\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 455\n          },\n          __self: this\n        }, React.createElement(Button, {\n          btnStyle: \"simple\",\n          size: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456\n          },\n          __self: this\n        }, __(\"Change email status \"), \" \", React.createElement(Icon, {\n          icon: \"angle-down\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457\n          },\n          __self: this\n        }))), React.createElement(Dropdown.Menu, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 461\n          },\n          __self: this\n        }, emailVerificationStatusList))), React.createElement(Dropdown, {\n          className: \"dropdown-btn\",\n          alignRight: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465\n          },\n          __self: this\n        }, React.createElement(Dropdown.Toggle, {\n          as: DropdownToggle,\n          id: \"dropdown-customize\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466\n          },\n          __self: this\n        }, React.createElement(Button, {\n          btnStyle: \"simple\",\n          size: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 467\n          },\n          __self: this\n        }, __(\"Change phone status \"), \" \", React.createElement(Icon, {\n          icon: \"angle-down\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468\n          },\n          __self: this\n        }))), React.createElement(Dropdown.Menu, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 471\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472\n          },\n          __self: this\n        }, phoneVerificationStatusList))), React.createElement(Button, {\n          btnStyle: \"danger\",\n          size: \"small\",\n          icon: \"times-circle\",\n          onClick: onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476\n          },\n          __self: this\n        }, \"Remove\"));\n      }\n\n      var actionBar = React.createElement(Wrapper.ActionBar, {\n        left: actionBarLeft,\n        right: actionBarRight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      });\n      return React.createElement(Wrapper, {\n        header: React.createElement(Wrapper.Header, {\n          title: __(\"Customers\") + \" (\".concat(totalCount, \")\"),\n          queryParams: queryParams,\n          submenu: menuContacts,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 495\n          },\n          __self: this\n        }),\n        actionBar: actionBar,\n        footer: React.createElement(Pagination, {\n          count: totalCount,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 502\n          },\n          __self: this\n        }),\n        leftSidebar: React.createElement(Sidebar, {\n          loadingMainQuery: loading,\n          type: type,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 503\n          },\n          __self: this\n        }),\n        content: React.createElement(DataWithLoader, {\n          data: this.renderContent(),\n          loading: loading,\n          count: customers.length,\n          emptyContent: React.createElement(EmptyContent, {\n            content: EMPTY_CONTENT_CONTACTS,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 509\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 505\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CustomersList;\n}(React.Component);\n\nexport default withRouter(CustomersList);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/components/list/CustomersList.tsx"],"names":["Button","Icon","gql","DataWithLoader","DateFilter","DropdownToggle","EmptyContent","FormControl","ModalTrigger","Pagination","SortHandler","Table","menuContacts","routerUtils","EMAIL_VALIDATION_STATUSES","PHONE_VALIDATION_STATUSES","queries","EMPTY_CONTENT_CONTACTS","React","Dropdown","withRouter","Link","__","Alert","confirm","router","Widget","Wrapper","BarItems","ManageColumns","TaggerPopover","CustomerForm","CustomersMerge","CustomerRow","Sidebar","CustomersList","props","timer","onChange","toggleAll","customers","removeCustomers","customerIds","forEach","customer","push","_id","emptyBulk","verifyCustomers","verificationType","onTargetSelect","state","showDropDown","setState","changeVerificationStatus","type","status","search","e","clearTimeout","history","searchValue","target","value","searchType","setTimeout","removeParams","setParams","afterTag","refetch","queryParams","columnsConfig","bulk","toggleBulk","isAllSelected","map","name","label","includes","tmpValue","totalCount","loading","mergeCustomers","location","exportData","mergeCustomerLoading","addTrigger","onEmailStatusClick","id","onPhoneStatusClick","emailVerificationStatusList","phoneVerificationStatusList","editColumns","dateFilter","form","manageColumns","customerForm","customersMerge","actionBarRight","moveCursorAtTheEnd","bind","actionBarLeft","mergeButton","length","tagButton","onClick","then","catch","error","message","refetchQuery","query","customerCounts","variables","only","actionBar","renderContent","Component"],"mappings":"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","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport gql from \"graphql-tag\";\nimport DataWithLoader from \"modules/common/components/DataWithLoader\";\nimport DateFilter from \"modules/common/components/DateFilter\";\nimport DropdownToggle from \"modules/common/components/DropdownToggle\";\nimport EmptyContent from \"modules/common/components/empty/EmptyContent\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport ModalTrigger from \"modules/common/components/ModalTrigger\";\nimport Pagination from \"modules/common/components/pagination/Pagination\";\nimport SortHandler from \"modules/common/components/SortHandler\";\nimport Table from \"modules/common/components/table\";\nimport { menuContacts } from \"modules/common/utils/menus\";\nimport routerUtils from \"modules/common/utils/router\";\nimport {\n  EMAIL_VALIDATION_STATUSES,\n  PHONE_VALIDATION_STATUSES,\n} from \"modules/customers/constants\";\nimport { queries } from \"modules/customers/graphql\";\nimport { EMPTY_CONTENT_CONTACTS } from \"modules/settings/constants\";\nimport React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { withRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { IRouterProps } from \"../../../common/types\";\nimport { __, Alert, confirm, router } from \"../../../common/utils\";\nimport Widget from \"../../../engage/containers/Widget\";\nimport Wrapper from \"../../../layout/components/Wrapper\";\nimport { BarItems } from \"../../../layout/styles\";\nimport ManageColumns from \"../../../settings/properties/containers/ManageColumns\";\nimport { IConfigColumn } from \"../../../settings/properties/types\";\nimport TaggerPopover from \"../../../tags/components/TaggerPopover\";\nimport CustomerForm from \"../../containers/CustomerForm\";\nimport { ICustomer } from \"../../types\";\nimport CustomersMerge from \"../detail/CustomersMerge\";\nimport CustomerRow from \"./CustomerRow\";\nimport Sidebar from \"./Sidebar\";\n\ninterface IProps extends IRouterProps {\n  type: string;\n  customers: ICustomer[];\n  totalCount: number;\n  columnsConfig: IConfigColumn[];\n  bulk: any[];\n  isAllSelected: boolean;\n  emptyBulk: () => void;\n  toggleBulk: (target: ICustomer, toAdd: boolean) => void;\n  toggleAll: (targets: ICustomer[], containerId: string) => void;\n  loading: boolean;\n  mergeCustomerLoading: boolean;\n  searchValue: string;\n  removeCustomers: (\n    doc: { customerIds: string[] },\n    emptyBulk: () => void\n  ) => void;\n  mergeCustomers: (doc: {\n    ids: string[];\n    data: any;\n    callback: () => void;\n  }) => Promise<void>;\n  verifyCustomers: (doc: { verificationType: string }) => void;\n  changeVerificationStatus: (doc: {\n    verificationType: string;\n    status: string;\n    customerIds: string[];\n  }) => Promise<void>;\n  queryParams: any;\n  exportData: (bulk: Array<{ _id: string }>) => void;\n  responseId: string;\n  refetch?: () => void;\n}\n\ntype State = {\n  searchValue?: string;\n  searchType?: string;\n  showDropDown?: boolean;\n};\n\nclass CustomersList extends React.Component<IProps, State> {\n  private timer?: NodeJS.Timer;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchValue: this.props.searchValue,\n    };\n  }\n\n  componentDidUpdate() {\n    const { queryParams, history, type } = this.props;\n    const { searchValue, searchType } = this.state;\n\n    if (searchValue && !queryParams.searchValue) {\n      if (searchType === type) {\n        routerUtils.setParams(history, { searchValue });\n      } else {\n        this.setState({ searchValue: \"\" });\n      }\n    }\n  }\n\n  onChange = () => {\n    const { toggleAll, customers } = this.props;\n\n    toggleAll(customers, \"customers\");\n  };\n\n  removeCustomers = (customers) => {\n    const customerIds: string[] = [];\n\n    customers.forEach((customer) => {\n      customerIds.push(customer._id);\n    });\n\n    const { removeCustomers, emptyBulk } = this.props;\n\n    removeCustomers({ customerIds }, emptyBulk);\n  };\n\n  verifyCustomers = (verificationType: string) => {\n    const { verifyCustomers } = this.props;\n\n    verifyCustomers({ verificationType });\n  };\n\n  onTargetSelect = () => {\n    if (this.state.showDropDown) {\n      this.setState({ showDropDown: false });\n    } else {\n      this.setState({ showDropDown: true });\n    }\n  };\n\n  changeVerificationStatus = (type: string, status: string, customers) => {\n    const customerIds: string[] = [];\n\n    customers.forEach((customer) => {\n      customerIds.push(customer._id);\n    });\n\n    const { changeVerificationStatus } = this.props;\n\n    changeVerificationStatus({ verificationType: type, status, customerIds });\n  };\n\n  renderContent() {\n    const {\n      customers,\n      columnsConfig,\n      bulk,\n      toggleBulk,\n      history,\n      isAllSelected,\n    } = this.props;\n\n    return (\n      <Table whiteSpace=\"nowrap\" hover={true} bordered={true}>\n        <thead>\n          <tr>\n            <th>\n              <FormControl\n                checked={isAllSelected}\n                componentClass=\"checkbox\"\n                onChange={this.onChange}\n              />\n            </th>\n            {columnsConfig.map(({ name, label }) => (\n              <th key={name}>\n                <SortHandler sortField={name} label={__(label)} />\n              </th>\n            ))}\n            <th>{__(\"Tags\")}</th>\n          </tr>\n        </thead>\n        <tbody id=\"customers\">\n          {customers.map((customer) => (\n            <CustomerRow\n              customer={customer}\n              columnsConfig={columnsConfig}\n              key={customer._id}\n              isChecked={bulk.includes(customer)}\n              toggleBulk={toggleBulk}\n              history={history}\n            />\n          ))}\n        </tbody>\n      </Table>\n    );\n  }\n\n  search = (e) => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    const { history, type } = this.props;\n    const searchValue = e.target.value;\n\n    this.setState({ searchValue, searchType: type });\n\n    this.timer = setTimeout(() => {\n      router.removeParams(history, \"page\");\n      router.setParams(history, { searchValue });\n    }, 500);\n  };\n\n  moveCursorAtTheEnd(e) {\n    const tmpValue = e.target.value;\n\n    e.target.value = \"\";\n    e.target.value = tmpValue;\n  }\n\n  afterTag = () => {\n    this.props.emptyBulk();\n\n    if (this.props.refetch) {\n      this.props.refetch();\n    }\n  };\n\n  render() {\n    const {\n      type,\n      totalCount,\n      bulk,\n      emptyBulk,\n      loading,\n      customers,\n      mergeCustomers,\n      location,\n      history,\n      queryParams,\n      exportData,\n      mergeCustomerLoading,\n    } = this.props;\n\n    const addTrigger = (\n      <Button btnStyle=\"success\" size=\"small\" icon=\"plus-circle\">\n        Add {type || \"customer\"}\n      </Button>\n    );\n\n    const onEmailStatusClick = (e) => {\n      this.changeVerificationStatus(\"email\", e.target.id, bulk);\n    };\n\n    const onPhoneStatusClick = (e) => {\n      this.changeVerificationStatus(\"phone\", e.target.id, bulk);\n    };\n\n    const emailVerificationStatusList = [] as any;\n\n    for (const status of EMAIL_VALIDATION_STATUSES) {\n      emailVerificationStatusList.push(\n        <li key={status.value}>\n          <a\n            id={status.value}\n            href=\"#changeStatus\"\n            onClick={onEmailStatusClick}\n          >\n            {status.label}\n          </a>\n        </li>\n      );\n    }\n\n    const phoneVerificationStatusList = [] as any;\n\n    for (const status of PHONE_VALIDATION_STATUSES) {\n      phoneVerificationStatusList.push(\n        <li key={status.value}>\n          <a\n            id={status.value}\n            href=\"#changeStatus\"\n            onClick={onPhoneStatusClick}\n          >\n            {status.label}\n          </a>\n        </li>\n      );\n    }\n\n    const editColumns = <a href=\"#edit\">{__(\"Choose Properties/View\")}</a>;\n\n    const dateFilter = queryParams.form && (\n      <DateFilter queryParams={queryParams} history={history} />\n    );\n\n    const manageColumns = (props) => {\n      return (\n        <ManageColumns\n          {...props}\n          contentType={type}\n          location={location}\n          history={history}\n        />\n      );\n    };\n\n    const customerForm = (props) => {\n      return (\n        <CustomerForm\n          {...props}\n          type={type}\n          size=\"lg\"\n          queryParams={queryParams}\n        />\n      );\n    };\n\n    const customersMerge = (props) => {\n      return (\n        <CustomersMerge\n          {...props}\n          objects={bulk}\n          save={mergeCustomers}\n          mergeCustomerLoading={mergeCustomerLoading}\n        />\n      );\n    };\n\n    const actionBarRight = (\n      <BarItems>\n        <FormControl\n          type=\"text\"\n          placeholder={__(\"Type to search\")}\n          onChange={this.search}\n          value={this.state.searchValue}\n          autoFocus={true}\n          onFocus={this.moveCursorAtTheEnd}\n        />\n\n        {dateFilter}\n\n        <Dropdown className=\"dropdown-btn\" alignRight={true}>\n          <Dropdown.Toggle as={DropdownToggle} id=\"dropdown-customize\">\n            <Button btnStyle=\"simple\" size=\"small\">\n              {__(\"Customize \")} <Icon icon=\"angle-down\" />\n            </Button>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <li>\n              <ModalTrigger\n                title=\"Manage Columns\"\n                trigger={editColumns}\n                content={manageColumns}\n              />\n            </li>\n            <li>\n              <Link to=\"/settings/properties?type=customer\">\n                {__(\"Manage properties\")}\n              </Link>\n            </li>\n            <li>\n              <a href=\"#export\" onClick={exportData.bind(this, bulk)}>\n                {type === \"lead\"\n                  ? __(\"Export this leads\")\n                  : __(\"Export this contacts\")}\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#verifyEmail\"\n                onClick={this.verifyCustomers.bind(this, \"email\")}\n              >\n                {__(\"Verify emails\")}\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#verifyPhone\"\n                onClick={this.verifyCustomers.bind(this, \"phone\")}\n              >\n                {__(\"Verify phone numbers\")}\n              </a>\n            </li>\n          </Dropdown.Menu>\n        </Dropdown>\n        <Link to={`/settings/importHistories?type=${type}`}>\n          <Button btnStyle=\"primary\" size=\"small\" icon=\"arrow-from-right\">\n            {__(\"Go to import\")}\n          </Button>\n        </Link>\n\n        {type === \"visitor\" ? null : (\n          <ModalTrigger\n            title=\"New customer\"\n            autoOpenKey=\"showCustomerModal\"\n            trigger={addTrigger}\n            size=\"lg\"\n            content={customerForm}\n            backDrop=\"static\"\n          />\n        )}\n      </BarItems>\n    );\n\n    let actionBarLeft: React.ReactNode;\n\n    const mergeButton = (\n      <Button btnStyle=\"primary\" size=\"small\" icon=\"merge\">\n        Merge\n      </Button>\n    );\n\n    if (bulk.length > 0) {\n      const tagButton = (\n        <Button btnStyle=\"simple\" size=\"small\" icon=\"tag-alt\">\n          Tag\n        </Button>\n      );\n\n      const onClick = () =>\n        confirm()\n          .then(() => {\n            this.removeCustomers(bulk);\n          })\n          .catch((e) => {\n            Alert.error(e.message);\n          });\n\n      const refetchQuery = {\n        query: gql(queries.customerCounts),\n        variables: { type, only: \"byTag\" },\n      };\n\n      actionBarLeft = (\n        <BarItems>\n          <Widget customers={bulk} emptyBulk={emptyBulk} />\n\n          <TaggerPopover\n            type=\"customer\"\n            successCallback={this.afterTag}\n            targets={bulk}\n            trigger={tagButton}\n            refetchQueries={[refetchQuery]}\n          />\n          {bulk.length === 2 && (\n            <ModalTrigger\n              title=\"Merge Customers\"\n              size=\"lg\"\n              dialogClassName=\"modal-1000w\"\n              trigger={mergeButton}\n              content={customersMerge}\n            />\n          )}\n\n          <Dropdown\n            className=\"dropdown-btn\"\n            alignRight={true}\n            onClick={this.onTargetSelect}\n          >\n            <Dropdown.Toggle as={DropdownToggle} id=\"dropdown-customize\">\n              <Button btnStyle=\"simple\" size=\"small\">\n                {__(\"Change email status \")} <Icon icon=\"angle-down\" />\n              </Button>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div>{emailVerificationStatusList}</div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown className=\"dropdown-btn\" alignRight={true}>\n            <Dropdown.Toggle as={DropdownToggle} id=\"dropdown-customize\">\n              <Button btnStyle=\"simple\" size=\"small\">\n                {__(\"Change phone status \")} <Icon icon=\"angle-down\" />\n              </Button>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div>{phoneVerificationStatusList}</div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Button\n            btnStyle=\"danger\"\n            size=\"small\"\n            icon=\"times-circle\"\n            onClick={onClick}\n          >\n            Remove\n          </Button>\n        </BarItems>\n      );\n    }\n\n    const actionBar = (\n      <Wrapper.ActionBar left={actionBarLeft} right={actionBarRight} />\n    );\n\n    return (\n      <Wrapper\n        header={\n          <Wrapper.Header\n            title={__(`Customers`) + ` (${totalCount})`}\n            queryParams={queryParams}\n            submenu={menuContacts}\n          />\n        }\n        actionBar={actionBar}\n        footer={<Pagination count={totalCount} />}\n        leftSidebar={<Sidebar loadingMainQuery={loading} type={type} />}\n        content={\n          <DataWithLoader\n            data={this.renderContent()}\n            loading={loading}\n            count={customers.length}\n            emptyContent={<EmptyContent content={EMPTY_CONTENT_CONTACTS} />}\n          />\n        }\n      />\n    );\n  }\n}\n\nexport default withRouter(CustomersList);\n"]},"metadata":{},"sourceType":"module"}