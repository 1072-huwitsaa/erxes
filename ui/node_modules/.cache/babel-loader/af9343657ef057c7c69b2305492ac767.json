{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/knowledge/KnowledgeForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { queries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport KnowledgeForm from '../../components/knowledge/KnowledgeForm';\n\nvar TopicAddFormContainer = function TopicAddFormContainer(_ref) {\n  var topic = _ref.topic,\n      getBrandListQuery = _ref.getBrandListQuery,\n      props = _objectWithoutProperties(_ref, [\"topic\", \"getBrandListQuery\"]);\n\n  if (getBrandListQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    topic: topic,\n    brands: getBrandListQuery.brands || []\n  });\n\n  return React.createElement(KnowledgeForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.brands), {\n  name: 'getBrandListQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(TopicAddFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/knowledge/KnowledgeForm.tsx"],"names":["gql","compose","Spinner","queries","React","graphql","withProps","KnowledgeForm","TopicAddFormContainer","topic","getBrandListQuery","props","loading","updatedProps","brands","name","options","fetchPolicy"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,OAAT,QAAwB,iCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,aAAP,MAA0B,0CAA1B;;AAWA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,OAIZ;AAAA,MAHhBC,KAGgB,QAHhBA,KAGgB;AAAA,MAFhBC,iBAEgB,QAFhBA,iBAEgB;AAAA,MADbC,KACa;;AAChB,MAAID,iBAAiB,CAACE,OAAtB,EAA+B;AAC7B,WAAO,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,YAAY,qBACbF,KADa;AAEhBF,IAAAA,KAAK,EAALA,KAFgB;AAGhBK,IAAAA,MAAM,EAAEJ,iBAAiB,CAACI,MAAlB,IAA4B;AAHpB,IAAlB;;AAKA,SAAO,oBAAC,aAAD,oBAAmBD,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAfD;;AAiBA,eAAeP,SAAS,CACtBL,OAAO,CACLI,OAAO,CAA6BL,GAAG,CAACG,OAAO,CAACW,MAAT,CAAhC,EAAkD;AACvDC,EAAAA,IAAI,EAAE,mBADiD;AAEvDC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,WAAW,EAAE;AADC,KAAP;AAAA;AAF8C,CAAlD,CADF,CAAP,CAOET,qBAPF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { queries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { BrandsQueryResponse } from '../../../settings/brands/types';\nimport KnowledgeForm from '../../components/knowledge/KnowledgeForm';\nimport { ITopic } from '../../types';\n\ntype Props = {\n  topic: ITopic;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  closeModal: () => void;\n};\n\ntype FinalProps = { getBrandListQuery: BrandsQueryResponse } & Props;\n\nconst TopicAddFormContainer = ({\n  topic,\n  getBrandListQuery,\n  ...props\n}: FinalProps) => {\n  if (getBrandListQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const updatedProps = {\n    ...props,\n    topic,\n    brands: getBrandListQuery.brands || []\n  };\n  return <KnowledgeForm {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n      name: 'getBrandListQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    })\n  )(TopicAddFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}