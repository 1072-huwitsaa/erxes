{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/Accounts.tsx\";\nimport { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Accounts from '../components/Accounts';\n\nvar AccountContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AccountContainer, _React$Component);\n\n  function AccountContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccountContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccountContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onAdd = function () {\n      var _this$props = _this.props,\n          addLink = _this$props.addLink,\n          kind = _this$props.kind;\n\n      var _getEnv = getEnv(),\n          REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n      var url = \"\".concat(REACT_APP_API_URL, \"/connect-integration?link=\").concat(addLink, \"&kind=\").concat(kind);\n\n      _this.popupWindow(url, 'Integration', window, 660, 750);\n    };\n\n    _this.removeAccount = function (accountId) {\n      var _this$props2 = _this.props,\n          removeAccount = _this$props2.removeAccount,\n          onRemove = _this$props2.onRemove;\n      removeAccount({\n        variables: {\n          _id: accountId\n        }\n      }).then(function () {\n        Alert.success('You successfully removed an account');\n        onRemove(accountId);\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AccountContainer, [{\n    key: \"popupWindow\",\n    value: function popupWindow(url, title, win, w, h) {\n      var y = win.top.outerHeight / 2 + win.top.screenY - h / 2;\n      var x = win.top.outerWidth / 2 + win.top.screenX - w / 2;\n      return win.open(url, title, \"toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=\".concat(w, \", height=\").concat(h, \", top=\").concat(y, \", left=\").concat(x));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          kind = _this$props3.kind,\n          renderForm = _this$props3.renderForm,\n          fetchApiQuery = _this$props3.fetchApiQuery,\n          onSelect = _this$props3.onSelect,\n          formProps = _this$props3.formProps;\n\n      if (fetchApiQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n      }\n\n      if (fetchApiQuery.error) {\n        return React.createElement(\"span\", {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \"Integrations api is not running\");\n      }\n\n      var accounts = fetchApiQuery.integrationsFetchApi || [];\n      return React.createElement(Accounts, {\n        kind: kind,\n        onAdd: this.onAdd,\n        removeAccount: this.removeAccount,\n        onSelect: onSelect,\n        accounts: accounts,\n        formProps: formProps,\n        renderForm: renderForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return AccountContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.removeAccount), {\n  name: 'removeAccount',\n  options: {\n    refetchQueries: ['integrationsFetchApi']\n  }\n}), graphql(gql(queries.fetchApi), {\n  name: 'fetchApiQuery',\n  options: function options(_ref) {\n    var kind = _ref.kind;\n    return {\n      variables: {\n        path: '/accounts',\n        params: {\n          kind: kind\n        }\n      }\n    };\n  }\n}))(AccountContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/Accounts.tsx"],"names":["getEnv","gql","compose","Spinner","Alert","withProps","mutations","queries","React","graphql","Accounts","AccountContainer","onAdd","props","addLink","kind","REACT_APP_API_URL","url","popupWindow","window","removeAccount","accountId","onRemove","variables","_id","then","success","catch","e","error","message","title","win","w","h","y","top","outerHeight","screenY","x","outerWidth","screenX","open","renderForm","fetchApiQuery","onSelect","formProps","loading","color","accounts","integrationsFetchApi","Component","name","options","refetchQueries","fetchApi","path","params"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IFormProps } from 'modules/common/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Accounts from '../components/Accounts';\nimport {\n  AccountsQueryResponse,\n  IntegrationTypes,\n  RemoveAccountMutationResponse\n} from '../types';\n\ntype Props = {\n  kind: IntegrationTypes;\n  addLink: string;\n  onSelect: (accountId?: string) => void;\n  onRemove: (accountId: string) => void;\n  formProps?: IFormProps;\n  renderForm?: () => JSX.Element;\n};\n\ntype FinalProps = {\n  fetchApiQuery: AccountsQueryResponse;\n} & Props &\n  RemoveAccountMutationResponse;\n\nclass AccountContainer extends React.Component<FinalProps, {}> {\n  popupWindow(url, title, win, w, h) {\n    const y = win.top.outerHeight / 2 + win.top.screenY - h / 2;\n    const x = win.top.outerWidth / 2 + win.top.screenX - w / 2;\n\n    return win.open(\n      url,\n      title,\n      `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`\n    );\n  }\n\n  onAdd = () => {\n    const { addLink, kind } = this.props;\n\n    const { REACT_APP_API_URL } = getEnv();\n    const url = `${REACT_APP_API_URL}/connect-integration?link=${addLink}&kind=${kind}`;\n\n    this.popupWindow(url, 'Integration', window, 660, 750);\n  };\n\n  removeAccount = (accountId: string) => {\n    const { removeAccount, onRemove } = this.props;\n\n    removeAccount({ variables: { _id: accountId } })\n      .then(() => {\n        Alert.success('You successfully removed an account');\n        onRemove(accountId);\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  render() {\n    const { kind, renderForm, fetchApiQuery, onSelect, formProps } = this.props;\n\n    if (fetchApiQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    if (fetchApiQuery.error) {\n      return (\n        <span style={{ color: 'red' }}>Integrations api is not running</span>\n      );\n    }\n\n    const accounts = fetchApiQuery.integrationsFetchApi || [];\n\n    return (\n      <Accounts\n        kind={kind}\n        onAdd={this.onAdd}\n        removeAccount={this.removeAccount}\n        onSelect={onSelect}\n        accounts={accounts}\n        formProps={formProps}\n        renderForm={renderForm}\n      />\n    );\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, RemoveAccountMutationResponse, { _id: string }>(\n      gql(mutations.removeAccount),\n      {\n        name: 'removeAccount',\n        options: {\n          refetchQueries: ['integrationsFetchApi']\n        }\n      }\n    ),\n    graphql<Props, AccountsQueryResponse>(gql(queries.fetchApi), {\n      name: 'fetchApiQuery',\n      options: ({ kind }) => ({\n        variables: {\n          path: '/accounts',\n          params: { kind }\n        }\n      })\n    })\n  )(AccountContainer)\n);\n"]},"metadata":{},"sourceType":"module"}