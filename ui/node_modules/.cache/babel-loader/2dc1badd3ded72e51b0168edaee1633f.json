{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/gmail/Form.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert } from 'modules/common/utils';\nimport Gmail from 'modules/settings/integrations/components/gmail/Form';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { getRefetchQueries } from '../utils';\n\nvar GmailContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GmailContainer, _React$Component);\n\n  function GmailContainer(props) {\n    var _this;\n\n    _classCallCheck(this, GmailContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GmailContainer).call(this, props));\n\n    _this.onAccountSelect = function (accountId) {\n      if (!accountId) {\n        return _this.setState({\n          email: '',\n          accountId: ''\n        });\n      }\n\n      client.query({\n        query: gql(queries.fetchApi),\n        variables: {\n          path: '/gmail/get-email',\n          params: {\n            accountId: accountId\n          }\n        }\n      }).then(function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading;\n\n        if (!loading) {\n          _this.setState({\n            email: data.integrationsFetchApi,\n            accountId: accountId\n          });\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.onRemoveAccount = function () {\n      _this.setState({\n        email: ''\n      });\n    };\n\n    _this.renderButton = function (_ref2) {\n      var name = _ref2.name,\n          values = _ref2.values,\n          isSubmitted = _ref2.isSubmitted,\n          callback = _ref2.callback;\n      return React.createElement(ButtonMutate, {\n        mutation: mutations.integrationsCreateExternalIntegration,\n        variables: values,\n        callback: callback,\n        refetchQueries: getRefetchQueries('gmail'),\n        isSubmitted: isSubmitted,\n        type: \"submit\",\n        successMessage: \"You successfully added a \".concat(name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    };\n\n    _this.state = {\n      email: '',\n      accountId: ''\n    };\n    return _this;\n  }\n\n  _createClass(GmailContainer, [{\n    key: \"render\",\n    value: function render() {\n      var callBack = this.props.callBack;\n      var _this$state = this.state,\n          accountId = _this$state.accountId,\n          email = _this$state.email;\n      var updatedProps = {\n        callBack: callBack,\n        accountId: accountId,\n        email: email,\n        onAccountSelect: this.onAccountSelect,\n        onRemoveAccount: this.onRemoveAccount,\n        renderButton: this.renderButton\n      };\n      return React.createElement(Gmail, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GmailContainer;\n}(React.Component);\n\nexport default withRouter(GmailContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/gmail/Form.tsx"],"names":["client","gql","ButtonMutate","Alert","Gmail","mutations","queries","React","withRouter","getRefetchQueries","GmailContainer","props","onAccountSelect","accountId","setState","email","query","fetchApi","variables","path","params","then","data","loading","integrationsFetchApi","catch","error","message","onRemoveAccount","renderButton","name","values","isSubmitted","callback","integrationsCreateExternalIntegration","state","callBack","updatedProps","Component"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { Alert } from 'modules/common/utils';\nimport Gmail from 'modules/settings/integrations/components/gmail/Form';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport * as React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { getRefetchQueries } from '../utils';\n\ntype Props = {\n  callBack: () => void;\n};\n\ntype FinalProps = {} & IRouterProps & Props;\n\ntype State = {\n  email: string;\n  accountId: string;\n};\n\nclass GmailContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = { email: '', accountId: '' };\n  }\n\n  onAccountSelect = (accountId?: string) => {\n    if (!accountId) {\n      return this.setState({ email: '', accountId: '' });\n    }\n\n    client\n      .query({\n        query: gql(queries.fetchApi),\n        variables: {\n          path: '/gmail/get-email',\n          params: { accountId }\n        }\n      })\n      .then(({ data, loading }: any) => {\n        if (!loading) {\n          this.setState({\n            email: data.integrationsFetchApi,\n            accountId\n          });\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  onRemoveAccount = () => {\n    this.setState({ email: '' });\n  };\n\n  renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={mutations.integrationsCreateExternalIntegration}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries('gmail')}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully added a ${name}`}\n      />\n    );\n  };\n\n  render() {\n    const { callBack } = this.props;\n    const { accountId, email } = this.state;\n\n    const updatedProps = {\n      callBack,\n      accountId,\n      email,\n      onAccountSelect: this.onAccountSelect,\n      onRemoveAccount: this.onRemoveAccount,\n      renderButton: this.renderButton\n    };\n\n    return <Gmail {...updatedProps} />;\n  }\n}\n\nexport default withRouter<FinalProps>(GmailContainer);\n"]},"metadata":{},"sourceType":"module"}