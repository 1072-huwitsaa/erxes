{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/layout/containers/Navigation.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries, subscriptions } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport strip from 'strip';\nimport { sendDesktopNotification, withProps } from '../../common/utils';\nimport Navigation from '../components/Navigation';\n\nvar NavigationContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NavigationContainer, _React$Component);\n\n  function NavigationContainer() {\n    _classCallCheck(this, NavigationContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NavigationContainer).apply(this, arguments));\n  }\n\n  _createClass(NavigationContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this = this;\n\n      var _this$props = this.props,\n          unreadConversationsCountQuery = _this$props.unreadConversationsCountQuery,\n          currentUser = _this$props.currentUser;\n      unreadConversationsCountQuery.subscribeToMore({\n        // listen for all conversation changes\n        document: gql(subscriptions.conversationClientMessageInserted),\n        variables: {\n          userId: currentUser._id\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var data = _ref.subscriptionData.data;\n          var conversationClientMessageInserted = data.conversationClientMessageInserted;\n          var content = conversationClientMessageInserted.content,\n              botData = conversationClientMessageInserted.botData;\n\n          _this.props.unreadConversationsCountQuery.refetch(); // no need to send notification for bot message\n\n\n          if (botData) {\n            return;\n          }\n\n          sendDesktopNotification({\n            title: 'You have a new message',\n            content: strip(content || '')\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var unreadConversationsCountQuery = this.props.unreadConversationsCountQuery;\n      var unreadConversationsCount = unreadConversationsCountQuery.conversationsTotalUnreadCount || 0;\n      var props = {\n        unreadConversationsCount: unreadConversationsCount\n      };\n      return React.createElement(Navigation, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NavigationContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.unreadConversationsCount), {\n  name: 'unreadConversationsCountQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true\n    };\n  }\n}))(NavigationContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/layout/containers/Navigation.tsx"],"names":["gql","compose","queries","subscriptions","React","graphql","strip","sendDesktopNotification","withProps","Navigation","NavigationContainer","props","unreadConversationsCountQuery","currentUser","subscribeToMore","document","conversationClientMessageInserted","variables","userId","_id","updateQuery","prev","data","subscriptionData","content","botData","refetch","title","unreadConversationsCount","conversationsTotalUnreadCount","Component","name","options","fetchPolicy","notifyOnNetworkStatusChange"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,uBAAvC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,SAAlC,QAAmD,oBAAnD;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;IAEMC,mB;;;;;;;;;;;;;yCAIiB;AAAA;;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACXC,6BADW,eACXA,6BADW;AAAA,UACoBC,WADpB,eACoBA,WADpB;AAGnBD,MAAAA,6BAA6B,CAACE,eAA9B,CAA8C;AAC5C;AACAC,QAAAA,QAAQ,EAAEf,GAAG,CAACG,aAAa,CAACa,iCAAf,CAF+B;AAG5CC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,MAAM,EAAEL,WAAW,CAACM;AAAtB,SAHiC;AAI5CC,QAAAA,WAAW,EAAE,qBAACC,IAAD,QAA0C;AAAA,cAAbC,IAAa,QAAjCC,gBAAiC,CAAbD,IAAa;AAAA,cAC7CN,iCAD6C,GACPM,IADO,CAC7CN,iCAD6C;AAAA,cAE7CQ,OAF6C,GAExBR,iCAFwB,CAE7CQ,OAF6C;AAAA,cAEpCC,OAFoC,GAExBT,iCAFwB,CAEpCS,OAFoC;;AAIrD,UAAA,KAAI,CAACd,KAAL,CAAWC,6BAAX,CAAyCc,OAAzC,GAJqD,CAMrD;;;AACA,cAAID,OAAJ,EAAa;AACX;AACD;;AAEDlB,UAAAA,uBAAuB,CAAC;AACtBoB,YAAAA,KAAK,EAAE,wBADe;AAEtBH,YAAAA,OAAO,EAAElB,KAAK,CAACkB,OAAO,IAAI,EAAZ;AAFQ,WAAD,CAAvB;AAID;AAnB2C,OAA9C;AAqBD;;;6BAEQ;AAAA,UACCZ,6BADD,GACmC,KAAKD,KADxC,CACCC,6BADD;AAEP,UAAMgB,wBAAwB,GAC5BhB,6BAA6B,CAACiB,6BAA9B,IAA+D,CADjE;AAGA,UAAMlB,KAAK,GAAG;AACZiB,QAAAA,wBAAwB,EAAxBA;AADY,OAAd;AAIA,aAAO,oBAAC,UAAD,oBAAgBjB,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAxC+BP,KAAK,CAAC0B,S;;AA2CxC,eAAetB,SAAS,CACtBP,OAAO,CACLI,OAAO,CACLL,GAAG,CAACE,OAAO,CAAC0B,wBAAT,CADE,EAEL;AACEG,EAAAA,IAAI,EAAE,+BADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,WAAW,EAAE,cADC;AAEdC,MAAAA,2BAA2B,EAAE;AAFf,KAAP;AAAA;AAFX,CAFK,CADF,CAAP,CAWExB,mBAXF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { queries, subscriptions } from 'modules/inbox/graphql';\nimport { UnreadConversationsTotalCountQueryResponse } from 'modules/inbox/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport strip from 'strip';\nimport { sendDesktopNotification, withProps } from '../../common/utils';\nimport Navigation from '../components/Navigation';\n\nclass NavigationContainer extends React.Component<{\n  unreadConversationsCountQuery: UnreadConversationsTotalCountQueryResponse;\n  currentUser: IUser;\n}> {\n  componentWillMount() {\n    const { unreadConversationsCountQuery, currentUser } = this.props;\n\n    unreadConversationsCountQuery.subscribeToMore({\n      // listen for all conversation changes\n      document: gql(subscriptions.conversationClientMessageInserted),\n      variables: { userId: currentUser._id },\n      updateQuery: (prev, { subscriptionData: { data } }) => {\n        const { conversationClientMessageInserted } = data;\n        const { content, botData } = conversationClientMessageInserted;\n\n        this.props.unreadConversationsCountQuery.refetch();\n\n        // no need to send notification for bot message\n        if (botData) {\n          return;\n        }\n\n        sendDesktopNotification({\n          title: 'You have a new message',\n          content: strip(content || '')\n        });\n      }\n    });\n  }\n\n  render() {\n    const { unreadConversationsCountQuery } = this.props;\n    const unreadConversationsCount =\n      unreadConversationsCountQuery.conversationsTotalUnreadCount || 0;\n\n    const props = {\n      unreadConversationsCount\n    };\n\n    return <Navigation {...props} />;\n  }\n}\n\nexport default withProps<{ currentUser: IUser }>(\n  compose(\n    graphql<{}, UnreadConversationsTotalCountQueryResponse>(\n      gql(queries.unreadConversationsCount),\n      {\n        name: 'unreadConversationsCountQuery',\n        options: () => ({\n          fetchPolicy: 'network-only',\n          notifyOnNetworkStatusChange: true\n        })\n      }\n    )\n  )(NavigationContainer)\n);\n"]},"metadata":{},"sourceType":"module"}