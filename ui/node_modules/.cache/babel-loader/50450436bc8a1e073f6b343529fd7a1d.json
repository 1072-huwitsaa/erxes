{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/common/IntegrationList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport IntegrationList from 'modules/settings/integrations/components/common/IntegrationList';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { integrationsListParams } from '../utils';\n\nvar IntegrationListContainer = function IntegrationListContainer(props) {\n  var integrationsQuery = props.integrationsQuery,\n      removeMutation = props.removeMutation,\n      archiveIntegration = props.archiveIntegration,\n      editCommonFields = props.editCommonFields;\n\n  if (integrationsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n  var integrations = integrationsQuery.integrations || [];\n\n  var removeIntegration = function removeIntegration(integration) {\n    var message = 'If you remove an integration, then all related conversations, customers & pop ups will also be removed. Are you sure?';\n    confirm(message).then(function () {\n      Alert.warning('Removing... Please wait!!!');\n      removeMutation({\n        variables: {\n          _id: integration._id\n        }\n      }).then(function () {\n        Alert.success('Your integration is no longer in this channel');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var archive = function archive(id, status) {\n    var message = \"If you archive an integration, then you won't be able to see customers & conversations related to this integration anymore. Are you sure?\";\n    var action = 'archived';\n\n    if (!status) {\n      message = 'You are going to unarchive this integration. Are you sure?';\n      action = 'unarchived';\n    }\n\n    confirm(message).then(function () {\n      archiveIntegration({\n        variables: {\n          _id: id,\n          status: status\n        }\n      }).then(function (_ref) {\n        var data = _ref.data;\n        var integration = data.integrationsArchive;\n\n        if (integration && integration._id) {\n          Alert.success(\"Integration has been \".concat(action, \".\"));\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var editIntegration = function editIntegration(id, _ref2) {\n    var name = _ref2.name,\n        brandId = _ref2.brandId,\n        channelIds = _ref2.channelIds,\n        data = _ref2.data;\n\n    if (!name && !brandId) {\n      Alert.error('Name and brand must be chosen');\n      return;\n    }\n\n    editCommonFields({\n      variables: {\n        _id: id,\n        name: name,\n        brandId: brandId,\n        channelIds: channelIds,\n        data: data\n      }\n    }).then(function (response) {\n      var result = response.data.integrationsEditCommonFields;\n\n      if (result && result._id) {\n        Alert.success('Integration has been edited.');\n      }\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    integrations: integrations,\n    removeIntegration: removeIntegration,\n    loading: integrationsQuery.loading,\n    archive: archive,\n    editIntegration: editIntegration\n  });\n\n  return React.createElement(IntegrationList, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }));\n};\n\nvar mutationOptions = function mutationOptions(_ref3) {\n  var queryParams = _ref3.queryParams,\n      variables = _ref3.variables,\n      kind = _ref3.kind;\n  return {\n    refetchQueries: [{\n      query: gql(queries.integrations),\n      variables: _objectSpread({}, variables, integrationsListParams(queryParams || {}), {\n        kind: kind\n      })\n    }, {\n      query: gql(queries.integrationTotalCount)\n    }]\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.integrations), {\n  name: 'integrationsQuery',\n  options: function options(_ref4) {\n    var queryParams = _ref4.queryParams,\n        kind = _ref4.kind,\n        variables = _ref4.variables;\n    return {\n      notifyOnNetworkStatusChange: true,\n      variables: _objectSpread({}, variables, integrationsListParams(queryParams || {}), {\n        kind: kind\n      }),\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.integrationsRemove), {\n  name: 'removeMutation',\n  options: mutationOptions\n}), graphql(gql(mutations.integrationsArchive), {\n  name: 'archiveIntegration',\n  options: mutationOptions\n}), graphql(gql(mutations.integrationsEditCommonFields), {\n  name: 'editCommonFields',\n  options: mutationOptions\n}))(IntegrationListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/common/IntegrationList.tsx"],"names":["gql","compose","Spinner","Alert","confirm","withProps","IntegrationList","mutations","queries","React","graphql","integrationsListParams","IntegrationListContainer","props","integrationsQuery","removeMutation","archiveIntegration","editCommonFields","loading","integrations","removeIntegration","integration","message","then","warning","variables","_id","success","catch","error","archive","id","status","action","data","integrationsArchive","editIntegration","name","brandId","channelIds","response","result","integrationsEditCommonFields","updatedProps","mutationOptions","queryParams","kind","refetchQueries","query","integrationTotalCount","options","notifyOnNetworkStatusChange","fetchPolicy","integrationsRemove"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport IntegrationList from 'modules/settings/integrations/components/common/IntegrationList';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport {\n  ArchiveIntegrationResponse,\n  CommonFieldsEditResponse,\n  IntegrationMutationVariables,\n  IntegrationsQueryResponse,\n  RemoveMutationResponse\n} from '../../types';\nimport { integrationsListParams } from '../utils';\n\ntype Props = {\n  queryParams: any;\n  kind?: string | null;\n  variables?: { brandId?: string; channelId?: string };\n  disableAction?: boolean;\n  integrationsCount: number;\n};\n\ntype FinalProps = {\n  integrationsQuery: IntegrationsQueryResponse;\n} & Props &\n  RemoveMutationResponse &\n  ArchiveIntegrationResponse &\n  CommonFieldsEditResponse;\n\nconst IntegrationListContainer = (props: FinalProps) => {\n  const {\n    integrationsQuery,\n    removeMutation,\n    archiveIntegration,\n    editCommonFields\n  } = props;\n\n  if (integrationsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const integrations = integrationsQuery.integrations || [];\n\n  const removeIntegration = integration => {\n    const message =\n      'If you remove an integration, then all related conversations, customers & pop ups will also be removed. Are you sure?';\n\n    confirm(message).then(() => {\n      Alert.warning('Removing... Please wait!!!');\n\n      removeMutation({ variables: { _id: integration._id } })\n        .then(() => {\n          Alert.success('Your integration is no longer in this channel');\n        })\n\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const archive = (id: string, status: boolean) => {\n    let message =\n      \"If you archive an integration, then you won't be able to see customers & conversations related to this integration anymore. Are you sure?\";\n    let action = 'archived';\n\n    if (!status) {\n      message = 'You are going to unarchive this integration. Are you sure?';\n      action = 'unarchived';\n    }\n\n    confirm(message).then(() => {\n      archiveIntegration({ variables: { _id: id, status } })\n        .then(({ data }) => {\n          const integration = data.integrationsArchive;\n\n          if (integration && integration._id) {\n            Alert.success(`Integration has been ${action}.`);\n          }\n        })\n        .catch((error: Error) => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const editIntegration = (\n    id: string,\n    { name, brandId, channelIds, data }: IntegrationMutationVariables\n  ) => {\n    if (!name && !brandId) {\n      Alert.error('Name and brand must be chosen');\n\n      return;\n    }\n\n    editCommonFields({\n      variables: { _id: id, name, brandId, channelIds, data }\n    })\n      .then(response => {\n        const result = response.data.integrationsEditCommonFields;\n\n        if (result && result._id) {\n          Alert.success('Integration has been edited.');\n        }\n      })\n      .catch((error: Error) => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    integrations,\n    removeIntegration,\n    loading: integrationsQuery.loading,\n    archive,\n    editIntegration\n  };\n\n  return <IntegrationList {...updatedProps} />;\n};\n\nconst mutationOptions = ({\n  queryParams,\n  variables,\n  kind\n}: {\n  queryParams?: any;\n  variables?: any;\n  kind?: any;\n}) => ({\n  refetchQueries: [\n    {\n      query: gql(queries.integrations),\n      variables: {\n        ...variables,\n        ...integrationsListParams(queryParams || {}),\n        kind\n      }\n    },\n    {\n      query: gql(queries.integrationTotalCount)\n    }\n  ]\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, IntegrationsQueryResponse>(gql(queries.integrations), {\n      name: 'integrationsQuery',\n      options: ({ queryParams, kind, variables }) => {\n        return {\n          notifyOnNetworkStatusChange: true,\n          variables: {\n            ...variables,\n            ...integrationsListParams(queryParams || {}),\n            kind\n          },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<Props, RemoveMutationResponse>(gql(mutations.integrationsRemove), {\n      name: 'removeMutation',\n      options: mutationOptions\n    }),\n    graphql<Props, ArchiveIntegrationResponse>(\n      gql(mutations.integrationsArchive),\n      {\n        name: 'archiveIntegration',\n        options: mutationOptions\n      }\n    ),\n    graphql<Props, CommonFieldsEditResponse>(\n      gql(mutations.integrationsEditCommonFields),\n      {\n        name: 'editCommonFields',\n        options: mutationOptions\n      }\n    )\n  )(IntegrationListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}