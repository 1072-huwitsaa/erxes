{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/general/containers/GeneralSettings.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport GeneralSettings from '../components/GeneralSettings';\nimport { mutations, queries } from '../graphql';\n\nvar SettingsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SettingsContainer, _React$Component);\n\n  function SettingsContainer() {\n    _classCallCheck(this, SettingsContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SettingsContainer).apply(this, arguments));\n  }\n\n  _createClass(SettingsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          updateConfigs = _this$props.updateConfigs,\n          configsQuery = _this$props.configsQuery,\n          constantsQuery = _this$props.constantsQuery;\n\n      if (configsQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        });\n      } // create or update action\n\n\n      var save = function save(map) {\n        updateConfigs({\n          variables: {\n            configsMap: map\n          }\n        }).then(function () {\n          configsQuery.refetch();\n          Alert.success('You successfully updated general settings');\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var configs = configsQuery.configs || [];\n      var configsMap = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = configs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var config = _step.value;\n          configsMap[config.code] = config.value;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return React.createElement(AppConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, function (_ref) {\n        var currentLanguage = _ref.currentLanguage,\n            changeLanguage = _ref.changeLanguage;\n        return React.createElement(GeneralSettings, Object.assign({}, _this.props, {\n          configsMap: configsMap,\n          constants: constantsQuery.configsConstants || {},\n          save: save,\n          currentLanguage: currentLanguage,\n          changeLanguage: changeLanguage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return SettingsContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.configs), {\n  name: 'configsQuery'\n}), graphql(gql(queries.configsConstants), {\n  name: 'constantsQuery'\n}), graphql(gql(mutations.updateConfigs), {\n  name: 'updateConfigs'\n}))(SettingsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/general/containers/GeneralSettings.tsx"],"names":["AppConsumer","gql","compose","Spinner","Alert","withProps","React","graphql","GeneralSettings","mutations","queries","SettingsContainer","props","updateConfigs","configsQuery","constantsQuery","loading","save","map","variables","configsMap","then","refetch","success","catch","error","message","configs","config","code","value","currentLanguage","changeLanguage","configsConstants","Component","name"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;IASMC,iB;;;;;;;;;;;;;6BACK;AAAA;;AAAA,wBACiD,KAAKC,KADtD;AAAA,UACCC,aADD,eACCA,aADD;AAAA,UACgBC,YADhB,eACgBA,YADhB;AAAA,UAC8BC,cAD9B,eAC8BA,cAD9B;;AAGP,UAAID,YAAY,CAACE,OAAjB,EAA0B;AACxB,eAAO,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OALM,CAOP;;;AACA,UAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAsB;AACjCL,QAAAA,aAAa,CAAC;AACZM,UAAAA,SAAS,EAAE;AAAEC,YAAAA,UAAU,EAAEF;AAAd;AADC,SAAD,CAAb,CAGGG,IAHH,CAGQ,YAAM;AACVP,UAAAA,YAAY,CAACQ,OAAb;AAEAlB,UAAAA,KAAK,CAACmB,OAAN,CAAc,2CAAd;AACD,SAPH,EAQGC,KARH,CAQS,UAAAC,KAAK,EAAI;AACdrB,UAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,SAVH;AAWD,OAZD;;AAcA,UAAMC,OAAO,GAAGb,YAAY,CAACa,OAAb,IAAwB,EAAxC;AAEA,UAAMP,UAAU,GAAG,EAAnB;AAxBO;AAAA;AAAA;;AAAA;AA0BP,6BAAqBO,OAArB,8HAA8B;AAAA,cAAnBC,MAAmB;AAC5BR,UAAAA,UAAU,CAACQ,MAAM,CAACC,IAAR,CAAV,GAA0BD,MAAM,CAACE,KAAjC;AACD;AA5BM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BP,aACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAA,YAAGC,eAAH,QAAGA,eAAH;AAAA,YAAoBC,cAApB,QAAoBA,cAApB;AAAA,eACC,oBAAC,eAAD,oBACM,KAAI,CAACpB,KADX;AAEE,UAAA,UAAU,EAAEQ,UAFd;AAGE,UAAA,SAAS,EAAEL,cAAc,CAACkB,gBAAf,IAAmC,EAHhD;AAIE,UAAA,IAAI,EAAEhB,IAJR;AAKE,UAAA,eAAe,EAAEc,eALnB;AAME,UAAA,cAAc,EAAEC,cANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAAA,OADH,CADF;AAcD;;;;EA7C6B1B,KAAK,CAAC4B,S;;AAgDtC,eAAe7B,SAAS,CACtBH,OAAO,CACLK,OAAO,CAA2BN,GAAG,CAACS,OAAO,CAACiB,OAAT,CAA9B,EAAiD;AACtDQ,EAAAA,IAAI,EAAE;AADgD,CAAjD,CADF,EAIL5B,OAAO,CAAKN,GAAG,CAACS,OAAO,CAACuB,gBAAT,CAAR,EAAoC;AACzCE,EAAAA,IAAI,EAAE;AADmC,CAApC,CAJF,EAOL5B,OAAO,CAAKN,GAAG,CAACQ,SAAS,CAACI,aAAX,CAAR,EAAmC;AACxCsB,EAAAA,IAAI,EAAE;AADkC,CAAnC,CAPF,CAAP,CAUExB,iBAVF,CADsB,CAAxB","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport GeneralSettings from '../components/GeneralSettings';\nimport { mutations, queries } from '../graphql';\nimport { ConfigsQueryResponse, IConfigsMap } from '../types';\n\ntype FinalProps = {\n  configsQuery: ConfigsQueryResponse;\n  constantsQuery;\n  updateConfigs: (configsMap: IConfigsMap) => Promise<void>;\n};\n\nclass SettingsContainer extends React.Component<FinalProps> {\n  render() {\n    const { updateConfigs, configsQuery, constantsQuery } = this.props;\n\n    if (configsQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    // create or update action\n    const save = (map: IConfigsMap) => {\n      updateConfigs({\n        variables: { configsMap: map }\n      })\n        .then(() => {\n          configsQuery.refetch();\n\n          Alert.success('You successfully updated general settings');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const configs = configsQuery.configs || [];\n\n    const configsMap = {};\n\n    for (const config of configs) {\n      configsMap[config.code] = config.value;\n    }\n\n    return (\n      <AppConsumer>\n        {({ currentLanguage, changeLanguage }) => (\n          <GeneralSettings\n            {...this.props}\n            configsMap={configsMap}\n            constants={constantsQuery.configsConstants || {}}\n            save={save}\n            currentLanguage={currentLanguage}\n            changeLanguage={changeLanguage}\n          />\n        )}\n      </AppConsumer>\n    );\n  }\n}\n\nexport default withProps<{}>(\n  compose(\n    graphql<{}, ConfigsQueryResponse>(gql(queries.configs), {\n      name: 'configsQuery'\n    }),\n    graphql<{}>(gql(queries.configsConstants), {\n      name: 'constantsQuery'\n    }),\n    graphql<{}>(gql(mutations.updateConfigs), {\n      name: 'updateConfigs'\n    })\n  )(SettingsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}