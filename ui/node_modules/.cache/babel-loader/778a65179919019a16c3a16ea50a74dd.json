{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/label/Labels.tsx\";\nimport * as React from 'react';\nimport RTG from 'react-transition-group';\nimport { PipelineConsumer } from '../../containers/PipelineContext';\nimport { Label, LabelList } from '../../styles/label';\n\nvar Labels =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Labels, _React$PureComponent);\n\n  function Labels(props) {\n    var _this;\n\n    _classCallCheck(this, Labels);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Labels).call(this, props));\n\n    _this.hover = function (isHover) {\n      _this.setState({\n        isHover: isHover\n      });\n    };\n\n    _this.hexToRgb = function (hex) {\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex) || [];\n      var increaseValue = 0.9;\n      return {\n        r: parseInt(result[1], 16) * increaseValue,\n        g: parseInt(result[2], 16) * increaseValue,\n        b: parseInt(result[3], 16) * increaseValue\n      };\n    };\n\n    _this.state = {\n      isHover: false\n    };\n    return _this;\n  }\n\n  _createClass(Labels, [{\n    key: \"renderContent\",\n    value: function renderContent(label, isShowLabel, toggleLabels) {\n      var indicator = this.props.indicator;\n      var isHover = this.state.isHover;\n      var timeout = 300;\n\n      if (indicator) {\n        var colorCode = label.colorCode;\n\n        if (isHover) {\n          var rgb = this.hexToRgb(colorCode);\n          colorCode = \"rgb(\".concat(rgb.r, \",\").concat(rgb.g, \",\").concat(rgb.b, \")\");\n        }\n\n        return React.createElement(Label, {\n          key: label._id,\n          color: colorCode,\n          timeout: timeout,\n          onClick: toggleLabels,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(RTG.CSSTransition, {\n          in: isShowLabel,\n          timeout: timeout,\n          classNames: \"erxes-label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, label.name)));\n      }\n\n      return React.createElement(Label, {\n        key: label._id,\n        color: label.colorCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, label.name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var labels = this.props.labels;\n\n      if (!labels || labels.length === 0) {\n        return null;\n      }\n\n      return React.createElement(PipelineConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, function (_ref) {\n        var isShowLabel = _ref.isShowLabel,\n            toggleLabels = _ref.toggleLabels;\n        return React.createElement(LabelList, {\n          onMouseEnter: _this2.hover.bind(null, true),\n          onMouseLeave: _this2.hover.bind(null, false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, labels.map(function (label) {\n          return _this2.renderContent(label, isShowLabel, toggleLabels);\n        }));\n      });\n    }\n  }]);\n\n  return Labels;\n}(React.PureComponent);\n\nexport default Labels;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/label/Labels.tsx"],"names":["React","RTG","PipelineConsumer","Label","LabelList","Labels","props","hover","isHover","setState","hexToRgb","hex","result","exec","increaseValue","r","parseInt","g","b","state","label","isShowLabel","toggleLabels","indicator","timeout","colorCode","rgb","_id","name","labels","length","bind","map","renderContent","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RTG from 'react-transition-group';\nimport { PipelineConsumer } from '../../containers/PipelineContext';\nimport { Label, LabelList } from '../../styles/label';\nimport { IPipelineLabel } from '../../types';\n\ntype IProps = {\n  labels: IPipelineLabel[];\n  indicator?: boolean;\n};\n\nclass Labels extends React.PureComponent<IProps, { isHover: boolean }> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      isHover: false\n    };\n  }\n\n  hover = (isHover: boolean) => {\n    this.setState({ isHover });\n  };\n\n  hexToRgb = (hex: string) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex) || [];\n    const increaseValue = 0.9;\n\n    return {\n      r: parseInt(result[1], 16) * increaseValue,\n      g: parseInt(result[2], 16) * increaseValue,\n      b: parseInt(result[3], 16) * increaseValue\n    };\n  };\n\n  renderContent(\n    label: IPipelineLabel,\n    isShowLabel: boolean,\n    toggleLabels: () => void\n  ) {\n    const { indicator } = this.props;\n    const { isHover } = this.state;\n    const timeout = 300;\n\n    if (indicator) {\n      let colorCode = label.colorCode;\n\n      if (isHover) {\n        const rgb = this.hexToRgb(colorCode);\n        colorCode = `rgb(${rgb.r},${rgb.g},${rgb.b})`;\n      }\n\n      return (\n        <Label\n          key={label._id}\n          color={colorCode}\n          timeout={timeout}\n          onClick={toggleLabels}\n        >\n          <RTG.CSSTransition\n            in={isShowLabel}\n            timeout={timeout}\n            classNames=\"erxes-label\"\n          >\n            <span>{label.name}</span>\n          </RTG.CSSTransition>\n        </Label>\n      );\n    }\n\n    return (\n      <Label key={label._id} color={label.colorCode}>\n        {label.name}\n      </Label>\n    );\n  }\n\n  render() {\n    const { labels } = this.props;\n\n    if (!labels || labels.length === 0) {\n      return null;\n    }\n\n    return (\n      <PipelineConsumer>\n        {({ isShowLabel, toggleLabels }) => {\n          return (\n            <LabelList\n              onMouseEnter={this.hover.bind(null, true)}\n              onMouseLeave={this.hover.bind(null, false)}\n            >\n              {labels.map(label =>\n                this.renderContent(label, isShowLabel, toggleLabels)\n              )}\n            </LabelList>\n          );\n        }}\n      </PipelineConsumer>\n    );\n  }\n}\n\nexport default Labels;\n"]},"metadata":{},"sourceType":"module"}