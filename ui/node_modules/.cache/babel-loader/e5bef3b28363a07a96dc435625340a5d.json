{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/home/PipelineList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport mutations from 'modules/settings/boards/graphql/mutations';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport PipelineList from '../../components/home/PipelineList';\n\nvar PipelineListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PipelineListContainer, _React$Component);\n\n  function PipelineListContainer() {\n    _classCallCheck(this, PipelineListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PipelineListContainer).apply(this, arguments));\n  }\n\n  _createClass(PipelineListContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          queryParams = _this$props.queryParams,\n          pipelinesQuery = _this$props.pipelinesQuery;\n      var pipelines = pipelinesQuery ? pipelinesQuery.pipelines || [] : [];\n\n      if (queryParams.state) {\n        pipelines = pipelines.filter(function (pipeline) {\n          return pipeline.state === queryParams.state;\n        });\n      }\n\n      var renderAddButton = function renderAddButton(_ref) {\n        var name = _ref.name,\n            values = _ref.values,\n            isSubmitted = _ref.isSubmitted,\n            callback = _ref.callback,\n            object = _ref.object;\n\n        var afterSave = function afterSave() {\n          if (callback) {\n            callback();\n          }\n\n          if (pipelinesQuery) {\n            pipelinesQuery.refetch(queryParams.id);\n          }\n        };\n\n        return React.createElement(ButtonMutate, {\n          mutation: mutations.pipelineAdd,\n          variables: values,\n          callback: afterSave,\n          refetchQueries: [],\n          isSubmitted: isSubmitted,\n          type: \"submit\",\n          successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n      };\n\n      return React.createElement(PipelineList, {\n        renderAddButton: renderAddButton,\n        pipelines: pipelines,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return PipelineListContainer;\n}(React.Component);\n\nexport default withRouter(withProps(compose(graphql(gql(queries.pipelines), {\n  name: 'pipelinesQuery',\n  options: function options(_ref2) {\n    var id = _ref2.queryParams.id;\n    return {\n      variables: {\n        boardId: id || '',\n        type: 'growthHack'\n      }\n    };\n  }\n}))(PipelineListContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/home/PipelineList.tsx"],"names":["gql","compose","queries","ButtonMutate","withProps","mutations","React","graphql","withRouter","PipelineList","PipelineListContainer","props","queryParams","pipelinesQuery","pipelines","state","filter","pipeline","renderAddButton","name","values","isSubmitted","callback","object","afterSave","refetch","id","pipelineAdd","Component","options","variables","boardId","type"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,SAAP,MAAsB,2CAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;IAQMC,qB;;;;;;;;;;;;;6BACK;AAAA,wBACiC,KAAKC,KADtC;AAAA,UACCC,WADD,eACCA,WADD;AAAA,UACcC,cADd,eACcA,cADd;AAGP,UAAIC,SAAS,GAAGD,cAAc,GAAGA,cAAc,CAACC,SAAf,IAA4B,EAA/B,GAAoC,EAAlE;;AAEA,UAAIF,WAAW,CAACG,KAAhB,EAAuB;AACrBD,QAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CACV,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACF,KAAT,KAAmBH,WAAW,CAACG,KAAnC;AAAA,SADE,CAAZ;AAGD;;AAED,UAAMG,eAAe,GAAG,SAAlBA,eAAkB,OAME;AAAA,YALxBC,IAKwB,QALxBA,IAKwB;AAAA,YAJxBC,MAIwB,QAJxBA,MAIwB;AAAA,YAHxBC,WAGwB,QAHxBA,WAGwB;AAAA,YAFxBC,QAEwB,QAFxBA,QAEwB;AAAA,YADxBC,MACwB,QADxBA,MACwB;;AACxB,YAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,cAAIF,QAAJ,EAAc;AACZA,YAAAA,QAAQ;AACT;;AAED,cAAIT,cAAJ,EAAoB;AAClBA,YAAAA,cAAc,CAACY,OAAf,CAAuBb,WAAW,CAACc,EAAnC;AACD;AACF,SARD;;AAUA,eACE,oBAAC,YAAD;AACE,UAAA,QAAQ,EAAErB,SAAS,CAACsB,WADtB;AAEE,UAAA,SAAS,EAAEP,MAFb;AAGE,UAAA,QAAQ,EAAEI,SAHZ;AAIE,UAAA,cAAc,EAAE,EAJlB;AAKE,UAAA,WAAW,EAAEH,WALf;AAME,UAAA,IAAI,EAAC,QANP;AAOE,UAAA,cAAc,6BACZE,MAAM,GAAG,SAAH,GAAe,OADT,gBAERJ,IAFQ,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,OA9BD;;AAgCA,aACE,oBAAC,YAAD;AAAc,QAAA,eAAe,EAAED,eAA/B;AAAgD,QAAA,SAAS,EAAEJ,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EA/CiCR,KAAK,CAACsB,S;;AAkD1C,eAAepB,UAAU,CACvBJ,SAAS,CACPH,OAAO,CACLM,OAAO,CAAgCP,GAAG,CAACE,OAAO,CAACY,SAAT,CAAnC,EAAwD;AAC7DK,EAAAA,IAAI,EAAE,gBADuD;AAE7DU,EAAAA,OAAO,EAAE;AAAA,QAAkBH,EAAlB,SAAGd,WAAH,CAAkBc,EAAlB;AAAA,WAA8B;AACrCI,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAEL,EAAE,IAAI,EADN;AAETM,QAAAA,IAAI,EAAE;AAFG;AAD0B,KAA9B;AAAA;AAFoD,CAAxD,CADF,CAAP,CAUEtB,qBAVF,CADO,CADc,CAAzB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/boards/graphql';\nimport { PipelinesQueryResponse } from 'modules/boards/types';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport mutations from 'modules/settings/boards/graphql/mutations';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport PipelineList from '../../components/home/PipelineList';\n\ntype Props = { queryParams: any } & IRouterProps;\n\ntype FinalProps = {\n  pipelinesQuery?: PipelinesQueryResponse;\n} & Props;\n\nclass PipelineListContainer extends React.Component<FinalProps> {\n  render() {\n    const { queryParams, pipelinesQuery } = this.props;\n\n    let pipelines = pipelinesQuery ? pipelinesQuery.pipelines || [] : [];\n\n    if (queryParams.state) {\n      pipelines = pipelines.filter(\n        pipeline => pipeline.state === queryParams.state\n      );\n    }\n\n    const renderAddButton = ({\n      name,\n      values,\n      isSubmitted,\n      callback,\n      object\n    }: IButtonMutateProps) => {\n      const afterSave = () => {\n        if (callback) {\n          callback();\n        }\n\n        if (pipelinesQuery) {\n          pipelinesQuery.refetch(queryParams.id);\n        }\n      };\n\n      return (\n        <ButtonMutate\n          mutation={mutations.pipelineAdd}\n          variables={values}\n          callback={afterSave}\n          refetchQueries={[]}\n          isSubmitted={isSubmitted}\n          type=\"submit\"\n          successMessage={`You successfully ${\n            object ? 'updated' : 'added'\n          } a ${name}`}\n        />\n      );\n    };\n\n    return (\n      <PipelineList renderAddButton={renderAddButton} pipelines={pipelines} />\n    );\n  }\n}\n\nexport default withRouter(\n  withProps<Props>(\n    compose(\n      graphql<Props, PipelinesQueryResponse>(gql(queries.pipelines), {\n        name: 'pipelinesQuery',\n        options: ({ queryParams: { id } }) => ({\n          variables: {\n            boardId: id || '',\n            type: 'growthHack'\n          }\n        })\n      })\n    )(PipelineListContainer)\n  )\n);\n"]},"metadata":{},"sourceType":"module"}