{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/SelectChannels.tsx\";\nimport Button from 'modules/common/components/Button';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport ChannelForm from 'modules/settings/channels/containers/ChannelForm';\nimport React from 'react';\nimport Select from 'react-select-plus';\nimport { __ } from '../../../common/utils';\nimport { LeftContent, Row } from '../styles';\n\nvar SelectChannels =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SelectChannels, _React$Component);\n\n  function SelectChannels() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectChannels);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectChannels)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderAddBrand = function () {\n      var renderButton = _this.props.renderButton;\n      var trigger = React.createElement(Button, {\n        btnStyle: \"primary\",\n        uppercase: false,\n        icon: \"plus-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Create channel\");\n\n      var content = function content(props) {\n        return React.createElement(ChannelForm, Object.assign({}, props, {\n          renderButton: renderButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(ModalTrigger, {\n        title: \"Create channel\",\n        trigger: trigger,\n        content: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    };\n\n    _this.onChangeChannel = function (values) {\n      if (_this.props.onChange) {\n        _this.props.onChange(values.map(function (item) {\n          return item.value;\n        }) || []);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SelectChannels, [{\n    key: \"generateUserOptions\",\n    value: function generateUserOptions() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      return array.map(function (item) {\n        var channel = item || {};\n        return {\n          value: channel._id,\n          label: channel.name\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channels = _this$props.channels,\n          defaultValue = _this$props.defaultValue,\n          isRequired = _this$props.isRequired,\n          _this$props$descripti = _this$props.description,\n          description = _this$props$descripti === void 0 ? __('In which Channel(s) do you want to add this integration?') : _this$props$descripti;\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: isRequired,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Channel\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, description), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(LeftContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Select, {\n        placeholder: __('Select channel'),\n        value: defaultValue,\n        onChange: this.onChangeChannel,\n        options: this.generateUserOptions(channels),\n        multi: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), this.renderAddBrand()));\n    }\n  }]);\n\n  return SelectChannels;\n}(React.Component);\n\nexport default SelectChannels;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/SelectChannels.tsx"],"names":["Button","FormGroup","ControlLabel","ModalTrigger","ChannelForm","React","Select","__","LeftContent","Row","SelectChannels","renderAddBrand","renderButton","props","trigger","content","onChangeChannel","values","onChange","map","item","value","array","channel","_id","label","name","channels","defaultValue","isRequired","description","generateUserOptions","Component"],"mappings":"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","sourcesContent":["import Button from 'modules/common/components/Button';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport { IButtonMutateProps, IOption } from 'modules/common/types';\nimport ChannelForm from 'modules/settings/channels/containers/ChannelForm';\nimport { IChannel } from 'modules/settings/channels/types';\nimport React from 'react';\nimport Select from 'react-select-plus';\nimport { __ } from '../../../common/utils';\nimport { LeftContent, Row } from '../styles';\n\ntype Props = {\n  channels: IChannel[];\n  onChange?: (values: string[]) => any;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  defaultValue?: string[];\n  isRequired?: boolean;\n  description?: string;\n};\n\nclass SelectChannels extends React.Component<Props, {}> {\n  renderAddBrand = () => {\n    const { renderButton } = this.props;\n\n    const trigger = (\n      <Button btnStyle=\"primary\" uppercase={false} icon=\"plus-circle\">\n        Create channel\n      </Button>\n    );\n\n    const content = props => (\n      <ChannelForm {...props} renderButton={renderButton} />\n    );\n\n    return (\n      <ModalTrigger\n        title=\"Create channel\"\n        trigger={trigger}\n        content={content}\n      />\n    );\n  };\n\n  generateUserOptions(array: IChannel[] = []): IOption[] {\n    return array.map(item => {\n      const channel = item || ({} as IChannel);\n\n      return {\n        value: channel._id,\n        label: channel.name\n      };\n    });\n  }\n\n  onChangeChannel = values => {\n    if (this.props.onChange) {\n      this.props.onChange(values.map(item => item.value) || []);\n    }\n  };\n\n  render() {\n    const {\n      channels,\n      defaultValue,\n      isRequired,\n      description = __(\n        'In which Channel(s) do you want to add this integration?'\n      )\n    } = this.props;\n\n    return (\n      <FormGroup>\n        <ControlLabel required={isRequired}>Channel</ControlLabel>\n        <p>{description}</p>\n        <Row>\n          <LeftContent>\n            <Select\n              placeholder={__('Select channel')}\n              value={defaultValue}\n              onChange={this.onChangeChannel}\n              options={this.generateUserOptions(channels)}\n              multi={true}\n            />\n          </LeftContent>\n          {this.renderAddBrand()}\n        </Row>\n      </FormGroup>\n    );\n  }\n}\n\nexport default SelectChannels;\n"]},"metadata":{},"sourceType":"module"}