{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/CompaniesList.tsx\";\nimport { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport CompaniesList from '../components/list/CompaniesList';\nimport { mutations, queries } from '../graphql';\n\nvar CompanyListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CompanyListContainer, _React$Component);\n\n  function CompanyListContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CompanyListContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompanyListContainer).call(this, props));\n    _this.timer = void 0;\n\n    _this.refetchWithDelay = function () {\n      _this.timer = setTimeout(function () {\n        _this.props.companiesMainQuery.refetch();\n      }, 5500);\n    };\n\n    _this.state = {\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(CompanyListContainer, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          companiesMainQuery = _this$props.companiesMainQuery,\n          companiesListConfigQuery = _this$props.companiesListConfigQuery,\n          companiesRemove = _this$props.companiesRemove,\n          companiesMerge = _this$props.companiesMerge,\n          history = _this$props.history;\n      var columnsConfig = companiesListConfigQuery.fieldsDefaultColumnsConfig || []; // load config from local storage\n\n      var localConfig = localStorage.getItem('erxes_company_columns_config');\n\n      if (localConfig) {\n        columnsConfig = JSON.parse(localConfig).filter(function (conf) {\n          return conf.checked;\n        });\n      }\n\n      var removeCompanies = function removeCompanies(_ref, emptyBulk) {\n        var companyIds = _ref.companyIds;\n        companiesRemove({\n          variables: {\n            companyIds: companyIds\n          }\n        }).then(function () {\n          emptyBulk();\n          Alert.success('You successfully deleted a company. The changes will take a few seconds', 4500);\n\n          _this2.refetchWithDelay();\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var mergeCompanies = function mergeCompanies(_ref2) {\n        var ids = _ref2.ids,\n            data = _ref2.data,\n            callback = _ref2.callback;\n        companiesMerge({\n          variables: {\n            companyIds: ids,\n            companyFields: data\n          }\n        }).then(function (response) {\n          Alert.success('You successfully merged companies');\n          callback();\n          history.push(\"/companies/details/\".concat(response.data.companiesMerge._id));\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var searchValue = this.props.queryParams.searchValue || '';\n\n      var _ref3 = companiesMainQuery.companiesMain || {},\n          _ref3$list = _ref3.list,\n          list = _ref3$list === void 0 ? [] : _ref3$list,\n          _ref3$totalCount = _ref3.totalCount,\n          totalCount = _ref3$totalCount === void 0 ? 0 : _ref3$totalCount;\n\n      var exportCompanies = function exportCompanies(bulk) {\n        var _getEnv = getEnv(),\n            REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n        var queryParams = _this2.props.queryParams;\n        var checkedConfigs = []; // queryParams page parameter needs convert to int.\n\n        if (queryParams.page) {\n          queryParams.page = parseInt(queryParams.page, 10);\n        }\n\n        if (bulk.length > 0) {\n          queryParams.ids = bulk.map(function (company) {\n            return company._id;\n          });\n        }\n\n        columnsConfig.forEach(function (checked) {\n          checkedConfigs.push(checked);\n        });\n        var stringified = queryString.stringify(_objectSpread({}, queryParams, {\n          type: 'company',\n          configs: JSON.stringify(columnsConfig)\n        }));\n        window.open(\"\".concat(REACT_APP_API_URL, \"/file-export?\").concat(stringified), '_blank');\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        columnsConfig: columnsConfig,\n        totalCount: totalCount,\n        searchValue: searchValue,\n        companies: list,\n        loading: companiesMainQuery.loading || this.state.loading,\n        exportCompanies: exportCompanies,\n        removeCompanies: removeCompanies,\n        mergeCompanies: mergeCompanies,\n        refetch: this.refetchWithDelay\n      });\n\n      var companiesList = function companiesList(props) {\n        return React.createElement(CompaniesList, Object.assign({}, updatedProps, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(Bulk, {\n        content: companiesList,\n        refetch: this.props.companiesMainQuery.refetch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CompanyListContainer;\n}(React.Component);\n\nvar generateParams = function generateParams(_ref4) {\n  var queryParams = _ref4.queryParams;\n  return _objectSpread({}, generatePaginationParams(queryParams), {\n    segment: queryParams.segment,\n    tag: queryParams.tag,\n    brand: queryParams.brand,\n    ids: queryParams.ids,\n    searchValue: queryParams.searchValue,\n    sortField: queryParams.sortField,\n    sortDirection: queryParams.sortDirection ? parseInt(queryParams.sortDirection, 10) : undefined\n  });\n};\n\nvar getRefetchQueries = function getRefetchQueries(queryParams) {\n  return [{\n    query: gql(queries.companiesMain),\n    variables: _objectSpread({}, generateParams({\n      queryParams: queryParams\n    }))\n  }, {\n    query: gql(queries.companyCounts),\n    variables: {\n      only: 'byTag'\n    }\n  }, {\n    query: gql(queries.companyCounts),\n    variables: {\n      only: 'bySegment'\n    }\n  }, {\n    query: gql(queries.companyCounts),\n    variables: {\n      only: 'byBrand'\n    }\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.companiesMain), {\n  name: 'companiesMainQuery',\n  options: function options(_ref5) {\n    var queryParams = _ref5.queryParams;\n    return {\n      variables: generateParams({\n        queryParams: queryParams\n      })\n    };\n  }\n}), graphql(gql(queries.companiesListConfig), {\n  name: 'companiesListConfigQuery'\n}), // mutations\ngraphql(gql(mutations.companiesRemove), {\n  name: 'companiesRemove',\n  options: function options(_ref6) {\n    var queryParams = _ref6.queryParams;\n    return {\n      refetchQueries: getRefetchQueries(queryParams)\n    };\n  }\n}), graphql(gql(mutations.companiesMerge), {\n  name: 'companiesMerge',\n  options: function options(_ref7) {\n    var queryParams = _ref7.queryParams;\n    return {\n      refetchQueries: getRefetchQueries(queryParams)\n    };\n  }\n}))(withRouter(CompanyListContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/CompaniesList.tsx"],"names":["getEnv","gql","compose","Bulk","Alert","withProps","generatePaginationParams","queryString","React","graphql","withRouter","CompaniesList","mutations","queries","CompanyListContainer","props","timer","refetchWithDelay","setTimeout","companiesMainQuery","refetch","state","loading","clearTimeout","companiesListConfigQuery","companiesRemove","companiesMerge","history","columnsConfig","fieldsDefaultColumnsConfig","localConfig","localStorage","getItem","JSON","parse","filter","conf","checked","removeCompanies","emptyBulk","companyIds","variables","then","success","catch","e","error","message","mergeCompanies","ids","data","callback","companyFields","response","push","_id","searchValue","queryParams","companiesMain","list","totalCount","exportCompanies","bulk","REACT_APP_API_URL","checkedConfigs","page","parseInt","length","map","company","forEach","stringified","stringify","type","configs","window","open","updatedProps","companies","companiesList","Component","generateParams","segment","tag","brand","sortField","sortDirection","undefined","getRefetchQueries","query","companyCounts","only","name","options","companiesListConfig","refetchQueries"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../common/types';\nimport { DefaultColumnsConfigQueryResponse } from '../../settings/properties/types';\nimport CompaniesList from '../components/list/CompaniesList';\nimport { mutations, queries } from '../graphql';\nimport {\n  ListConfigQueryResponse,\n  ListQueryVariables,\n  MainQueryResponse,\n  MergeMutationResponse,\n  MergeMutationVariables,\n  RemoveMutationResponse,\n  RemoveMutationVariables\n} from '../types';\n\ntype Props = {\n  queryParams?: any;\n};\n\ntype FinalProps = {\n  companiesMainQuery: MainQueryResponse;\n  companiesListConfigQuery: DefaultColumnsConfigQueryResponse;\n} & Props &\n  IRouterProps &\n  RemoveMutationResponse &\n  MergeMutationResponse;\n\ntype State = {\n  loading: boolean;\n};\n\nclass CompanyListContainer extends React.Component<FinalProps, State> {\n  private timer?: NodeJS.Timer;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  refetchWithDelay = () => {\n    this.timer = setTimeout(() => {\n      this.props.companiesMainQuery.refetch();\n    }, 5500);\n  };\n\n  render() {\n    const {\n      companiesMainQuery,\n      companiesListConfigQuery,\n      companiesRemove,\n      companiesMerge,\n      history\n    } = this.props;\n    let columnsConfig =\n      companiesListConfigQuery.fieldsDefaultColumnsConfig || [];\n\n    // load config from local storage\n    const localConfig = localStorage.getItem('erxes_company_columns_config');\n\n    if (localConfig) {\n      columnsConfig = JSON.parse(localConfig).filter(conf => conf.checked);\n    }\n\n    const removeCompanies = ({ companyIds }, emptyBulk) => {\n      companiesRemove({\n        variables: { companyIds }\n      })\n        .then(() => {\n          emptyBulk();\n          Alert.success(\n            'You successfully deleted a company. The changes will take a few seconds',\n            4500\n          );\n\n          this.refetchWithDelay();\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const mergeCompanies = ({ ids, data, callback }) => {\n      companiesMerge({\n        variables: {\n          companyIds: ids,\n          companyFields: data\n        }\n      })\n        .then(response => {\n          Alert.success('You successfully merged companies');\n          callback();\n          history.push(\n            `/companies/details/${response.data.companiesMerge._id}`\n          );\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const searchValue = this.props.queryParams.searchValue || '';\n    const { list = [], totalCount = 0 } =\n      companiesMainQuery.companiesMain || {};\n\n    const exportCompanies = bulk => {\n      const { REACT_APP_API_URL } = getEnv();\n      const { queryParams } = this.props;\n      const checkedConfigs: any[] = [];\n\n      // queryParams page parameter needs convert to int.\n      if (queryParams.page) {\n        queryParams.page = parseInt(queryParams.page, 10);\n      }\n\n      if (bulk.length > 0) {\n        queryParams.ids = bulk.map(company => company._id);\n      }\n\n      columnsConfig.forEach(checked => {\n        checkedConfigs.push(checked);\n      });\n\n      const stringified = queryString.stringify({\n        ...queryParams,\n        type: 'company',\n        configs: JSON.stringify(columnsConfig)\n      });\n\n      window.open(`${REACT_APP_API_URL}/file-export?${stringified}`, '_blank');\n    };\n\n    const updatedProps = {\n      ...this.props,\n      columnsConfig,\n      totalCount,\n      searchValue,\n      companies: list,\n      loading: companiesMainQuery.loading || this.state.loading,\n      exportCompanies,\n      removeCompanies,\n      mergeCompanies,\n      refetch: this.refetchWithDelay\n    };\n\n    const companiesList = props => {\n      return <CompaniesList {...updatedProps} {...props} />;\n    };\n\n    return (\n      <Bulk\n        content={companiesList}\n        refetch={this.props.companiesMainQuery.refetch}\n      />\n    );\n  }\n}\n\nconst generateParams = ({ queryParams }) => {\n  return {\n    ...generatePaginationParams(queryParams),\n    segment: queryParams.segment,\n    tag: queryParams.tag,\n    brand: queryParams.brand,\n    ids: queryParams.ids,\n    searchValue: queryParams.searchValue,\n    sortField: queryParams.sortField,\n    sortDirection: queryParams.sortDirection\n      ? parseInt(queryParams.sortDirection, 10)\n      : undefined\n  };\n};\n\nconst getRefetchQueries = (queryParams?: any) => {\n  return [\n    {\n      query: gql(queries.companiesMain),\n      variables: { ...generateParams({ queryParams }) }\n    },\n    {\n      query: gql(queries.companyCounts),\n      variables: { only: 'byTag' }\n    },\n    {\n      query: gql(queries.companyCounts),\n      variables: { only: 'bySegment' }\n    },\n    {\n      query: gql(queries.companyCounts),\n      variables: { only: 'byBrand' }\n    }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, MainQueryResponse, ListQueryVariables>(\n      gql(queries.companiesMain),\n      {\n        name: 'companiesMainQuery',\n        options: ({ queryParams }) => ({\n          variables: generateParams({ queryParams })\n        })\n      }\n    ),\n    graphql<Props, ListConfigQueryResponse, {}>(\n      gql(queries.companiesListConfig),\n      {\n        name: 'companiesListConfigQuery'\n      }\n    ),\n    // mutations\n    graphql<Props, RemoveMutationResponse, RemoveMutationVariables>(\n      gql(mutations.companiesRemove),\n      {\n        name: 'companiesRemove',\n        options: ({ queryParams }) => ({\n          refetchQueries: getRefetchQueries(queryParams)\n        })\n      }\n    ),\n    graphql<Props, MergeMutationResponse, MergeMutationVariables>(\n      gql(mutations.companiesMerge),\n      {\n        name: 'companiesMerge',\n        options: ({ queryParams }) => ({\n          refetchQueries: getRefetchQueries(queryParams)\n        })\n      }\n    )\n  )(withRouter<IRouterProps>(CompanyListContainer))\n);\n"]},"metadata":{},"sourceType":"module"}