{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserResetPasswordForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport UserResetPasswordForm from '../components/UserResetPasswordForm';\nimport { mutations } from '../graphql';\n\nvar UserResetPasswordContainer = function UserResetPasswordContainer(props) {\n  var usersResetMemberPassword = props.usersResetMemberPassword;\n\n  var save = function save(_ref) {\n    var _id = _ref._id,\n        newPassword = _ref.newPassword,\n        repeatPassword = _ref.repeatPassword;\n\n    if (newPassword && !repeatPassword || repeatPassword === 0) {\n      return Alert.error('Please enter a repeat password');\n    }\n\n    if (!newPassword || newPassword === 0) {\n      return Alert.error('Please enter a new password');\n    }\n\n    if (newPassword !== repeatPassword) {\n      return Alert.error(\"Password didn't match\");\n    }\n\n    usersResetMemberPassword({\n      variables: {\n        _id: _id,\n        newPassword: newPassword\n      }\n    }).then(function () {\n      Alert.success('Your password has been changed and updated');\n      props.closeModal();\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    save: save\n  });\n\n  return React.createElement(UserResetPasswordForm, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(mutations.usersResetMemberPassword), {\n  name: 'usersResetMemberPassword',\n  options: {\n    refetchQueries: ['users']\n  }\n}))(UserResetPasswordContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/team/containers/UserResetPasswordForm.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","UserResetPasswordForm","mutations","UserResetPasswordContainer","props","usersResetMemberPassword","save","_id","newPassword","repeatPassword","error","variables","then","success","closeModal","catch","message","updatedProps","name","options","refetchQueries"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAQA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,KADiC,EAE9B;AAAA,MACKC,wBADL,GACkCD,KADlC,CACKC,wBADL;;AAGH,MAAMC,IAAI,GAAG,SAAPA,IAAO,OAA0C;AAAA,QAAvCC,GAAuC,QAAvCA,GAAuC;AAAA,QAAlCC,WAAkC,QAAlCA,WAAkC;AAAA,QAArBC,cAAqB,QAArBA,cAAqB;;AACrD,QAAKD,WAAW,IAAI,CAACC,cAAjB,IAAoCA,cAAc,KAAK,CAA3D,EAA8D;AAC5D,aAAOZ,KAAK,CAACa,KAAN,CAAY,gCAAZ,CAAP;AACD;;AAED,QAAI,CAACF,WAAD,IAAgBA,WAAW,KAAK,CAApC,EAAuC;AACrC,aAAOX,KAAK,CAACa,KAAN,CAAY,6BAAZ,CAAP;AACD;;AAED,QAAIF,WAAW,KAAKC,cAApB,EAAoC;AAClC,aAAOZ,KAAK,CAACa,KAAN,CAAY,uBAAZ,CAAP;AACD;;AAEDL,IAAAA,wBAAwB,CAAC;AAAEM,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,WAAW,EAAXA;AAAP;AAAb,KAAD,CAAxB,CACGI,IADH,CACQ,YAAM;AACVf,MAAAA,KAAK,CAACgB,OAAN,CAAc,4CAAd;AACAT,MAAAA,KAAK,CAACU,UAAN;AACD,KAJH,EAKGC,KALH,CAKS,UAAAL,KAAK,EAAI;AACdb,MAAAA,KAAK,CAACa,KAAN,CAAYA,KAAK,CAACM,OAAlB;AACD,KAPH;AAQD,GArBD;;AAuBA,MAAMC,YAAY,qBACbb,KADa;AAEhBE,IAAAA,IAAI,EAAJA;AAFgB,IAAlB;;AAKA,SAAO,oBAAC,qBAAD,oBAA2BW,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAlCD;;AAoCA,eAAenB,SAAS,CACtBF,OAAO,CACLI,OAAO,CAACL,GAAG,CAACO,SAAS,CAACG,wBAAX,CAAJ,EAA0C;AAC/Ca,EAAAA,IAAI,EAAE,0BADyC;AAE/CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAE,CAAC,OAAD;AADT;AAFsC,CAA1C,CADF,CAAP,CAOEjB,0BAPF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport UserResetPasswordForm from '../components/UserResetPasswordForm';\nimport { mutations } from '../graphql';\nimport { ResetMemberPasswordResponse } from '../types';\n\ntype Props = {\n  object: IUser;\n  closeModal: () => void;\n};\n\nconst UserResetPasswordContainer = (\n  props: Props & ResetMemberPasswordResponse\n) => {\n  const { usersResetMemberPassword } = props;\n\n  const save = ({ _id, newPassword, repeatPassword }) => {\n    if ((newPassword && !repeatPassword) || repeatPassword === 0) {\n      return Alert.error('Please enter a repeat password');\n    }\n\n    if (!newPassword || newPassword === 0) {\n      return Alert.error('Please enter a new password');\n    }\n\n    if (newPassword !== repeatPassword) {\n      return Alert.error(\"Password didn't match\");\n    }\n\n    usersResetMemberPassword({ variables: { _id, newPassword } })\n      .then(() => {\n        Alert.success('Your password has been changed and updated');\n        props.closeModal();\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    save\n  };\n\n  return <UserResetPasswordForm {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(mutations.usersResetMemberPassword), {\n      name: 'usersResetMemberPassword',\n      options: {\n        refetchQueries: ['users']\n      }\n    })\n  )(UserResetPasswordContainer)\n);\n"]},"metadata":{},"sourceType":"module"}