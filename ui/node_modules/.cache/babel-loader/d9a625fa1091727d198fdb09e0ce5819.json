{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/containers/EditorCK.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport segmentQueries from 'modules/segments/graphql/queries';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport { queries } from '../../settings/team/graphql';\nimport EditorCK from '../components/EditorCK';\nimport { isValidURL } from '../utils/urlParser';\n\nvar generateAttributes = function generateAttributes(combinedFields) {\n  var items = [{\n    name: 'Customer'\n  }, {\n    value: 'customer.name',\n    name: 'Name'\n  }];\n  (combinedFields || []).forEach(function (field) {\n    return items.push({\n      value: \"customer.\".concat(field.name),\n      name: field.label\n    });\n  });\n  items = [].concat(_toConsumableArray(items), [{\n    name: 'User'\n  }, {\n    value: 'user.fullName',\n    name: 'Fullname'\n  }, {\n    value: 'user.position',\n    name: 'Position'\n  }, {\n    value: 'user.email',\n    name: 'Email'\n  }, {\n    name: 'Organization'\n  }, {\n    value: 'brandName',\n    name: 'BrandName'\n  }, {\n    value: 'domain',\n    name: 'Domain'\n  }]);\n  return {\n    items: items,\n    title: 'Attributes',\n    label: 'Attributes'\n  };\n};\n\nvar EditorContainer = function EditorContainer(props) {\n  var usersQuery = props.usersQuery,\n      combinedFieldsQuery = props.combinedFieldsQuery;\n\n  if (usersQuery.loading || combinedFieldsQuery.loading) {\n    return null;\n  }\n\n  var combinedFields = combinedFieldsQuery.fieldsCombinedByContentType || [];\n  var users = usersQuery.allUsers || [];\n  var mentionUsers = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = users[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var user = _step.value;\n\n      if (user.details && user.details.fullName) {\n        var avatar = user.details.avatar || '/images/avatar-colored.svg';\n        mentionUsers.push({\n          id: user._id,\n          avatar: isValidURL(avatar) ? avatar : '/images/avatar-colored.svg',\n          fullName: user.details.fullName\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var insertItems = props.insertItems || generateAttributes(combinedFields);\n  return React.createElement(EditorCK, Object.assign({}, props, {\n    mentionUsers: mentionUsers,\n    insertItems: insertItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.allUsers), {\n  name: 'usersQuery',\n  options: function options() {\n    return {\n      variables: {\n        isActive: true\n      }\n    };\n  }\n}), graphql(gql(segmentQueries.combinedFields), {\n  name: 'combinedFieldsQuery',\n  options: function options() {\n    return {\n      variables: {\n        contentType: 'customer'\n      }\n    };\n  }\n}))(EditorContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/containers/EditorCK.tsx"],"names":["gql","compose","segmentQueries","React","graphql","withProps","queries","EditorCK","isValidURL","generateAttributes","combinedFields","items","name","value","forEach","field","push","label","title","EditorContainer","props","usersQuery","combinedFieldsQuery","loading","fieldsCombinedByContentType","users","allUsers","mentionUsers","user","details","fullName","avatar","id","_id","insertItems","options","variables","isActive","contentType"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport segmentQueries from 'modules/segments/graphql/queries';\nimport {\n  FieldsCombinedByType,\n  FieldsCombinedByTypeQueryResponse\n} from 'modules/settings/properties/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport { queries } from '../../settings/team/graphql';\nimport { AllUsersQueryResponse } from '../../settings/team/types';\nimport EditorCK from '../components/EditorCK';\nimport { IEditorProps, IMentionUser } from '../types';\nimport { isValidURL } from '../utils/urlParser';\n\nconst generateAttributes = (combinedFields?: FieldsCombinedByType[]) => {\n  let items: Array<{ name: string; value?: string }> = [\n    { name: 'Customer' },\n    { value: 'customer.name', name: 'Name' }\n  ];\n\n  (combinedFields || []).forEach(field =>\n    items.push({ value: `customer.${field.name}`, name: field.label })\n  );\n\n  items = [\n    ...items,\n    { name: 'User' },\n    { value: 'user.fullName', name: 'Fullname' },\n    { value: 'user.position', name: 'Position' },\n    { value: 'user.email', name: 'Email' },\n\n    { name: 'Organization' },\n    { value: 'brandName', name: 'BrandName' },\n    { value: 'domain', name: 'Domain' }\n  ];\n\n  return {\n    items,\n    title: 'Attributes',\n    label: 'Attributes'\n  };\n};\n\ntype Props = {\n  showMentions?: boolean;\n} & IEditorProps;\n\ntype FinalProps = {\n  usersQuery: AllUsersQueryResponse;\n  combinedFieldsQuery: FieldsCombinedByTypeQueryResponse;\n} & Props;\n\nconst EditorContainer = (props: FinalProps) => {\n  const { usersQuery, combinedFieldsQuery } = props;\n\n  if (usersQuery.loading || combinedFieldsQuery.loading) {\n    return null;\n  }\n\n  const combinedFields = combinedFieldsQuery.fieldsCombinedByContentType || [];\n  const users = usersQuery.allUsers || [];\n  const mentionUsers: IMentionUser[] = [];\n\n  for (const user of users) {\n    if (user.details && user.details.fullName) {\n      const avatar = user.details.avatar || '/images/avatar-colored.svg';\n\n      mentionUsers.push({\n        id: user._id,\n        avatar: isValidURL(avatar) ? avatar : '/images/avatar-colored.svg',\n        fullName: user.details.fullName\n      });\n    }\n  }\n\n  const insertItems = props.insertItems || generateAttributes(combinedFields);\n\n  return (\n    <EditorCK\n      {...props}\n      mentionUsers={mentionUsers}\n      insertItems={insertItems}\n    />\n  );\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, AllUsersQueryResponse>(gql(queries.allUsers), {\n      name: 'usersQuery',\n      options: () => ({\n        variables: { isActive: true }\n      })\n    }),\n\n    graphql<Props>(gql(segmentQueries.combinedFields), {\n      name: 'combinedFieldsQuery',\n      options: () => ({\n        variables: {\n          contentType: 'customer'\n        }\n      })\n    })\n  )(EditorContainer)\n);\n"]},"metadata":{},"sourceType":"module"}