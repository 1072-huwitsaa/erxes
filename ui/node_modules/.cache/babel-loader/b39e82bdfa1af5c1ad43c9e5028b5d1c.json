{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/tags/components/Tagger.tsx\";\nimport FilterableList from 'modules/common/components/filterableList/FilterableList';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\n\nvar Tagger =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tagger, _React$Component);\n\n  function Tagger(props) {\n    var _this;\n\n    _classCallCheck(this, Tagger);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tagger).call(this, props));\n\n    _this.tag = function (tags) {\n      var tag = _this.props.tag; // detect changes\n\n      var tagsForList = _this.state.tagsForList;\n      var unchanged = tagsForList.reduce(function (prev, current, index) {\n        return prev && current.selectedBy === tags[index].selectedBy;\n      }, true);\n\n      if (unchanged) {\n        return;\n      }\n\n      tag(tags.filter(function (t) {\n        return t.selectedBy === 'all';\n      }).map(function (t) {\n        return t._id;\n      }));\n    };\n\n    _this.state = {\n      tagsForList: _this.generateTagsParams(props.tags, props.targets)\n    };\n    return _this;\n  }\n\n  _createClass(Tagger, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        tagsForList: this.generateTagsParams(nextProps.tags, nextProps.targets)\n      });\n    }\n    /**\n     * Returns array of tags object\n     */\n\n  }, {\n    key: \"generateTagsParams\",\n    value: function generateTagsParams() {\n      var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var targets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return tags.map(function (_ref) {\n        var _id = _ref._id,\n            name = _ref.name,\n            colorCode = _ref.colorCode;\n        // Current tag's selection state (all, some or none)\n        var count = targets.reduce(function (memo, target) {\n          return memo + ((target.tagIds || []).includes(_id) ? 1 : 0);\n        }, 0);\n        var state = 'none';\n\n        if (count > 0) {\n          if (count === targets.length) {\n            state = 'all';\n          } else if (count < targets.length) {\n            state = 'some';\n          }\n        }\n\n        return {\n          _id: _id,\n          title: name,\n          iconClass: 'icon-tag-alt',\n          iconColor: colorCode,\n          selectedBy: state\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      }\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          event = _this$props.event,\n          type = _this$props.type;\n      var links = [{\n        title: __('Manage tags'),\n        href: \"/tags/\".concat(type)\n      }];\n      var props = {\n        className: className,\n        links: links,\n        selectable: true,\n        items: JSON.parse(JSON.stringify(this.state.tagsForList))\n      };\n\n      if (event) {\n        props[event] = this.tag;\n      }\n\n      return React.createElement(FilterableList, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Tagger;\n}(React.Component);\n\nexport default Tagger;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/tags/components/Tagger.tsx"],"names":["FilterableList","Spinner","__","React","Tagger","props","tag","tags","tagsForList","state","unchanged","reduce","prev","current","index","selectedBy","filter","t","map","_id","generateTagsParams","targets","nextProps","setState","name","colorCode","count","memo","target","tagIds","includes","length","title","iconClass","iconColor","loading","className","event","type","links","href","selectable","items","JSON","parse","stringify","Component"],"mappings":";;;;;;AAAA,OAAOA,cAAP,MAA2B,yDAA3B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,EAAT,QAAmB,sBAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;IAeMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;;AADiB,UA6CnBC,GA7CmB,GA6Cb,UAAAC,IAAI,EAAI;AAAA,UACJD,GADI,GACI,MAAKD,KADT,CACJC,GADI,EAGZ;;AAHY,UAIJE,WAJI,GAIY,MAAKC,KAJjB,CAIJD,WAJI;AAMZ,UAAME,SAAS,GAAGF,WAAW,CAACG,MAAZ,CAChB,UAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB;AAAA,eACEF,IAAI,IAAIC,OAAO,CAACE,UAAR,KAAuBR,IAAI,CAACO,KAAD,CAAJ,CAAYC,UAD7C;AAAA,OADgB,EAGhB,IAHgB,CAAlB;;AAMA,UAAIL,SAAJ,EAAe;AACb;AACD;;AAEDJ,MAAAA,GAAG,CAACC,IAAI,CAACS,MAAL,CAAY,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACF,UAAF,KAAiB,KAArB;AAAA,OAAb,EAAyCG,GAAzC,CAA6C,UAAAD,CAAC;AAAA,eAAIA,CAAC,CAACE,GAAN;AAAA,OAA9C,CAAD,CAAH;AACD,KA9DkB;;AAGjB,UAAKV,KAAL,GAAa;AACXD,MAAAA,WAAW,EAAE,MAAKY,kBAAL,CAAwBf,KAAK,CAACE,IAA9B,EAAoCF,KAAK,CAACgB,OAA1C;AADF,KAAb;AAHiB;AAMlB;;;;8CAEyBC,S,EAAW;AACnC,WAAKC,QAAL,CAAc;AACZf,QAAAA,WAAW,EAAE,KAAKY,kBAAL,CAAwBE,SAAS,CAACf,IAAlC,EAAwCe,SAAS,CAACD,OAAlD;AADD,OAAd;AAGD;AAED;;;;;;yCAG2D;AAAA,UAAxCd,IAAwC,uEAAzB,EAAyB;AAAA,UAArBc,OAAqB,uEAAJ,EAAI;AACzD,aAAOd,IAAI,CAACW,GAAL,CAAS,gBAA8B;AAAA,YAA3BC,GAA2B,QAA3BA,GAA2B;AAAA,YAAtBK,IAAsB,QAAtBA,IAAsB;AAAA,YAAhBC,SAAgB,QAAhBA,SAAgB;AAC5C;AACA,YAAMC,KAAK,GAAGL,OAAO,CAACV,MAAR,CACZ,UAACgB,IAAD,EAAOC,MAAP;AAAA,iBAAkBD,IAAI,IAAI,CAACC,MAAM,CAACC,MAAP,IAAiB,EAAlB,EAAsBC,QAAtB,CAA+BX,GAA/B,IAAsC,CAAtC,GAA0C,CAA9C,CAAtB;AAAA,SADY,EAEZ,CAFY,CAAd;AAKA,YAAIV,KAAK,GAAG,MAAZ;;AAEA,YAAIiB,KAAK,GAAG,CAAZ,EAAe;AACb,cAAIA,KAAK,KAAKL,OAAO,CAACU,MAAtB,EAA8B;AAC5BtB,YAAAA,KAAK,GAAG,KAAR;AACD,WAFD,MAEO,IAAIiB,KAAK,GAAGL,OAAO,CAACU,MAApB,EAA4B;AACjCtB,YAAAA,KAAK,GAAG,MAAR;AACD;AACF;;AAED,eAAO;AACLU,UAAAA,GAAG,EAAHA,GADK;AAELa,UAAAA,KAAK,EAAER,IAFF;AAGLS,UAAAA,SAAS,EAAE,cAHN;AAILC,UAAAA,SAAS,EAAET,SAJN;AAKLV,UAAAA,UAAU,EAAEN;AALP,SAAP;AAOD,OAxBM,CAAP;AAyBD;;;6BAqBQ;AACP,UAAI,KAAKJ,KAAL,CAAW8B,OAAf,EAAwB;AACtB,eAAO,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAHM,wBAK4B,KAAK9B,KALjC;AAAA,UAKC+B,SALD,eAKCA,SALD;AAAA,UAKYC,KALZ,eAKYA,KALZ;AAAA,UAKmBC,IALnB,eAKmBA,IALnB;AAOP,UAAMC,KAAK,GAAG,CACZ;AACEP,QAAAA,KAAK,EAAE9B,EAAE,CAAC,aAAD,CADX;AAEEsC,QAAAA,IAAI,kBAAWF,IAAX;AAFN,OADY,CAAd;AAOA,UAAMjC,KAAK,GAAG;AACZ+B,QAAAA,SAAS,EAATA,SADY;AAEZG,QAAAA,KAAK,EAALA,KAFY;AAGZE,QAAAA,UAAU,EAAE,IAHA;AAIZC,QAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKpC,KAAL,CAAWD,WAA1B,CAAX;AAJK,OAAd;;AAOA,UAAI6B,KAAJ,EAAW;AACThC,QAAAA,KAAK,CAACgC,KAAD,CAAL,GAAe,KAAK/B,GAApB;AACD;;AAED,aAAO,oBAAC,cAAD,oBAAoBD,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA3FkBF,KAAK,CAAC2C,S;;AA8F3B,eAAe1C,MAAf","sourcesContent":["import FilterableList from 'modules/common/components/filterableList/FilterableList';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __ } from 'modules/common/utils';\nimport { ITag, ITagTypes } from 'modules/tags/types';\nimport React from 'react';\n\ntype Props = {\n  type: ITagTypes | string;\n  // targets can be conversation, customer, company etc ...\n  targets?: any[];\n  event?: 'onClick' | 'onExit';\n  className?: string;\n\n  // from container\n  loading: boolean;\n  tags: ITag[];\n  tag: (tags: ITag[]) => void;\n};\n\nclass Tagger extends React.Component<Props, { tagsForList: any[] }> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tagsForList: this.generateTagsParams(props.tags, props.targets)\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      tagsForList: this.generateTagsParams(nextProps.tags, nextProps.targets)\n    });\n  }\n\n  /**\n   * Returns array of tags object\n   */\n  generateTagsParams(tags: ITag[] = [], targets: any[] = []) {\n    return tags.map(({ _id, name, colorCode }) => {\n      // Current tag's selection state (all, some or none)\n      const count = targets.reduce(\n        (memo, target) => memo + ((target.tagIds || []).includes(_id) ? 1 : 0),\n        0\n      );\n\n      let state = 'none';\n\n      if (count > 0) {\n        if (count === targets.length) {\n          state = 'all';\n        } else if (count < targets.length) {\n          state = 'some';\n        }\n      }\n\n      return {\n        _id,\n        title: name,\n        iconClass: 'icon-tag-alt',\n        iconColor: colorCode,\n        selectedBy: state\n      };\n    });\n  }\n\n  tag = tags => {\n    const { tag } = this.props;\n\n    // detect changes\n    const { tagsForList } = this.state;\n\n    const unchanged = tagsForList.reduce(\n      (prev, current, index) =>\n        prev && current.selectedBy === tags[index].selectedBy,\n      true\n    );\n\n    if (unchanged) {\n      return;\n    }\n\n    tag(tags.filter(t => t.selectedBy === 'all').map(t => t._id));\n  };\n\n  render() {\n    if (this.props.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    const { className, event, type } = this.props;\n\n    const links = [\n      {\n        title: __('Manage tags'),\n        href: `/tags/${type}`\n      }\n    ];\n\n    const props = {\n      className,\n      links,\n      selectable: true,\n      items: JSON.parse(JSON.stringify(this.state.tagsForList))\n    };\n\n    if (event) {\n      props[event] = this.tag;\n    }\n\n    return <FilterableList {...props} />;\n  }\n}\n\nexport default Tagger;\n"]},"metadata":{},"sourceType":"module"}