{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { getEnv } from 'apolloClient';\nimport { Alert } from 'modules/common/utils';\nexport var deleteHandler = function deleteHandler(params) {\n  var _getEnv = getEnv(),\n      REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n  var _params$url = params.url,\n      url = _params$url === void 0 ? \"\".concat(REACT_APP_API_URL, \"/delete-file\") : _params$url,\n      fileName = params.fileName,\n      afterUpload = params.afterUpload;\n  fetch(\"\".concat(url), {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: \"fileName=\".concat(fileName),\n    credentials: 'include'\n  }).then(function (response) {\n    response.text().then(function (text) {\n      if (!response.ok) {\n        return afterUpload({\n          status: text\n        });\n      }\n\n      return afterUpload({\n        status: 'ok'\n      });\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  });\n};\n\nvar uploadHandler = function uploadHandler(params) {\n  var _getEnv2 = getEnv(),\n      REACT_APP_API_URL = _getEnv2.REACT_APP_API_URL;\n\n  var files = params.files,\n      beforeUpload = params.beforeUpload,\n      afterUpload = params.afterUpload,\n      afterRead = params.afterRead,\n      _params$url2 = params.url,\n      url = _params$url2 === void 0 ? \"\".concat(REACT_APP_API_URL, \"/upload-file\") : _params$url2,\n      _params$kind = params.kind,\n      kind = _params$kind === void 0 ? 'main' : _params$kind,\n      _params$responseType = params.responseType,\n      responseType = _params$responseType === void 0 ? 'text' : _params$responseType,\n      userId = params.userId,\n      _params$extraFormData = params.extraFormData,\n      extraFormData = _params$extraFormData === void 0 ? [] : _params$extraFormData;\n\n  if (!files) {\n    return;\n  }\n\n  if (files.length === 0) {\n    return;\n  } // tslint:disable-next-line\n\n\n  var _loop = function _loop(i) {\n    var file = files[i]; // initiate upload file reader\n\n    var uploadReader = new FileReader();\n    var fileInfo = {\n      name: file.name,\n      size: file.size,\n      type: file.type\n    }; // skip file that size is more than 15mb\n\n    if (fileInfo.size > 20 * 1024 * 1024) {\n      Alert.warning(\"Your file \".concat(fileInfo.name, \" size is too large. Upload files less than 15MB of size.\"));\n      return \"continue\";\n    } // after read proccess done\n\n\n    uploadReader.onloadend = function () {\n      // before upload\n      if (beforeUpload) {\n        beforeUpload();\n      }\n\n      var formData = new FormData();\n      formData.append('file', file);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = extraFormData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var data = _step.value;\n          formData.append(data.key, data.value);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      fetch(\"\".concat(url, \"?kind=\").concat(kind), _objectSpread({\n        method: 'post',\n        body: formData,\n        credentials: 'include'\n      }, userId ? {\n        headers: {\n          userId: userId\n        }\n      } : {})).then(function (response) {\n        response[responseType]().then(function (text) {\n          if (!response.ok) {\n            return afterUpload({\n              status: 'error',\n              response: text,\n              fileInfo: fileInfo\n            });\n          } // after upload\n\n\n          if (afterUpload) {\n            afterUpload({\n              status: 'ok',\n              response: text,\n              fileInfo: fileInfo\n            });\n          }\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    }; // begin read\n\n\n    uploadReader.readAsArrayBuffer(file); // read as data url for preview purposes\n\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      if (afterRead) {\n        afterRead({\n          result: reader.result,\n          fileInfo: fileInfo\n        });\n      }\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  for (var i = 0; i < files.length; i++) {\n    var _ret = _loop(i);\n\n    if (_ret === \"continue\") continue;\n  }\n};\n\nexport default uploadHandler;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/utils/uploadHandler.ts"],"names":["getEnv","Alert","deleteHandler","params","REACT_APP_API_URL","url","fileName","afterUpload","fetch","method","headers","body","credentials","then","response","text","ok","status","catch","error","message","uploadHandler","files","beforeUpload","afterRead","kind","responseType","userId","extraFormData","length","i","file","uploadReader","FileReader","fileInfo","name","size","type","warning","onloadend","formData","FormData","append","data","key","value","readAsArrayBuffer","reader","result","readAsDataURL"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport { Alert } from 'modules/common/utils';\n\ntype FileInfo = {\n  name: string;\n  size: number;\n  type: string;\n};\n\ntype AfterUploadParams = {\n  status: 'ok' | 'error';\n  response: any;\n  fileInfo: FileInfo;\n};\n\ntype AfterReadParams = {\n  result: any;\n  fileInfo: FileInfo;\n};\n\ntype Params = {\n  files: FileList | null;\n  beforeUpload: () => void;\n  afterUpload: (params: AfterUploadParams) => void;\n  afterRead?: (params: AfterReadParams) => void;\n  url?: string;\n  kind?: string;\n  userId?: string;\n  responseType?: string;\n  extraFormData?: Array<{ key: string; value: string }>;\n};\n\nexport const deleteHandler = (params: {\n  fileName: string;\n  url?: string;\n  afterUpload: ({ status }: { status: string }) => any;\n}) => {\n  const { REACT_APP_API_URL } = getEnv();\n\n  const {\n    url = `${REACT_APP_API_URL}/delete-file`,\n    fileName,\n    afterUpload\n  } = params;\n\n  fetch(`${url}`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `fileName=${fileName}`,\n    credentials: 'include'\n  }).then(response => {\n    response\n      .text()\n      .then(text => {\n        if (!response.ok) {\n          return afterUpload({\n            status: text\n          });\n        }\n\n        return afterUpload({ status: 'ok' });\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  });\n};\n\nconst uploadHandler = (params: Params) => {\n  const { REACT_APP_API_URL } = getEnv();\n\n  const {\n    files,\n    beforeUpload,\n    afterUpload,\n    afterRead,\n    url = `${REACT_APP_API_URL}/upload-file`,\n    kind = 'main',\n    responseType = 'text',\n    userId,\n    extraFormData = []\n  } = params;\n\n  if (!files) {\n    return;\n  }\n\n  if (files.length === 0) {\n    return;\n  }\n\n  // tslint:disable-next-line\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n\n    // initiate upload file reader\n    const uploadReader = new FileReader();\n\n    const fileInfo = { name: file.name, size: file.size, type: file.type };\n\n    // skip file that size is more than 15mb\n    if (fileInfo.size > 20 * 1024 * 1024) {\n      Alert.warning(\n        `Your file ${fileInfo.name} size is too large. Upload files less than 15MB of size.`\n      );\n\n      continue;\n    }\n\n    // after read proccess done\n    uploadReader.onloadend = () => {\n      // before upload\n      if (beforeUpload) {\n        beforeUpload();\n      }\n\n      const formData = new FormData();\n      formData.append('file', file);\n\n      for (const data of extraFormData) {\n        formData.append(data.key, data.value);\n      }\n\n      fetch(`${url}?kind=${kind}`, {\n        method: 'post',\n        body: formData,\n        credentials: 'include',\n        ...(userId ? { headers: { userId } } : {})\n      })\n        .then(response => {\n          response[responseType]()\n            .then(text => {\n              if (!response.ok) {\n                return afterUpload({\n                  status: 'error',\n                  response: text,\n                  fileInfo\n                });\n              }\n\n              // after upload\n              if (afterUpload) {\n                afterUpload({ status: 'ok', response: text, fileInfo });\n              }\n            })\n            .catch(error => {\n              Alert.error(error.message);\n            });\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    // begin read\n    uploadReader.readAsArrayBuffer(file);\n\n    // read as data url for preview purposes\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      if (afterRead) {\n        afterRead({ result: reader.result, fileInfo });\n      }\n    };\n\n    reader.readAsDataURL(file);\n  }\n};\n\nexport default uploadHandler;\n"]},"metadata":{},"sourceType":"module"}