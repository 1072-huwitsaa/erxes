{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/responseTemplate/Modal.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n              \", \"\\n            \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport Modal from 'modules/inbox/components/conversationDetail/workarea/responseTemplate/Modal';\nimport { mutations, queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar ModalContainer = function ModalContainer(props) {\n  var saveResponseTemplateMutation = props.saveResponseTemplateMutation;\n\n  var saveResponseTemplate = function saveResponseTemplate(variables, callback) {\n    saveResponseTemplateMutation({\n      variables: variables\n    }).then(function () {\n      Alert.success('You successfully saved a response template');\n      callback();\n    }).catch(function (e) {\n      callback(e);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    saveResponseTemplate: saveResponseTemplate\n  });\n\n  return React.createElement(Modal, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(mutations.saveResponseTemplate), {\n  name: 'saveResponseTemplateMutation',\n  options: {\n    refetchQueries: [{\n      query: gql(_templateObject(), queries.responseTemplateList)\n    }]\n  }\n}))(ModalContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/responseTemplate/Modal.tsx"],"names":["gql","compose","Alert","withProps","Modal","mutations","queries","React","graphql","ModalContainer","props","saveResponseTemplateMutation","saveResponseTemplate","variables","callback","then","success","catch","e","updatedProps","name","options","refetchQueries","query","responseTemplateList"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,6EAAlB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,uBAAnC;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;;AAYA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAuB;AAAA,MACpCC,4BADoC,GACHD,KADG,CACpCC,4BADoC;;AAG5C,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,SAD2B,EAE3BC,QAF2B,EAGxB;AACHH,IAAAA,4BAA4B,CAAC;AAAEE,MAAAA,SAAS,EAATA;AAAF,KAAD,CAA5B,CACGE,IADH,CACQ,YAAM;AACVb,MAAAA,KAAK,CAACc,OAAN,CAAc,4CAAd;AACAF,MAAAA,QAAQ;AACT,KAJH,EAKGG,KALH,CAKS,UAAAC,CAAC,EAAI;AACVJ,MAAAA,QAAQ,CAACI,CAAD,CAAR;AACD,KAPH;AAQD,GAZD;;AAcA,MAAMC,YAAY,qBACbT,KADa;AAEhBE,IAAAA,oBAAoB,EAApBA;AAFgB,IAAlB;;AAKA,SAAO,oBAAC,KAAD,oBAAWO,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAvBD;;AAyBA,eAAehB,SAAS,CACtBF,OAAO,CACLO,OAAO,CAILR,GAAG,CAACK,SAAS,CAACO,oBAAX,CAJE,EAIgC;AACrCQ,EAAAA,IAAI,EAAE,8BAD+B;AAErCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAE,CACd;AACEC,MAAAA,KAAK,EAAEvB,GAAF,oBACDM,OAAO,CAACkB,oBADP;AADP,KADc;AADT;AAF4B,CAJhC,CADF,CAAP,CAiBEf,cAjBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IAttachment } from 'modules/common/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport Modal from 'modules/inbox/components/conversationDetail/workarea/responseTemplate/Modal';\nimport { mutations, queries } from 'modules/inbox/graphql';\nimport { IBrand } from 'modules/settings/brands/types';\nimport {\n  SaveResponseTemplateMutationResponse,\n  SaveResponseTemplateMutationVariables\n} from 'modules/settings/responseTemplates/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  brands: IBrand[];\n  trigger: React.ReactNode;\n  brandId?: string;\n  files?: IAttachment[];\n  content?: string;\n};\n\ntype FinalProps = Props & SaveResponseTemplateMutationResponse;\n\nconst ModalContainer = (props: FinalProps) => {\n  const { saveResponseTemplateMutation } = props;\n\n  const saveResponseTemplate = (\n    variables: SaveResponseTemplateMutationVariables,\n    callback: (e?: Error) => void\n  ) => {\n    saveResponseTemplateMutation({ variables })\n      .then(() => {\n        Alert.success('You successfully saved a response template');\n        callback();\n      })\n      .catch(e => {\n        callback(e);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    saveResponseTemplate\n  };\n\n  return <Modal {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      SaveResponseTemplateMutationResponse,\n      SaveResponseTemplateMutationVariables\n    >(gql(mutations.saveResponseTemplate), {\n      name: 'saveResponseTemplateMutation',\n      options: {\n        refetchQueries: [\n          {\n            query: gql`\n              ${queries.responseTemplateList}\n            `\n          }\n        ]\n      }\n    })\n  )(ModalContainer)\n);\n"]},"metadata":{},"sourceType":"module"}