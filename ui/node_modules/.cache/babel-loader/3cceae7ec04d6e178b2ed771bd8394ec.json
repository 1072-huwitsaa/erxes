{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/containers/ManageColumns.tsx\";\nimport { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { queries } from 'modules/forms/graphql';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ManageColumns from '../components/ManageColumns';\n\nvar _getEnv = getEnv(),\n    REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\nvar ManageColumnsContainer = function ManageColumnsContainer(props) {\n  var fieldsDefaultColumnsConfigQuery = props.fieldsDefaultColumnsConfigQuery,\n      fieldsQuery = props.fieldsQuery,\n      contentType = props.contentType,\n      location = props.location,\n      history = props.history,\n      type = props.type;\n\n  if (fieldsQuery.loading || fieldsDefaultColumnsConfigQuery.loading) {\n    return false;\n  }\n\n  var storageKey = \"erxes_\".concat(contentType, \"_columns_config\");\n  var storageItem = localStorage.getItem(storageKey);\n\n  var save = function save(config, importType) {\n    localStorage.setItem(storageKey, JSON.stringify(config));\n    Alert.success('Success');\n\n    if (history && location) {\n      history.push(location.pathname);\n    }\n  };\n\n  if (type && (type === 'import' || type === 'export')) {\n    save = function save(configs, importType) {\n      var checkedConfigsForImport = [];\n      var checkedConfigsForExport = [];\n      var reqUrl = '/template-export';\n\n      if (type === 'export') {\n        reqUrl = '/file-export';\n      }\n\n      configs.filter(function (conf) {\n        return conf.checked;\n      }).forEach(function (checked) {\n        if (checked.name.startsWith('customFieldsData')) {\n          checkedConfigsForExport.push(checked);\n          checkedConfigsForImport.push(checked.label);\n        } else {\n          checkedConfigsForExport.push(checked);\n          checkedConfigsForImport.push(checked.name);\n        }\n      });\n      var stringified = queryString.stringify({\n        configs: type === 'export' ? JSON.stringify(checkedConfigsForExport) : checkedConfigsForImport,\n        type: contentType,\n        importType: importType,\n        fromHistory: true\n      });\n      window.open(\"\".concat(REACT_APP_API_URL).concat(reqUrl, \"?\").concat(stringified), '_blank');\n    };\n  }\n\n  var defaultColumns = fieldsDefaultColumnsConfigQuery.fieldsDefaultColumnsConfig;\n  var columns = [];\n\n  if (storageItem) {\n    columns = JSON.parse(storageItem);\n  } else {\n    var defaultColumnsMap = {};\n    defaultColumns.forEach(function (col) {\n      defaultColumnsMap[col.name] = col;\n    });\n    columns = (fieldsQuery.fieldsCombinedByContentType || []).map(function (field) {\n      var conf = defaultColumnsMap[field.name];\n      return _objectSpread({}, field, {\n        _id: Math.random().toString(),\n        order: conf ? conf.order : 0,\n        checked: conf\n      });\n    }).sort(function (a, b) {\n      return a.order - b.order;\n    });\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    save: save,\n    columns: columns\n  });\n\n  return React.createElement(ManageColumns, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.fieldsCombinedByContentType), {\n  name: 'fieldsQuery',\n  options: function options(_ref) {\n    var contentType = _ref.contentType,\n        type = _ref.type;\n    return {\n      variables: {\n        contentType: contentType === 'lead' ? 'customer' : contentType,\n        usageType: type,\n        excludedNames: ['state', 'avatar', 'ownerId', 'status', 'integrationId', 'categoryId', 'emailValidationStatus', 'phoneValidationStatus', 'location.countryCode']\n      }\n    };\n  }\n}), graphql(gql(queries.fieldsDefaultColumnsConfig), {\n  name: 'fieldsDefaultColumnsConfigQuery',\n  options: function options(_ref2) {\n    var contentType = _ref2.contentType;\n    return {\n      variables: {\n        contentType: contentType === 'lead' ? 'customer' : contentType\n      }\n    };\n  }\n}))(ManageColumnsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/containers/ManageColumns.tsx"],"names":["getEnv","gql","compose","Alert","withProps","queries","queryString","React","graphql","ManageColumns","REACT_APP_API_URL","ManageColumnsContainer","props","fieldsDefaultColumnsConfigQuery","fieldsQuery","contentType","location","history","type","loading","storageKey","storageItem","localStorage","getItem","save","config","importType","setItem","JSON","stringify","success","push","pathname","configs","checkedConfigsForImport","checkedConfigsForExport","reqUrl","filter","conf","checked","forEach","name","startsWith","label","stringified","fromHistory","window","open","defaultColumns","fieldsDefaultColumnsConfig","columns","parse","defaultColumnsMap","col","fieldsCombinedByContentType","map","field","_id","Math","random","toString","order","sort","a","b","updatedProps","options","variables","usageType","excludedNames"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { queries } from 'modules/forms/graphql';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ManageColumns from '../components/ManageColumns';\n\nimport {\n  DefaultColumnsConfigQueryResponse,\n  FieldsCombinedByTypeQueryResponse,\n  IConfigColumn\n} from '../types';\n\ntype Props = {\n  contentType: string;\n  type: string;\n  location?: any;\n  history?: any;\n  closeModal: () => void;\n};\n\ntype FinalProps = {\n  fieldsDefaultColumnsConfigQuery: DefaultColumnsConfigQueryResponse;\n  fieldsQuery: FieldsCombinedByTypeQueryResponse;\n} & Props;\n\nconst { REACT_APP_API_URL } = getEnv();\n\nconst ManageColumnsContainer = (props: FinalProps) => {\n  const {\n    fieldsDefaultColumnsConfigQuery,\n    fieldsQuery,\n    contentType,\n    location,\n    history,\n    type\n  } = props;\n\n  if (fieldsQuery.loading || fieldsDefaultColumnsConfigQuery.loading) {\n    return false;\n  }\n\n  const storageKey = `erxes_${contentType}_columns_config`;\n  const storageItem = localStorage.getItem(storageKey);\n\n  let save = (config: any, importType?: string) => {\n    localStorage.setItem(storageKey, JSON.stringify(config));\n\n    Alert.success('Success');\n\n    if (history && location) {\n      history.push(location.pathname);\n    }\n  };\n\n  if (type && (type === 'import' || type === 'export')) {\n    save = (configs, importType) => {\n      const checkedConfigsForImport: string[] = [];\n      const checkedConfigsForExport: any[] = [];\n\n      let reqUrl = '/template-export';\n\n      if (type === 'export') {\n        reqUrl = '/file-export';\n      }\n\n      configs\n        .filter(conf => conf.checked)\n        .forEach(checked => {\n          if (checked.name.startsWith('customFieldsData')) {\n            checkedConfigsForExport.push(checked);\n            checkedConfigsForImport.push(checked.label);\n          } else {\n            checkedConfigsForExport.push(checked);\n            checkedConfigsForImport.push(checked.name);\n          }\n        });\n\n      const stringified = queryString.stringify({\n        configs:\n          type === 'export'\n            ? JSON.stringify(checkedConfigsForExport)\n            : checkedConfigsForImport,\n        type: contentType,\n        importType,\n        fromHistory: true\n      });\n\n      window.open(`${REACT_APP_API_URL}${reqUrl}?${stringified}`, '_blank');\n    };\n  }\n\n  const defaultColumns =\n    fieldsDefaultColumnsConfigQuery.fieldsDefaultColumnsConfig;\n\n  let columns: IConfigColumn[] = [];\n\n  if (storageItem) {\n    columns = JSON.parse(storageItem);\n  } else {\n    const defaultColumnsMap = {};\n\n    defaultColumns.forEach(col => {\n      defaultColumnsMap[col.name] = col;\n    });\n\n    columns = (fieldsQuery.fieldsCombinedByContentType || [])\n      .map(field => {\n        const conf = defaultColumnsMap[field.name];\n\n        return {\n          ...field,\n          _id: Math.random().toString(),\n          order: conf ? conf.order : 0,\n          checked: conf\n        };\n      })\n      .sort((a, b) => a.order - b.order);\n  }\n\n  const updatedProps = {\n    ...props,\n    save,\n    columns\n  };\n\n  return <ManageColumns {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, FieldsCombinedByTypeQueryResponse, { contentType: string }>(\n      gql(queries.fieldsCombinedByContentType),\n      {\n        name: 'fieldsQuery',\n        options: ({ contentType, type }) => {\n          return {\n            variables: {\n              contentType: contentType === 'lead' ? 'customer' : contentType,\n              usageType: type,\n              excludedNames: [\n                'state',\n                'avatar',\n                'ownerId',\n                'status',\n                'integrationId',\n                'categoryId',\n                'emailValidationStatus',\n                'phoneValidationStatus',\n                'location.countryCode'\n              ]\n            }\n          };\n        }\n      }\n    ),\n    graphql<Props, DefaultColumnsConfigQueryResponse, { contentType: string }>(\n      gql(queries.fieldsDefaultColumnsConfig),\n      {\n        name: 'fieldsDefaultColumnsConfigQuery',\n        options: ({ contentType }) => {\n          return {\n            variables: {\n              contentType: contentType === 'lead' ? 'customer' : contentType\n            }\n          };\n        }\n      }\n    )\n  )(ManageColumnsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}