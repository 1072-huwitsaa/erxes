{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomersList.tsx\";\nimport { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Bulk from '../../common/components/Bulk';\nimport CustomersList from '../components/list/CustomersList';\nimport { mutations, queries } from '../graphql';\n\nvar CustomerListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomerListContainer, _React$Component);\n\n  function CustomerListContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CustomerListContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomerListContainer).call(this, props));\n    _this.timer = void 0;\n\n    _this.refetchWithDelay = function () {\n      _this.timer = setTimeout(function () {\n        _this.props.customersMainQuery.refetch();\n      }, 5500);\n    };\n\n    _this.state = {\n      loading: false,\n      mergeCustomerLoading: false,\n      responseId: ''\n    };\n    return _this;\n  }\n\n  _createClass(CustomerListContainer, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.queryParams.page !== prevProps.queryParams.page) {\n        this.props.customersMainQuery.refetch();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          customersMainQuery = _this$props.customersMainQuery,\n          customersListConfigQuery = _this$props.customersListConfigQuery,\n          customersRemove = _this$props.customersRemove,\n          customersMerge = _this$props.customersMerge,\n          customersVerify = _this$props.customersVerify,\n          customersChangeVerificationStatus = _this$props.customersChangeVerificationStatus,\n          type = _this$props.type,\n          history = _this$props.history;\n      var columnsConfig = customersListConfigQuery.fieldsDefaultColumnsConfig || []; // load config from local storage\n\n      var localConfig = localStorage.getItem(\"erxes_\".concat(type, \"_columns_config\"));\n\n      if (localConfig) {\n        columnsConfig = JSON.parse(localConfig).filter(function (conf) {\n          return conf.checked;\n        });\n      }\n\n      var removeCustomers = function removeCustomers(_ref, emptyBulk) {\n        var customerIds = _ref.customerIds;\n        customersRemove({\n          variables: {\n            customerIds: customerIds\n          }\n        }).then(function () {\n          emptyBulk();\n          Alert.success('You successfully deleted a customer. The changes will take a few seconds', 4500);\n\n          _this2.refetchWithDelay();\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var mergeCustomers = function mergeCustomers(_ref2) {\n        var ids = _ref2.ids,\n            data = _ref2.data,\n            callback = _ref2.callback;\n\n        _this2.setState({\n          mergeCustomerLoading: true\n        });\n\n        customersMerge({\n          variables: {\n            customerIds: ids,\n            customerFields: data\n          }\n        }).then(function (result) {\n          callback();\n\n          _this2.setState({\n            mergeCustomerLoading: false\n          });\n\n          Alert.success('You successfully merged a customer');\n          history.push(\"/contacts/details/\".concat(result.data.customersMerge._id));\n          customersMainQuery.refetch();\n        }).catch(function (e) {\n          Alert.error(e.message);\n\n          _this2.setState({\n            mergeCustomerLoading: false\n          });\n        });\n      };\n\n      var verifyCustomers = function verifyCustomers(_ref3) {\n        var verificationType = _ref3.verificationType;\n\n        _this2.setState({\n          mergeCustomerLoading: true\n        });\n\n        customersVerify({\n          variables: {\n            verificationType: verificationType\n          }\n        }).then(function () {\n          Alert.success('Your request has been successfully sent. Your contacts will be verified after a while');\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var changeVerificationStatus = function changeVerificationStatus(_ref4) {\n        var customerIds = _ref4.customerIds,\n            verificationType = _ref4.verificationType,\n            status = _ref4.status;\n        customersChangeVerificationStatus({\n          variables: {\n            customerIds: customerIds,\n            type: verificationType,\n            status: status\n          }\n        }).then(function (result) {\n          Alert.success('You successfully changed a status');\n          customersMainQuery.refetch();\n        }).catch(function (e) {\n          Alert.error(e.message);\n        });\n      };\n\n      var exportData = function exportData(bulk) {\n        var _getEnv = getEnv(),\n            REACT_APP_API_URL = _getEnv.REACT_APP_API_URL;\n\n        var queryParams = _this2.props.queryParams;\n        var checkedConfigs = []; // queryParams page parameter needs convert to int.\n\n        if (queryParams.page) {\n          queryParams.page = parseInt(queryParams.page, 10);\n        }\n\n        if (bulk.length > 0) {\n          queryParams.ids = bulk.map(function (customer) {\n            return customer._id;\n          });\n        }\n\n        columnsConfig.forEach(function (checked) {\n          checkedConfigs.push(checked);\n        });\n\n        var exportQuery = _objectSpread({}, queryParams, {\n          type: type,\n          configs: JSON.stringify(columnsConfig)\n        });\n\n        var stringified = queryString.stringify(exportQuery);\n        window.open(\"\".concat(REACT_APP_API_URL, \"/file-export?\").concat(stringified), '_blank');\n      };\n\n      var searchValue = this.props.queryParams.searchValue || '';\n\n      var _ref5 = customersMainQuery.customersMain || {},\n          _ref5$list = _ref5.list,\n          list = _ref5$list === void 0 ? [] : _ref5$list,\n          _ref5$totalCount = _ref5.totalCount,\n          totalCount = _ref5$totalCount === void 0 ? 0 : _ref5$totalCount;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        columnsConfig: columnsConfig,\n        customers: list,\n        totalCount: totalCount,\n        exportData: exportData,\n        searchValue: searchValue,\n        loading: customersMainQuery.loading || this.state.loading,\n        mergeCustomers: mergeCustomers,\n        responseId: this.state.responseId,\n        removeCustomers: removeCustomers,\n        verifyCustomers: verifyCustomers,\n        changeVerificationStatus: changeVerificationStatus,\n        mergeCustomerLoading: this.state.mergeCustomerLoading,\n        refetch: this.refetchWithDelay\n      });\n\n      var content = function content(props) {\n        return React.createElement(CustomersList, Object.assign({}, updatedProps, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(Bulk, {\n        content: content,\n        refetch: this.props.customersMainQuery.refetch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CustomerListContainer;\n}(React.Component);\n\nvar generateParams = function generateParams(_ref6) {\n  var queryParams = _ref6.queryParams,\n      type = _ref6.type;\n  return _objectSpread({}, generatePaginationParams(queryParams), {\n    segment: queryParams.segment,\n    tag: queryParams.tag,\n    ids: queryParams.ids,\n    searchValue: queryParams.searchValue,\n    brand: queryParams.brand,\n    integration: queryParams.integrationType,\n    form: queryParams.form,\n    startDate: queryParams.startDate,\n    endDate: queryParams.endDate,\n    leadStatus: queryParams.leadStatus,\n    sortField: queryParams.sortField,\n    type: type,\n    sortDirection: queryParams.sortDirection ? parseInt(queryParams.sortDirection, 10) : undefined\n  });\n};\n\nvar getRefetchQueries = function getRefetchQueries(queryParams, type) {\n  return [{\n    query: gql(queries.customersMain),\n    variables: _objectSpread({}, generateParams({\n      queryParams: queryParams,\n      type: type\n    }))\n  }, {\n    query: gql(queries.customerCounts),\n    variables: {\n      type: type,\n      only: 'byTag'\n    }\n  }, {\n    query: gql(queries.customerCounts),\n    variables: {\n      type: type,\n      only: 'byForm'\n    }\n  }, {\n    query: gql(queries.customerCounts),\n    variables: {\n      type: type,\n      only: 'byIntegrationType'\n    }\n  }, {\n    query: gql(queries.customerCounts),\n    variables: {\n      type: type,\n      only: 'byLeadStatus'\n    }\n  }, {\n    query: gql(queries.customerCounts),\n    variables: {\n      type: type,\n      only: 'bySegment'\n    }\n  }, {\n    query: gql(queries.customerCounts),\n    variables: {\n      type: type,\n      only: 'byBrand'\n    }\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.customersMain), {\n  name: 'customersMainQuery',\n  options: function options(_ref7) {\n    var queryParams = _ref7.queryParams,\n        type = _ref7.type;\n    return {\n      variables: generateParams({\n        queryParams: queryParams,\n        type: type\n      })\n    };\n  }\n}), graphql(gql(queries.customersListConfig), {\n  name: 'customersListConfigQuery'\n}), // mutations\ngraphql(gql(mutations.customersRemove), {\n  name: 'customersRemove',\n  options: function options(_ref8) {\n    var queryParams = _ref8.queryParams,\n        type = _ref8.type;\n    return {\n      refetchQueries: getRefetchQueries(queryParams, type)\n    };\n  }\n}), graphql(gql(mutations.customersMerge), {\n  name: 'customersMerge',\n  options: function options(_ref9) {\n    var queryParams = _ref9.queryParams,\n        type = _ref9.type;\n    return {\n      refetchQueries: getRefetchQueries(queryParams, type)\n    };\n  }\n}), graphql(gql(mutations.customersVerify), {\n  name: 'customersVerify'\n}), graphql(gql(mutations.customersChangeVerificationStatus), {\n  name: 'customersChangeVerificationStatus'\n}))(withRouter(CustomerListContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/customers/containers/CustomersList.tsx"],"names":["getEnv","gql","compose","Alert","withProps","generatePaginationParams","queryString","React","graphql","withRouter","Bulk","CustomersList","mutations","queries","CustomerListContainer","props","timer","refetchWithDelay","setTimeout","customersMainQuery","refetch","state","loading","mergeCustomerLoading","responseId","clearTimeout","prevProps","queryParams","page","customersListConfigQuery","customersRemove","customersMerge","customersVerify","customersChangeVerificationStatus","type","history","columnsConfig","fieldsDefaultColumnsConfig","localConfig","localStorage","getItem","JSON","parse","filter","conf","checked","removeCustomers","emptyBulk","customerIds","variables","then","success","catch","e","error","message","mergeCustomers","ids","data","callback","setState","customerFields","result","push","_id","verifyCustomers","verificationType","changeVerificationStatus","status","exportData","bulk","REACT_APP_API_URL","checkedConfigs","parseInt","length","map","customer","forEach","exportQuery","configs","stringify","stringified","window","open","searchValue","customersMain","list","totalCount","updatedProps","customers","content","Component","generateParams","segment","tag","brand","integration","integrationType","form","startDate","endDate","leadStatus","sortField","sortDirection","undefined","getRefetchQueries","query","customerCounts","only","name","options","customersListConfig","refetchQueries"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Bulk from '../../common/components/Bulk';\nimport { IRouterProps } from '../../common/types';\nimport { ListConfigQueryResponse } from '../../companies/types';\nimport CustomersList from '../components/list/CustomersList';\nimport { mutations, queries } from '../graphql';\nimport {\n  ChangeStatusMutationResponse,\n  ChangeStatusMutationVariables,\n  ListQueryVariables,\n  MainQueryResponse,\n  MergeMutationResponse,\n  MergeMutationVariables,\n  RemoveMutationResponse,\n  RemoveMutationVariables,\n  VerifyMutationResponse,\n  VerifyMutationVariables\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n  showImportBar: () => void;\n  type?: string;\n};\n\ntype FinalProps = {\n  customersMainQuery: MainQueryResponse;\n  customersListConfigQuery: ListConfigQueryResponse;\n} & Props &\n  RemoveMutationResponse &\n  MergeMutationResponse &\n  VerifyMutationResponse &\n  ChangeStatusMutationResponse &\n  IRouterProps;\n\ntype State = {\n  loading: boolean;\n  mergeCustomerLoading: boolean;\n  responseId: string;\n};\n\nclass CustomerListContainer extends React.Component<FinalProps, State> {\n  private timer?: NodeJS.Timer;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      mergeCustomerLoading: false,\n      responseId: ''\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.queryParams.page !== prevProps.queryParams.page) {\n      this.props.customersMainQuery.refetch();\n    }\n  }\n\n  refetchWithDelay = () => {\n    this.timer = setTimeout(() => {\n      this.props.customersMainQuery.refetch();\n    }, 5500);\n  };\n\n  render() {\n    const {\n      customersMainQuery,\n      customersListConfigQuery,\n      customersRemove,\n      customersMerge,\n      customersVerify,\n      customersChangeVerificationStatus,\n      type,\n      history\n    } = this.props;\n\n    let columnsConfig =\n      customersListConfigQuery.fieldsDefaultColumnsConfig || [];\n\n    // load config from local storage\n    const localConfig = localStorage.getItem(`erxes_${type}_columns_config`);\n\n    if (localConfig) {\n      columnsConfig = JSON.parse(localConfig).filter(conf => conf.checked);\n    }\n\n    const removeCustomers = ({ customerIds }, emptyBulk) => {\n      customersRemove({\n        variables: { customerIds }\n      })\n        .then(() => {\n          emptyBulk();\n          Alert.success(\n            'You successfully deleted a customer. The changes will take a few seconds',\n            4500\n          );\n\n          this.refetchWithDelay();\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const mergeCustomers = ({ ids, data, callback }) => {\n      this.setState({ mergeCustomerLoading: true });\n\n      customersMerge({\n        variables: {\n          customerIds: ids,\n          customerFields: data\n        }\n      })\n        .then((result: any) => {\n          callback();\n          this.setState({ mergeCustomerLoading: false });\n          Alert.success('You successfully merged a customer');\n          history.push(`/contacts/details/${result.data.customersMerge._id}`);\n          customersMainQuery.refetch();\n        })\n        .catch(e => {\n          Alert.error(e.message);\n          this.setState({ mergeCustomerLoading: false });\n        });\n    };\n\n    const verifyCustomers = ({ verificationType }) => {\n      this.setState({ mergeCustomerLoading: true });\n\n      customersVerify({\n        variables: {\n          verificationType\n        }\n      })\n        .then(() => {\n          Alert.success(\n            'Your request has been successfully sent. Your contacts will be verified after a while'\n          );\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const changeVerificationStatus = ({\n      customerIds,\n      verificationType,\n      status\n    }) => {\n      customersChangeVerificationStatus({\n        variables: {\n          customerIds,\n          type: verificationType,\n          status\n        }\n      })\n        .then((result: any) => {\n          Alert.success('You successfully changed a status');\n\n          customersMainQuery.refetch();\n        })\n        .catch(e => {\n          Alert.error(e.message);\n        });\n    };\n\n    const exportData = (bulk: Array<{ _id: string }>) => {\n      const { REACT_APP_API_URL } = getEnv();\n      const { queryParams } = this.props;\n      const checkedConfigs: any[] = [];\n\n      // queryParams page parameter needs convert to int.\n      if (queryParams.page) {\n        queryParams.page = parseInt(queryParams.page, 10);\n      }\n\n      if (bulk.length > 0) {\n        queryParams.ids = bulk.map(customer => customer._id);\n      }\n\n      columnsConfig.forEach(checked => {\n        checkedConfigs.push(checked);\n      });\n\n      const exportQuery = {\n        ...queryParams,\n        type,\n        configs: JSON.stringify(columnsConfig)\n      };\n\n      const stringified = queryString.stringify(exportQuery);\n\n      window.open(`${REACT_APP_API_URL}/file-export?${stringified}`, '_blank');\n    };\n\n    const searchValue = this.props.queryParams.searchValue || '';\n\n    const { list = [], totalCount = 0 } =\n      customersMainQuery.customersMain || {};\n\n    const updatedProps = {\n      ...this.props,\n      columnsConfig,\n      customers: list,\n      totalCount,\n      exportData,\n      searchValue,\n      loading: customersMainQuery.loading || this.state.loading,\n      mergeCustomers,\n      responseId: this.state.responseId,\n      removeCustomers,\n      verifyCustomers,\n      changeVerificationStatus,\n      mergeCustomerLoading: this.state.mergeCustomerLoading,\n      refetch: this.refetchWithDelay\n    };\n\n    const content = props => {\n      return <CustomersList {...updatedProps} {...props} />;\n    };\n\n    return (\n      <Bulk content={content} refetch={this.props.customersMainQuery.refetch} />\n    );\n  }\n}\n\nconst generateParams = ({ queryParams, type }) => {\n  return {\n    ...generatePaginationParams(queryParams),\n    segment: queryParams.segment,\n    tag: queryParams.tag,\n    ids: queryParams.ids,\n    searchValue: queryParams.searchValue,\n    brand: queryParams.brand,\n    integration: queryParams.integrationType,\n    form: queryParams.form,\n    startDate: queryParams.startDate,\n    endDate: queryParams.endDate,\n    leadStatus: queryParams.leadStatus,\n    sortField: queryParams.sortField,\n    type,\n    sortDirection: queryParams.sortDirection\n      ? parseInt(queryParams.sortDirection, 10)\n      : undefined\n  };\n};\n\nconst getRefetchQueries = (queryParams?: any, type?: string) => {\n  return [\n    {\n      query: gql(queries.customersMain),\n      variables: { ...generateParams({ queryParams, type }) }\n    },\n    {\n      query: gql(queries.customerCounts),\n      variables: { type, only: 'byTag' }\n    },\n    {\n      query: gql(queries.customerCounts),\n      variables: { type, only: 'byForm' }\n    },\n    {\n      query: gql(queries.customerCounts),\n      variables: { type, only: 'byIntegrationType' }\n    },\n    {\n      query: gql(queries.customerCounts),\n      variables: { type, only: 'byLeadStatus' }\n    },\n    {\n      query: gql(queries.customerCounts),\n      variables: { type, only: 'bySegment' }\n    },\n    {\n      query: gql(queries.customerCounts),\n      variables: { type, only: 'byBrand' }\n    }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, MainQueryResponse, ListQueryVariables>(\n      gql(queries.customersMain),\n      {\n        name: 'customersMainQuery',\n        options: ({ queryParams, type }) => ({\n          variables: generateParams({ queryParams, type })\n        })\n      }\n    ),\n    graphql<Props, ListConfigQueryResponse, {}>(\n      gql(queries.customersListConfig),\n      {\n        name: 'customersListConfigQuery'\n      }\n    ),\n    // mutations\n    graphql<Props, RemoveMutationResponse, RemoveMutationVariables>(\n      gql(mutations.customersRemove),\n      {\n        name: 'customersRemove',\n        options: ({ queryParams, type }) => ({\n          refetchQueries: getRefetchQueries(queryParams, type)\n        })\n      }\n    ),\n    graphql<Props, MergeMutationResponse, MergeMutationVariables>(\n      gql(mutations.customersMerge),\n      {\n        name: 'customersMerge',\n        options: ({ queryParams, type }) => ({\n          refetchQueries: getRefetchQueries(queryParams, type)\n        })\n      }\n    ),\n    graphql<Props, VerifyMutationResponse, VerifyMutationVariables>(\n      gql(mutations.customersVerify),\n      {\n        name: 'customersVerify'\n      }\n    ),\n    graphql<Props, ChangeStatusMutationResponse, ChangeStatusMutationVariables>(\n      gql(mutations.customersChangeVerificationStatus),\n      {\n        name: 'customersChangeVerificationStatus'\n      }\n    )\n  )(withRouter<IRouterProps>(CustomerListContainer))\n);\n"]},"metadata":{},"sourceType":"module"}