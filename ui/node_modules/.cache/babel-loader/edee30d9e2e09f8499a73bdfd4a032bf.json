{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/SelectChannels.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { mutations, queries } from 'modules/settings/channels/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SelectChannels from '../components/SelectChannels';\n\nvar SelectChannelContainer = function SelectChannelContainer(props) {\n  var channelsQuery = props.channelsQuery;\n  var channels = channelsQuery.channels || [];\n\n  if (channelsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    });\n  }\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback;\n\n    var callBackResponse = function callBackResponse() {\n      channelsQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return React.createElement(ButtonMutate, {\n      mutation: mutations.channelAdd,\n      variables: values,\n      callback: callBackResponse,\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      successMessage: \"You successfully added a \".concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    channels: channels,\n    renderButton: renderButton\n  });\n\n  return React.createElement(SelectChannels, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return [{\n    query: gql(queries.channels),\n    variables: {}\n  }];\n};\n\nexport default compose(graphql(gql(queries.channels), {\n  name: 'channelsQuery',\n  options: function options() {\n    return {\n      refetchQueries: getRefetchQueries\n    };\n  }\n}))(SelectChannelContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/SelectChannels.tsx"],"names":["gql","compose","ButtonMutate","Spinner","mutations","queries","React","graphql","SelectChannels","SelectChannelContainer","props","channelsQuery","channels","loading","renderButton","name","values","isSubmitted","callback","callBackResponse","refetch","channelAdd","updatedProps","getRefetchQueries","query","variables","options","refetchQueries"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,mCAAnC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAqBC,OAArB,QAAoC,cAApC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAaA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAmC;AAAA,MACxDC,aADwD,GACtCD,KADsC,CACxDC,aADwD;AAGhE,MAAMC,QAAQ,GAAGD,aAAa,CAACC,QAAd,IAA0B,EAA3C;;AAEA,MAAID,aAAa,CAACE,OAAlB,EAA2B;AACzB,WAAO,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAKK;AAAA,QAJxBC,IAIwB,QAJxBA,IAIwB;AAAA,QAHxBC,MAGwB,QAHxBA,MAGwB;AAAA,QAFxBC,WAEwB,QAFxBA,WAEwB;AAAA,QADxBC,QACwB,QADxBA,QACwB;;AACxB,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BR,MAAAA,aAAa,CAACS,OAAd;;AAEA,UAAIF,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACT;AACF,KAND;;AAQA,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEd,SAAS,CAACiB,UADtB;AAEE,MAAA,SAAS,EAAEL,MAFb;AAGE,MAAA,QAAQ,EAAEG,gBAHZ;AAIE,MAAA,WAAW,EAAEF,WAJf;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,cAAc,qCAA8BF,IAA9B,CANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAxBD;;AA0BA,MAAMO,YAAY,qBACbZ,KADa;AAEhBE,IAAAA,QAAQ,EAARA,QAFgB;AAGhBE,IAAAA,YAAY,EAAZA;AAHgB,IAAlB;;AAMA,SAAO,oBAAC,cAAD,oBAAoBQ,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA1CD;;AA4CA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,SAAO,CACL;AACEC,IAAAA,KAAK,EAAExB,GAAG,CAACK,OAAO,CAACO,QAAT,CADZ;AAEEa,IAAAA,SAAS,EAAE;AAFb,GADK,CAAP;AAMD,CAPD;;AASA,eAAexB,OAAO,CACpBM,OAAO,CAAwBP,GAAG,CAACK,OAAO,CAACO,QAAT,CAA3B,EAA+C;AACpDG,EAAAA,IAAI,EAAE,eAD8C;AAEpDW,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,cAAc,EAAEJ;AADF,KAAP;AAAA;AAF2C,CAA/C,CADa,CAAP,CAObd,sBAPa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps, IFormProps } from 'modules/common/types';\nimport { mutations, queries } from 'modules/settings/channels/graphql';\nimport { ChannelsQueryResponse } from 'modules/settings/channels/types';\nimport React from 'react';\nimport { ChildProps, graphql } from 'react-apollo';\nimport SelectChannels from '../components/SelectChannels';\n\ntype Props = {\n  onChange: (values: string[]) => void;\n  defaultValue: string[];\n  isRequired?: boolean;\n  formProps: IFormProps;\n};\n\ntype FinalProps = {\n  channelsQuery: ChannelsQueryResponse;\n} & Props;\n\nconst SelectChannelContainer = (props: ChildProps<FinalProps>) => {\n  const { channelsQuery } = props;\n\n  const channels = channelsQuery.channels || [];\n\n  if (channelsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    const callBackResponse = () => {\n      channelsQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={mutations.channelAdd}\n        variables={values}\n        callback={callBackResponse}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully added a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    channels,\n    renderButton\n  };\n\n  return <SelectChannels {...updatedProps} />;\n};\n\nconst getRefetchQueries = () => {\n  return [\n    {\n      query: gql(queries.channels),\n      variables: {}\n    }\n  ];\n};\n\nexport default compose(\n  graphql<ChannelsQueryResponse>(gql(queries.channels), {\n    name: 'channelsQuery',\n    options: () => ({\n      refetchQueries: getRefetchQueries\n    })\n  })\n)(SelectChannelContainer);\n"]},"metadata":{},"sourceType":"module"}