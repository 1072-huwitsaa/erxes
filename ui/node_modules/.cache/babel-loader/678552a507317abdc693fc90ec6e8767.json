{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/line/Form.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { __ } from 'modules/common/utils';\nimport { Alert } from 'modules/common/utils';\nimport Line from 'modules/settings/integrations/components/line/Line';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { withRouter } from 'react-router';\n\nvar LineContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LineContainer, _React$Component);\n\n  function LineContainer(props) {\n    var _this;\n\n    _classCallCheck(this, LineContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LineContainer).call(this, props));\n\n    _this.renderButton = function (_ref) {\n      var name = _ref.name,\n          values = _ref.values,\n          isSubmitted = _ref.isSubmitted,\n          callback = _ref.callback;\n      return React.createElement(ButtonMutate, {\n        mutation: mutations.integrationsCreateExternalIntegration,\n        variables: values,\n        callback: callback,\n        isSubmitted: isSubmitted,\n        type: \"submit\",\n        uppercase: false,\n        successMessage: __(\"You successfully added a\") + \"\".concat(name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    };\n\n    _this.onSave = function (integration) {\n      if (!integration) {\n        return _this.setState({\n          webhookUrl: ''\n        });\n      }\n\n      var id = integration.integrationsCreateExternalIntegration._id;\n      client.query({\n        query: gql(queries.integrationGetLineWebhookUrl),\n        variables: {\n          id: id\n        }\n      }).then(function (_ref2) {\n        var data = _ref2.data,\n            loading = _ref2.loading;\n\n        if (!loading) {\n          _this.setState({\n            webhookUrl: data.integrationGetLineWebhookUrl\n          });\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.state = {\n      webhookUrl: ''\n    };\n    return _this;\n  }\n\n  _createClass(LineContainer, [{\n    key: \"render\",\n    value: function render() {\n      var closeModal = this.props.closeModal;\n      var webhookUrl = this.state.webhookUrl;\n      var updatedProps = {\n        closeModal: closeModal,\n        webhookUrl: webhookUrl,\n        onSave: this.onSave,\n        renderButton: this.renderButton\n      };\n      return React.createElement(Line, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LineContainer;\n}(React.Component);\n\nexport default withRouter(LineContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/line/Form.tsx"],"names":["client","gql","ButtonMutate","__","Alert","Line","mutations","queries","React","withRouter","LineContainer","props","renderButton","name","values","isSubmitted","callback","integrationsCreateExternalIntegration","onSave","integration","setState","webhookUrl","id","_id","query","integrationGetLineWebhookUrl","variables","then","data","loading","catch","error","message","state","closeModal","updatedProps","Component"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,EAAT,QAAmB,sBAAnB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,OAAOC,IAAP,MAAiB,oDAAjB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,uCAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;;IAaMC,a;;;;;AACJ,yBAAYC,KAAZ,EAA+B;AAAA;;AAAA;;AAC7B,uFAAMA,KAAN;;AAD6B,UAM/BC,YAN+B,GAMhB,gBAKW;AAAA,UAJxBC,IAIwB,QAJxBA,IAIwB;AAAA,UAHxBC,MAGwB,QAHxBA,MAGwB;AAAA,UAFxBC,WAEwB,QAFxBA,WAEwB;AAAA,UADxBC,QACwB,QADxBA,QACwB;AACxB,aACE,oBAAC,YAAD;AACE,QAAA,QAAQ,EAAEV,SAAS,CAACW,qCADtB;AAEE,QAAA,SAAS,EAAEH,MAFb;AAGE,QAAA,QAAQ,EAAEE,QAHZ;AAIE,QAAA,WAAW,EAAED,WAJf;AAKE,QAAA,IAAI,EAAC,QALP;AAME,QAAA,SAAS,EAAE,KANb;AAOE,QAAA,cAAc,EAAEZ,EAAE,4BAAF,aAAoCU,IAApC,CAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD,KAvB8B;;AAAA,UAyB/BK,MAzB+B,GAyBtB,UAACC,WAAD,EAAkB;AACzB,UAAI,CAACA,WAAL,EAAkB;AAChB,eAAO,MAAKC,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAd,CAAP;AACD;;AAED,UAAMC,EAAE,GAAGH,WAAW,CAACF,qCAAZ,CAAkDM,GAA7D;AAEAvB,MAAAA,MAAM,CACHwB,KADH,CACS;AACLA,QAAAA,KAAK,EAAEvB,GAAG,CAACM,OAAO,CAACkB,4BAAT,CADL;AAELC,QAAAA,SAAS,EAAE;AACTJ,UAAAA,EAAE,EAAFA;AADS;AAFN,OADT,EAOGK,IAPH,CAOQ,iBAA4B;AAAA,YAAzBC,IAAyB,SAAzBA,IAAyB;AAAA,YAAnBC,OAAmB,SAAnBA,OAAmB;;AAChC,YAAI,CAACA,OAAL,EAAc;AACZ,gBAAKT,QAAL,CAAc;AACZC,YAAAA,UAAU,EAAEO,IAAI,CAACH;AADL,WAAd;AAGD;AACF,OAbH,EAcGK,KAdH,CAcS,UAAAC,KAAK,EAAI;AACd3B,QAAAA,KAAK,CAAC2B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,OAhBH;AAiBD,KAjD8B;;AAG7B,UAAKC,KAAL,GAAa;AAAEZ,MAAAA,UAAU,EAAE;AAAd,KAAb;AAH6B;AAI9B;;;;6BA+CQ;AAAA,UACCa,UADD,GACgB,KAAKvB,KADrB,CACCuB,UADD;AAAA,UAECb,UAFD,GAEgB,KAAKY,KAFrB,CAECZ,UAFD;AAGP,UAAMc,YAAY,GAAG;AACnBD,QAAAA,UAAU,EAAVA,UADmB;AAEnBb,QAAAA,UAAU,EAAVA,UAFmB;AAGnBH,QAAAA,MAAM,EAAE,KAAKA,MAHM;AAInBN,QAAAA,YAAY,EAAE,KAAKA;AAJA,OAArB;AAOA,aAAO,oBAAC,IAAD,oBAAUuB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA/DyB3B,KAAK,CAAC4B,S;;AAkElC,eAAe3B,UAAU,CAAaC,aAAb,CAAzB","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport { Alert } from 'modules/common/utils';\nimport Line from 'modules/settings/integrations/components/line/Line';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { withRouter } from 'react-router';\n\ntype Props = {\n  type?: string;\n  closeModal: () => void;\n};\n\ntype FinalProps = {} & IRouterProps & Props;\n\ntype State = {\n  webhookUrl: string;\n};\n\nclass LineContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = { webhookUrl: '' };\n  }\n\n  renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={mutations.integrationsCreateExternalIntegration}\n        variables={values}\n        callback={callback}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        uppercase={false}\n        successMessage={__(`You successfully added a`) + `${name}`}\n      />\n    );\n  };\n\n  onSave = (integration?) => {\n    if (!integration) {\n      return this.setState({ webhookUrl: '' });\n    }\n\n    const id = integration.integrationsCreateExternalIntegration._id;\n\n    client\n      .query({\n        query: gql(queries.integrationGetLineWebhookUrl),\n        variables: {\n          id\n        }\n      })\n      .then(({ data, loading }: any) => {\n        if (!loading) {\n          this.setState({\n            webhookUrl: data.integrationGetLineWebhookUrl\n          });\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  render() {\n    const { closeModal } = this.props;\n    const { webhookUrl } = this.state;\n    const updatedProps = {\n      closeModal,\n      webhookUrl,\n      onSave: this.onSave,\n      renderButton: this.renderButton\n    };\n\n    return <Line {...updatedProps} />;\n  }\n}\n\nexport default withRouter<FinalProps>(LineContainer);\n"]},"metadata":{},"sourceType":"module"}