{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/workarea/ConvertTo.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport ConvertTo from 'modules/inbox/components/conversationDetail/workarea/ConvertTo';\nimport { queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar ConvertToInfoContainer = function ConvertToInfoContainer(props) {\n  var convertToInfoQuery = props.convertToInfoQuery;\n\n  var updatedProps = _objectSpread({}, props, {\n    convertToInfo: convertToInfoQuery.convertToInfo || {},\n    refetch: convertToInfoQuery.refetch\n  });\n\n  return React.createElement(ConvertTo, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.convertToInfo), {\n  name: 'convertToInfoQuery',\n  options: function options(_ref) {\n    var conversation = _ref.conversation;\n    return {\n      variables: {\n        conversationId: conversation._id\n      }\n    };\n  }\n}))(ConvertToInfoContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/workarea/ConvertTo.tsx"],"names":["gql","compose","withProps","ConvertTo","queries","React","graphql","ConvertToInfoContainer","props","convertToInfoQuery","updatedProps","convertToInfo","refetch","name","options","conversation","variables","conversationId","_id"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,SAAP,MAAsB,gEAAtB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;;AAUA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAuB;AAAA,MAC5CC,kBAD4C,GACrBD,KADqB,CAC5CC,kBAD4C;;AAGpD,MAAMC,YAAY,qBACbF,KADa;AAEhBG,IAAAA,aAAa,EAAEF,kBAAkB,CAACE,aAAnB,IAAoC,EAFnC;AAGhBC,IAAAA,OAAO,EAAEH,kBAAkB,CAACG;AAHZ,IAAlB;;AAMA,SAAO,oBAAC,SAAD,oBAAeF,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAVD;;AAYA,eAAeR,SAAS,CACtBD,OAAO,CACLK,OAAO,CAACN,GAAG,CAACI,OAAO,CAACO,aAAT,CAAJ,EAA6B;AAClCE,EAAAA,IAAI,EAAE,oBAD4B;AAElCC,EAAAA,OAAO,EAAE;AAAA,QAAGC,YAAH,QAAGA,YAAH;AAAA,WAA8B;AACrCC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,cAAc,EAAEF,YAAY,CAACG;AAA/B;AAD0B,KAA9B;AAAA;AAFyB,CAA7B,CADF,CAAP,CAOEX,sBAPF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport ConvertTo from 'modules/inbox/components/conversationDetail/workarea/ConvertTo';\nimport { queries } from 'modules/inbox/graphql';\nimport { IConversation } from 'modules/inbox/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  conversation: IConversation;\n};\n\ntype FinalProps = {\n  convertToInfoQuery: any;\n} & Props;\n\nconst ConvertToInfoContainer = (props: FinalProps) => {\n  const { convertToInfoQuery } = props;\n\n  const updatedProps = {\n    ...props,\n    convertToInfo: convertToInfoQuery.convertToInfo || {},\n    refetch: convertToInfoQuery.refetch\n  };\n\n  return <ConvertTo {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(queries.convertToInfo), {\n      name: 'convertToInfoQuery',\n      options: ({ conversation }: Props) => ({\n        variables: { conversationId: conversation._id }\n      })\n    })\n  )(ConvertToInfoContainer)\n);\n"]},"metadata":{},"sourceType":"module"}