{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/EditableGrowthHackList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport WeightedScore from 'modules/growthHacks/components/weightedScore/WeightedScore';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport { getFilterParams } from '../utils';\n\nvar EditableGrowthHackList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditableGrowthHackList, _React$Component);\n\n  function EditableGrowthHackList() {\n    _classCallCheck(this, EditableGrowthHackList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EditableGrowthHackList).apply(this, arguments));\n  }\n\n  _createClass(EditableGrowthHackList, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          growthHacksQuery = _this$props.growthHacksQuery,\n          growthHacksTotalCountQuery = _this$props.growthHacksTotalCountQuery;\n\n      var save = function save(id, doc) {\n        var editMutation = _this.props.editMutation;\n        editMutation({\n          variables: _objectSpread({\n            _id: id\n          }, doc)\n        }).then(function () {\n          Alert.success('You successfully updated an experiment');\n\n          if (_this.props.refetch) {\n            _this.props.refetch();\n          }\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var _growthHacksQuery$gro = growthHacksQuery.growthHacks,\n          growthHacks = _growthHacksQuery$gro === void 0 ? [] : _growthHacksQuery$gro,\n          loading = growthHacksQuery.loading,\n          refetch = growthHacksQuery.refetch;\n\n      var props = _objectSpread({}, this.props, {\n        growthHacks: growthHacks,\n        loading: loading,\n        refetch: refetch,\n        save: save,\n        totalCount: growthHacksTotalCountQuery.growthHacksTotalCount\n      });\n\n      var Component = this.props.component || WeightedScore;\n      return React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditableGrowthHackList;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.growthHacksEdit), {\n  name: 'editMutation'\n}), graphql(gql(queries.growthHacks), {\n  name: 'growthHacksQuery',\n  options: function options(_ref) {\n    var _ref$queryParams = _ref.queryParams,\n        queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams;\n    return {\n      variables: _objectSpread({}, getFilterParams(queryParams), {\n        limit: parseInt(queryParams.limit, 10) || 15,\n        sortField: queryParams.sortField,\n        sortDirection: parseInt(queryParams.sortDirection, 10)\n      })\n    };\n  }\n}), graphql(gql(queries.growthHacksTotalCount), {\n  name: 'growthHacksTotalCountQuery',\n  options: function options(_ref2) {\n    var _ref2$queryParams = _ref2.queryParams,\n        queryParams = _ref2$queryParams === void 0 ? {} : _ref2$queryParams;\n    return {\n      variables: getFilterParams(queryParams)\n    };\n  }\n}))(EditableGrowthHackList));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/growthHacks/containers/EditableGrowthHackList.tsx"],"names":["gql","compose","Alert","withProps","WeightedScore","React","graphql","mutations","queries","getFilterParams","EditableGrowthHackList","props","growthHacksQuery","growthHacksTotalCountQuery","save","id","doc","editMutation","variables","_id","then","success","refetch","catch","error","message","growthHacks","loading","totalCount","growthHacksTotalCount","Component","component","growthHacksEdit","name","options","queryParams","limit","parseInt","sortField","sortDirection"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { SaveMutation } from 'modules/boards/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport WeightedScore from 'modules/growthHacks/components/weightedScore/WeightedScore';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport {\n  GrowthHacksCountQueryResponse,\n  GrowthHacksQueryResponse,\n  IGrowthHackParams\n} from '../types';\nimport { getFilterParams } from '../utils';\n\ntype Props = {\n  component: any;\n  queryParams: any;\n  refetch?: () => void;\n};\n\ntype FinalProps = {\n  growthHacksQuery: GrowthHacksQueryResponse;\n  growthHacksTotalCountQuery: GrowthHacksCountQueryResponse;\n  editMutation: SaveMutation;\n} & Props;\n\nclass EditableGrowthHackList extends React.Component<FinalProps> {\n  render() {\n    const { growthHacksQuery, growthHacksTotalCountQuery } = this.props;\n\n    const save = (id: string, doc: IGrowthHackParams) => {\n      const { editMutation } = this.props;\n\n      editMutation({ variables: { _id: id, ...doc } })\n        .then(() => {\n          Alert.success('You successfully updated an experiment');\n\n          if (this.props.refetch) {\n            this.props.refetch();\n          }\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const { growthHacks = [], loading, refetch } = growthHacksQuery;\n\n    const props = {\n      ...this.props,\n      growthHacks,\n      loading,\n      refetch,\n      save,\n      totalCount: growthHacksTotalCountQuery.growthHacksTotalCount\n    };\n\n    const Component = this.props.component || WeightedScore;\n\n    return <Component {...props} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, SaveMutation, IGrowthHackParams>(\n      gql(mutations.growthHacksEdit),\n      {\n        name: 'editMutation'\n      }\n    ),\n    graphql<Props>(gql(queries.growthHacks), {\n      name: 'growthHacksQuery',\n      options: ({ queryParams = {} }) => ({\n        variables: {\n          ...getFilterParams(queryParams),\n          limit: parseInt(queryParams.limit, 10) || 15,\n          sortField: queryParams.sortField,\n          sortDirection: parseInt(queryParams.sortDirection, 10)\n        }\n      })\n    }),\n    graphql<Props>(gql(queries.growthHacksTotalCount), {\n      name: 'growthHacksTotalCountQuery',\n      options: ({ queryParams = {} }) => ({\n        variables: getFilterParams(queryParams)\n      })\n    })\n  )(EditableGrowthHackList)\n);\n"]},"metadata":{},"sourceType":"module"}