{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/webhook/containers/WebhookList.tsx\";\n// import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { commonListComposer } from '../../utils';\nimport WebhookList from '../components/WebhookList';\nimport { mutations, queries } from '../graphql';\n\nvar WebhookListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WebhookListContainer, _React$Component);\n\n  function WebhookListContainer() {\n    _classCallCheck(this, WebhookListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WebhookListContainer).apply(this, arguments));\n  }\n\n  _createClass(WebhookListContainer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(WebhookList, Object.assign({}, this.props, {\n        refetchQueries: getRefetchQueries(),\n        renderButton: this.props.renderButton,\n        objects: this.props.listQuery.webhooks || [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WebhookListContainer;\n}(React.Component);\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return [{\n    query: gql(queries.webhooks),\n    options: options\n  }, {\n    query: gql(queries.webhooksTotalCount),\n    options: options\n  }];\n};\n\nvar options = function options(_ref) {\n  var queryParams = _ref.queryParams;\n  return {\n    variables: _objectSpread({}, generatePaginationParams(queryParams), {\n      _id: queryParams._id\n    }),\n    fetchPolicy: 'network-only'\n  };\n};\n\nexport default commonListComposer({\n  text: 'webhook',\n  label: 'webhooks',\n  stringAddMutation: mutations.webhooksAdd,\n  stringEditMutation: mutations.webhooksEdit,\n  gqlListQuery: graphql(gql(queries.webhooks), {\n    name: 'listQuery',\n    options: options\n  }),\n  gqlAddMutation: graphql(gql(mutations.webhooksAdd), {\n    name: 'addMutation'\n  }),\n  gqlEditMutation: graphql(gql(mutations.webhooksEdit), {\n    name: 'editMutation'\n  }),\n  gqlRemoveMutation: graphql(gql(mutations.webhooksRemove), {\n    name: 'removeMutation'\n  }),\n  gqlTotalCountQuery: graphql(gql(queries.webhooksTotalCount), {\n    name: 'totalCountQuery',\n    options: options\n  }),\n  ListComponent: WebhookListContainer,\n  gqlConfigsQuery: graphql(gql(generalQueries.configsGetEnv), {\n    name: 'configsEnvQuery',\n    options: {\n      fetchPolicy: 'network-only'\n    }\n  })\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/webhook/containers/WebhookList.tsx"],"names":["gql","generatePaginationParams","queries","generalQueries","React","graphql","commonListComposer","WebhookList","mutations","WebhookListContainer","props","getRefetchQueries","renderButton","listQuery","webhooks","Component","query","options","webhooksTotalCount","queryParams","variables","_id","fetchPolicy","text","label","stringAddMutation","webhooksAdd","stringEditMutation","webhooksEdit","gqlListQuery","name","gqlAddMutation","gqlEditMutation","gqlRemoveMutation","webhooksRemove","gqlTotalCountQuery","ListComponent","gqlConfigsQuery","configsGetEnv"],"mappings":"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","sourcesContent":["// import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport {\n  ICommonFormProps,\n  ICommonListProps\n} from 'modules/settings/common/types';\nimport { queries as generalQueries } from 'modules/settings/general/graphql';\n\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { commonListComposer } from '../../utils';\nimport WebhookList from '../components/WebhookList';\nimport { mutations, queries } from '../graphql';\n\ntype Props = ICommonListProps &\n  ICommonFormProps & {\n    removeMutation: any;\n    listQuery: any;\n    editMutation: any;\n    renderButton: (props: IButtonMutateProps) => JSX.Element;\n  };\n\nclass WebhookListContainer extends React.Component<Props> {\n  render() {\n    return (\n      <WebhookList\n        {...this.props}\n        refetchQueries={getRefetchQueries()}\n        renderButton={this.props.renderButton}\n        objects={this.props.listQuery.webhooks || []}\n      />\n    );\n  }\n}\n\nconst getRefetchQueries = () => {\n  return [\n    { query: gql(queries.webhooks), options },\n    { query: gql(queries.webhooksTotalCount), options }\n  ];\n};\n\nconst options = ({ queryParams }: { queryParams: any }): any => {\n  return {\n    variables: {\n      ...generatePaginationParams(queryParams),\n      _id: queryParams._id\n    },\n    fetchPolicy: 'network-only'\n  };\n};\n\nexport default commonListComposer<{ queryParams: any; history: any }>({\n  text: 'webhook',\n  label: 'webhooks',\n  stringAddMutation: mutations.webhooksAdd,\n  stringEditMutation: mutations.webhooksEdit,\n\n  gqlListQuery: graphql(gql(queries.webhooks), {\n    name: 'listQuery',\n    options\n  }),\n  gqlAddMutation: graphql(gql(mutations.webhooksAdd), {\n    name: 'addMutation'\n  }),\n  gqlEditMutation: graphql(gql(mutations.webhooksEdit), {\n    name: 'editMutation'\n  }),\n  gqlRemoveMutation: graphql(gql(mutations.webhooksRemove), {\n    name: 'removeMutation'\n  }),\n  gqlTotalCountQuery: graphql(gql(queries.webhooksTotalCount), {\n    name: 'totalCountQuery',\n    options\n  }),\n\n  ListComponent: WebhookListContainer,\n  gqlConfigsQuery: graphql(gql(generalQueries.configsGetEnv), {\n    name: 'configsEnvQuery',\n    options: { fetchPolicy: 'network-only' }\n  })\n});\n"]},"metadata":{},"sourceType":"module"}