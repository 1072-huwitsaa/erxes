{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/BrandStep.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport { mutations } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport BrandStep from '../components/step/BrandStep';\nimport { queries } from '../graphql';\nimport { sumCounts } from '../utils';\n\nvar BrandStepContianer = function BrandStepContianer(props) {\n  var brandsQuery = props.brandsQuery,\n      customerCountsQuery = props.customerCountsQuery;\n  var customerCounts = customerCountsQuery.customerCounts || {\n    byBrand: {}\n  };\n  var countValues = customerCounts.byBrand || {};\n\n  var customersCount = function customersCount(ids) {\n    return sumCounts(ids, countValues);\n  };\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback,\n        object = _ref.object;\n    return React.createElement(ButtonMutate, {\n      mutation: mutations.brandAdd,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(),\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    brands: brandsQuery.brands || [],\n    targetCount: countValues,\n    customersCount: customersCount,\n    renderButton: renderButton\n  });\n\n  return React.createElement(BrandStep, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return [{\n    query: gql(queries.customerCounts),\n    variables: {\n      only: 'byBrand'\n    }\n  }, {\n    query: gql(queries.brands)\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(queries.customerCounts), {\n  name: 'customerCountsQuery',\n  options: {\n    variables: {\n      only: 'byBrand'\n    }\n  }\n}))(BrandStepContianer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/BrandStep.tsx"],"names":["gql","compose","ButtonMutate","withProps","mutations","React","graphql","BrandStep","queries","sumCounts","BrandStepContianer","props","brandsQuery","customerCountsQuery","customerCounts","byBrand","countValues","customersCount","ids","renderButton","name","values","isSubmitted","callback","object","brandAdd","getRefetchQueries","updatedProps","brands","targetCount","query","variables","only","options"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport { CountQueryResponse } from 'modules/customers/types';\nimport { mutations } from 'modules/settings/brands/graphql';\nimport { BrandsQueryResponse } from 'modules/settings/brands/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport BrandStep from '../components/step/BrandStep';\nimport { queries } from '../graphql';\nimport { sumCounts } from '../utils';\n\ntype Props = {\n  messageType: string;\n  brandIds: string[];\n  onChange: (name: string, value: string[]) => void;\n  renderContent: ({\n    actionSelector,\n    selectedComponent,\n    customerCounts\n  }: {\n    actionSelector: React.ReactNode;\n    selectedComponent: React.ReactNode;\n    customerCounts: React.ReactNode;\n  }) => React.ReactNode;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n  customerCountsQuery: CountQueryResponse;\n} & Props;\n\nconst BrandStepContianer = (props: FinalProps) => {\n  const { brandsQuery, customerCountsQuery } = props;\n\n  const customerCounts = customerCountsQuery.customerCounts || {\n    byBrand: {}\n  };\n\n  const countValues = customerCounts.byBrand || {};\n  const customersCount = (ids: string[]) => sumCounts(ids, countValues);\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={mutations.brandAdd}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries()}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    brands: brandsQuery.brands || [],\n    targetCount: countValues,\n    customersCount,\n    renderButton\n  };\n\n  return <BrandStep {...updatedProps} />;\n};\n\nconst getRefetchQueries = () => {\n  return [\n    {\n      query: gql(queries.customerCounts),\n      variables: { only: 'byBrand' }\n    },\n    { query: gql(queries.brands) }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n      name: 'brandsQuery'\n    }),\n    graphql<Props, CountQueryResponse, { only: string }>(\n      gql(queries.customerCounts),\n      {\n        name: 'customerCountsQuery',\n        options: {\n          variables: {\n            only: 'byBrand'\n          }\n        }\n      }\n    )\n  )(BrandStepContianer)\n);\n"]},"metadata":{},"sourceType":"module"}