{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/containers/SegmentsList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { confirm } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SegmentsList from '../components/SegmentsList';\nimport { mutations, queries } from '../graphql';\n\nvar SegmentListContainer = function SegmentListContainer(props) {\n  var segmentsQuery = props.segmentsQuery,\n      removeMutation = props.removeMutation;\n\n  var removeSegment = function removeSegment(segmentId) {\n    confirm().then(function () {\n      removeMutation({\n        variables: {\n          _id: segmentId\n        }\n      }).then(function () {\n        segmentsQuery.refetch();\n        Alert.success('You successfully deleted a segment');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    loading: segmentsQuery.loading,\n    segments: segmentsQuery.segments || [],\n    removeSegment: removeSegment\n  });\n\n  return React.createElement(SegmentsList, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.segments), {\n  name: 'segmentsQuery',\n  options: function options(_ref) {\n    var contentType = _ref.contentType;\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        contentTypes: [contentType]\n      }\n    };\n  }\n}), graphql(gql(mutations.segmentsRemove), {\n  name: 'removeMutation'\n}))(SegmentListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/containers/SegmentsList.tsx"],"names":["gql","compose","Alert","withProps","confirm","React","graphql","SegmentsList","mutations","queries","SegmentListContainer","props","segmentsQuery","removeMutation","removeSegment","segmentId","then","variables","_id","refetch","success","catch","error","message","updatedProps","loading","segments","name","options","contentType","fetchPolicy","contentTypes","segmentsRemove"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;AAYA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAuB;AAAA,MAC1CC,aAD0C,GACRD,KADQ,CAC1CC,aAD0C;AAAA,MAC3BC,cAD2B,GACRF,KADQ,CAC3BE,cAD2B;;AAGlD,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,SAAS,EAAI;AACjCX,IAAAA,OAAO,GAAGY,IAAV,CAAe,YAAM;AACnBH,MAAAA,cAAc,CAAC;AACbI,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEH;AAAP;AADE,OAAD,CAAd,CAGGC,IAHH,CAGQ,YAAM;AACVJ,QAAAA,aAAa,CAACO,OAAd;AAEAjB,QAAAA,KAAK,CAACkB,OAAN,CAAc,oCAAd;AACD,OAPH,EAQGC,KARH,CAQS,UAAAC,KAAK,EAAI;AACdpB,QAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,OAVH;AAWD,KAZD;AAaD,GAdD;;AAgBA,MAAMC,YAAY,qBACbb,KADa;AAEhBc,IAAAA,OAAO,EAAEb,aAAa,CAACa,OAFP;AAGhBC,IAAAA,QAAQ,EAAEd,aAAa,CAACc,QAAd,IAA0B,EAHpB;AAIhBZ,IAAAA,aAAa,EAAbA;AAJgB,IAAlB;;AAOA,SAAO,oBAAC,YAAD,oBAAkBU,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA3BD;;AA6BA,eAAerB,SAAS,CACtBF,OAAO,CACLK,OAAO,CACLN,GAAG,CAACS,OAAO,CAACiB,QAAT,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,WAAH,QAAGA,WAAH;AAAA,WAAsB;AAC7BC,MAAAA,WAAW,EAAE,cADgB;AAE7Bb,MAAAA,SAAS,EAAE;AAAEc,QAAAA,YAAY,EAAE,CAACF,WAAD;AAAhB;AAFkB,KAAtB;AAAA;AAFX,CAFK,CADF,EAYLvB,OAAO,CACLN,GAAG,CAACQ,SAAS,CAACwB,cAAX,CADE,EAEL;AACEL,EAAAA,IAAI,EAAE;AADR,CAFK,CAZF,CAAP,CAkBEjB,oBAlBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { confirm } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SegmentsList from '../components/SegmentsList';\nimport { mutations, queries } from '../graphql';\nimport { RemoveMutationResponse, SegmentsQueryResponse } from '../types';\n\ntype Props = {\n  contentType: string;\n};\n\ntype FinalProps = {\n  segmentsQuery: SegmentsQueryResponse;\n} & Props &\n  RemoveMutationResponse;\n\nconst SegmentListContainer = (props: FinalProps) => {\n  const { segmentsQuery, removeMutation } = props;\n\n  const removeSegment = segmentId => {\n    confirm().then(() => {\n      removeMutation({\n        variables: { _id: segmentId }\n      })\n        .then(() => {\n          segmentsQuery.refetch();\n\n          Alert.success('You successfully deleted a segment');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const updatedProps = {\n    ...props,\n    loading: segmentsQuery.loading,\n    segments: segmentsQuery.segments || [],\n    removeSegment\n  };\n\n  return <SegmentsList {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, SegmentsQueryResponse, { contentTypes: string[] }>(\n      gql(queries.segments),\n      {\n        name: 'segmentsQuery',\n        options: ({ contentType }) => ({\n          fetchPolicy: 'network-only',\n          variables: { contentTypes: [contentType] }\n        })\n      }\n    ),\n\n    graphql<Props, RemoveMutationResponse, { _id: string }>(\n      gql(mutations.segmentsRemove),\n      {\n        name: 'removeMutation'\n      }\n    )\n  )(SegmentListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}