{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/RespondBox.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport { fromJS } from 'immutable';\nimport * as compose from 'lodash.flowright';\nimport debounce from 'lodash/debounce';\nimport RespondBox from 'modules/inbox/components/conversationDetail/workarea/RespondBox';\nimport { queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\n\nvar RespondBoxContainer = function RespondBoxContainer(props) {\n  var conversation = props.conversation,\n      usersQuery = props.usersQuery,\n      addMessage = props.addMessage,\n      responseTemplatesQuery = props.responseTemplatesQuery,\n      currentUser = props.currentUser,\n      search = props.search;\n\n  var onSearchChange = function onSearchChange(searchValue) {\n    if (searchValue) {\n      debounce(function () {\n        return search(searchValue);\n      }, 500)();\n    }\n  };\n\n  var sendMessage = function sendMessage(variables, callback) {\n    var conversationId = variables.conversationId,\n        content = variables.content,\n        attachments = variables.attachments,\n        internal = variables.internal,\n        contentType = variables.contentType;\n    var optimisticResponse;\n\n    if (conversation.integration.kind === 'messenger') {\n      optimisticResponse = {\n        __typename: 'Mutation',\n        conversationMessageAdd: {\n          __typename: 'ConversationMessage',\n          _id: Math.round(Math.random() * -1000000),\n          content: content,\n          contentType: contentType,\n          attachments: attachments,\n          internal: internal,\n          mentionedUserIds: [],\n          conversationId: conversationId,\n          customerId: Math.random(),\n          userId: currentUser._id,\n          createdAt: new Date(),\n          messengerAppData: null,\n          isCustomerRead: false,\n          fromBot: false,\n          formWidgetData: null,\n          botData: null,\n          mailData: null,\n          user: null,\n          customer: null,\n          videoCallData: null\n        }\n      };\n    }\n\n    addMessage({\n      variables: variables,\n      optimisticResponse: optimisticResponse,\n      kind: conversation.integration.kind,\n      callback: callback\n    });\n  };\n\n  var teamMembers = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (usersQuery.users || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var user = _step.value;\n      teamMembers.push({\n        _id: user._id,\n        name: user.username,\n        title: user.details && user.details.position,\n        avatar: user.details && user.details.avatar\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var updatedProps = _objectSpread({}, props, {\n    onSearchChange: onSearchChange,\n    sendMessage: sendMessage,\n    responseTemplates: responseTemplatesQuery.responseTemplates || [],\n    teamMembers: fromJS(teamMembers.filter(function (member) {\n      return member.name;\n    }))\n  });\n\n  return React.createElement(RespondBox, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }));\n};\n\nvar withQuery = function withQuery() {\n  return withProps(compose(graphql(gql(queries.userList), {\n    name: 'usersQuery',\n    options: function options(_ref) {\n      var searchValue = _ref.searchValue;\n      return {\n        variables: {\n          searchValue: searchValue\n        }\n      };\n    }\n  }), graphql(gql(queries.responseTemplateList), {\n    name: 'responseTemplatesQuery',\n    options: function options() {\n      return {\n        variables: {\n          perPage: 200\n        }\n      };\n    }\n  }))(RespondBoxContainer));\n};\n\nvar Wrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Wrapper, _React$Component);\n\n  function Wrapper(props) {\n    var _this;\n\n    _classCallCheck(this, Wrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Wrapper).call(this, props));\n    _this.withQuery = void 0;\n\n    _this.search = function (searchValue) {\n      return _this.setState({\n        searchValue: searchValue\n      });\n    };\n\n    _this.withQuery = withQuery();\n    _this.state = {\n      searchValue: ''\n    };\n    return _this;\n  }\n\n  _createClass(Wrapper, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var searchValue = this.state.searchValue;\n      var Component = this.withQuery;\n      return React.createElement(AppConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, function (_ref2) {\n        var currentUser = _ref2.currentUser;\n        return React.createElement(Component, Object.assign({}, _this2.props, {\n          search: _this2.search,\n          searchValue: searchValue,\n          currentUser: currentUser || {},\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return Wrapper;\n}(React.Component);\n\nexport default Wrapper;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/RespondBox.tsx"],"names":["AppConsumer","gql","fromJS","compose","debounce","RespondBox","queries","React","graphql","withProps","RespondBoxContainer","props","conversation","usersQuery","addMessage","responseTemplatesQuery","currentUser","search","onSearchChange","searchValue","sendMessage","variables","callback","conversationId","content","attachments","internal","contentType","optimisticResponse","integration","kind","__typename","conversationMessageAdd","_id","Math","round","random","mentionedUserIds","customerId","userId","createdAt","Date","messengerAppData","isCustomerRead","fromBot","formWidgetData","botData","mailData","user","customer","videoCallData","teamMembers","users","push","name","username","title","details","position","avatar","updatedProps","responseTemplates","filter","member","withQuery","userList","options","responseTemplateList","perPage","Wrapper","setState","state","Component"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport { fromJS } from 'immutable';\nimport * as compose from 'lodash.flowright';\nimport debounce from 'lodash/debounce';\nimport { IAttachmentPreview } from 'modules/common/types';\nimport RespondBox from 'modules/inbox/components/conversationDetail/workarea/RespondBox';\nimport { queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { IUser } from '../../../auth/types';\nimport { withProps } from '../../../common/utils';\nimport { ResponseTemplatesQueryResponse } from '../../../settings/responseTemplates/types';\nimport { UsersQueryResponse } from '../../../settings/team/types';\nimport { AddMessageMutationVariables, IConversation } from '../../types';\n\ntype Props = {\n  conversation: IConversation;\n  showInternal: boolean;\n  setAttachmentPreview: (attachmentPreview: IAttachmentPreview) => void;\n  addMessage: (doc: {\n    variables: AddMessageMutationVariables;\n    optimisticResponse: any;\n    kind: string;\n    callback: (error: Error) => void;\n  }) => void;\n  refetchMessages: () => void;\n  refetchDetail: () => void;\n};\n\ntype FinalProps = {\n  responseTemplatesQuery: ResponseTemplatesQueryResponse;\n  usersQuery: UsersQueryResponse;\n  search: (value: string) => void;\n} & Props & { currentUser: IUser };\n\ninterface ITeamMembers {\n  _id: string;\n  name: string;\n  title?: string;\n  avatar?: string;\n}\n\nconst RespondBoxContainer = (props: FinalProps) => {\n  const {\n    conversation,\n    usersQuery,\n    addMessage,\n    responseTemplatesQuery,\n    currentUser,\n    search\n  } = props;\n\n  const onSearchChange = (searchValue: string) => {\n    if (searchValue) {\n      debounce(() => search(searchValue), 500)();\n    }\n  };\n\n  const sendMessage = (\n    variables: AddMessageMutationVariables,\n    callback: (error: Error) => void\n  ) => {\n    const {\n      conversationId,\n      content,\n      attachments,\n      internal,\n      contentType\n    } = variables;\n\n    let optimisticResponse;\n\n    if (conversation.integration.kind === 'messenger') {\n      optimisticResponse = {\n        __typename: 'Mutation',\n        conversationMessageAdd: {\n          __typename: 'ConversationMessage',\n          _id: Math.round(Math.random() * -1000000),\n          content,\n          contentType,\n          attachments,\n          internal,\n          mentionedUserIds: [],\n          conversationId,\n          customerId: Math.random(),\n          userId: currentUser._id,\n          createdAt: new Date(),\n          messengerAppData: null,\n          isCustomerRead: false,\n          fromBot: false,\n          formWidgetData: null,\n          botData: null,\n          mailData: null,\n          user: null,\n          customer: null,\n          videoCallData: null\n        }\n      };\n    }\n\n    addMessage({\n      variables,\n      optimisticResponse,\n      kind: conversation.integration.kind,\n      callback\n    });\n  };\n\n  const teamMembers: ITeamMembers[] = [];\n\n  for (const user of usersQuery.users || []) {\n    teamMembers.push({\n      _id: user._id,\n      name: user.username,\n      title: user.details && user.details.position,\n      avatar: user.details && user.details.avatar\n    });\n  }\n\n  const updatedProps = {\n    ...props,\n    onSearchChange,\n    sendMessage,\n    responseTemplates: responseTemplatesQuery.responseTemplates || [],\n    teamMembers: fromJS(teamMembers.filter(member => member.name))\n  };\n\n  return <RespondBox {...updatedProps} />;\n};\n\nconst withQuery = () =>\n  withProps<Props & { currentUser: IUser } & { searchValue: string }>(\n    compose(\n      graphql<Props & { searchValue: string }, UsersQueryResponse>(\n        gql(queries.userList),\n        {\n          name: 'usersQuery',\n          options: ({ searchValue }) => ({\n            variables: {\n              searchValue\n            }\n          })\n        }\n      ),\n      graphql<Props, ResponseTemplatesQueryResponse>(\n        gql(queries.responseTemplateList),\n        {\n          name: 'responseTemplatesQuery',\n          options: () => {\n            return {\n              variables: {\n                perPage: 200\n              }\n            };\n          }\n        }\n      )\n    )(RespondBoxContainer)\n  );\n\nclass Wrapper extends React.Component<\n  Props,\n  { searchValue: string },\n  { WithQuery: React.ReactNode }\n> {\n  private withQuery;\n\n  constructor(props) {\n    super(props);\n\n    this.withQuery = withQuery();\n\n    this.state = { searchValue: '' };\n  }\n\n  search = (searchValue: string) => this.setState({ searchValue });\n\n  render() {\n    const { searchValue } = this.state;\n    const Component = this.withQuery;\n\n    return (\n      <AppConsumer>\n        {({ currentUser }) => (\n          <Component\n            {...this.props}\n            search={this.search}\n            searchValue={searchValue}\n            currentUser={currentUser || ({} as IUser)}\n          />\n        )}\n      </AppConsumer>\n    );\n  }\n}\n\nexport default Wrapper;\n"]},"metadata":{},"sourceType":"module"}