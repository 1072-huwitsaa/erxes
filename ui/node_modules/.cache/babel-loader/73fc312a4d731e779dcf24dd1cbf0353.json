{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/general/containers/IntegrationConfigs.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../../integrations/graphql';\nimport IntegrationsConfig from '../components/IntegrationConfigs';\n\nvar ConfigContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConfigContainer, _React$Component);\n\n  function ConfigContainer() {\n    _classCallCheck(this, ConfigContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConfigContainer).apply(this, arguments));\n  }\n\n  _createClass(ConfigContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          updateConfigs = _this$props.updateConfigs,\n          fetchApiQuery = _this$props.fetchApiQuery;\n\n      if (fetchApiQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        });\n      } // create or update action\n\n\n      var save = function save(map) {\n        updateConfigs({\n          variables: {\n            configsMap: map\n          }\n        }).then(function () {\n          fetchApiQuery.refetch();\n          Alert.success('You successfully updated general settings');\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var configs = fetchApiQuery.integrationsFetchApi || [];\n      var configsMap = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = configs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var config = _step.value;\n          configsMap[config.code] = config.value;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return React.createElement(IntegrationsConfig, Object.assign({}, this.props, {\n        configsMap: configsMap,\n        save: save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ConfigContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.fetchApi), {\n  name: 'fetchApiQuery',\n  options: function options() {\n    return {\n      variables: {\n        path: '/configs',\n        params: {}\n      }\n    };\n  }\n}), graphql(gql(mutations.integrationsUpdateConfigs), {\n  name: 'updateConfigs'\n}))(ConfigContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/general/containers/IntegrationConfigs.tsx"],"names":["gql","compose","Spinner","Alert","withProps","React","graphql","mutations","queries","IntegrationsConfig","ConfigContainer","props","updateConfigs","fetchApiQuery","loading","save","map","variables","configsMap","then","refetch","success","catch","error","message","configs","integrationsFetchApi","config","code","value","Component","fetchApi","name","options","path","params","integrationsUpdateConfigs"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,4BAAnC;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;;IAQMC,e;;;;;;;;;;;;;6BACK;AAAA,wBACkC,KAAKC,KADvC;AAAA,UACCC,aADD,eACCA,aADD;AAAA,UACgBC,aADhB,eACgBA,aADhB;;AAGP,UAAIA,aAAa,CAACC,OAAlB,EAA2B;AACzB,eAAO,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OALM,CAOP;;;AACA,UAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAsB;AACjCJ,QAAAA,aAAa,CAAC;AACZK,UAAAA,SAAS,EAAE;AAAEC,YAAAA,UAAU,EAAEF;AAAd;AADC,SAAD,CAAb,CAGGG,IAHH,CAGQ,YAAM;AACVN,UAAAA,aAAa,CAACO,OAAd;AAEAjB,UAAAA,KAAK,CAACkB,OAAN,CAAc,2CAAd;AACD,SAPH,EAQGC,KARH,CAQS,UAAAC,KAAK,EAAI;AACdpB,UAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,SAVH;AAWD,OAZD;;AAcA,UAAMC,OAAO,GAAGZ,aAAa,CAACa,oBAAd,IAAsC,EAAtD;AAEA,UAAMR,UAAU,GAAG,EAAnB;AAxBO;AAAA;AAAA;;AAAA;AA0BP,6BAAqBO,OAArB,8HAA8B;AAAA,cAAnBE,MAAmB;AAC5BT,UAAAA,UAAU,CAACS,MAAM,CAACC,IAAR,CAAV,GAA0BD,MAAM,CAACE,KAAjC;AACD;AA5BM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BP,aACE,oBAAC,kBAAD,oBAAwB,KAAKlB,KAA7B;AAAoC,QAAA,UAAU,EAAEO,UAAhD;AAA4D,QAAA,IAAI,EAAEH,IAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;;;EAlC2BV,KAAK,CAACyB,S;;AAqCpC,eAAe1B,SAAS,CACtBH,OAAO,CACLK,OAAO,CAAKN,GAAG,CAACQ,OAAO,CAACuB,QAAT,CAAR,EAA4B;AACjCC,EAAAA,IAAI,EAAE,eAD2B;AAEjCC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdhB,MAAAA,SAAS,EAAE;AACTiB,QAAAA,IAAI,EAAE,UADG;AAETC,QAAAA,MAAM,EAAE;AAFC;AADG,KAAP;AAAA;AAFwB,CAA5B,CADF,EAUL7B,OAAO,CAAKN,GAAG,CAACO,SAAS,CAAC6B,yBAAX,CAAR,EAA+C;AACpDJ,EAAAA,IAAI,EAAE;AAD8C,CAA/C,CAVF,CAAP,CAaEtB,eAbF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../../integrations/graphql';\nimport IntegrationsConfig from '../components/IntegrationConfigs';\nimport { IConfigsMap } from '../types';\n\ntype FinalProps = {\n  fetchApiQuery;\n  updateConfigs: (configsMap: IConfigsMap) => Promise<void>;\n};\n\nclass ConfigContainer extends React.Component<FinalProps> {\n  render() {\n    const { updateConfigs, fetchApiQuery } = this.props;\n\n    if (fetchApiQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    // create or update action\n    const save = (map: IConfigsMap) => {\n      updateConfigs({\n        variables: { configsMap: map }\n      })\n        .then(() => {\n          fetchApiQuery.refetch();\n\n          Alert.success('You successfully updated general settings');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const configs = fetchApiQuery.integrationsFetchApi || [];\n\n    const configsMap = {};\n\n    for (const config of configs) {\n      configsMap[config.code] = config.value;\n    }\n\n    return (\n      <IntegrationsConfig {...this.props} configsMap={configsMap} save={save} />\n    );\n  }\n}\n\nexport default withProps<{}>(\n  compose(\n    graphql<{}>(gql(queries.fetchApi), {\n      name: 'fetchApiQuery',\n      options: () => ({\n        variables: {\n          path: '/configs',\n          params: {}\n        }\n      })\n    }),\n    graphql<{}>(gql(mutations.integrationsUpdateConfigs), {\n      name: 'updateConfigs'\n    })\n  )(ConfigContainer)\n);\n"]},"metadata":{},"sourceType":"module"}