{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/DealFilter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as boardQueries } from 'modules/boards/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport DealFilter from '../components/filter/DealFilter';\n\nvar DealFilterContainer = function DealFilterContainer(props) {\n  var boardsQuery = props.boardsQuery,\n      boardGetLastQuery = props.boardGetLastQuery,\n      boardDetailQuery = props.boardDetailQuery,\n      queryParams = props.queryParams;\n  var boardId = queryParams.boardId;\n  var lastBoard = boardGetLastQuery && boardGetLastQuery.boardGetLast;\n  var currentBoard = boardDetailQuery && boardDetailQuery.boardDetail;\n  var pipelines = [];\n\n  if (!boardId && lastBoard) {\n    pipelines = lastBoard.pipelines || [];\n  } else if (currentBoard) {\n    pipelines = currentBoard.pipelines || [];\n  }\n\n  var extendedProps = _objectSpread({}, props, {\n    boards: boardsQuery.boards || [],\n    pipelines: pipelines\n  });\n\n  return React.createElement(DealFilter, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nexport default compose(graphql(gql(boardQueries.boards), {\n  name: 'boardsQuery',\n  options: function options() {\n    return {\n      variables: {\n        type: 'deal'\n      }\n    };\n  }\n}), graphql(gql(boardQueries.boardGetLast), {\n  name: 'boardGetLastQuery',\n  options: function options() {\n    return {\n      variables: {\n        type: 'deal'\n      }\n    };\n  }\n}), graphql(gql(boardQueries.boardDetail), {\n  name: 'boardDetailQuery',\n  skip: function skip(_ref) {\n    var queryParams = _ref.queryParams;\n    return !queryParams.boardId;\n  },\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        _id: queryParams.boardId\n      }\n    };\n  }\n}))(DealFilterContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/DealFilter.tsx"],"names":["gql","compose","queries","boardQueries","React","graphql","DealFilter","DealFilterContainer","props","boardsQuery","boardGetLastQuery","boardDetailQuery","queryParams","boardId","lastBoard","boardGetLast","currentBoard","boardDetail","pipelines","extendedProps","boards","name","options","variables","type","skip","_id"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,wBAAxC;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;;AAeA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAuB;AAAA,MAE/CC,WAF+C,GAM7CD,KAN6C,CAE/CC,WAF+C;AAAA,MAG/CC,iBAH+C,GAM7CF,KAN6C,CAG/CE,iBAH+C;AAAA,MAI/CC,gBAJ+C,GAM7CH,KAN6C,CAI/CG,gBAJ+C;AAAA,MAK/CC,WAL+C,GAM7CJ,KAN6C,CAK/CI,WAL+C;AAQjD,MAAMC,OAAO,GAAGD,WAAW,CAACC,OAA5B;AAEA,MAAMC,SAAS,GAAGJ,iBAAiB,IAAIA,iBAAiB,CAACK,YAAzD;AACA,MAAMC,YAAY,GAAGL,gBAAgB,IAAIA,gBAAgB,CAACM,WAA1D;AAEA,MAAIC,SAAsB,GAAG,EAA7B;;AAEA,MAAI,CAACL,OAAD,IAAYC,SAAhB,EAA2B;AACzBI,IAAAA,SAAS,GAAGJ,SAAS,CAACI,SAAV,IAAuB,EAAnC;AACD,GAFD,MAEO,IAAIF,YAAJ,EAAkB;AACvBE,IAAAA,SAAS,GAAGF,YAAY,CAACE,SAAb,IAA0B,EAAtC;AACD;;AAED,MAAMC,aAAa,qBACdX,KADc;AAEjBY,IAAAA,MAAM,EAAEX,WAAW,CAACW,MAAZ,IAAsB,EAFb;AAGjBF,IAAAA,SAAS,EAATA;AAHiB,IAAnB;;AAMA,SAAO,oBAAC,UAAD,oBAAgBC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA5BD;;AA8BA,eAAelB,OAAO,CACpBI,OAAO,CAA6BL,GAAG,CAACG,YAAY,CAACiB,MAAd,CAAhC,EAAuD;AAC5DC,EAAAA,IAAI,EAAE,aADsD;AAE5DC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AADG,KAAP;AAAA;AAFmD,CAAvD,CADa,EAOpBnB,OAAO,CAAoCL,GAAG,CAACG,YAAY,CAACY,YAAd,CAAvC,EAAoE;AACzEM,EAAAA,IAAI,EAAE,mBADmE;AAEzEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AADG,KAAP;AAAA;AAFgE,CAApE,CAPa,EAapBnB,OAAO,CACLL,GAAG,CAACG,YAAY,CAACc,WAAd,CADE,EAEL;AACEI,EAAAA,IAAI,EAAE,kBADR;AAEEI,EAAAA,IAAI,EAAE;AAAA,QAAGb,WAAH,QAAGA,WAAH;AAAA,WAAqB,CAACA,WAAW,CAACC,OAAlC;AAAA,GAFR;AAGES,EAAAA,OAAO,EAAE;AAAA,QAAGV,WAAH,SAAGA,WAAH;AAAA,WAAsB;AAC7BW,MAAAA,SAAS,EAAE;AACTG,QAAAA,GAAG,EAAEd,WAAW,CAACC;AADR;AADkB,KAAtB;AAAA;AAHX,CAFK,CAba,CAAP,CAyBbN,mBAzBa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as boardQueries } from 'modules/boards/graphql';\nimport {\n  BoardDetailQueryResponse,\n  BoardsGetLastQueryResponse,\n  BoardsQueryResponse,\n  IPipeline\n} from 'modules/boards/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport DealFilter from '../components/filter/DealFilter';\nimport { IQueryParams } from '../types';\n\ntype Props = {\n  location: any;\n  history: any;\n  queryParams: IQueryParams;\n};\n\ntype FinalProps = {\n  boardsQuery: BoardsQueryResponse;\n  boardDetailQuery?: BoardDetailQueryResponse;\n  boardGetLastQuery?: BoardsGetLastQueryResponse;\n} & Props;\n\nconst DealFilterContainer = (props: FinalProps) => {\n  const {\n    boardsQuery,\n    boardGetLastQuery,\n    boardDetailQuery,\n    queryParams\n  } = props;\n\n  const boardId = queryParams.boardId;\n\n  const lastBoard = boardGetLastQuery && boardGetLastQuery.boardGetLast;\n  const currentBoard = boardDetailQuery && boardDetailQuery.boardDetail;\n\n  let pipelines: IPipeline[] = [];\n\n  if (!boardId && lastBoard) {\n    pipelines = lastBoard.pipelines || [];\n  } else if (currentBoard) {\n    pipelines = currentBoard.pipelines || [];\n  }\n\n  const extendedProps = {\n    ...props,\n    boards: boardsQuery.boards || [],\n    pipelines\n  };\n\n  return <DealFilter {...extendedProps} />;\n};\n\nexport default compose(\n  graphql<Props, BoardsQueryResponse>(gql(boardQueries.boards), {\n    name: 'boardsQuery',\n    options: () => ({\n      variables: { type: 'deal' }\n    })\n  }),\n  graphql<Props, BoardsGetLastQueryResponse>(gql(boardQueries.boardGetLast), {\n    name: 'boardGetLastQuery',\n    options: () => ({\n      variables: { type: 'deal' }\n    })\n  }),\n  graphql<Props, BoardDetailQueryResponse, { _id: string }>(\n    gql(boardQueries.boardDetail),\n    {\n      name: 'boardDetailQuery',\n      skip: ({ queryParams }) => !queryParams.boardId,\n      options: ({ queryParams }) => ({\n        variables: {\n          _id: queryParams.boardId\n        }\n      })\n    }\n  )\n)(DealFilterContainer);\n"]},"metadata":{},"sourceType":"module"}