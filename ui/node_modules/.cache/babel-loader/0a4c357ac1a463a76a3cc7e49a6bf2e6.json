{"ast":null,"code":"import _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { split } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport { createHttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { Alert } from 'modules/common/utils';\nimport { __ } from 'modules/common/utils'; // get env config from process.env or window.env\n\nexport var getEnv = function getEnv() {\n  var envs = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = window.envMaps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var envMap = _step.value;\n      envs[envMap.name] = localStorage.getItem(\"erxes_env_\".concat(envMap.name));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return envs;\n};\n\nvar _getEnv = getEnv(),\n    REACT_APP_API_URL = _getEnv.REACT_APP_API_URL,\n    REACT_APP_API_SUBSCRIPTION_URL = _getEnv.REACT_APP_API_SUBSCRIPTION_URL; // Create an http link:\n\n\nvar httpLink = createHttpLink({\n  uri: \"\".concat(REACT_APP_API_URL, \"/graphql\"),\n  credentials: 'include'\n}); // Error handler\n\nvar errorLink = onError(function (_ref) {\n  var networkError = _ref.networkError,\n      graphQLErrors = _ref.graphQLErrors;\n\n  if (graphQLErrors && graphQLErrors.length > 0) {\n    var _graphQLErrors = _slicedToArray(graphQLErrors, 1),\n        error = _graphQLErrors[0];\n\n    if (error.message === 'Login required') {\n      window.location.reload();\n    }\n  }\n\n  if (networkError) {\n    Alert.error(__('NetworkError'));\n  }\n}); // Combining httpLink and warelinks altogether\n\nvar httpLinkWithMiddleware = errorLink.concat(httpLink); // Subscription config\n\nexport var wsLink = new WebSocketLink({\n  uri: REACT_APP_API_SUBSCRIPTION_URL || 'ws://localhost',\n  options: {\n    lazy: true,\n    reconnect: true,\n    timeout: 30000\n  }\n});\n\nwsLink.subscriptionClient.maxConnectTimeGenerator.duration = function () {\n  return wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n};\n\n// Setting up subscription with link\nvar link = split( // split based on operation type\nfunction (_ref2) {\n  var query = _ref2.query;\n\n  var _getMainDefinition = getMainDefinition(query),\n      kind = _getMainDefinition.kind,\n      operation = _getMainDefinition.operation;\n\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, wsLink, httpLinkWithMiddleware); // Creating Apollo-client\n\nvar client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\nexport default client;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/apolloClient.ts"],"names":["InMemoryCache","ApolloClient","split","onError","createHttpLink","WebSocketLink","getMainDefinition","Alert","__","getEnv","envs","window","envMaps","envMap","name","localStorage","getItem","REACT_APP_API_URL","REACT_APP_API_SUBSCRIPTION_URL","httpLink","uri","credentials","errorLink","networkError","graphQLErrors","length","error","message","location","reload","httpLinkWithMiddleware","concat","wsLink","options","lazy","reconnect","timeout","subscriptionClient","maxConnectTimeGenerator","duration","max","link","query","kind","operation","client","cache"],"mappings":"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","sourcesContent":["import { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { split } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport { createHttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { Alert } from 'modules/common/utils';\nimport { __ } from 'modules/common/utils';\n\n// get env config from process.env or window.env\nexport const getEnv = (): any => {\n  const envs = {};\n\n  for (const envMap of (window as any).envMaps) {\n    envs[envMap.name] = localStorage.getItem(`erxes_env_${envMap.name}`);\n  }\n\n  return envs;\n};\n\nconst { REACT_APP_API_URL, REACT_APP_API_SUBSCRIPTION_URL } = getEnv();\n\n// Create an http link:\nconst httpLink = createHttpLink({\n  uri: `${REACT_APP_API_URL}/graphql`,\n  credentials: 'include'\n});\n\n// Error handler\nconst errorLink = onError(({ networkError, graphQLErrors }) => {\n  if (graphQLErrors && graphQLErrors.length > 0) {\n    const [error] = graphQLErrors;\n\n    if (error.message === 'Login required') {\n      window.location.reload();\n    }\n  }\n\n  if (networkError) {\n    Alert.error(__('NetworkError'));\n  }\n});\n\n// Combining httpLink and warelinks altogether\nconst httpLinkWithMiddleware = errorLink.concat(httpLink);\n\n// Subscription config\nexport const wsLink: any = new WebSocketLink({\n  uri: REACT_APP_API_SUBSCRIPTION_URL || 'ws://localhost',\n  options: {\n    lazy: true,\n    reconnect: true,\n    timeout: 30000\n  }\n});\n\nwsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n  wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\ntype Definintion = {\n  kind: string;\n  operation?: string;\n};\n\n// Setting up subscription with link\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation }: Definintion = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLinkWithMiddleware\n);\n\n// Creating Apollo-client\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}