{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/category/CategoryList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CategoryList from '../../components/category/CategoryList';\nimport { mutations, queries } from '../../graphql';\n\nvar KnowledgeBaseContainer = function KnowledgeBaseContainer(props) {\n  var currentCategoryId = props.currentCategoryId,\n      categoriesQuery = props.categoriesQuery,\n      categoriesCountQuery = props.categoriesCountQuery,\n      articlesCountQuery = props.articlesCountQuery,\n      removeCategoriesMutation = props.removeCategoriesMutation,\n      topicIds = props.topicIds; // remove action\n\n  var remove = function remove(categoryId) {\n    confirm().then(function () {\n      removeCategoriesMutation({\n        variables: {\n          _id: categoryId\n        }\n      }).then(function () {\n        categoriesQuery.refetch();\n        Alert.success('You successfully deleted a category');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var extendedProps = _objectSpread({}, props, {\n    remove: remove,\n    currentCategoryId: currentCategoryId,\n    topicIds: topicIds,\n    categoriesQuery: categoriesQuery,\n    categories: categoriesQuery.knowledgeBaseCategories || [],\n    loading: categoriesQuery.loading,\n    topicsCount: categoriesCountQuery.knowledgeBaseCategoriesTotalCount || 0,\n    articlesCount: articlesCountQuery.knowledgeBaseArticlesTotalCount || 0\n  });\n\n  return React.createElement(CategoryList, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n};\n\nexport default compose(graphql(gql(queries.knowledgeBaseCategories), {\n  name: 'categoriesQuery',\n  options: function options(_ref) {\n    var topicIds = _ref.topicIds;\n    return {\n      variables: {\n        topicIds: [topicIds]\n      }\n    };\n  }\n}), graphql(gql(queries.knowledgeBaseArticlesTotalCount), {\n  name: 'articlesCountQuery',\n  options: function options(_ref2) {\n    var currentCategoryId = _ref2.currentCategoryId;\n    return {\n      variables: {\n        categoryIds: [currentCategoryId] || ''\n      }\n    };\n  }\n}), graphql(gql(queries.knowledgeBaseCategoriesTotalCount), {\n  name: 'categoriesCountQuery'\n}), graphql(gql(mutations.knowledgeBaseCategoriesRemove), {\n  name: 'removeCategoriesMutation',\n  options: function options(_ref3) {\n    var currentCategoryId = _ref3.currentCategoryId;\n    var refetchQueries = [{\n      query: gql(queries.knowledgeBaseCategories)\n    }, {\n      query: gql(queries.knowledgeBaseTopics)\n    }];\n\n    if (currentCategoryId) {\n      refetchQueries.push({\n        query: gql(queries.knowledgeBaseArticlesTotalCount),\n        variables: {\n          categoryIds: [currentCategoryId]\n        }\n      });\n      refetchQueries.push({\n        query: gql(queries.knowledgeBaseCategoryDetail),\n        variables: {\n          _id: currentCategoryId\n        },\n        skip: function skip() {\n          return !currentCategoryId;\n        }\n      });\n    }\n\n    return {\n      refetchQueries: refetchQueries\n    };\n  }\n}))(KnowledgeBaseContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/category/CategoryList.tsx"],"names":["gql","compose","Alert","confirm","React","graphql","CategoryList","mutations","queries","KnowledgeBaseContainer","props","currentCategoryId","categoriesQuery","categoriesCountQuery","articlesCountQuery","removeCategoriesMutation","topicIds","remove","categoryId","then","variables","_id","refetch","success","catch","error","message","extendedProps","categories","knowledgeBaseCategories","loading","topicsCount","knowledgeBaseCategoriesTotalCount","articlesCount","knowledgeBaseArticlesTotalCount","name","options","categoryIds","knowledgeBaseCategoriesRemove","refetchQueries","query","knowledgeBaseTopics","push","knowledgeBaseCategoryDetail","skip"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, confirm } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport CategoryList from '../../components/category/CategoryList';\nimport { mutations, queries } from '../../graphql';\nimport {\n  ArticlesTotalCountQueryResponse,\n  CategoriesQueryResponse,\n  CategoriesTotalCountQueryResponse,\n  RemoveCategoriesMutationResponse\n} from '../../types';\n\ntype Props = {\n  currentCategoryId: string;\n  topicIds: string;\n};\n\ntype FinalProps = {\n  categoriesQuery: CategoriesQueryResponse;\n  categoriesCountQuery: CategoriesTotalCountQueryResponse;\n  articlesCountQuery: ArticlesTotalCountQueryResponse;\n} & Props &\n  RemoveCategoriesMutationResponse;\n\nconst KnowledgeBaseContainer = (props: FinalProps) => {\n  const {\n    currentCategoryId,\n    categoriesQuery,\n    categoriesCountQuery,\n    articlesCountQuery,\n    removeCategoriesMutation,\n    topicIds\n  } = props;\n\n  // remove action\n  const remove = categoryId => {\n    confirm().then(() => {\n      removeCategoriesMutation({\n        variables: { _id: categoryId }\n      })\n        .then(() => {\n          categoriesQuery.refetch();\n\n          Alert.success('You successfully deleted a category');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const extendedProps = {\n    ...props,\n    remove,\n    currentCategoryId,\n    topicIds,\n    categoriesQuery,\n    categories: categoriesQuery.knowledgeBaseCategories || [],\n    loading: categoriesQuery.loading,\n    topicsCount: categoriesCountQuery.knowledgeBaseCategoriesTotalCount || 0,\n    articlesCount: articlesCountQuery.knowledgeBaseArticlesTotalCount || 0\n  };\n\n  return <CategoryList {...extendedProps} />;\n};\n\nexport default compose(\n  graphql<Props, CategoriesQueryResponse, { topicIds: string[] }>(\n    gql(queries.knowledgeBaseCategories),\n    {\n      name: 'categoriesQuery',\n      options: ({ topicIds }) => {\n        return {\n          variables: {\n            topicIds: [topicIds]\n          }\n        };\n      }\n    }\n  ),\n  graphql<Props, ArticlesTotalCountQueryResponse, { categoryIds: string[] }>(\n    gql(queries.knowledgeBaseArticlesTotalCount),\n    {\n      name: 'articlesCountQuery',\n      options: ({ currentCategoryId }) => ({\n        variables: { categoryIds: [currentCategoryId] || '' }\n      })\n    }\n  ),\n  graphql<Props, CategoriesTotalCountQueryResponse>(\n    gql(queries.knowledgeBaseCategoriesTotalCount),\n    {\n      name: 'categoriesCountQuery'\n    }\n  ),\n  graphql<Props, RemoveCategoriesMutationResponse, { _id: string }>(\n    gql(mutations.knowledgeBaseCategoriesRemove),\n    {\n      name: 'removeCategoriesMutation',\n      options: ({ currentCategoryId }) => {\n        const refetchQueries: any[] = [\n          {\n            query: gql(queries.knowledgeBaseCategories)\n          },\n          {\n            query: gql(queries.knowledgeBaseTopics)\n          }\n        ];\n\n        if (currentCategoryId) {\n          refetchQueries.push({\n            query: gql(queries.knowledgeBaseArticlesTotalCount),\n            variables: { categoryIds: [currentCategoryId] }\n          });\n\n          refetchQueries.push({\n            query: gql(queries.knowledgeBaseCategoryDetail),\n            variables: { _id: currentCategoryId },\n            skip: () => !currentCategoryId\n          });\n        }\n\n        return {\n          refetchQueries\n        };\n      }\n    }\n  )\n)(KnowledgeBaseContainer);\n"]},"metadata":{},"sourceType":"module"}