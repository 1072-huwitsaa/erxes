{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/containers/LogList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport LogList from '../components/LogList';\nimport queries from '../queries';\n\nvar List = function List(props) {\n  var queryParams = props.queryParams,\n      logsQuery = props.logsQuery;\n  var errorMessage = logsQuery.error ? logsQuery.error.message : '';\n  var isLoading = logsQuery.loading;\n\n  var updatedProps = _objectSpread({}, props, {\n    isLoading: logsQuery.loading,\n    refetchQueries: commonOptions(queryParams),\n    logs: isLoading || errorMessage ? [] : logsQuery.logs.logs,\n    count: isLoading || errorMessage ? 0 : logsQuery.logs.totalCount,\n    errorMessage: errorMessage\n  });\n\n  return React.createElement(LogList, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nvar commonOptions = function commonOptions(queryParams) {\n  var variables = _objectSpread({\n    start: queryParams.start,\n    end: queryParams.end,\n    userId: queryParams.userId,\n    action: queryParams.action,\n    type: queryParams.type\n  }, generatePaginationParams(queryParams));\n\n  return [{\n    query: gql(queries.logs),\n    variables: variables\n  }];\n};\n\nexport default compose(graphql(gql(queries.logs), {\n  name: 'logsQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      notifyOnNetworkStatusChange: true,\n      variables: _objectSpread({\n        start: queryParams.start,\n        end: queryParams.end,\n        userId: queryParams.userId,\n        action: queryParams.action,\n        type: queryParams.type\n      }, generatePaginationParams(queryParams))\n    };\n  }\n}))(List);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/containers/LogList.tsx"],"names":["gql","compose","generatePaginationParams","React","graphql","LogList","queries","List","props","queryParams","logsQuery","errorMessage","error","message","isLoading","loading","updatedProps","refetchQueries","commonOptions","logs","count","totalCount","variables","start","end","userId","action","type","query","name","options","notifyOnNetworkStatusChange"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAOA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAuB;AAAA,MAC1BC,WAD0B,GACCD,KADD,CAC1BC,WAD0B;AAAA,MACbC,SADa,GACCF,KADD,CACbE,SADa;AAElC,MAAMC,YAAY,GAAGD,SAAS,CAACE,KAAV,GAAkBF,SAAS,CAACE,KAAV,CAAgBC,OAAlC,GAA4C,EAAjE;AACA,MAAMC,SAAS,GAAGJ,SAAS,CAACK,OAA5B;;AAEA,MAAMC,YAAY,qBACbR,KADa;AAEhBM,IAAAA,SAAS,EAAEJ,SAAS,CAACK,OAFL;AAGhBE,IAAAA,cAAc,EAAEC,aAAa,CAACT,WAAD,CAHb;AAIhBU,IAAAA,IAAI,EAAEL,SAAS,IAAIH,YAAb,GAA4B,EAA5B,GAAiCD,SAAS,CAACS,IAAV,CAAeA,IAJtC;AAKhBC,IAAAA,KAAK,EAAEN,SAAS,IAAIH,YAAb,GAA4B,CAA5B,GAAgCD,SAAS,CAACS,IAAV,CAAeE,UALtC;AAMhBV,IAAAA,YAAY,EAAZA;AANgB,IAAlB;;AASA,SAAO,oBAAC,OAAD,oBAAaK,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAfD;;AAuBA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAT,WAAW,EAAI;AACnC,MAAMa,SAAS;AACbC,IAAAA,KAAK,EAAEd,WAAW,CAACc,KADN;AAEbC,IAAAA,GAAG,EAAEf,WAAW,CAACe,GAFJ;AAGbC,IAAAA,MAAM,EAAEhB,WAAW,CAACgB,MAHP;AAIbC,IAAAA,MAAM,EAAEjB,WAAW,CAACiB,MAJP;AAKbC,IAAAA,IAAI,EAAElB,WAAW,CAACkB;AALL,KAMVzB,wBAAwB,CAACO,WAAD,CANd,CAAf;;AASA,SAAO,CAAC;AAAEmB,IAAAA,KAAK,EAAE5B,GAAG,CAACM,OAAO,CAACa,IAAT,CAAZ;AAA4BG,IAAAA,SAAS,EAATA;AAA5B,GAAD,CAAP;AACD,CAXD;;AAaA,eAAerB,OAAO,CACpBG,OAAO,CAA2BJ,GAAG,CAACM,OAAO,CAACa,IAAT,CAA9B,EAA8C;AACnDU,EAAAA,IAAI,EAAE,WAD6C;AAEnDC,EAAAA,OAAO,EAAE;AAAA,QAAGrB,WAAH,QAAGA,WAAH;AAAA,WAAsB;AAC7BsB,MAAAA,2BAA2B,EAAE,IADA;AAE7BT,MAAAA,SAAS;AACPC,QAAAA,KAAK,EAAEd,WAAW,CAACc,KADZ;AAEPC,QAAAA,GAAG,EAAEf,WAAW,CAACe,GAFV;AAGPC,QAAAA,MAAM,EAAEhB,WAAW,CAACgB,MAHb;AAIPC,QAAAA,MAAM,EAAEjB,WAAW,CAACiB,MAJb;AAKPC,QAAAA,IAAI,EAAElB,WAAW,CAACkB;AALX,SAMJzB,wBAAwB,CAACO,WAAD,CANpB;AAFoB,KAAtB;AAAA;AAF0C,CAA9C,CADa,CAAP,CAebF,IAfa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport LogList from '../components/LogList';\nimport queries from '../queries';\nimport { LogsQueryResponse } from '../types';\n\ntype FinalProps = {\n  can: (action: string) => boolean;\n} & Props;\n\nconst List = (props: FinalProps) => {\n  const { queryParams, logsQuery } = props;\n  const errorMessage = logsQuery.error ? logsQuery.error.message : '';\n  const isLoading = logsQuery.loading;\n\n  const updatedProps = {\n    ...props,\n    isLoading: logsQuery.loading,\n    refetchQueries: commonOptions(queryParams),\n    logs: isLoading || errorMessage ? [] : logsQuery.logs.logs,\n    count: isLoading || errorMessage ? 0 : logsQuery.logs.totalCount,\n    errorMessage\n  };\n\n  return <LogList {...updatedProps} />;\n};\n\ntype Props = {\n  history: any;\n  queryParams: any;\n  logsQuery: LogsQueryResponse;\n};\n\nconst commonOptions = queryParams => {\n  const variables = {\n    start: queryParams.start,\n    end: queryParams.end,\n    userId: queryParams.userId,\n    action: queryParams.action,\n    type: queryParams.type,\n    ...generatePaginationParams(queryParams)\n  };\n\n  return [{ query: gql(queries.logs), variables }];\n};\n\nexport default compose(\n  graphql<Props, LogsQueryResponse>(gql(queries.logs), {\n    name: 'logsQuery',\n    options: ({ queryParams }) => ({\n      notifyOnNetworkStatusChange: true,\n      variables: {\n        start: queryParams.start,\n        end: queryParams.end,\n        userId: queryParams.userId,\n        action: queryParams.action,\n        type: queryParams.type,\n        ...generatePaginationParams(queryParams)\n      }\n    })\n  })\n)(List);\n"]},"metadata":{},"sourceType":"module"}