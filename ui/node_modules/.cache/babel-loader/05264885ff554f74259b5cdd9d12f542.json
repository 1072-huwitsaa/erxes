{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/SelectBrand.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { mutations as brandMutations } from 'modules/settings/brands/graphql';\nimport { queries as brandQueries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SelectBrand from '../components/SelectBrand';\n\nvar SelectBrandContainer = function SelectBrandContainer(props) {\n  var brandsQuery = props.brandsQuery,\n      formProps = props.formProps;\n  var brands = brandsQuery.brands || [];\n\n  if (brandsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    });\n  }\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback;\n\n    var callBackResponse = function callBackResponse() {\n      brandsQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return React.createElement(ButtonMutate, {\n      mutation: brandMutations.brandAdd,\n      variables: values,\n      callback: callBackResponse,\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      uppercase: false,\n      successMessage: \"You successfully added a \".concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    brands: brands,\n    formProps: formProps,\n    renderButton: renderButton\n  });\n\n  return React.createElement(SelectBrand, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries() {\n  return [{\n    query: gql(brandQueries.brands),\n    variables: {}\n  }];\n};\n\nexport default compose(graphql(gql(brandQueries.brands), {\n  name: 'brandsQuery',\n  options: function options() {\n    return {\n      refetchQueries: getRefetchQueries\n    };\n  }\n}))(SelectBrandContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/SelectBrand.tsx"],"names":["gql","compose","ButtonMutate","Spinner","mutations","brandMutations","queries","brandQueries","React","graphql","SelectBrand","SelectBrandContainer","props","brandsQuery","formProps","brands","loading","renderButton","name","values","isSubmitted","callback","callBackResponse","refetch","brandAdd","updatedProps","getRefetchQueries","query","variables","options","refetchQueries"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,SAAS,IAAIC,cAAtB,QAA4C,iCAA5C;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,iCAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAqBC,OAArB,QAAoC,cAApC;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;;AAcA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAmC;AAAA,MACtDC,WADsD,GAC3BD,KAD2B,CACtDC,WADsD;AAAA,MACzCC,SADyC,GAC3BF,KAD2B,CACzCE,SADyC;AAG9D,MAAMC,MAAM,GAAGF,WAAW,CAACE,MAAZ,IAAsB,EAArC;;AAEA,MAAIF,WAAW,CAACG,OAAhB,EAAyB;AACvB,WAAO,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAKK;AAAA,QAJxBC,IAIwB,QAJxBA,IAIwB;AAAA,QAHxBC,MAGwB,QAHxBA,MAGwB;AAAA,QAFxBC,WAEwB,QAFxBA,WAEwB;AAAA,QADxBC,QACwB,QADxBA,QACwB;;AACxB,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BT,MAAAA,WAAW,CAACU,OAAZ;;AAEA,UAAIF,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACT;AACF,KAND;;AAQA,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEhB,cAAc,CAACmB,QAD3B;AAEE,MAAA,SAAS,EAAEL,MAFb;AAGE,MAAA,QAAQ,EAAEG,gBAHZ;AAIE,MAAA,WAAW,EAAEF,WAJf;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,SAAS,EAAE,KANb;AAOE,MAAA,cAAc,qCAA8BF,IAA9B,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAzBD;;AA2BA,MAAMO,YAAY,qBACbb,KADa;AAEhBG,IAAAA,MAAM,EAANA,MAFgB;AAGhBD,IAAAA,SAAS,EAATA,SAHgB;AAIhBG,IAAAA,YAAY,EAAZA;AAJgB,IAAlB;;AAOA,SAAO,oBAAC,WAAD,oBAAiBQ,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA5CD;;AA8CA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,SAAO,CACL;AACEC,IAAAA,KAAK,EAAE3B,GAAG,CAACO,YAAY,CAACQ,MAAd,CADZ;AAEEa,IAAAA,SAAS,EAAE;AAFb,GADK,CAAP;AAMD,CAPD;;AASA,eAAe3B,OAAO,CACpBQ,OAAO,CAAsBT,GAAG,CAACO,YAAY,CAACQ,MAAd,CAAzB,EAAgD;AACrDG,EAAAA,IAAI,EAAE,aAD+C;AAErDW,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdC,MAAAA,cAAc,EAAEJ;AADF,KAAP;AAAA;AAF4C,CAAhD,CADa,CAAP,CAObf,oBAPa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps, IFormProps } from 'modules/common/types';\nimport { mutations as brandMutations } from 'modules/settings/brands/graphql';\nimport { queries as brandQueries } from 'modules/settings/brands/graphql';\nimport React from 'react';\nimport { ChildProps, graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../brands/types';\nimport SelectBrand from '../components/SelectBrand';\n\ntype Props = {\n  onChange: () => void;\n  defaultValue: string;\n  creatable: boolean;\n  isRequired?: boolean;\n  formProps: IFormProps;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n} & Props;\n\nconst SelectBrandContainer = (props: ChildProps<FinalProps>) => {\n  const { brandsQuery, formProps } = props;\n\n  const brands = brandsQuery.brands || [];\n\n  if (brandsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    const callBackResponse = () => {\n      brandsQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={brandMutations.brandAdd}\n        variables={values}\n        callback={callBackResponse}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        uppercase={false}\n        successMessage={`You successfully added a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    brands,\n    formProps,\n    renderButton\n  };\n\n  return <SelectBrand {...updatedProps} />;\n};\n\nconst getRefetchQueries = () => {\n  return [\n    {\n      query: gql(brandQueries.brands),\n      variables: {}\n    }\n  ];\n};\n\nexport default compose(\n  graphql<BrandsQueryResponse>(gql(brandQueries.brands), {\n    name: 'brandsQuery',\n    options: () => ({\n      refetchQueries: getRefetchQueries\n    })\n  })\n)(SelectBrandContainer);\n"]},"metadata":{},"sourceType":"module"}