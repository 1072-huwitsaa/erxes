{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/ManageIntegrations.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ManageIntegrations from 'modules/settings/integrations/containers/common/ManageIntegrations';\nimport { integrationsListParams } from 'modules/settings/integrations/containers/utils';\nimport { queries as integQueries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport ChooseBrand from './ChooseBrand';\n\nvar ManageIntegrationsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ManageIntegrationsContainer, _React$Component);\n\n  function ManageIntegrationsContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ManageIntegrationsContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ManageIntegrationsContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.save = function (integrationIds) {\n      var _this$props = _this.props,\n          currentBrand = _this$props.currentBrand,\n          saveMutation = _this$props.saveMutation;\n      return saveMutation({\n        variables: {\n          _id: currentBrand._id,\n          integrationIds: integrationIds\n        }\n      }).then(function () {\n        Alert.success('You successfully managed an integration');\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ManageIntegrationsContainer, [{\n    key: \"renderConfirm\",\n    value: function renderConfirm(integration, actionTrigger, icon, handleChange) {\n      if (icon === 'add') {\n        return null;\n      }\n\n      var onSave = function onSave() {\n        return handleChange(icon, integration);\n      };\n\n      var content = function content(props) {\n        return React.createElement(ChooseBrand, Object.assign({}, props, {\n          integration: integration,\n          onSave: onSave,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(ModalTrigger, {\n        key: integration._id,\n        title: \"Choose new brand\",\n        trigger: actionTrigger,\n        content: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentBrand = this.props.currentBrand;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        current: currentBrand,\n        save: this.save,\n        renderConfirm: this.renderConfirm\n      });\n\n      return React.createElement(ManageIntegrations, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ManageIntegrationsContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.brandManageIntegrations), {\n  name: 'saveMutation',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams,\n        currentBrand = _ref.currentBrand;\n    return {\n      refetchQueries: [{\n        query: gql(integQueries.integrations),\n        variables: _objectSpread({\n          brandId: currentBrand._id\n        }, integrationsListParams(queryParams))\n      }, {\n        query: gql(queries.brandDetail),\n        variables: {\n          _id: currentBrand._id\n        }\n      }, {\n        query: gql(queries.integrationsCount),\n        variables: {\n          brandId: currentBrand._id\n        }\n      }]\n    };\n  }\n}))(ManageIntegrationsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/ManageIntegrations.tsx"],"names":["gql","compose","ModalTrigger","Alert","withProps","ManageIntegrations","integrationsListParams","queries","integQueries","React","graphql","mutations","ChooseBrand","ManageIntegrationsContainer","save","integrationIds","props","currentBrand","saveMutation","variables","_id","then","success","catch","e","error","message","integration","actionTrigger","icon","handleChange","onSave","content","updatedProps","current","renderConfirm","Component","brandManageIntegrations","name","options","queryParams","refetchQueries","query","integrations","brandId","brandDetail","integrationsCount"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ModalTrigger from 'modules/common/components/ModalTrigger';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ManageIntegrations from 'modules/settings/integrations/containers/common/ManageIntegrations';\nimport { integrationsListParams } from 'modules/settings/integrations/containers/utils';\nimport { queries as integQueries } from 'modules/settings/integrations/graphql';\nimport { IIntegration } from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations, queries } from '../graphql';\nimport { BrandsManageIntegrationsMutationResponse, IBrandDoc } from '../types';\nimport ChooseBrand from './ChooseBrand';\n\ntype Props = {\n  currentBrand: IBrandDoc;\n  queryParams: any;\n};\n\ntype FinalProps = BrandsManageIntegrationsMutationResponse & Props;\n\nclass ManageIntegrationsContainer extends React.Component<FinalProps> {\n  renderConfirm(integration: IIntegration, actionTrigger, icon, handleChange) {\n    if (icon === 'add') {\n      return null;\n    }\n\n    const onSave = () => handleChange(icon, integration);\n\n    const content = props => (\n      <ChooseBrand {...props} integration={integration} onSave={onSave} />\n    );\n\n    return (\n      <ModalTrigger\n        key={integration._id}\n        title=\"Choose new brand\"\n        trigger={actionTrigger}\n        content={content}\n      />\n    );\n  }\n\n  save = (integrationIds: string[]): Promise<any> => {\n    const { currentBrand, saveMutation } = this.props;\n\n    return saveMutation({\n      variables: {\n        _id: currentBrand._id,\n        integrationIds\n      }\n    })\n      .then(() => {\n        Alert.success('You successfully managed an integration');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  render() {\n    const { currentBrand } = this.props;\n\n    const updatedProps = {\n      ...this.props,\n      current: currentBrand,\n      save: this.save,\n      renderConfirm: this.renderConfirm\n    };\n\n    return <ManageIntegrations {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsManageIntegrationsMutationResponse, {}>(\n      gql(mutations.brandManageIntegrations),\n      {\n        name: 'saveMutation',\n        options: ({\n          queryParams,\n          currentBrand\n        }: {\n          queryParams: any;\n          currentBrand: IBrandDoc;\n        }) => {\n          return {\n            refetchQueries: [\n              {\n                query: gql(integQueries.integrations),\n                variables: {\n                  brandId: currentBrand._id,\n                  ...integrationsListParams(queryParams)\n                }\n              },\n              {\n                query: gql(queries.brandDetail),\n                variables: { _id: currentBrand._id }\n              },\n              {\n                query: gql(queries.integrationsCount),\n                variables: { brandId: currentBrand._id }\n              }\n            ]\n          };\n        }\n      }\n    )\n  )(ManageIntegrationsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}