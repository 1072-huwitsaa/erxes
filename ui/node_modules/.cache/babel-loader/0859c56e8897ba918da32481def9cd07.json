{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/robot/containers/TodoDetail.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport TodoDetail from '../components/TodoDetail';\nimport { mutations, queries, subscriptions } from '../graphql';\n\nvar TodoDetailContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TodoDetailContainer, _React$Component);\n\n  function TodoDetailContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TodoDetailContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TodoDetailContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.completeShowStep = function () {\n      var _this$props = _this.props,\n          completeShowStepMutation = _this$props.completeShowStepMutation,\n          feature = _this$props.feature;\n      completeShowStepMutation({\n        variables: {\n          step: \"\".concat(feature.name, \"Show\")\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TodoDetailContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props2 = this.props,\n          stepsCompletenessQuery = _this$props2.stepsCompletenessQuery,\n          currentUser = _this$props2.currentUser;\n      stepsCompletenessQuery.subscribeToMore({\n        document: gql(subscriptions.onboardingChanged),\n        variables: {\n          userId: currentUser._id\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var data = _ref.subscriptionData.data;\n          stepsCompletenessQuery.refetch();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stepsCompletenessQuery = this.props.stepsCompletenessQuery;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        completeShowStep: this.completeShowStep,\n        stepsCompleteness: stepsCompletenessQuery.onboardingStepsCompleteness || {}\n      });\n\n      return React.createElement(TodoDetail, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TodoDetailContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.stepsCompleteness), {\n  name: 'stepsCompletenessQuery',\n  options: function options(_ref2) {\n    var feature = _ref2.feature;\n    return {\n      variables: {\n        steps: feature.settings\n      }\n    };\n  }\n}), graphql(gql(mutations.completeShowStep), {\n  name: 'completeShowStepMutation'\n}))(withCurrentUser(TodoDetailContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/robot/containers/TodoDetail.tsx"],"names":["gql","compose","withCurrentUser","React","graphql","withProps","TodoDetail","mutations","queries","subscriptions","TodoDetailContainer","completeShowStep","props","completeShowStepMutation","feature","variables","step","name","stepsCompletenessQuery","currentUser","subscribeToMore","document","onboardingChanged","userId","_id","updateQuery","prev","data","subscriptionData","refetch","updatedProps","stepsCompleteness","onboardingStepsCompleteness","Component","options","steps","settings"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,aAA7B,QAAkD,YAAlD;;IAiBMC,mB;;;;;;;;;;;;;;;;;;UAaJC,gB,GAAmB,YAAM;AAAA,wBACuB,MAAKC,KAD5B;AAAA,UACfC,wBADe,eACfA,wBADe;AAAA,UACWC,OADX,eACWA,OADX;AAGvBD,MAAAA,wBAAwB,CAAC;AAAEE,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,YAAKF,OAAO,CAACG,IAAb;AAAN;AAAb,OAAD,CAAxB;AACD,K;;;;;;;yCAhBoB;AAAA,yBAC6B,KAAKL,KADlC;AAAA,UACXM,sBADW,gBACXA,sBADW;AAAA,UACaC,WADb,gBACaA,WADb;AAGnBD,MAAAA,sBAAsB,CAACE,eAAvB,CAAuC;AACrCC,QAAAA,QAAQ,EAAErB,GAAG,CAACS,aAAa,CAACa,iBAAf,CADwB;AAErCP,QAAAA,SAAS,EAAE;AAAEQ,UAAAA,MAAM,EAAEJ,WAAW,CAACK;AAAtB,SAF0B;AAGrCC,QAAAA,WAAW,EAAE,qBAACC,IAAD,QAA0C;AAAA,cAAbC,IAAa,QAAjCC,gBAAiC,CAAbD,IAAa;AACrDT,UAAAA,sBAAsB,CAACW,OAAvB;AACD;AALoC,OAAvC;AAOD;;;6BAQQ;AAAA,UACCX,sBADD,GAC4B,KAAKN,KADjC,CACCM,sBADD;;AAGP,UAAMY,YAAY,qBACb,KAAKlB,KADQ;AAEhBD,QAAAA,gBAAgB,EAAE,KAAKA,gBAFP;AAGhBoB,QAAAA,iBAAiB,EACfb,sBAAsB,CAACc,2BAAvB,IAAsD;AAJxC,QAAlB;;AAOA,aAAO,oBAAC,UAAD,oBAAgBF,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA9B+B3B,KAAK,CAAC8B,S;;AAiCxC,eAAe5B,SAAS,CACtBJ,OAAO,CACLG,OAAO,CAAQJ,GAAG,CAACQ,OAAO,CAACuB,iBAAT,CAAX,EAAwC;AAC7Cd,EAAAA,IAAI,EAAE,wBADuC;AAE7CiB,EAAAA,OAAO,EAAE,wBAAiB;AAAA,QAAdpB,OAAc,SAAdA,OAAc;AACxB,WAAO;AACLC,MAAAA,SAAS,EAAE;AACToB,QAAAA,KAAK,EAAErB,OAAO,CAACsB;AADN;AADN,KAAP;AAKD;AAR4C,CAAxC,CADF,EAWLhC,OAAO,CAAKJ,GAAG,CAACO,SAAS,CAACI,gBAAX,CAAR,EAAsC;AAC3CM,EAAAA,IAAI,EAAE;AADqC,CAAtC,CAXF,CAAP,CAcEf,eAAe,CAACQ,mBAAD,CAdjB,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { IUser } from 'modules/auth/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../common/utils';\nimport TodoDetail from '../components/TodoDetail';\nimport { mutations, queries, subscriptions } from '../graphql';\nimport {\n  CompleteShowStepMutationResponse,\n  IFeature,\n  StepsCompletenessQueryResponse\n} from '../types';\n\ntype Props = {\n  feature: IFeature;\n};\n\ntype FinalProps = Props &\n  CompleteShowStepMutationResponse & {\n    stepsCompletenessQuery: StepsCompletenessQueryResponse;\n    currentUser: IUser;\n  };\n\nclass TodoDetailContainer extends React.Component<FinalProps> {\n  componentWillMount() {\n    const { stepsCompletenessQuery, currentUser } = this.props;\n\n    stepsCompletenessQuery.subscribeToMore({\n      document: gql(subscriptions.onboardingChanged),\n      variables: { userId: currentUser._id },\n      updateQuery: (prev, { subscriptionData: { data } }) => {\n        stepsCompletenessQuery.refetch();\n      }\n    });\n  }\n\n  completeShowStep = () => {\n    const { completeShowStepMutation, feature } = this.props;\n\n    completeShowStepMutation({ variables: { step: `${feature.name}Show` } });\n  };\n\n  render() {\n    const { stepsCompletenessQuery } = this.props;\n\n    const updatedProps = {\n      ...this.props,\n      completeShowStep: this.completeShowStep,\n      stepsCompleteness:\n        stepsCompletenessQuery.onboardingStepsCompleteness || {}\n    };\n\n    return <TodoDetail {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props>(gql(queries.stepsCompleteness), {\n      name: 'stepsCompletenessQuery',\n      options: ({ feature }) => {\n        return {\n          variables: {\n            steps: feature.settings\n          }\n        };\n      }\n    }),\n    graphql<{}>(gql(mutations.completeShowStep), {\n      name: 'completeShowStepMutation'\n    })\n  )(withCurrentUser(TodoDetailContainer))\n);\n"]},"metadata":{},"sourceType":"module"}