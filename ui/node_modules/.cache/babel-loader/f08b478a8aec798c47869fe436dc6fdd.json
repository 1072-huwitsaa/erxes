{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/portable/AddForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, renderWithProps } from 'modules/common/utils';\nimport { mutations } from 'modules/conformity/graphql/';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport AddForm from '../../components/portable/AddForm';\nimport { queries } from '../../graphql';\n\nvar AddFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddFormContainer, _React$Component);\n\n  function AddFormContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddFormContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddFormContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.saveItem = function (doc, callback) {\n      var _this$props = _this.props,\n          addMutation = _this$props.addMutation,\n          options = _this$props.options,\n          relType = _this$props.relType,\n          relTypeIds = _this$props.relTypeIds,\n          editConformity = _this$props.editConformity,\n          refetch = _this$props.refetch,\n          assignedUserIds = _this$props.assignedUserIds,\n          sourceConversationId = _this$props.sourceConversationId,\n          getAssociatedItem = _this$props.getAssociatedItem,\n          aboveItemId = _this$props.aboveItemId,\n          description = _this$props.description,\n          attachments = _this$props.attachments;\n      doc.assignedUserIds = assignedUserIds;\n      doc.sourceConversationId = sourceConversationId;\n      var proccessId = Math.random().toString();\n      localStorage.setItem('proccessId', proccessId);\n      doc.proccessId = proccessId;\n      doc.aboveItemId = aboveItemId;\n      doc.description = description;\n      doc.attachments = attachments;\n      addMutation({\n        variables: doc\n      }).then(function (_ref) {\n        var data = _ref.data;\n\n        if (options.texts.addSuccessText) {\n          Alert.success(options.texts.addSuccessText);\n        }\n\n        if (relType && relTypeIds) {\n          editConformity({\n            variables: {\n              mainType: options.type,\n              mainTypeId: data[options.mutationsName.addMutation]._id,\n              relType: relType,\n              relTypeIds: relTypeIds\n            }\n          });\n        }\n\n        callback(data[options.mutationsName.addMutation]);\n\n        if (getAssociatedItem) {\n          getAssociatedItem(data[options.mutationsName.addMutation]);\n        }\n\n        if (refetch) {\n          refetch();\n        }\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddFormContainer, [{\n    key: \"render\",\n    value: function render() {\n      var extendedProps = _objectSpread({}, this.props, {\n        saveItem: this.saveItem\n      });\n\n      return React.createElement(AddForm, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddFormContainer;\n}(React.Component);\n\nexport default (function (props) {\n  return renderWithProps(props, compose(graphql(gql(props.options.mutations.addMutation), {\n    name: 'addMutation',\n    options: function options(_ref2) {\n      var stageId = _ref2.stageId;\n\n      if (!stageId) {\n        return {};\n      }\n\n      return {\n        refetchQueries: [{\n          query: gql(queries.stageDetail),\n          variables: {\n            _id: stageId\n          }\n        }]\n      };\n    }\n  }), graphql(gql(mutations.conformityEdit), {\n    name: 'editConformity'\n  }))(AddFormContainer));\n});","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/portable/AddForm.tsx"],"names":["gql","compose","Alert","renderWithProps","mutations","React","graphql","AddForm","queries","AddFormContainer","saveItem","doc","callback","props","addMutation","options","relType","relTypeIds","editConformity","refetch","assignedUserIds","sourceConversationId","getAssociatedItem","aboveItemId","description","attachments","proccessId","Math","random","toString","localStorage","setItem","variables","then","data","texts","addSuccessText","success","mainType","type","mainTypeId","mutationsName","_id","catch","error","message","extendedProps","Component","name","stageId","refetchQueries","query","stageDetail","conformityEdit"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, renderWithProps } from 'modules/common/utils';\nimport { mutations } from 'modules/conformity/graphql/';\nimport {\n  EditConformityMutation,\n  IConformityEdit\n} from 'modules/conformity/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport AddForm from '../../components/portable/AddForm';\nimport { queries } from '../../graphql';\nimport { IItem, IItemParams, IOptions, SaveMutation } from '../../types';\n\ntype IProps = {\n  options: IOptions;\n  boardId?: string;\n  pipelineId?: string;\n  stageId?: string;\n  showSelect?: boolean;\n  relType?: string;\n  sourceConversationId?: string;\n  relTypeIds?: string[];\n  assignedUserIds?: string[];\n  getAssociatedItem?: (itemId: string) => void;\n  closeModal: () => void;\n  refetch?: () => void;\n  aboveItemId?: string;\n  type?: string;\n  description?: string;\n  attachments?: any[];\n};\n\ntype FinalProps = {\n  addMutation: SaveMutation;\n  editConformity: EditConformityMutation;\n} & IProps;\n\nclass AddFormContainer extends React.Component<FinalProps> {\n  saveItem = (doc: IItemParams, callback: (item: IItem) => void) => {\n    const {\n      addMutation,\n      options,\n      relType,\n      relTypeIds,\n      editConformity,\n      refetch,\n      assignedUserIds,\n      sourceConversationId,\n      getAssociatedItem,\n      aboveItemId,\n      description,\n      attachments\n    } = this.props;\n\n    doc.assignedUserIds = assignedUserIds;\n    doc.sourceConversationId = sourceConversationId;\n\n    const proccessId = Math.random().toString();\n\n    localStorage.setItem('proccessId', proccessId);\n\n    doc.proccessId = proccessId;\n    doc.aboveItemId = aboveItemId;\n    doc.description = description;\n    doc.attachments = attachments;\n\n    addMutation({ variables: doc })\n      .then(({ data }) => {\n        if (options.texts.addSuccessText) {\n          Alert.success(options.texts.addSuccessText);\n        }\n\n        if (relType && relTypeIds) {\n          editConformity({\n            variables: {\n              mainType: options.type,\n              mainTypeId: data[options.mutationsName.addMutation]._id,\n              relType,\n              relTypeIds\n            }\n          });\n        }\n\n        callback(data[options.mutationsName.addMutation]);\n\n        if (getAssociatedItem) {\n          getAssociatedItem(data[options.mutationsName.addMutation]);\n        }\n\n        if (refetch) {\n          refetch();\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  render() {\n    const extendedProps = {\n      ...this.props,\n      saveItem: this.saveItem\n    };\n\n    return <AddForm {...extendedProps} />;\n  }\n}\n\nexport default (props: IProps) =>\n  renderWithProps<IProps>(\n    props,\n    compose(\n      graphql<IProps, SaveMutation, IItem>(\n        gql(props.options.mutations.addMutation),\n        {\n          name: 'addMutation',\n          options: ({ stageId }: { stageId?: string }) => {\n            if (!stageId) {\n              return {};\n            }\n\n            return {\n              refetchQueries: [\n                {\n                  query: gql(queries.stageDetail),\n                  variables: { _id: stageId }\n                }\n              ]\n            };\n          }\n        }\n      ),\n      graphql<FinalProps, EditConformityMutation, IConformityEdit>(\n        gql(mutations.conformityEdit),\n        {\n          name: 'editConformity'\n        }\n      )\n    )(AddFormContainer)\n  );\n"]},"metadata":{},"sourceType":"module"}