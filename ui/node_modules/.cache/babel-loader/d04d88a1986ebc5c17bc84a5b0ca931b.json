{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/conformity/containers/ConformityChooser.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ItemChooser from 'modules/boards/components/portable/ItemChooser';\nimport Chooser from 'modules/common/components/Chooser';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations } from '../graphql';\n\nvar ConformityChooser = function ConformityChooser(props) {\n  var editConformityMutation = props.editConformityMutation,\n      data = props.data,\n      onSelect = props.onSelect;\n\n  var onSelected = function onSelected(relTypes) {\n    var relTypeIds = relTypes.map(function (item) {\n      return item._id;\n    });\n    editConformityMutation({\n      variables: {\n        mainType: data.mainType,\n        mainTypeId: data.mainTypeId,\n        relType: data.relType,\n        relTypeIds: relTypeIds\n      }\n    }).then(function () {\n      if (onSelect) {\n        onSelect(relTypes);\n      }\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  if (props.data.options) {\n    return React.createElement(ItemChooser, Object.assign({}, props, {\n      onSelect: onSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(Chooser, Object.assign({}, props, {\n    onSelect: onSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(mutations.conformityEdit), {\n  name: 'editConformityMutation',\n  options: function options(_ref) {\n    var data = _ref.data,\n        refetchQuery = _ref.refetchQuery;\n    return {\n      refetchQueries: [{\n        query: gql(refetchQuery),\n        variables: {\n          mainType: data.mainType,\n          mainTypeId: data.mainTypeId,\n          relType: data.relType,\n          isSaved: true\n        }\n      }, 'activityLogs', 'customers', 'companies']\n    };\n  }\n}))(ConformityChooser));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/conformity/containers/ConformityChooser.tsx"],"names":["gql","compose","ItemChooser","Chooser","Alert","withProps","React","graphql","mutations","ConformityChooser","props","editConformityMutation","data","onSelect","onSelected","relTypes","relTypeIds","map","item","_id","variables","mainType","mainTypeId","relType","then","catch","error","message","options","conformityEdit","name","refetchQuery","refetchQueries","query","isSaved"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,gDAAxB;AACA,OAAOC,OAAP,MAAqC,mCAArC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAoBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAuB;AAAA,MACvCC,sBADuC,GACID,KADJ,CACvCC,sBADuC;AAAA,MACfC,IADe,GACIF,KADJ,CACfE,IADe;AAAA,MACTC,QADS,GACIH,KADJ,CACTG,QADS;;AAG/C,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,QAAQ,EAAI;AAC7B,QAAMC,UAAU,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,GAAT;AAAA,KAAjB,CAAnB;AAEAR,IAAAA,sBAAsB,CAAC;AACrBS,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAET,IAAI,CAACS,QADN;AAETC,QAAAA,UAAU,EAAEV,IAAI,CAACU,UAFR;AAGTC,QAAAA,OAAO,EAAEX,IAAI,CAACW,OAHL;AAITP,QAAAA,UAAU,EAAVA;AAJS;AADU,KAAD,CAAtB,CAQGQ,IARH,CAQQ,YAAM;AACV,UAAIX,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACE,QAAD,CAAR;AACD;AACF,KAZH,EAaGU,KAbH,CAaS,UAAAC,KAAK,EAAI;AACdtB,MAAAA,KAAK,CAACsB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,KAfH;AAgBD,GAnBD;;AAqBA,MAAIjB,KAAK,CAACE,IAAN,CAAWgB,OAAf,EAAwB;AACtB,WAAO,oBAAC,WAAD,oBAAiBlB,KAAjB;AAAwB,MAAA,QAAQ,EAAEI,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAED,SAAO,oBAAC,OAAD,oBAAaJ,KAAb;AAAoB,IAAA,QAAQ,EAAEI,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA7BD;;AA+BA,eAAeT,SAAS,CACtBJ,OAAO,CACLM,OAAO,CAILP,GAAG,CAACQ,SAAS,CAACqB,cAAX,CAJE,EAI0B;AAC/BC,EAAAA,IAAI,EAAE,wBADyB;AAE/BF,EAAAA,OAAO,EAAE,uBAA4B;AAAA,QAAzBhB,IAAyB,QAAzBA,IAAyB;AAAA,QAAnBmB,YAAmB,QAAnBA,YAAmB;AACnC,WAAO;AACLC,MAAAA,cAAc,EAAE,CACd;AACEC,QAAAA,KAAK,EAAEjC,GAAG,CAAC+B,YAAD,CADZ;AAEEX,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAET,IAAI,CAACS,QADN;AAETC,UAAAA,UAAU,EAAEV,IAAI,CAACU,UAFR;AAGTC,UAAAA,OAAO,EAAEX,IAAI,CAACW,OAHL;AAITW,UAAAA,OAAO,EAAE;AAJA;AAFb,OADc,EAUd,cAVc,EAWd,WAXc,EAYd,WAZc;AADX,KAAP;AAgBD;AAnB8B,CAJ1B,CADF,CAAP,CA0BEzB,iBA1BF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ItemChooser from 'modules/boards/components/portable/ItemChooser';\nimport Chooser, { CommonProps } from 'modules/common/components/Chooser';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { mutations } from '../graphql';\nimport { EditConformityMutation, IConformityEdit } from '../types';\n\ntype Props = {\n  filterStageId?: (\n    stageId?: string,\n    boardId?: string,\n    pipelineId?: string\n  ) => void;\n  onSelect?: (datas: any[]) => void;\n  stageId?: string;\n  boardId?: string;\n  pipelineId?: string;\n  refetchQuery: string;\n} & CommonProps;\n\ntype FinalProps = {\n  editConformityMutation: EditConformityMutation;\n} & Props;\n\nconst ConformityChooser = (props: FinalProps) => {\n  const { editConformityMutation, data, onSelect } = props;\n\n  const onSelected = relTypes => {\n    const relTypeIds = relTypes.map(item => item._id);\n\n    editConformityMutation({\n      variables: {\n        mainType: data.mainType,\n        mainTypeId: data.mainTypeId,\n        relType: data.relType,\n        relTypeIds\n      }\n    })\n      .then(() => {\n        if (onSelect) {\n          onSelect(relTypes);\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  if (props.data.options) {\n    return <ItemChooser {...props} onSelect={onSelected} />;\n  }\n\n  return <Chooser {...props} onSelect={onSelected} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      EditConformityMutation,\n      IConformityEdit & { isSaved?: boolean }\n    >(gql(mutations.conformityEdit), {\n      name: 'editConformityMutation',\n      options: ({ data, refetchQuery }) => {\n        return {\n          refetchQueries: [\n            {\n              query: gql(refetchQuery),\n              variables: {\n                mainType: data.mainType,\n                mainTypeId: data.mainTypeId,\n                relType: data.relType,\n                isSaved: true\n              }\n            },\n            'activityLogs',\n            'customers',\n            'companies'\n          ]\n        };\n      }\n    })\n  )(ConformityChooser)\n);\n"]},"metadata":{},"sourceType":"module"}