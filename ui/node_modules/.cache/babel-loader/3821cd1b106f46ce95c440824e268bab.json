{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/AvatarUpload.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100px;\\n  height: 100px;\\n  position: relative;\\n  margin-bottom: 20px;\\n  display: flex;\\n  align-items: center;\\n  overflow: hidden;\\n  border-radius: 50%;\\n\\n  label {\\n    color: \", \";\\n    transition: background 0.3s ease;\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    z-index: 2;\\n\\n    i {\\n      visibility: hidden;\\n      opacity: 0;\\n      transition: all 0.3s ease;\\n    }\\n\\n    &:hover {\\n      cursor: pointer;\\n      background-color: rgba(0, 0, 0, 0.4);\\n\\n      i {\\n        visibility: visible;\\n        opacity: 1;\\n      }\\n    }\\n  }\\n\\n  input[type='file'] {\\n    display: none;\\n  }\\n\\n  img {\\n    display: block;\\n    width: 100%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { colors } from 'modules/common/styles';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Alert, readFile, uploadHandler } from '../utils';\nimport Spinner from './Spinner';\nvar Avatar = styled.div(_templateObject(), colors.colorWhite);\n\nvar AvatarUpload =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AvatarUpload, _React$Component);\n\n  function AvatarUpload(props, context) {\n    var _this;\n\n    _classCallCheck(this, AvatarUpload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AvatarUpload).call(this, props, context));\n\n    _this.setUploadPreview = function (uploadPreview) {\n      _this.setState({\n        uploadPreview: uploadPreview\n      });\n    };\n\n    _this.handleImageChange = function (e) {\n      var imageFile = e.target.files;\n      uploadHandler({\n        files: imageFile,\n        beforeUpload: function beforeUpload() {\n          _this.setState({\n            avatarPreviewStyle: {\n              opacity: '0.2'\n            }\n          });\n        },\n        afterUpload: function afterUpload(_ref) {\n          var response = _ref.response,\n              status = _ref.status;\n\n          _this.setState({\n            avatarPreviewStyle: {\n              opacity: '1'\n            }\n          }); // call success event\n\n\n          _this.props.onAvatarUpload(response); // remove preview\n\n\n          if (_this.setUploadPreview) {\n            _this.setUploadPreview(null);\n          }\n\n          if (status === 'ok') {\n            Alert.info('Looking good!');\n          } else {\n            Alert.error(response);\n          }\n        },\n        afterRead: function afterRead(_ref2) {\n          var result = _ref2.result,\n              fileInfo = _ref2.fileInfo;\n\n          if (_this.setUploadPreview) {\n            _this.setUploadPreview(Object.assign({\n              data: result\n            }, fileInfo));\n          }\n\n          _this.setState({\n            avatarPreviewUrl: result\n          });\n        }\n      });\n    };\n\n    var defaultAvatar = props.defaultAvatar || '/images/avatar-colored.svg';\n    _this.state = {\n      avatarPreviewUrl: _this.props.avatar || defaultAvatar,\n      avatarPreviewStyle: {},\n      uploadPreview: null\n    };\n    return _this;\n  }\n\n  _createClass(AvatarUpload, [{\n    key: \"renderUploadLoader\",\n    value: function renderUploadLoader() {\n      if (!this.state.uploadPreview) {\n        return null;\n      }\n\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          avatarPreviewStyle = _this$state.avatarPreviewStyle,\n          avatarPreviewUrl = _this$state.avatarPreviewUrl;\n      return React.createElement(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"avatar\",\n        style: avatarPreviewStyle,\n        src: readFile(avatarPreviewUrl),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"export\",\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.handleImageChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), this.renderUploadLoader());\n    }\n  }]);\n\n  return AvatarUpload;\n}(React.Component);\n\nexport default AvatarUpload;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/AvatarUpload.tsx"],"names":["colors","Icon","React","styled","Alert","readFile","uploadHandler","Spinner","Avatar","div","colorWhite","AvatarUpload","props","context","setUploadPreview","uploadPreview","setState","handleImageChange","e","imageFile","target","files","beforeUpload","avatarPreviewStyle","opacity","afterUpload","response","status","onAvatarUpload","info","error","afterRead","result","fileInfo","Object","assign","data","avatarPreviewUrl","defaultAvatar","state","avatar","renderUploadLoader","Component"],"mappings":"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","sourcesContent":["import { colors } from 'modules/common/styles';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Alert, readFile, uploadHandler } from '../utils';\nimport Spinner from './Spinner';\n\nconst Avatar = styled.div`\n  width: 100px;\n  height: 100px;\n  position: relative;\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  border-radius: 50%;\n\n  label {\n    color: ${colors.colorWhite};\n    transition: background 0.3s ease;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 2;\n\n    i {\n      visibility: hidden;\n      opacity: 0;\n      transition: all 0.3s ease;\n    }\n\n    &:hover {\n      cursor: pointer;\n      background-color: rgba(0, 0, 0, 0.4);\n\n      i {\n        visibility: visible;\n        opacity: 1;\n      }\n    }\n  }\n\n  input[type='file'] {\n    display: none;\n  }\n\n  img {\n    display: block;\n    width: 100%;\n  }\n`;\n\ntype Props = {\n  avatar?: string;\n  defaultAvatar?: string;\n  onAvatarUpload: (response: any) => void;\n};\n\ntype State = {\n  avatarPreviewStyle: any;\n  avatarPreviewUrl: string;\n  uploadPreview: any;\n};\n\nclass AvatarUpload extends React.Component<Props, State> {\n  constructor(props, context) {\n    super(props, context);\n\n    const defaultAvatar = props.defaultAvatar || '/images/avatar-colored.svg';\n\n    this.state = {\n      avatarPreviewUrl: this.props.avatar || defaultAvatar,\n      avatarPreviewStyle: {},\n      uploadPreview: null\n    };\n  }\n\n  setUploadPreview = uploadPreview => {\n    this.setState({ uploadPreview });\n  };\n\n  handleImageChange = e => {\n    const imageFile = e.target.files;\n\n    uploadHandler({\n      files: imageFile,\n\n      beforeUpload: () => {\n        this.setState({ avatarPreviewStyle: { opacity: '0.2' } });\n      },\n\n      afterUpload: ({ response, status }) => {\n        this.setState({\n          avatarPreviewStyle: { opacity: '1' }\n        });\n\n        // call success event\n        this.props.onAvatarUpload(response);\n\n        // remove preview\n        if (this.setUploadPreview) {\n          this.setUploadPreview(null);\n        }\n\n        if (status === 'ok') {\n          Alert.info('Looking good!');\n        } else {\n          Alert.error(response);\n        }\n      },\n\n      afterRead: ({ result, fileInfo }) => {\n        if (this.setUploadPreview) {\n          this.setUploadPreview(Object.assign({ data: result }, fileInfo));\n        }\n        this.setState({\n          avatarPreviewUrl: result\n        });\n      }\n    });\n  };\n\n  renderUploadLoader() {\n    if (!this.state.uploadPreview) {\n      return null;\n    }\n\n    return <Spinner />;\n  }\n\n  render() {\n    const { avatarPreviewStyle, avatarPreviewUrl } = this.state;\n\n    return (\n      <Avatar>\n        <img\n          alt=\"avatar\"\n          style={avatarPreviewStyle}\n          src={readFile(avatarPreviewUrl)}\n        />\n        <label>\n          <Icon icon=\"export\" size={30} />\n          <input type=\"file\" onChange={this.handleImageChange} />\n        </label>\n        {this.renderUploadLoader()}\n      </Avatar>\n    );\n  }\n}\n\nexport default AvatarUpload;\n"]},"metadata":{},"sourceType":"module"}