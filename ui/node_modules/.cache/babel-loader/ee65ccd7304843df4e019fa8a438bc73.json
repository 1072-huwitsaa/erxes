{"ast":null,"code":"import gql from 'graphql-tag';\nimport queryString from 'query-string';\nimport { queries } from './graphql';\nexport var generateParams = function generateParams(queryParams) {\n  return {\n    limit: queryParams.limit ? parseInt(queryParams.limit, 10) : 10,\n    channelId: queryParams.channelId,\n    status: queryParams.status,\n    unassigned: queryParams.unassigned,\n    brandId: queryParams.brandId,\n    tag: queryParams.tag,\n    integrationType: queryParams.integrationType,\n    participating: queryParams.participating,\n    starred: queryParams.starred,\n    startDate: queryParams.startDate,\n    endDate: queryParams.endDate,\n    awaitingResponse: queryParams.awaitingResponse\n  };\n};\nexport var refetchSidebarConversationsOptions = function refetchSidebarConversationsOptions() {\n  var queryParams = queryString.parse(window.location.search);\n  return {\n    refetchQueries: [{\n      query: gql(queries.sidebarConversations),\n      variables: generateParams(queryParams)\n    }]\n  };\n};\nexport var getConfig = function getConfig(key) {\n  var sidebarConfig = localStorage.getItem(key);\n\n  if (sidebarConfig) {\n    return JSON.parse(sidebarConfig);\n  }\n};\nexport var setConfig = function setConfig(key, params) {\n  localStorage.setItem(key, JSON.stringify(params));\n};\nexport var isConversationMailKind = function isConversationMailKind(conversation) {\n  // const integration = conversation.integration ? conversation.integration || {};\n  var integration = conversation.integration || {};\n  var kind = integration.kind;\n\n  if (!kind) {\n    return false;\n  }\n\n  return kind === 'gmail' || kind.includes('nylas');\n};\n/**\n * Exctract string from to, cc, bcc\n * ex: Name <user@mail.com>\n */\n\nexport var extractEmail = function extractEmail(str) {\n  if (!str || str.length === 0) {\n    return '';\n  } // eslint-disable-next-line\n\n\n  var emailRegex = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/g;\n  var emails = str.match(emailRegex);\n\n  if (!emails) {\n    return '';\n  }\n\n  return emails.join(' ');\n};\nexport var urlify = function urlify(text) {\n  // validate url except html a tag\n  var urlRegex = /(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w-]+)+[\\w\\-_~:/?#[\\]@!&',;=.]+(?![^<>]*>|[^\"]*?<\\/a)/g;\n  return text.replace(urlRegex, function (url) {\n    if (url.startsWith('http')) {\n      return \"<a href=\\\"\".concat(url, \"\\\" target=\\\"_blank\\\">\").concat(url, \"</a>\");\n    }\n\n    return \"<a href=\\\"http://\".concat(url, \"\\\" target=\\\"_blank\\\">\").concat(url, \"</a>\");\n  });\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/utils.ts"],"names":["gql","queryString","queries","generateParams","queryParams","limit","parseInt","channelId","status","unassigned","brandId","tag","integrationType","participating","starred","startDate","endDate","awaitingResponse","refetchSidebarConversationsOptions","parse","window","location","search","refetchQueries","query","sidebarConversations","variables","getConfig","key","sidebarConfig","localStorage","getItem","JSON","setConfig","params","setItem","stringify","isConversationMailKind","conversation","integration","kind","includes","extractEmail","str","length","emailRegex","emails","match","join","urlify","text","urlRegex","replace","url","startsWith"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport queryString from 'query-string';\nimport { queries } from './graphql';\nimport { IConversation } from './types';\n\nexport const generateParams = queryParams => ({\n  limit: queryParams.limit ? parseInt(queryParams.limit, 10) : 10,\n  channelId: queryParams.channelId,\n  status: queryParams.status,\n  unassigned: queryParams.unassigned,\n  brandId: queryParams.brandId,\n  tag: queryParams.tag,\n  integrationType: queryParams.integrationType,\n  participating: queryParams.participating,\n  starred: queryParams.starred,\n  startDate: queryParams.startDate,\n  endDate: queryParams.endDate,\n  awaitingResponse: queryParams.awaitingResponse\n});\n\nexport const refetchSidebarConversationsOptions = () => {\n  const queryParams = queryString.parse(window.location.search);\n\n  return {\n    refetchQueries: [\n      {\n        query: gql(queries.sidebarConversations),\n        variables: generateParams(queryParams)\n      }\n    ]\n  };\n};\n\nexport const getConfig = (key: string) => {\n  const sidebarConfig = localStorage.getItem(key);\n\n  if (sidebarConfig) {\n    return JSON.parse(sidebarConfig);\n  }\n};\n\nexport const setConfig = (key, params) => {\n  localStorage.setItem(key, JSON.stringify(params));\n};\n\nexport const isConversationMailKind = (conversation: IConversation) => {\n  // const integration = conversation.integration ? conversation.integration || {};\n  const integration = conversation.integration || {};\n  const { kind } = integration;\n\n  if (!kind) {\n    return false;\n  }\n\n  return kind === 'gmail' || kind.includes('nylas');\n};\n\n/**\n * Exctract string from to, cc, bcc\n * ex: Name <user@mail.com>\n */\nexport const extractEmail = (str?: string) => {\n  if (!str || str.length === 0) {\n    return '';\n  }\n\n  // eslint-disable-next-line\n  const emailRegex = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/g;\n  const emails = str.match(emailRegex);\n\n  if (!emails) {\n    return '';\n  }\n\n  return emails.join(' ');\n};\n\nexport const urlify = (text: string) => {\n  // validate url except html a tag\n  const urlRegex = /(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w-]+)+[\\w\\-_~:/?#[\\]@!&',;=.]+(?![^<>]*>|[^\"]*?<\\/a)/g;\n\n  return text.replace(urlRegex, url => {\n    if (url.startsWith('http')) {\n      return `<a href=\"${url}\" target=\"_blank\">${url}</a>`;\n    }\n\n    return `<a href=\"http://${url}\" target=\"_blank\">${url}</a>`;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}