{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/tags/containers/List.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport List from '../components/List';\nimport { mutations, queries } from '../graphql';\n\nvar ListContainer = function ListContainer(props) {\n  var tagsQuery = props.tagsQuery,\n      removeMutation = props.removeMutation,\n      type = props.type;\n\n  var remove = function remove(tag) {\n    confirm().then(function () {\n      removeMutation({\n        variables: {\n          ids: [tag._id]\n        }\n      }).then(function () {\n        Alert.success('You successfully deleted a tag');\n        tagsQuery.refetch();\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback,\n        object = _ref.object;\n    return React.createElement(ButtonMutate, {\n      mutation: object ? mutations.edit : mutations.add,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(type),\n      isSubmitted: isSubmitted,\n      uppercase: false,\n      type: \"submit\",\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    tags: tagsQuery.tags || [],\n    loading: tagsQuery.loading,\n    type: type,\n    remove: remove,\n    renderButton: renderButton\n  });\n\n  return React.createElement(List, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries(type) {\n  return [{\n    query: gql(queries.tags),\n    variables: {\n      type: type\n    }\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.tags), {\n  name: 'tagsQuery',\n  options: function options(_ref2) {\n    var type = _ref2.type;\n    return {\n      variables: {\n        type: type\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.remove), {\n  name: 'removeMutation',\n  options: function options(_ref3) {\n    var type = _ref3.type;\n    return {\n      refetchQueries: getRefetchQueries(type)\n    };\n  }\n}))(ListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/tags/containers/List.tsx"],"names":["gql","compose","ButtonMutate","Alert","confirm","withProps","React","graphql","List","mutations","queries","ListContainer","props","tagsQuery","removeMutation","type","remove","tag","then","variables","ids","_id","success","refetch","catch","e","error","message","renderButton","name","values","isSubmitted","callback","object","edit","add","getRefetchQueries","updatedProps","tags","loading","query","options","fetchPolicy","refetchQueries"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,sBAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;AAYA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAuB;AAAA,MACnCC,SADmC,GACCD,KADD,CACnCC,SADmC;AAAA,MACxBC,cADwB,GACCF,KADD,CACxBE,cADwB;AAAA,MACRC,IADQ,GACCH,KADD,CACRG,IADQ;;AAG3C,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,GAAG,EAAI;AACpBb,IAAAA,OAAO,GACJc,IADH,CACQ,YAAM;AACVJ,MAAAA,cAAc,CAAC;AAAEK,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAE,CAACH,GAAG,CAACI,GAAL;AAAP;AAAb,OAAD,CAAd,CACGH,IADH,CACQ,YAAM;AACVf,QAAAA,KAAK,CAACmB,OAAN,CAAc,gCAAd;AACAT,QAAAA,SAAS,CAACU,OAAV;AACD,OAJH,EAKGC,KALH,CAKS,UAAAC,CAAC,EAAI;AACVtB,QAAAA,KAAK,CAACuB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,OAPH;AAQD,KAVH,EAWGH,KAXH,CAWS,UAAAC,CAAC,EAAI;AACVtB,MAAAA,KAAK,CAACuB,KAAN,CAAYD,CAAC,CAACE,OAAd;AACD,KAbH;AAcD,GAfD;;AAiBA,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAMK;AAAA,QALxBC,IAKwB,QALxBA,IAKwB;AAAA,QAJxBC,MAIwB,QAJxBA,MAIwB;AAAA,QAHxBC,WAGwB,QAHxBA,WAGwB;AAAA,QAFxBC,QAEwB,QAFxBA,QAEwB;AAAA,QADxBC,MACwB,QADxBA,MACwB;AACxB,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEA,MAAM,GAAGxB,SAAS,CAACyB,IAAb,GAAoBzB,SAAS,CAAC0B,GADhD;AAEE,MAAA,SAAS,EAAEL,MAFb;AAGE,MAAA,QAAQ,EAAEE,QAHZ;AAIE,MAAA,cAAc,EAAEI,iBAAiB,CAACrB,IAAD,CAJnC;AAKE,MAAA,WAAW,EAAEgB,WALf;AAME,MAAA,SAAS,EAAE,KANb;AAOE,MAAA,IAAI,EAAC,QAPP;AAQE,MAAA,cAAc,6BACZE,MAAM,GAAG,SAAH,GAAe,OADT,gBAERJ,IAFQ,CARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAcD,GArBD;;AAuBA,MAAMQ,YAAY,qBACbzB,KADa;AAEhB0B,IAAAA,IAAI,EAAEzB,SAAS,CAACyB,IAAV,IAAkB,EAFR;AAGhBC,IAAAA,OAAO,EAAE1B,SAAS,CAAC0B,OAHH;AAIhBxB,IAAAA,IAAI,EAAJA,IAJgB;AAKhBC,IAAAA,MAAM,EAANA,MALgB;AAMhBY,IAAAA,YAAY,EAAZA;AANgB,IAAlB;;AASA,SAAO,oBAAC,IAAD,oBAAUS,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArDD;;AAuDA,IAAMD,iBAAiB,GAAG,SAApBA,iBAAoB,CAACrB,IAAD,EAAkB;AAC1C,SAAO,CACL;AACEyB,IAAAA,KAAK,EAAExC,GAAG,CAACU,OAAO,CAAC4B,IAAT,CADZ;AAEEnB,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,IAAI,EAAJA;AAAF;AAFb,GADK,CAAP;AAMD,CAPD;;AASA,eAAeV,SAAS,CACtBJ,OAAO,CACLM,OAAO,CAA6CP,GAAG,CAACU,OAAO,CAAC4B,IAAT,CAAhD,EAAgE;AACrET,EAAAA,IAAI,EAAE,WAD+D;AAErEY,EAAAA,OAAO,EAAE;AAAA,QAAG1B,IAAH,SAAGA,IAAH;AAAA,WAAe;AACtBI,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,IAAI,EAAJA;AAAF,OADW;AAEtB2B,MAAAA,WAAW,EAAE;AAFS,KAAf;AAAA;AAF4D,CAAhE,CADF,EAQLnC,OAAO,CACLP,GAAG,CAACS,SAAS,CAACO,MAAX,CADE,EAEL;AACEa,EAAAA,IAAI,EAAE,gBADR;AAEEY,EAAAA,OAAO,EAAE;AAAA,QAAG1B,IAAH,SAAGA,IAAH;AAAA,WAAsB;AAC7B4B,MAAAA,cAAc,EAAEP,iBAAiB,CAACrB,IAAD;AADJ,KAAtB;AAAA;AAFX,CAFK,CARF,CAAP,CAiBEJ,aAjBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport List from '../components/List';\nimport { mutations, queries } from '../graphql';\nimport { RemoveMutationResponse, TagsQueryResponse } from '../types';\n\ntype Props = {\n  type: string;\n};\n\ntype FinalProps = {\n  tagsQuery: TagsQueryResponse;\n} & Props &\n  RemoveMutationResponse;\n\nconst ListContainer = (props: FinalProps) => {\n  const { tagsQuery, removeMutation, type } = props;\n\n  const remove = tag => {\n    confirm()\n      .then(() => {\n        removeMutation({ variables: { ids: [tag._id] } })\n          .then(() => {\n            Alert.success('You successfully deleted a tag');\n            tagsQuery.refetch();\n          })\n          .catch(e => {\n            Alert.error(e.message);\n          });\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={object ? mutations.edit : mutations.add}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries(type)}\n        isSubmitted={isSubmitted}\n        uppercase={false}\n        type=\"submit\"\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    tags: tagsQuery.tags || [],\n    loading: tagsQuery.loading,\n    type,\n    remove,\n    renderButton\n  };\n\n  return <List {...updatedProps} />;\n};\n\nconst getRefetchQueries = (type: string) => {\n  return [\n    {\n      query: gql(queries.tags),\n      variables: { type }\n    }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, TagsQueryResponse, { type: string }>(gql(queries.tags), {\n      name: 'tagsQuery',\n      options: ({ type }) => ({\n        variables: { type },\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, RemoveMutationResponse, { ids: string[] }>(\n      gql(mutations.remove),\n      {\n        name: 'removeMutation',\n        options: ({ type }: Props) => ({\n          refetchQueries: getRefetchQueries(type)\n        })\n      }\n    )\n  )(ListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}