{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/telnyx/SmsForm.tsx\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  justify-content: flex-end;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  font-weight: bold;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Button from 'erxes-common-ui/lib/components/button';\nimport FormControl from 'modules/common/components/form/Control';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport colors from 'modules/common/styles/colors';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport Select from 'react-select-plus';\nimport styled from 'styled-components';\nimport styledTS from 'styled-components-ts';\nvar SMSInfo = styled.div(_templateObject());\nvar Char = styledTS(styled.div)(_templateObject2(), function (props) {\n  return props.count > 10 ? props.count < 30 && colors.colorCoreOrange : colors.colorCoreRed;\n});\nvar ButtonWrapper = styled(SMSInfo)(_templateObject3());\n\nvar SmsForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SmsForm, _React$Component);\n\n  function SmsForm(props) {\n    var _this;\n\n    _classCallCheck(this, SmsForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SmsForm).call(this, props));\n\n    _this.fromSelectOptions = function () {\n      var integrations = _this.props.integrations;\n      var options = [];\n      integrations.map(function (i) {\n        return options.push({\n          value: i._id,\n          label: \"\".concat(i.name, \" (\").concat(i.phoneNumber, \")\"),\n          disabled: !i.isActive\n        });\n      });\n      return options;\n    };\n\n    _this.fromOptionRenderer = function (option) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, option.name), \" \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, option.label));\n    };\n\n    _this.state = {\n      characterCount: 160,\n      message: '',\n      integrationId: ''\n    };\n    return _this;\n  }\n\n  _createClass(SmsForm, [{\n    key: \"calcCharacterCount\",\n    value: function calcCharacterCount(maxChar, character) {\n      if (!character) {\n        return maxChar;\n      }\n\n      return maxChar - character.length;\n    }\n  }, {\n    key: \"renderSubmitButton\",\n    value: function renderSubmitButton() {\n      var _this$props = this.props,\n          primaryPhone = _this$props.primaryPhone,\n          sendSms = _this$props.sendSms;\n      var _this$state = this.state,\n          integrationId = _this$state.integrationId,\n          message = _this$state.message;\n      var hasContent = integrationId && message;\n\n      var onClick = function onClick() {\n        return sendSms(integrationId, message, primaryPhone);\n      };\n\n      return React.createElement(ButtonWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: onClick,\n        btnStyle: \"primary\",\n        size: \"small\",\n        icon: \"message\",\n        disabled: hasContent === '' || !primaryPhone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __('Send')));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var characterCount = this.state.characterCount;\n\n      var onChangeContent = function onChangeContent(e) {\n        return _this2.setState({\n          message: e.target.value\n        });\n      };\n\n      var onChangeFrom = function onChangeFrom(value) {\n        var userId = value ? value.value : '';\n\n        _this2.setState({\n          integrationId: userId\n        });\n      };\n\n      var onChangeSmsContent = function onChangeSmsContent(e) {\n        var content = e.target.value;\n\n        _this2.setState({\n          message: content,\n          characterCount: _this2.calcCharacterCount(160, content)\n        });\n      };\n\n      return React.createElement(React.Fragment, null, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"From:\"), React.createElement(Select, {\n        placeholder: __('Choose phone number'),\n        value: this.state.integrationId,\n        onChange: onChangeFrom,\n        options: this.fromSelectOptions(),\n        optionRenderer: this.fromOptionRenderer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(SMSInfo, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, __('SMS content'), \":\"), React.createElement(Char, {\n        count: characterCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, characterCount)), React.createElement(FormControl, {\n        componentClass: \"textarea\",\n        defaultValue: this.state.message,\n        onBlur: onChangeContent,\n        onChange: onChangeSmsContent // sms part max size\n        ,\n        maxLength: 160,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      })), this.renderSubmitButton());\n    }\n  }]);\n\n  return SmsForm;\n}(React.Component);\n\nexport default SmsForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/telnyx/SmsForm.tsx"],"names":["Button","FormControl","FormGroup","ControlLabel","colors","__","React","Select","styled","styledTS","SMSInfo","div","Char","props","count","colorCoreOrange","colorCoreRed","ButtonWrapper","SmsForm","fromSelectOptions","integrations","options","map","i","push","value","_id","label","name","phoneNumber","disabled","isActive","fromOptionRenderer","option","state","characterCount","message","integrationId","maxChar","character","length","primaryPhone","sendSms","hasContent","onClick","onChangeContent","e","setState","target","onChangeFrom","userId","onChangeSmsContent","content","calcCharacterCount","renderSubmitButton","Component"],"mappings":"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","sourcesContent":["import Button from 'erxes-common-ui/lib/components/button';\nimport FormControl from 'modules/common/components/form/Control';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport colors from 'modules/common/styles/colors';\nimport { ISelectedOption } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport { IIntegrationWithPhone } from 'modules/engage/types';\nimport React from 'react';\nimport Select from 'react-select-plus';\nimport styled from 'styled-components';\nimport styledTS from 'styled-components-ts';\n\nconst SMSInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Char = styledTS<{ count: number }>(styled.div)`\n  color: ${props =>\n    props.count > 10\n      ? props.count < 30 && colors.colorCoreOrange\n      : colors.colorCoreRed};\n  font-weight: bold;\n`;\n\nconst ButtonWrapper = styled(SMSInfo)`\n  justify-content: flex-end;\n`;\n\ntype Props = {\n  sendSms: (integrationId: string, message: string, to: string) => any;\n  integrations: IIntegrationWithPhone[];\n  primaryPhone: string;\n};\n\ntype State = {\n  integrationId: string;\n  characterCount: number;\n  message: string;\n};\n\nclass SmsForm extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      characterCount: 160,\n      message: '',\n      integrationId: ''\n    };\n  }\n\n  calcCharacterCount(maxChar: number, character?: string) {\n    if (!character) {\n      return maxChar;\n    }\n\n    return maxChar - character.length;\n  }\n\n  fromSelectOptions = () => {\n    const { integrations } = this.props;\n    const options: any[] = [];\n\n    integrations.map(i =>\n      options.push({\n        value: i._id,\n        label: `${i.name} (${i.phoneNumber})`,\n        disabled: !i.isActive\n      })\n    );\n\n    return options;\n  };\n\n  fromOptionRenderer = option => (\n    <div>\n      <strong>{option.name}</strong> <i>{option.label}</i>\n    </div>\n  );\n\n  renderSubmitButton() {\n    const { primaryPhone, sendSms } = this.props;\n    const { integrationId, message } = this.state;\n    const hasContent = integrationId && message;\n\n    const onClick = () => sendSms(integrationId, message, primaryPhone);\n\n    return (\n      <ButtonWrapper>\n        <Button\n          onClick={onClick}\n          btnStyle=\"primary\"\n          size=\"small\"\n          icon=\"message\"\n          disabled={hasContent === '' || !primaryPhone}\n        >\n          {__('Send')}\n        </Button>\n      </ButtonWrapper>\n    );\n  }\n\n  render() {\n    const { characterCount } = this.state;\n\n    const onChangeContent = e =>\n      this.setState({ message: (e.target as HTMLInputElement).value });\n\n    const onChangeFrom = (value: ISelectedOption) => {\n      const userId = value ? value.value : '';\n\n      this.setState({ integrationId: userId });\n    };\n\n    const onChangeSmsContent = e => {\n      const content = (e.target as HTMLInputElement).value;\n\n      this.setState({\n        message: content,\n        characterCount: this.calcCharacterCount(160, content)\n      });\n    };\n\n    return (\n      <>\n        <FormGroup>\n          <ControlLabel>From:</ControlLabel>\n          <Select\n            placeholder={__('Choose phone number')}\n            value={this.state.integrationId}\n            onChange={onChangeFrom}\n            options={this.fromSelectOptions()}\n            optionRenderer={this.fromOptionRenderer}\n          />\n        </FormGroup>\n        <FormGroup>\n          <SMSInfo>\n            <ControlLabel>{__('SMS content')}:</ControlLabel>\n            <Char count={characterCount}>{characterCount}</Char>\n          </SMSInfo>\n          <FormControl\n            componentClass=\"textarea\"\n            defaultValue={this.state.message}\n            onBlur={onChangeContent}\n            onChange={onChangeSmsContent}\n            // sms part max size\n            maxLength={160}\n          />\n        </FormGroup>\n        {this.renderSubmitButton()}\n      </>\n    );\n  }\n}\n\nexport default SmsForm;\n"]},"metadata":{},"sourceType":"module"}