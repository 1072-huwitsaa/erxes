{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { generatePaginationParams } from 'modules/common/utils/router';\nexport var generateListQueryVariables = function generateListQueryVariables(_ref) {\n  var queryParams = _ref.queryParams;\n  return _objectSpread({}, generatePaginationParams(queryParams), {\n    kind: queryParams.kind,\n    status: queryParams.status,\n    tag: queryParams.tag,\n    ids: queryParams.ids\n  });\n};\nexport var crudMutationsOptions = function crudMutationsOptions() {\n  return {\n    refetchQueries: ['engageMessages', 'engageMessagesTotalCount', 'kindCounts', 'statusCounts']\n  };\n};\nexport var generateEmailTemplateParams = function generateEmailTemplateParams(emailTemplates) {\n  return emailTemplates.map(function (template) {\n    return {\n      value: template._id,\n      label: template.name\n    };\n  });\n};\n/**\n * Sum selected item's customers count\n * @param ids - customer ids\n * @param countValues - customer counts\n */\n\nexport var sumCounts = function sumCounts(ids, countValues) {\n  var sum = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var id = _step.value;\n      sum += countValues[id];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return sum;\n};","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/utils.ts"],"names":["generatePaginationParams","generateListQueryVariables","queryParams","kind","status","tag","ids","crudMutationsOptions","refetchQueries","generateEmailTemplateParams","emailTemplates","map","template","value","_id","label","name","sumCounts","countValues","sum","id"],"mappings":";AAAA,SAASA,wBAAT,QAAyC,6BAAzC;AAGA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B;AAAA,MAAGC,WAAH,QAAGA,WAAH;AAAA,2BACrCF,wBAAwB,CAACE,WAAD,CADa;AAExCC,IAAAA,IAAI,EAAED,WAAW,CAACC,IAFsB;AAGxCC,IAAAA,MAAM,EAAEF,WAAW,CAACE,MAHoB;AAIxCC,IAAAA,GAAG,EAAEH,WAAW,CAACG,GAJuB;AAKxCC,IAAAA,GAAG,EAAEJ,WAAW,CAACI;AALuB;AAAA,CAAnC;AAQP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACxC,SAAO;AACLC,IAAAA,cAAc,EAAE,CACd,gBADc,EAEd,0BAFc,EAGd,YAHc,EAId,cAJc;AADX,GAAP;AAQD,CATM;AAWP,OAAO,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAAC,cAAc,EAAI;AAC3D,SAAOA,cAAc,CAACC,GAAf,CAAmB,UAAAC,QAAQ;AAAA,WAAK;AACrCC,MAAAA,KAAK,EAAED,QAAQ,CAACE,GADqB;AAErCC,MAAAA,KAAK,EAAEH,QAAQ,CAACI;AAFqB,KAAL;AAAA,GAA3B,CAAP;AAID,CALM;AAOP;;;;;;AAKA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACX,GAAD,EAAgBY,WAAhB,EAAqD;AAC5E,MAAIC,GAAG,GAAG,CAAV;AAD4E;AAAA;AAAA;;AAAA;AAG5E,yBAAiBb,GAAjB,8HAAsB;AAAA,UAAXc,EAAW;AACpBD,MAAAA,GAAG,IAAID,WAAW,CAACE,EAAD,CAAlB;AACD;AAL2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO5E,SAAOD,GAAP;AACD,CARM","sourcesContent":["import { generatePaginationParams } from 'modules/common/utils/router';\nimport { TargetCount } from 'modules/engage/types';\n\nexport const generateListQueryVariables = ({ queryParams }) => ({\n  ...generatePaginationParams(queryParams),\n  kind: queryParams.kind,\n  status: queryParams.status,\n  tag: queryParams.tag,\n  ids: queryParams.ids\n});\n\nexport const crudMutationsOptions = () => {\n  return {\n    refetchQueries: [\n      'engageMessages',\n      'engageMessagesTotalCount',\n      'kindCounts',\n      'statusCounts'\n    ]\n  };\n};\n\nexport const generateEmailTemplateParams = emailTemplates => {\n  return emailTemplates.map(template => ({\n    value: template._id,\n    label: template.name\n  }));\n};\n\n/**\n * Sum selected item's customers count\n * @param ids - customer ids\n * @param countValues - customer counts\n */\nexport const sumCounts = (ids: string[], countValues: TargetCount): number => {\n  let sum = 0;\n\n  for (const id of ids) {\n    sum += countValues[id];\n  }\n\n  return sum;\n};\n"]},"metadata":{},"sourceType":"module"}