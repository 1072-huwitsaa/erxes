{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/notifications/context.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, sendDesktopNotification } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport strip from 'strip';\nimport { mutations, queries, subscriptions } from './graphql';\nvar NotifContext = React.createContext({});\nexport var NotifConsumer = NotifContext.Consumer;\n\nvar Provider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Provider, _React$Component);\n\n  function Provider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Provider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Provider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.unsubscribe = void 0;\n\n    _this.markAsRead = function (notificationIds) {\n      var _this$props = _this.props,\n          notificationsMarkAsReadMutation = _this$props.notificationsMarkAsReadMutation,\n          notificationsQuery = _this$props.notificationsQuery,\n          notificationCountQuery = _this$props.notificationCountQuery;\n      notificationsMarkAsReadMutation({\n        variables: {\n          _ids: notificationIds\n        }\n      }).then(function () {\n        notificationsQuery.refetch();\n        notificationCountQuery.refetch();\n        Alert.success('Notifications have been seen');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    };\n\n    _this.showNotifications = function (requireRead) {\n      var notificationsQuery = _this.props.notificationsQuery;\n      notificationsQuery.refetch({\n        limit: 10,\n        requireRead: requireRead\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Provider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2 = this.props,\n          notificationsQuery = _this$props2.notificationsQuery,\n          notificationCountQuery = _this$props2.notificationCountQuery,\n          currentUser = _this$props2.currentUser;\n      this.unsubscribe = notificationsQuery.subscribeToMore({\n        document: gql(subscriptions.notificationSubscription),\n        variables: {\n          userId: currentUser ? currentUser._id : null\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var data = _ref.subscriptionData.data;\n          var notificationInserted = data.notificationInserted;\n          var title = notificationInserted.title,\n              content = notificationInserted.content;\n          sendDesktopNotification({\n            title: title,\n            content: strip(content || '')\n          });\n          notificationsQuery.refetch();\n          notificationCountQuery.refetch();\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          notificationsQuery = _this$props3.notificationsQuery,\n          notificationCountQuery = _this$props3.notificationCountQuery;\n      var notifications = notificationsQuery.notifications || [];\n      var isLoading = notificationsQuery.loading;\n      var unreadCount = notificationCountQuery.notificationCounts || 0;\n      return React.createElement(NotifContext.Provider, {\n        value: {\n          notifications: notifications,\n          unreadCount: unreadCount,\n          showNotifications: this.showNotifications,\n          markAsRead: this.markAsRead,\n          isLoading: isLoading\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return Provider;\n}(React.Component);\n\nexport var NotifProvider = compose(graphql(gql(queries.notifications), {\n  name: 'notificationsQuery',\n  options: function options() {\n    return {\n      variables: {\n        limit: 10,\n        requireRead: false\n      }\n    };\n  }\n}), graphql(gql(queries.notificationCounts), {\n  name: 'notificationCountQuery',\n  options: function options() {\n    return {\n      variables: {\n        requireRead: true\n      }\n    };\n  }\n}), graphql(gql(mutations.markAsRead), {\n  name: 'notificationsMarkAsReadMutation',\n  options: {\n    refetchQueries: function refetchQueries() {\n      return ['notificationCounts'];\n    }\n  }\n}))(Provider);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/notifications/context.tsx"],"names":["gql","compose","Alert","sendDesktopNotification","React","graphql","strip","mutations","queries","subscriptions","NotifContext","createContext","NotifConsumer","Consumer","Provider","unsubscribe","markAsRead","notificationIds","props","notificationsMarkAsReadMutation","notificationsQuery","notificationCountQuery","variables","_ids","then","refetch","success","catch","error","message","showNotifications","requireRead","limit","currentUser","subscribeToMore","document","notificationSubscription","userId","_id","updateQuery","prev","data","subscriptionData","notificationInserted","title","content","notifications","isLoading","loading","unreadCount","notificationCounts","children","Component","NotifProvider","name","options","refetchQueries"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { Alert, sendDesktopNotification } from 'modules/common/utils';\nimport {\n  INotification,\n  MarkAsReadMutationResponse\n} from 'modules/notifications/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport strip from 'strip';\nimport { mutations, queries, subscriptions } from './graphql';\nimport {\n  NotificationsCountQueryResponse,\n  NotificationsQueryResponse\n} from './types';\n\ninterface IStore {\n  notifications: INotification[];\n  unreadCount: number;\n  showNotifications: (requireRead: boolean) => void;\n  markAsRead: (notificationIds?: string[]) => void;\n  isLoading: boolean;\n}\n\ntype Props = {\n  currentUser: IUser;\n};\n\ntype FinalProps = {\n  notificationsQuery: NotificationsQueryResponse;\n  notificationCountQuery: NotificationsCountQueryResponse;\n} & Props &\n  MarkAsReadMutationResponse;\n\nconst NotifContext = React.createContext({} as IStore);\n\nexport const NotifConsumer = NotifContext.Consumer;\n\nclass Provider extends React.Component<FinalProps> {\n  private unsubscribe;\n\n  componentDidMount() {\n    const {\n      notificationsQuery,\n      notificationCountQuery,\n      currentUser\n    } = this.props;\n\n    this.unsubscribe = notificationsQuery.subscribeToMore({\n      document: gql(subscriptions.notificationSubscription),\n      variables: { userId: currentUser ? currentUser._id : null },\n      updateQuery: (prev, { subscriptionData: { data } }) => {\n        const { notificationInserted } = data;\n        const { title, content } = notificationInserted;\n\n        sendDesktopNotification({ title, content: strip(content || '') });\n\n        notificationsQuery.refetch();\n        notificationCountQuery.refetch();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  markAsRead = (notificationIds?: string[]) => {\n    const {\n      notificationsMarkAsReadMutation,\n      notificationsQuery,\n      notificationCountQuery\n    } = this.props;\n\n    notificationsMarkAsReadMutation({\n      variables: { _ids: notificationIds }\n    })\n      .then(() => {\n        notificationsQuery.refetch();\n        notificationCountQuery.refetch();\n\n        Alert.success('Notifications have been seen');\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  showNotifications = (requireRead: boolean) => {\n    const { notificationsQuery } = this.props;\n\n    notificationsQuery.refetch({ limit: 10, requireRead });\n  };\n\n  public render() {\n    const { notificationsQuery, notificationCountQuery } = this.props;\n\n    const notifications = notificationsQuery.notifications || [];\n    const isLoading = notificationsQuery.loading;\n    const unreadCount = notificationCountQuery.notificationCounts || 0;\n\n    return (\n      <NotifContext.Provider\n        value={{\n          notifications,\n          unreadCount,\n          showNotifications: this.showNotifications,\n          markAsRead: this.markAsRead,\n          isLoading\n        }}\n      >\n        {this.props.children}\n      </NotifContext.Provider>\n    );\n  }\n}\n\nexport const NotifProvider = compose(\n  graphql<\n    Props,\n    NotificationsQueryResponse,\n    { limit: number; requireRead: boolean }\n  >(gql(queries.notifications), {\n    name: 'notificationsQuery',\n    options: () => ({\n      variables: {\n        limit: 10,\n        requireRead: false\n      }\n    })\n  }),\n  graphql<{}, NotificationsCountQueryResponse>(\n    gql(queries.notificationCounts),\n    {\n      name: 'notificationCountQuery',\n      options: () => ({\n        variables: {\n          requireRead: true\n        }\n      })\n    }\n  ),\n  graphql<Props, MarkAsReadMutationResponse, { _ids?: string[] }>(\n    gql(mutations.markAsRead),\n    {\n      name: 'notificationsMarkAsReadMutation',\n      options: {\n        refetchQueries: () => ['notificationCounts']\n      }\n    }\n  )\n)(Provider);\n"]},"metadata":{},"sourceType":"module"}