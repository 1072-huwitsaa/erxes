{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/Sidebar.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { queries as queriesInbox } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar';\nimport { mutations, queries } from '../graphql';\n\nvar SidebarContainer = function SidebarContainer(props) {\n  var brandsQuery = props.brandsQuery,\n      brandsCountQuery = props.brandsCountQuery,\n      removeMutation = props.removeMutation,\n      queryParams = props.queryParams,\n      currentBrandId = props.currentBrandId,\n      history = props.history;\n  var brands = brandsQuery.brands || [];\n  var brandsTotalCount = brandsCountQuery.brandsTotalCount || 0; // remove action\n\n  var remove = function remove(brandId) {\n    confirm().then(function () {\n      removeMutation({\n        variables: {\n          _id: brandId\n        }\n      }).then(function () {\n        Alert.success('You successfully deleted a brand.');\n        history.push('/settings/brands');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback,\n        object = _ref.object;\n    return React.createElement(ButtonMutate, {\n      mutation: object ? mutations.brandEdit : mutations.brandAdd,\n      variables: values,\n      callback: callback,\n      refetchQueries: getRefetchQueries(queryParams, currentBrandId),\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      uppercase: false,\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    renderButton: renderButton,\n    brands: brands,\n    brandsTotalCount: brandsTotalCount,\n    remove: remove,\n    loading: brandsQuery.loading\n  });\n\n  return React.createElement(Sidebar, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n};\n\nvar getRefetchQueries = function getRefetchQueries(queryParams, currentBrandId) {\n  return [{\n    query: gql(queries.brands),\n    variables: {\n      perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n    }\n  }, {\n    query: gql(queries.brands)\n  }, {\n    query: gql(queries.integrationsCount)\n  }, {\n    query: gql(queries.brandDetail),\n    variables: {\n      _id: currentBrandId || ''\n    }\n  }, {\n    query: gql(queries.brandsCount)\n  }, {\n    query: gql(queriesInbox.brandList)\n  }];\n};\n\nexport default withProps(compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.brandsCount), {\n  name: 'brandsCountQuery'\n}), graphql(gql(mutations.brandRemove), {\n  name: 'removeMutation',\n  options: function options(_ref3) {\n    var queryParams = _ref3.queryParams,\n        currentBrandId = _ref3.currentBrandId;\n    return {\n      refetchQueries: getRefetchQueries(queryParams, currentBrandId)\n    };\n  }\n}))(withRouter(SidebarContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/brands/containers/Sidebar.tsx"],"names":["gql","compose","ButtonMutate","Alert","confirm","withProps","queries","queriesInbox","React","graphql","withRouter","Sidebar","mutations","SidebarContainer","props","brandsQuery","brandsCountQuery","removeMutation","queryParams","currentBrandId","history","brands","brandsTotalCount","remove","brandId","then","variables","_id","success","push","catch","error","message","renderButton","name","values","isSubmitted","callback","object","brandEdit","brandAdd","getRefetchQueries","updatedProps","loading","query","perPage","limit","parseInt","integrationsCount","brandDetail","brandsCount","brandList","options","fetchPolicy","brandRemove","refetchQueries"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,sBAA1C;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,uBAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAqBC,OAArB,QAAoC,cAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,SAAT,EAAoBN,OAApB,QAAmC,YAAnC;;AAoBA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAmC;AAAA,MAExDC,WAFwD,GAQtDD,KARsD,CAExDC,WAFwD;AAAA,MAGxDC,gBAHwD,GAQtDF,KARsD,CAGxDE,gBAHwD;AAAA,MAIxDC,cAJwD,GAQtDH,KARsD,CAIxDG,cAJwD;AAAA,MAKxDC,WALwD,GAQtDJ,KARsD,CAKxDI,WALwD;AAAA,MAMxDC,cANwD,GAQtDL,KARsD,CAMxDK,cANwD;AAAA,MAOxDC,OAPwD,GAQtDN,KARsD,CAOxDM,OAPwD;AAU1D,MAAMC,MAAM,GAAGN,WAAW,CAACM,MAAZ,IAAsB,EAArC;AACA,MAAMC,gBAAgB,GAAGN,gBAAgB,CAACM,gBAAjB,IAAqC,CAA9D,CAX0D,CAa1D;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,OAAO,EAAI;AACxBpB,IAAAA,OAAO,GAAGqB,IAAV,CAAe,YAAM;AACnBR,MAAAA,cAAc,CAAC;AACbS,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEH;AAAP;AADE,OAAD,CAAd,CAGGC,IAHH,CAGQ,YAAM;AACVtB,QAAAA,KAAK,CAACyB,OAAN,CAAc,mCAAd;AACAR,QAAAA,OAAO,CAACS,IAAR,CAAa,kBAAb;AACD,OANH,EAOGC,KAPH,CAOS,UAAAC,KAAK,EAAI;AACd5B,QAAAA,KAAK,CAAC4B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,OATH;AAUD,KAXD;AAYD,GAbD;;AAeA,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAMK;AAAA,QALxBC,IAKwB,QALxBA,IAKwB;AAAA,QAJxBC,MAIwB,QAJxBA,MAIwB;AAAA,QAHxBC,WAGwB,QAHxBA,WAGwB;AAAA,QAFxBC,QAEwB,QAFxBA,QAEwB;AAAA,QADxBC,MACwB,QADxBA,MACwB;AACxB,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEA,MAAM,GAAG1B,SAAS,CAAC2B,SAAb,GAAyB3B,SAAS,CAAC4B,QADrD;AAEE,MAAA,SAAS,EAAEL,MAFb;AAGE,MAAA,QAAQ,EAAEE,QAHZ;AAIE,MAAA,cAAc,EAAEI,iBAAiB,CAACvB,WAAD,EAAcC,cAAd,CAJnC;AAKE,MAAA,WAAW,EAAEiB,WALf;AAME,MAAA,IAAI,EAAC,QANP;AAOE,MAAA,SAAS,EAAE,KAPb;AAQE,MAAA,cAAc,6BACZE,MAAM,GAAG,SAAH,GAAe,OADT,gBAERJ,IAFQ,CARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAcD,GArBD;;AAuBA,MAAMQ,YAAY,qBACb5B,KADa;AAEhBmB,IAAAA,YAAY,EAAZA,YAFgB;AAGhBZ,IAAAA,MAAM,EAANA,MAHgB;AAIhBC,IAAAA,gBAAgB,EAAhBA,gBAJgB;AAKhBC,IAAAA,MAAM,EAANA,MALgB;AAMhBoB,IAAAA,OAAO,EAAE5B,WAAW,CAAC4B;AANL,IAAlB;;AASA,SAAO,oBAAC,OAAD,oBAAaD,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA9DD;;AAgEA,IAAMD,iBAAiB,GAAG,SAApBA,iBAAoB,CAACvB,WAAD,EAAcC,cAAd,EAA0C;AAClE,SAAO,CACL;AACEyB,IAAAA,KAAK,EAAE5C,GAAG,CAACM,OAAO,CAACe,MAAT,CADZ;AAEEK,IAAAA,SAAS,EAAE;AACTmB,MAAAA,OAAO,EAAE3B,WAAW,CAAC4B,KAAZ,GAAoBC,QAAQ,CAAC7B,WAAW,CAAC4B,KAAb,EAAoB,EAApB,CAA5B,GAAsD;AADtD;AAFb,GADK,EAOL;AACEF,IAAAA,KAAK,EAAE5C,GAAG,CAACM,OAAO,CAACe,MAAT;AADZ,GAPK,EAUL;AACEuB,IAAAA,KAAK,EAAE5C,GAAG,CAACM,OAAO,CAAC0C,iBAAT;AADZ,GAVK,EAaL;AACEJ,IAAAA,KAAK,EAAE5C,GAAG,CAACM,OAAO,CAAC2C,WAAT,CADZ;AAEEvB,IAAAA,SAAS,EAAE;AAAEC,MAAAA,GAAG,EAAER,cAAc,IAAI;AAAzB;AAFb,GAbK,EAiBL;AAAEyB,IAAAA,KAAK,EAAE5C,GAAG,CAACM,OAAO,CAAC4C,WAAT;AAAZ,GAjBK,EAkBL;AAAEN,IAAAA,KAAK,EAAE5C,GAAG,CAACO,YAAY,CAAC4C,SAAd;AAAZ,GAlBK,CAAP;AAoBD,CArBD;;AAuBA,eAAe9C,SAAS,CACtBJ,OAAO,CACLQ,OAAO,CACLT,GAAG,CAACM,OAAO,CAACe,MAAT,CADE,EAEL;AACEa,EAAAA,IAAI,EAAE,aADR;AAEEkB,EAAAA,OAAO,EAAE;AAAA,QAAGlC,WAAH,SAAGA,WAAH;AAAA,WAA4C;AACnDQ,MAAAA,SAAS,EAAE;AACTmB,QAAAA,OAAO,EAAE3B,WAAW,CAAC4B,KAAZ,GAAoBC,QAAQ,CAAC7B,WAAW,CAAC4B,KAAb,EAAoB,EAApB,CAA5B,GAAsD;AADtD,OADwC;AAInDO,MAAAA,WAAW,EAAE;AAJsC,KAA5C;AAAA;AAFX,CAFK,CADF,EAaL5C,OAAO,CAAsCT,GAAG,CAACM,OAAO,CAAC4C,WAAT,CAAzC,EAAgE;AACrEhB,EAAAA,IAAI,EAAE;AAD+D,CAAhE,CAbF,EAgBLzB,OAAO,CACLT,GAAG,CAACY,SAAS,CAAC0C,WAAX,CADE,EAEL;AACEpB,EAAAA,IAAI,EAAE,gBADR;AAEEkB,EAAAA,OAAO,EAAE;AAAA,QAAGlC,WAAH,SAAGA,WAAH;AAAA,QAAgBC,cAAhB,SAAgBA,cAAhB;AAAA,WAA6C;AACpDoC,MAAAA,cAAc,EAAEd,iBAAiB,CAACvB,WAAD,EAAcC,cAAd;AADmB,KAA7C;AAAA;AAFX,CAFK,CAhBF,CAAP,CAyBET,UAAU,CAAaG,gBAAb,CAzBZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps, IRouterProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { queries as queriesInbox } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { ChildProps, graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar';\nimport { mutations, queries } from '../graphql';\nimport {\n  BrandRemoveMutationResponse,\n  BrandRemoveMutationVariables,\n  BrandsCountQueryResponse,\n  BrandsQueryResponse\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n  currentBrandId?: string;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n  brandsCountQuery: BrandsCountQueryResponse;\n} & Props &\n  IRouterProps &\n  BrandRemoveMutationResponse;\n\nconst SidebarContainer = (props: ChildProps<FinalProps>) => {\n  const {\n    brandsQuery,\n    brandsCountQuery,\n    removeMutation,\n    queryParams,\n    currentBrandId,\n    history\n  } = props;\n\n  const brands = brandsQuery.brands || [];\n  const brandsTotalCount = brandsCountQuery.brandsTotalCount || 0;\n\n  // remove action\n  const remove = brandId => {\n    confirm().then(() => {\n      removeMutation({\n        variables: { _id: brandId }\n      })\n        .then(() => {\n          Alert.success('You successfully deleted a brand.');\n          history.push('/settings/brands');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    return (\n      <ButtonMutate\n        mutation={object ? mutations.brandEdit : mutations.brandAdd}\n        variables={values}\n        callback={callback}\n        refetchQueries={getRefetchQueries(queryParams, currentBrandId)}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        uppercase={false}\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    renderButton,\n    brands,\n    brandsTotalCount,\n    remove,\n    loading: brandsQuery.loading\n  };\n\n  return <Sidebar {...updatedProps} />;\n};\n\nconst getRefetchQueries = (queryParams, currentBrandId?: string) => {\n  return [\n    {\n      query: gql(queries.brands),\n      variables: {\n        perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n      }\n    },\n    {\n      query: gql(queries.brands)\n    },\n    {\n      query: gql(queries.integrationsCount)\n    },\n    {\n      query: gql(queries.brandDetail),\n      variables: { _id: currentBrandId || '' }\n    },\n    { query: gql(queries.brandsCount) },\n    { query: gql(queriesInbox.brandList) }\n  ];\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse, { perPage: number }>(\n      gql(queries.brands),\n      {\n        name: 'brandsQuery',\n        options: ({ queryParams }: { queryParams: any }) => ({\n          variables: {\n            perPage: queryParams.limit ? parseInt(queryParams.limit, 10) : 20\n          },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, BrandsCountQueryResponse, {}>(gql(queries.brandsCount), {\n      name: 'brandsCountQuery'\n    }),\n    graphql<Props, BrandRemoveMutationResponse, BrandRemoveMutationVariables>(\n      gql(mutations.brandRemove),\n      {\n        name: 'removeMutation',\n        options: ({ queryParams, currentBrandId }: Props) => ({\n          refetchQueries: getRefetchQueries(queryParams, currentBrandId)\n        })\n      }\n    )\n  )(withRouter<FinalProps>(SidebarContainer))\n);\n"]},"metadata":{},"sourceType":"module"}