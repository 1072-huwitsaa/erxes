{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/email/containers/Signature.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        mutation usersConfigEmailSignatures($signatures: [EmailSignature]) {\\n          usersConfigEmailSignatures(signatures: $signatures) {\\n            _id\\n          }\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/auth/graphql';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Spinner from '../../../common/components/Spinner';\nimport { queries as brandQueries } from '../../brands/graphql';\nimport Signature from '../components/Signature';\n\nvar SignatureContainer = function SignatureContainer(props) {\n  var currentUser = props.currentUser,\n      brandsQuery = props.brandsQuery,\n      saveMutation = props.saveMutation;\n\n  if (brandsQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  } // save email configs action\n\n\n  var save = function save(signaturesToSave, callback) {\n    var doc = []; // remove brandName from list\n\n    signaturesToSave.forEach(function (item) {\n      if (item.signature) {\n        doc.push({\n          brandId: item.brandId,\n          signature: item.signature\n        });\n      }\n    });\n    saveMutation({\n      variables: {\n        signatures: doc\n      }\n    }).then(function () {\n      Alert.success('Great job! You just set up your email signature.');\n      callback();\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var emailSignatures = currentUser.emailSignatures || [];\n  var signatures = [];\n  var brands = brandsQuery.brands || [];\n  brands.forEach(function (brand) {\n    // previously configured signature\n    var oldEntry = emailSignatures.find(function (signature) {\n      return signature.brandId === brand._id;\n    });\n    signatures.push({\n      brandId: brand._id,\n      brandName: brand.name || '',\n      signature: oldEntry ? oldEntry.signature : ''\n    });\n  });\n\n  var updatedProps = _objectSpread({}, props, {\n    signatures: signatures,\n    save: save\n  });\n\n  return React.createElement(Signature, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n};\n\nvar WithQuery = withProps(compose(graphql(gql(brandQueries.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(_templateObject()), {\n  name: 'saveMutation',\n  options: function options() {\n    return {\n      refetchQueries: [{\n        query: gql(queries.currentUser)\n      }]\n    };\n  }\n}))(SignatureContainer));\n\nvar WithConsumer = function WithConsumer(props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, function (_ref) {\n    var currentUser = _ref.currentUser;\n    return React.createElement(WithQuery, Object.assign({}, props, {\n      currentUser: currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default WithConsumer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/email/containers/Signature.tsx"],"names":["AppConsumer","gql","compose","queries","Alert","withProps","React","graphql","Spinner","brandQueries","Signature","SignatureContainer","props","currentUser","brandsQuery","saveMutation","loading","save","signaturesToSave","callback","doc","forEach","item","signature","push","brandId","variables","signatures","then","success","catch","error","message","emailSignatures","brands","brand","oldEntry","find","_id","brandName","name","updatedProps","WithQuery","options","refetchQueries","query","WithConsumer"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries } from 'modules/auth/graphql';\nimport { IUser } from 'modules/auth/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Spinner from '../../../common/components/Spinner';\nimport { queries as brandQueries } from '../../brands/graphql';\nimport { BrandsQueryResponse } from '../../brands/types';\nimport Signature from '../components/Signature';\nimport {\n  IEmailSignature,\n  IEmailSignatureWithBrand,\n  UsersConfigEmailSignaturesMutationResponse,\n  UsersConfigEmailSignaturesMutationVariables\n} from '../types';\n\ntype Props = {\n  currentUser: IUser;\n  closeModal: () => void;\n};\n\ntype FinalProps = {\n  brandsQuery: BrandsQueryResponse;\n} & Props &\n  UsersConfigEmailSignaturesMutationResponse;\n\nconst SignatureContainer = (props: FinalProps) => {\n  const { currentUser, brandsQuery, saveMutation } = props;\n\n  if (brandsQuery.loading) {\n    return <Spinner />;\n  }\n\n  // save email configs action\n  const save = (signaturesToSave: IEmailSignatureWithBrand[], callback) => {\n    const doc: IEmailSignature[] = [];\n\n    // remove brandName from list\n    signaturesToSave.forEach(item => {\n      if (item.signature) {\n        doc.push({\n          brandId: item.brandId,\n          signature: item.signature\n        });\n      }\n    });\n\n    saveMutation({ variables: { signatures: doc } })\n      .then(() => {\n        Alert.success('Great job! You just set up your email signature.');\n\n        callback();\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const emailSignatures = currentUser.emailSignatures || [];\n  const signatures: IEmailSignatureWithBrand[] = [];\n  const brands = brandsQuery.brands || [];\n\n  brands.forEach(brand => {\n    // previously configured signature\n    const oldEntry = emailSignatures.find(\n      signature => signature.brandId === brand._id\n    );\n\n    signatures.push({\n      brandId: brand._id,\n      brandName: brand.name || '',\n      signature: oldEntry ? oldEntry.signature : ''\n    });\n  });\n\n  const updatedProps = {\n    ...props,\n    signatures,\n    save\n  };\n\n  return <Signature {...updatedProps} />;\n};\n\nconst WithQuery = withProps<Props>(\n  compose(\n    graphql<Props, BrandsQueryResponse, {}>(gql(brandQueries.brands), {\n      name: 'brandsQuery'\n    }),\n    graphql<\n      Props,\n      UsersConfigEmailSignaturesMutationResponse,\n      UsersConfigEmailSignaturesMutationVariables\n    >(\n      gql`\n        mutation usersConfigEmailSignatures($signatures: [EmailSignature]) {\n          usersConfigEmailSignatures(signatures: $signatures) {\n            _id\n          }\n        }\n      `,\n      {\n        name: 'saveMutation',\n        options: () => ({\n          refetchQueries: [\n            {\n              query: gql(queries.currentUser)\n            }\n          ]\n        })\n      }\n    )\n  )(SignatureContainer)\n);\n\nconst WithConsumer = props => {\n  return (\n    <AppConsumer>\n      {({ currentUser }) => <WithQuery {...props} currentUser={currentUser} />}\n    </AppConsumer>\n  );\n};\n\nexport default WithConsumer;\n"]},"metadata":{},"sourceType":"module"}