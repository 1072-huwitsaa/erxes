{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/filter/Filter.tsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          query \", \"Detail($id: String!) {\\n            \", \"Detail(_id: $id) {\\n              \", \"\\n            }\\n          }\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  font-size: 0.9em;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport Chip from 'modules/common/components/Chip';\nimport { __, router } from 'modules/common/utils';\nimport { cleanIntegrationKind } from 'modules/settings/integrations/containers/utils';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport createChipText from './createChipText';\nvar Filters = styled.div(_templateObject());\n\nfunction Filter(_ref) {\n  var _ref$queryParams = _ref.queryParams,\n      queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,\n      history = _ref.history;\n\n  var onClickClose = function onClickClose(paramKey) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = paramKey[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n        router.setParams(history, _defineProperty({}, key, null));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n\n  var renderFilterParam = function renderFilterParam(paramKey, bool) {\n    if (!queryParams[paramKey]) {\n      return null;\n    }\n\n    var onClick = function onClick() {\n      return onClickClose([paramKey]);\n    };\n\n    var text = paramKey;\n\n    if (paramKey === 'awaitingResponse') {\n      text = 'Awaiting Response';\n    }\n\n    return React.createElement(Chip, {\n      capitalize: true,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, bool ? text : __(cleanIntegrationKind(queryParams[paramKey])));\n  };\n\n  var renderFilterWithData = function renderFilterWithData(paramKey, type) {\n    var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_id name';\n\n    if (queryParams[paramKey]) {\n      var id = queryParams[paramKey];\n      var graphqlQuery = gql(_templateObject2(), type, type, fields);\n      var ChipText = createChipText(graphqlQuery, id);\n      return React.createElement(Chip, {\n        onClick: onClickClose.bind(null, [paramKey]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(ChipText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n\n    return null;\n  };\n\n  var renderFilterWithDate = function renderFilterWithDate() {\n    if (queryParams.startDate && queryParams.endDate) {\n      var onClick = function onClick() {\n        return onClickClose(['startDate', 'endDate']);\n      };\n\n      return React.createElement(Chip, {\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, queryParams.startDate, \" - \", queryParams.endDate);\n    }\n\n    return null;\n  };\n\n  return React.createElement(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, renderFilterWithData('channelId', 'channel'), renderFilterParam('status', false), renderFilterParam('participating', true), renderFilterParam('unassigned', true), renderFilterParam('awaitingResponse', true), renderFilterWithData('brandId', 'brand'), renderFilterParam('integrationType', false), renderFilterWithData('tag', 'tag'), renderFilterWithData('segment', 'segment'), renderFilterParam('kind', false), renderFilterWithData('brand', 'brand'), renderFilterWithDate(), renderFilterWithData('form', 'form', '_id title'));\n}\n\nexport default withRouter(Filter);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/common/components/filter/Filter.tsx"],"names":["gql","Chip","__","router","cleanIntegrationKind","React","withRouter","styled","createChipText","Filters","div","Filter","queryParams","history","onClickClose","paramKey","key","setParams","renderFilterParam","bool","onClick","text","renderFilterWithData","type","fields","id","graphqlQuery","ChipText","bind","renderFilterWithDate","startDate","endDate"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport Chip from 'modules/common/components/Chip';\nimport { __, router } from 'modules/common/utils';\nimport { cleanIntegrationKind } from 'modules/settings/integrations/containers/utils';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { IRouterProps } from '../../types';\nimport createChipText from './createChipText';\n\ninterface IProps extends IRouterProps {\n  queryParams?: any;\n}\n\nconst Filters = styled.div`\n  font-size: 0.9em;\n`;\n\nfunction Filter({ queryParams = {}, history }: IProps) {\n  const onClickClose = paramKey => {\n    for (const key of paramKey) {\n      router.setParams(history, { [key]: null });\n    }\n  };\n\n  const renderFilterParam = (paramKey: string, bool: boolean) => {\n    if (!queryParams[paramKey]) {\n      return null;\n    }\n\n    const onClick = () => onClickClose([paramKey]);\n\n    let text = paramKey;\n    if (paramKey === 'awaitingResponse') {\n      text = 'Awaiting Response';\n    }\n\n    return (\n      <Chip capitalize={true} onClick={onClick}>\n        {bool ? text : __(cleanIntegrationKind(queryParams[paramKey]))}\n      </Chip>\n    );\n  };\n\n  const renderFilterWithData = (\n    paramKey: string,\n    type: string,\n    fields = '_id name'\n  ) => {\n    if (queryParams[paramKey]) {\n      const id = queryParams[paramKey];\n\n      const graphqlQuery = gql`\n          query ${type}Detail($id: String!) {\n            ${type}Detail(_id: $id) {\n              ${fields}\n            }\n          }\n        `;\n\n      const ChipText = createChipText(graphqlQuery, id);\n\n      return (\n        <Chip onClick={onClickClose.bind(null, [paramKey])}>\n          <ChipText />\n        </Chip>\n      );\n    }\n\n    return null;\n  };\n\n  const renderFilterWithDate = () => {\n    if (queryParams.startDate && queryParams.endDate) {\n      const onClick = () => onClickClose(['startDate', 'endDate']);\n\n      return (\n        <Chip onClick={onClick}>\n          {queryParams.startDate} - {queryParams.endDate}\n        </Chip>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <Filters>\n      {renderFilterWithData('channelId', 'channel')}\n      {renderFilterParam('status', false)}\n      {renderFilterParam('participating', true)}\n      {renderFilterParam('unassigned', true)}\n      {renderFilterParam('awaitingResponse', true)}\n      {renderFilterWithData('brandId', 'brand')}\n      {renderFilterParam('integrationType', false)}\n      {renderFilterWithData('tag', 'tag')}\n      {renderFilterWithData('segment', 'segment')}\n      {renderFilterParam('kind', false)}\n      {renderFilterWithData('brand', 'brand')}\n      {renderFilterWithDate()}\n      {renderFilterWithData('form', 'form', '_id title')}\n    </Filters>\n  );\n}\n\nexport default withRouter<IProps>(Filter);\n"]},"metadata":{},"sourceType":"module"}