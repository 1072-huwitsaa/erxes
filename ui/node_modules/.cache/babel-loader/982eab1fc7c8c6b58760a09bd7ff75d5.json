{"ast":null,"code":"import React, { useRef, useState, useLayoutEffect } from \"react\";\nimport observeRect from \"@reach/observe-rect\";\nimport { func, bool } from \"prop-types\";\n\nvar Rect = function Rect(_ref) {\n  var onChange = _ref.onChange,\n      observe = _ref.observe,\n      children = _ref.children;\n  var ref = React.useRef(null);\n  var rect = useRect(ref, observe, onChange);\n  return children({\n    ref: ref,\n    rect: rect\n  });\n};\n\nRect.defaultProps = {\n  observe: true\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Rect.propTypes = {\n    children: func,\n    observe: bool,\n    onChange: func\n  };\n}\n\nexport function useRect(nodeRef, observe, onChange) {\n  if (observe === void 0) {\n    observe = true;\n  }\n\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  var observerRef = useRef(null);\n  useLayoutEffect(function () {\n    var cleanup = function cleanup() {\n      observerRef.current && observerRef.current.unobserve();\n    };\n\n    if (!nodeRef.current) {\n      console.warn(\"You need to place the ref\");\n      return cleanup;\n    }\n\n    if (!observerRef.current && nodeRef.current) {\n      observerRef.current = observeRect(nodeRef.current, function (rect) {\n        onChange && onChange(rect);\n        setRect(rect);\n      });\n    }\n\n    observe && observerRef.current.observe();\n    return cleanup; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [observe, onChange]);\n  return rect;\n}\nexport default Rect;","map":null,"metadata":{},"sourceType":"module"}