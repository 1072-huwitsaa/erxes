{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/leads/containers/EditLead.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Lead from '../components/Lead';\nimport { mutations, queries } from '../graphql';\n\nvar EditLeadContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditLeadContainer, _React$Component);\n\n  function EditLeadContainer(props) {\n    var _this;\n\n    _classCallCheck(this, EditLeadContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditLeadContainer).call(this, props));\n    _this.state = {\n      isLoading: false,\n      isReadyToSaveForm: false\n    };\n    return _this;\n  }\n\n  _createClass(EditLeadContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          formId = _this$props.formId,\n          integrationDetailQuery = _this$props.integrationDetailQuery,\n          editIntegrationMutation = _this$props.editIntegrationMutation,\n          history = _this$props.history;\n\n      if (integrationDetailQuery.loading) {\n        return false;\n      }\n\n      var integration = integrationDetailQuery.integrationDetail || {};\n\n      var afterFormDbSave = function afterFormDbSave() {\n        if (_this2.state.doc) {\n          var _this2$state$doc = _this2.state.doc,\n              leadData = _this2$state$doc.leadData,\n              brandId = _this2$state$doc.brandId,\n              name = _this2$state$doc.name,\n              languageCode = _this2$state$doc.languageCode;\n          editIntegrationMutation({\n            variables: {\n              _id: integration._id,\n              formId: formId,\n              leadData: leadData,\n              brandId: brandId,\n              name: name,\n              languageCode: languageCode\n            }\n          }).then(function () {\n            Alert.success('You successfully updated a lead');\n            history.push({\n              pathname: '/leads',\n              search: '?popUpRefetchList=true'\n            });\n          }).catch(function (error) {\n            Alert.error(error.message);\n\n            _this2.setState({\n              isReadyToSaveForm: false,\n              isLoading: false\n            });\n          });\n        }\n      };\n\n      var save = function save(doc) {\n        _this2.setState({\n          isLoading: true,\n          isReadyToSaveForm: true,\n          doc: doc\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        integration: integration,\n        save: save,\n        afterFormDbSave: afterFormDbSave,\n        isActionLoading: this.state.isLoading,\n        isReadyToSaveForm: this.state.isReadyToSaveForm\n      });\n\n      return React.createElement(Lead, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditLeadContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.integrationDetail), {\n  name: 'integrationDetailQuery',\n  options: function options(_ref) {\n    var contentTypeId = _ref.contentTypeId;\n    return {\n      variables: {\n        _id: contentTypeId\n      }\n    };\n  }\n}), graphql(gql(mutations.integrationsEditLeadIntegration), {\n  name: 'editIntegrationMutation',\n  options: {\n    refetchQueries: ['leadIntegrations', 'leadIntegrationCounts', 'formDetail']\n  }\n}))(withRouter(EditLeadContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/leads/containers/EditLead.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","withRouter","Lead","mutations","queries","EditLeadContainer","props","state","isLoading","isReadyToSaveForm","formId","integrationDetailQuery","editIntegrationMutation","history","loading","integration","integrationDetail","afterFormDbSave","doc","leadData","brandId","name","languageCode","variables","_id","then","success","push","pathname","search","catch","error","message","setState","save","updatedProps","isActionLoading","Component","options","contentTypeId","integrationsEditLeadIntegration","refetchQueries"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport {\n  EditIntegrationMutationResponse,\n  EditIntegrationMutationVariables,\n  LeadIntegrationDetailQueryResponse\n} from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../common/types';\nimport Lead from '../components/Lead';\nimport { mutations, queries } from '../graphql';\nimport { ILeadData } from '../types';\n\ntype Props = {\n  contentTypeId: string;\n  formId: string;\n  queryParams: any;\n};\n\ntype State = {\n  isLoading: boolean;\n  isReadyToSaveForm: boolean;\n  doc?: {\n    brandId: string;\n    name: string;\n    languageCode: string;\n    lead: any;\n    leadData: ILeadData;\n  };\n};\n\ntype FinalProps = {\n  integrationDetailQuery: LeadIntegrationDetailQueryResponse;\n} & Props &\n  EditIntegrationMutationResponse &\n  IRouterProps;\n\nclass EditLeadContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = { isLoading: false, isReadyToSaveForm: false };\n  }\n\n  render() {\n    const {\n      formId,\n      integrationDetailQuery,\n      editIntegrationMutation,\n      history\n    } = this.props;\n\n    if (integrationDetailQuery.loading) {\n      return false;\n    }\n\n    const integration = integrationDetailQuery.integrationDetail || {};\n\n    const afterFormDbSave = () => {\n      if (this.state.doc) {\n        const { leadData, brandId, name, languageCode } = this.state.doc;\n\n        editIntegrationMutation({\n          variables: {\n            _id: integration._id,\n            formId,\n            leadData,\n            brandId,\n            name,\n            languageCode\n          }\n        })\n          .then(() => {\n            Alert.success('You successfully updated a lead');\n\n            history.push({\n              pathname: '/leads',\n              search: '?popUpRefetchList=true'\n            });\n          })\n\n          .catch(error => {\n            Alert.error(error.message);\n\n            this.setState({ isReadyToSaveForm: false, isLoading: false });\n          });\n      }\n    };\n\n    const save = doc => {\n      this.setState({ isLoading: true, isReadyToSaveForm: true, doc });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      integration,\n      save,\n      afterFormDbSave,\n      isActionLoading: this.state.isLoading,\n      isReadyToSaveForm: this.state.isReadyToSaveForm\n    };\n\n    return <Lead {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, LeadIntegrationDetailQueryResponse, { _id: string }>(\n      gql(queries.integrationDetail),\n      {\n        name: 'integrationDetailQuery',\n        options: ({ contentTypeId }) => ({\n          variables: {\n            _id: contentTypeId\n          }\n        })\n      }\n    ),\n    graphql<\n      Props,\n      EditIntegrationMutationResponse,\n      EditIntegrationMutationVariables\n    >(gql(mutations.integrationsEditLeadIntegration), {\n      name: 'editIntegrationMutation',\n      options: {\n        refetchQueries: [\n          'leadIntegrations',\n          'leadIntegrationCounts',\n          'formDetail'\n        ]\n      }\n    })\n  )(withRouter<FinalProps>(EditLeadContainer))\n);\n"]},"metadata":{},"sourceType":"module"}