{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/PipelineWatch.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport PipelineWatch from '../components/PipelineWatch';\nimport { mutations, queries } from '../graphql';\n\nvar WatchContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WatchContainer, _React$Component);\n\n  function WatchContainer() {\n    _classCallCheck(this, WatchContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WatchContainer).apply(this, arguments));\n  }\n\n  _createClass(WatchContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var onChangeWatch = function onChangeWatch(isAdd) {\n        var _this$props = _this.props,\n            watchMutation = _this$props.watchMutation,\n            _id = _this$props.pipeline._id,\n            type = _this$props.type;\n        watchMutation({\n          variables: {\n            _id: _id,\n            isAdd: isAdd,\n            type: type\n          }\n        }).then(function () {\n          Alert.success('You successfully changed');\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        onChangeWatch: onChangeWatch\n      });\n\n      return React.createElement(PipelineWatch, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WatchContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(mutations.pipelinesWatch), {\n  name: 'watchMutation',\n  options: function options(_ref) {\n    var pipeline = _ref.pipeline;\n    return {\n      refetchQueries: [{\n        query: gql(queries.pipelineDetail),\n        variables: {\n          _id: pipeline._id\n        }\n      }]\n    };\n  }\n}))(WatchContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/PipelineWatch.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","PipelineWatch","mutations","queries","WatchContainer","onChangeWatch","isAdd","props","watchMutation","_id","pipeline","type","variables","then","success","catch","error","message","updatedProps","Component","pipelinesWatch","name","options","refetchQueries","query","pipelineDetail"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;IAWMC,c;;;;;;;;;;;;;6BACK;AAAA;;AACP,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAoB;AAAA,0BAKpC,KAAI,CAACC,KAL+B;AAAA,YAEtCC,aAFsC,eAEtCA,aAFsC;AAAA,YAG1BC,GAH0B,eAGtCC,QAHsC,CAG1BD,GAH0B;AAAA,YAItCE,IAJsC,eAItCA,IAJsC;AAOxCH,QAAAA,aAAa,CAAC;AAAEI,UAAAA,SAAS,EAAE;AAAEH,YAAAA,GAAG,EAAHA,GAAF;AAAOH,YAAAA,KAAK,EAALA,KAAP;AAAcK,YAAAA,IAAI,EAAJA;AAAd;AAAb,SAAD,CAAb,CACGE,IADH,CACQ,YAAM;AACVhB,UAAAA,KAAK,CAACiB,OAAN,CAAc,0BAAd;AACD,SAHH,EAIGC,KAJH,CAIS,UAAAC,KAAK,EAAI;AACdnB,UAAAA,KAAK,CAACmB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACD,SANH;AAOD,OAdD;;AAgBA,UAAMC,YAAY,qBACb,KAAKX,KADQ;AAEhBF,QAAAA,aAAa,EAAbA;AAFgB,QAAlB;;AAKA,aAAO,oBAAC,aAAD,oBAAmBa,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAxB0BnB,KAAK,CAACoB,S;;AA2BnC,eAAerB,SAAS,CACtBF,OAAO,CACLI,OAAO,CACLL,GAAG,CAACO,SAAS,CAACkB,cAAX,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGZ,QAAH,QAAGA,QAAH;AAAA,WAA4C;AACnDa,MAAAA,cAAc,EAAE,CACd;AACEC,QAAAA,KAAK,EAAE7B,GAAG,CAACQ,OAAO,CAACsB,cAAT,CADZ;AAEEb,QAAAA,SAAS,EAAE;AAAEH,UAAAA,GAAG,EAAEC,QAAQ,CAACD;AAAhB;AAFb,OADc;AADmC,KAA5C;AAAA;AAFX,CAFK,CADF,CAAP,CAeEL,cAfF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IPipeline, WatchMutation, WatchVariables } from 'modules/boards/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport PipelineWatch from '../components/PipelineWatch';\nimport { mutations, queries } from '../graphql';\n\ntype IProps = {\n  pipeline: IPipeline;\n  type: string;\n};\n\ntype FinalProps = {\n  watchMutation: WatchMutation;\n} & IProps;\n\nclass WatchContainer extends React.Component<FinalProps> {\n  render() {\n    const onChangeWatch = (isAdd: boolean) => {\n      const {\n        watchMutation,\n        pipeline: { _id },\n        type\n      } = this.props;\n\n      watchMutation({ variables: { _id, isAdd, type } })\n        .then(() => {\n          Alert.success('You successfully changed');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      onChangeWatch\n    };\n\n    return <PipelineWatch {...updatedProps} />;\n  }\n}\n\nexport default withProps<IProps>(\n  compose(\n    graphql<IProps, WatchMutation, WatchVariables>(\n      gql(mutations.pipelinesWatch),\n      {\n        name: 'watchMutation',\n        options: ({ pipeline }: { pipeline: IPipeline }) => ({\n          refetchQueries: [\n            {\n              query: gql(queries.pipelineDetail),\n              variables: { _id: pipeline._id }\n            }\n          ]\n        })\n      }\n    )\n  )(WatchContainer)\n);\n"]},"metadata":{},"sourceType":"module"}