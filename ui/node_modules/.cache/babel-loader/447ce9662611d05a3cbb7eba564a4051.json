{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/robot/components/Todo.tsx\";\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport ProgressBar from 'modules/common/components/ProgressBar';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport TodoDetail from '../containers/TodoDetail';\nimport { calculatePercentage, getCurrentUserName } from '../utils';\nimport ModulItem from './ModulItem';\nimport { CompletedTaskName, CompletedTaskWrapper, ContentWrapper, Greeting, NavButton, ProgressText, RestartButton, SubHeader } from './styles';\n\nvar Todo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Todo, _React$Component);\n\n  function Todo(props) {\n    var _this;\n\n    _classCallCheck(this, Todo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Todo).call(this, props));\n\n    _this.withHeader = function (content) {\n      var _this$props = _this.props,\n          changeRoute = _this$props.changeRoute,\n          currentRoute = _this$props.currentRoute,\n          toggleContent = _this$props.toggleContent;\n\n      var onBack = function onBack() {\n        changeRoute('todoList');\n      };\n\n      var onHide = function onHide() {\n        toggleContent(false);\n      };\n\n      return React.createElement(React.Fragment, null, currentRoute === 'todoDetail' && React.createElement(NavButton, {\n        onClick: onBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"arrow-left\",\n        size: 24,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(NavButton, {\n        id: \"robot-feature-close\",\n        onClick: onHide,\n        right: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"times\",\n        size: 17,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), content);\n    };\n\n    _this.renderProgress = function () {\n      var percentage = _this.getPercentage();\n\n      var text = 'keep going!';\n\n      if (percentage < 75 && percentage > 50) {\n        text = \"you're halfway through, keep going!\";\n      }\n\n      if (percentage > 75 && percentage < 100) {\n        text = 'almost done, just a little more!';\n      }\n\n      if (percentage === 100) {\n        text = 'awesome!';\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(ProgressBar, {\n        percentage: percentage,\n        color: \"#3B85F4\",\n        height: \"8px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(ProgressText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, percentage, \"% done - \", text));\n    };\n\n    _this.renderCompleted = function () {\n      var availableFeatures = _this.props.availableFeatures;\n      var completedTasks = availableFeatures.filter(function (feature) {\n        return feature.isComplete;\n      });\n      var showComplete = _this.state.showComplete;\n      return React.createElement(CompletedTaskWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(SubHeader, {\n        onClick: _this.toggleFeatures,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, __('Show completed'), React.createElement(Icon, {\n        icon: showComplete ? 'angle-down' : 'angle-up',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })), showComplete && React.createElement(React.Fragment, null, completedTasks.map(function (availabeFeature) {\n        return _this.renderFeature(availabeFeature, true);\n      }), React.createElement(CompletedTaskName, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, __('Set up your account'))));\n    };\n\n    _this.toggleFeatures = function () {\n      _this.setState({\n        showComplete: !_this.state.showComplete\n      });\n    };\n\n    _this.state = {\n      selectedFeature: undefined,\n      showComplete: true\n    };\n    return _this;\n  }\n\n  _createClass(Todo, [{\n    key: \"renderFeature\",\n    value: function renderFeature(feature, completed) {\n      var _this2 = this;\n\n      var changeRoute = this.props.changeRoute;\n      var text = feature.text,\n          icon = feature.icon,\n          color = feature.color,\n          name = feature.name;\n\n      var onClick = function onClick() {\n        _this2.setState({\n          selectedFeature: feature\n        }, function () {\n          changeRoute('todoDetail');\n        });\n      };\n\n      if (completed) {\n        return React.createElement(CompletedTaskName, {\n          key: name,\n          onClick: onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, text);\n      }\n\n      return React.createElement(ModulItem, {\n        title: text,\n        icon: icon,\n        color: color,\n        key: name,\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this3 = this;\n\n      var selectedFeature = this.state.selectedFeature;\n      var _this$props2 = this.props,\n          availableFeatures = _this$props2.availableFeatures,\n          currentRoute = _this$props2.currentRoute,\n          currentUser = _this$props2.currentUser,\n          restartOnboard = _this$props2.restartOnboard;\n\n      if (currentRoute === 'todoDetail') {\n        return this.withHeader(selectedFeature && React.createElement(TodoDetail, {\n          feature: selectedFeature,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }));\n      }\n\n      if (currentRoute === 'todoList') {\n        var percentage = this.getPercentage();\n        var text = \"Let's set up your workplace for success\";\n\n        if (percentage === 100) {\n          text = 'Congratulations! You have finished setting up';\n        }\n\n        return this.withHeader(React.createElement(React.Fragment, null, React.createElement(Greeting, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, __('Hello'), \"! \", getCurrentUserName(currentUser), React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"Wave\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, \"\\uD83D\\uDC4B\")), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, __(text), \".\"), this.renderProgress()), availableFeatures.filter(function (feature) {\n          return !feature.isComplete;\n        }).map(function (availabeFeature) {\n          return _this3.renderFeature(availabeFeature);\n        }), React.createElement(RestartButton, {\n          onClick: restartOnboard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, __('Reselect features')), this.renderCompleted()));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getPercentage\",\n    value: function getPercentage() {\n      var availableFeatures = this.props.availableFeatures;\n      var completedCount = availableFeatures.filter(function (feature) {\n        return feature.isComplete;\n      }).length;\n      return calculatePercentage(availableFeatures.length + 1, completedCount + 1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ContentWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.renderContent());\n    }\n  }]);\n\n  return Todo;\n}(React.Component);\n\nexport default Todo;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/robot/components/Todo.tsx"],"names":["Icon","ProgressBar","__","React","TodoDetail","calculatePercentage","getCurrentUserName","ModulItem","CompletedTaskName","CompletedTaskWrapper","ContentWrapper","Greeting","NavButton","ProgressText","RestartButton","SubHeader","Todo","props","withHeader","content","changeRoute","currentRoute","toggleContent","onBack","onHide","renderProgress","percentage","getPercentage","text","renderCompleted","availableFeatures","completedTasks","filter","feature","isComplete","showComplete","state","toggleFeatures","map","availabeFeature","renderFeature","setState","selectedFeature","undefined","completed","icon","color","name","onClick","currentUser","restartOnboard","completedCount","length","renderContent","Component"],"mappings":"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","sourcesContent":["import { IUser } from 'modules/auth/types';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport ProgressBar from 'modules/common/components/ProgressBar';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport TodoDetail from '../containers/TodoDetail';\nimport { IFeature } from '../types';\nimport { calculatePercentage, getCurrentUserName } from '../utils';\nimport ModulItem from './ModulItem';\nimport {\n  CompletedTaskName,\n  CompletedTaskWrapper,\n  ContentWrapper,\n  Greeting,\n  NavButton,\n  ProgressText,\n  RestartButton,\n  SubHeader\n} from './styles';\n\ntype Props = {\n  availableFeatures: IFeature[];\n  currentRoute?: string;\n  changeRoute: (route: string) => void;\n  currentUser: IUser;\n  showContent: boolean;\n  toggleContent: (isShow: boolean) => void;\n  restartOnboard: () => void;\n};\n\ntype State = {\n  selectedFeature?: IFeature;\n  showComplete: boolean;\n};\n\nclass Todo extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = { selectedFeature: undefined, showComplete: true };\n  }\n\n  withHeader = (content: React.ReactNode) => {\n    const { changeRoute, currentRoute, toggleContent } = this.props;\n\n    const onBack = () => {\n      changeRoute('todoList');\n    };\n\n    const onHide = () => {\n      toggleContent(false);\n    };\n\n    return (\n      <>\n        {currentRoute === 'todoDetail' && (\n          <NavButton onClick={onBack}>\n            <Icon icon=\"arrow-left\" size={24} />\n          </NavButton>\n        )}\n\n        <NavButton id=\"robot-feature-close\" onClick={onHide} right={true}>\n          <Icon icon=\"times\" size={17} />\n        </NavButton>\n        {content}\n      </>\n    );\n  };\n\n  renderProgress = () => {\n    const percentage = this.getPercentage();\n    let text = 'keep going!';\n\n    if (percentage < 75 && percentage > 50) {\n      text = \"you're halfway through, keep going!\";\n    }\n\n    if (percentage > 75 && percentage < 100) {\n      text = 'almost done, just a little more!';\n    }\n\n    if (percentage === 100) {\n      text = 'awesome!';\n    }\n\n    return (\n      <div>\n        <ProgressBar percentage={percentage} color=\"#3B85F4\" height=\"8px\" />\n        <ProgressText>\n          {percentage}% done - {text}\n        </ProgressText>\n      </div>\n    );\n  };\n\n  renderFeature(feature: IFeature, completed?: boolean) {\n    const { changeRoute } = this.props;\n    const { text, icon, color, name } = feature;\n\n    const onClick = () => {\n      this.setState({ selectedFeature: feature }, () => {\n        changeRoute('todoDetail');\n      });\n    };\n\n    if (completed) {\n      return (\n        <CompletedTaskName key={name} onClick={onClick}>\n          {text}\n        </CompletedTaskName>\n      );\n    }\n\n    return (\n      <ModulItem\n        title={text}\n        icon={icon}\n        color={color}\n        key={name}\n        onClick={onClick}\n      />\n    );\n  }\n\n  renderCompleted = () => {\n    const { availableFeatures } = this.props;\n    const completedTasks = availableFeatures.filter(\n      feature => feature.isComplete\n    );\n\n    const { showComplete } = this.state;\n\n    return (\n      <CompletedTaskWrapper>\n        <SubHeader onClick={this.toggleFeatures}>\n          {__('Show completed')}\n          <Icon icon={showComplete ? 'angle-down' : 'angle-up'} />\n        </SubHeader>\n        {showComplete && (\n          <>\n            {completedTasks.map(availabeFeature =>\n              this.renderFeature(availabeFeature, true)\n            )}\n            <CompletedTaskName>{__('Set up your account')}</CompletedTaskName>\n          </>\n        )}\n      </CompletedTaskWrapper>\n    );\n  };\n\n  renderContent() {\n    const { selectedFeature } = this.state;\n    const {\n      availableFeatures,\n      currentRoute,\n      currentUser,\n      restartOnboard\n    } = this.props;\n\n    if (currentRoute === 'todoDetail') {\n      return this.withHeader(\n        selectedFeature && <TodoDetail feature={selectedFeature} />\n      );\n    }\n\n    if (currentRoute === 'todoList') {\n      const percentage = this.getPercentage();\n      let text = \"Let's set up your workplace for success\";\n\n      if (percentage === 100) {\n        text = 'Congratulations! You have finished setting up';\n      }\n\n      return this.withHeader(\n        <>\n          <Greeting>\n            <b>\n              {__('Hello')}! {getCurrentUserName(currentUser)}\n              <span role=\"img\" aria-label=\"Wave\">\n                👋\n              </span>\n            </b>\n            <p>{__(text)}.</p>\n\n            {this.renderProgress()}\n          </Greeting>\n          {availableFeatures\n            .filter(feature => !feature.isComplete)\n            .map(availabeFeature => this.renderFeature(availabeFeature))}\n\n          <RestartButton onClick={restartOnboard}>\n            {__('Reselect features')}\n          </RestartButton>\n\n          {this.renderCompleted()}\n        </>\n      );\n    }\n\n    return null;\n  }\n\n  toggleFeatures = () => {\n    this.setState({ showComplete: !this.state.showComplete });\n  };\n\n  getPercentage() {\n    const { availableFeatures } = this.props;\n    const completedCount = availableFeatures.filter(\n      feature => feature.isComplete\n    ).length;\n\n    return calculatePercentage(\n      availableFeatures.length + 1,\n      completedCount + 1\n    );\n  }\n\n  render() {\n    return <ContentWrapper>{this.renderContent()}</ContentWrapper>;\n  }\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}