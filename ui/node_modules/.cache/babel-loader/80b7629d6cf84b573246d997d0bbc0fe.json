{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/containers/ActivityLogs.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ActivityLogs from '../components/ActivityLogs';\nimport { queries, subscriptions } from '../graphql';\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.unsubscribe = void 0;\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var activityLogQuery = this.props.activityLogQuery;\n      this.unsubscribe = activityLogQuery.subscribeToMore({\n        document: gql(subscriptions.activityLogsChanged),\n        updateQuery: function updateQuery() {\n          _this2.props.activityLogQuery.refetch();\n        }\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.activityType !== this.props.activityType) {\n        this.props.activityLogQuery.refetch();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          target = _this$props.target,\n          activityLogQuery = _this$props.activityLogQuery,\n          extraTabs = _this$props.extraTabs,\n          onChangeActivityTab = _this$props.onChangeActivityTab;\n      var props = {\n        target: target,\n        loadingLogs: activityLogQuery.loading,\n        activityLogs: activityLogQuery.activityLogs || [],\n        onTabClick: onChangeActivityTab,\n        extraTabs: extraTabs\n      };\n      return React.createElement(AppConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, function (_ref) {\n        var currentUser = _ref.currentUser;\n        return React.createElement(ActivityLogs, Object.assign({}, props, {\n          currentUser: currentUser || {},\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nvar WithData = withProps(compose(graphql(gql(queries.activityLogs), {\n  name: 'activityLogQuery',\n  options: function options(_ref2) {\n    var contentId = _ref2.contentId,\n        contentType = _ref2.contentType,\n        activityType = _ref2.activityType;\n    return {\n      variables: {\n        contentId: contentId,\n        contentType: contentType,\n        activityType: activityType\n      }\n    };\n  }\n}))(Container));\n\nvar Wrapper =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Wrapper, _React$Component2);\n\n  function Wrapper(props) {\n    var _this3;\n\n    _classCallCheck(this, Wrapper);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Wrapper).call(this, props));\n\n    _this3.onChangeActivityTab = function (currentTab) {\n      _this3.setState({\n        activityType: currentTab\n      });\n    };\n\n    _this3.state = {\n      activityType: ''\n    };\n    return _this3;\n  }\n\n  _createClass(Wrapper, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          contentId = _this$props2.contentId,\n          contentType = _this$props2.contentType,\n          target = _this$props2.target,\n          extraTabs = _this$props2.extraTabs;\n      var activityType = this.state.activityType;\n      return React.createElement(WithData, {\n        target: target,\n        contentId: contentId,\n        contentType: contentType,\n        extraTabs: extraTabs,\n        activityType: activityType,\n        onChangeActivityTab: this.onChangeActivityTab,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Wrapper;\n}(React.Component);\n\nexport { Wrapper as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/containers/ActivityLogs.tsx"],"names":["AppConsumer","gql","compose","withProps","React","graphql","ActivityLogs","queries","subscriptions","Container","unsubscribe","activityLogQuery","props","subscribeToMore","document","activityLogsChanged","updateQuery","refetch","nextProps","activityType","target","extraTabs","onChangeActivityTab","loadingLogs","loading","activityLogs","onTabClick","currentUser","Component","WithData","name","options","contentId","contentType","variables","Wrapper","currentTab","setState","state"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IUser } from 'modules/auth/types';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { ActivityLogQueryResponse } from '../../customers/types';\nimport ActivityLogs from '../components/ActivityLogs';\nimport { queries, subscriptions } from '../graphql';\n\ntype Props = {\n  contentId: string;\n  contentType: string;\n  target?: string;\n  extraTabs: Array<{ name: string; label: string }>;\n};\n\ntype FinalProps = {\n  activityLogQuery: ActivityLogQueryResponse;\n} & WithDataProps;\n\nclass Container extends React.Component<FinalProps, {}> {\n  private unsubscribe;\n\n  componentDidMount() {\n    const { activityLogQuery } = this.props;\n\n    this.unsubscribe = activityLogQuery.subscribeToMore({\n      document: gql(subscriptions.activityLogsChanged),\n      updateQuery: () => {\n        this.props.activityLogQuery.refetch();\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.activityType !== this.props.activityType) {\n      this.props.activityLogQuery.refetch();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const {\n      target,\n      activityLogQuery,\n      extraTabs,\n      onChangeActivityTab\n    } = this.props;\n\n    const props = {\n      target,\n      loadingLogs: activityLogQuery.loading,\n      activityLogs: activityLogQuery.activityLogs || [],\n      onTabClick: onChangeActivityTab,\n      extraTabs\n    };\n\n    return (\n      <AppConsumer>\n        {({ currentUser }) => (\n          <ActivityLogs {...props} currentUser={currentUser || ({} as IUser)} />\n        )}\n      </AppConsumer>\n    );\n  }\n}\n\ntype WithDataProps = Props & {\n  onChangeActivityTab: (currentTab: string) => void;\n  activityType: string;\n};\n\nconst WithData = withProps<WithDataProps>(\n  compose(\n    graphql<WithDataProps, ActivityLogQueryResponse>(\n      gql(queries.activityLogs),\n      {\n        name: 'activityLogQuery',\n        options: ({ contentId, contentType, activityType }: WithDataProps) => {\n          return {\n            variables: {\n              contentId,\n              contentType,\n              activityType\n            }\n          };\n        }\n      }\n    )\n  )(Container)\n);\n\nexport default class Wrapper extends React.Component<\n  Props,\n  { activityType: string }\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activityType: ''\n    };\n  }\n\n  onChangeActivityTab = (currentTab: string) => {\n    this.setState({ activityType: currentTab });\n  };\n\n  render() {\n    const { contentId, contentType, target, extraTabs } = this.props;\n    const { activityType } = this.state;\n\n    return (\n      <WithData\n        target={target}\n        contentId={contentId}\n        contentType={contentType}\n        extraTabs={extraTabs}\n        activityType={activityType}\n        onChangeActivityTab={this.onChangeActivityTab}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}