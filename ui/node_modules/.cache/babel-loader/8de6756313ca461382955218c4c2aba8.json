{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/Sidebar.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { queries as tagQueries } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { withProps } from '../../common/utils';\nimport Sidebar from '../components/Sidebar';\nimport { queries } from '../graphql';\n\nvar SidebarContainer = function SidebarContainer(props) {\n  var kindCountsQuery = props.kindCountsQuery,\n      statusCountsQuery = props.statusCountsQuery,\n      tagsQuery = props.tagsQuery,\n      tagCountsQuery = props.tagCountsQuery;\n\n  var updatedProps = _objectSpread({}, props, {\n    kindCounts: kindCountsQuery.engageMessageCounts || {},\n    statusCounts: statusCountsQuery.engageMessageCounts || {},\n    tags: tagsQuery.tags || [],\n    tagCounts: tagCountsQuery.engageMessageCounts || {}\n  });\n\n  return React.createElement(Sidebar, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.kindCounts), {\n  name: 'kindCountsQuery'\n}), graphql(gql(queries.statusCounts), {\n  name: 'statusCountsQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      variables: {\n        kind: queryParams.kind || ''\n      }\n    };\n  }\n}), graphql(gql(tagQueries.tags), {\n  name: 'tagsQuery',\n  options: function options() {\n    return {\n      variables: {\n        type: 'engageMessage'\n      }\n    };\n  }\n}), graphql(gql(queries.tagCounts), {\n  name: 'tagCountsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        kind: queryParams.kind || '',\n        status: queryParams.status || ''\n      }\n    };\n  }\n}))(withRouter(SidebarContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/Sidebar.tsx"],"names":["gql","compose","queries","tagQueries","React","graphql","withRouter","withProps","Sidebar","SidebarContainer","props","kindCountsQuery","statusCountsQuery","tagsQuery","tagCountsQuery","updatedProps","kindCounts","engageMessageCounts","statusCounts","tags","tagCounts","name","options","queryParams","variables","kind","type","status"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,OAAO,IAAIC,UAApB,QAAsC,sBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASN,OAAT,QAAwB,YAAxB;;AAcA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAuB;AAAA,MAE5CC,eAF4C,GAM1CD,KAN0C,CAE5CC,eAF4C;AAAA,MAG5CC,iBAH4C,GAM1CF,KAN0C,CAG5CE,iBAH4C;AAAA,MAI5CC,SAJ4C,GAM1CH,KAN0C,CAI5CG,SAJ4C;AAAA,MAK5CC,cAL4C,GAM1CJ,KAN0C,CAK5CI,cAL4C;;AAQ9C,MAAMC,YAAY,qBACbL,KADa;AAEhBM,IAAAA,UAAU,EAAEL,eAAe,CAACM,mBAAhB,IAAuC,EAFnC;AAGhBC,IAAAA,YAAY,EAAEN,iBAAiB,CAACK,mBAAlB,IAAyC,EAHvC;AAIhBE,IAAAA,IAAI,EAAEN,SAAS,CAACM,IAAV,IAAkB,EAJR;AAKhBC,IAAAA,SAAS,EAAEN,cAAc,CAACG,mBAAf,IAAsC;AALjC,IAAlB;;AAQA,SAAO,oBAAC,OAAD,oBAAaF,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAjBD;;AAmBA,eAAeR,SAAS,CACtBN,OAAO,CACLI,OAAO,CAA4BL,GAAG,CAACE,OAAO,CAACc,UAAT,CAA/B,EAAqD;AAC1DK,EAAAA,IAAI,EAAE;AADoD,CAArD,CADF,EAILhB,OAAO,CACLL,GAAG,CAACE,OAAO,CAACgB,YAAT,CADE,EAEL;AACEG,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,WAAH,QAAGA,WAAH;AAAA,WAAsB;AAC7BC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAEF,WAAW,CAACE,IAAZ,IAAoB;AADjB;AADkB,KAAtB;AAAA;AAFX,CAFK,CAJF,EAeLpB,OAAO,CACLL,GAAG,CAACG,UAAU,CAACgB,IAAZ,CADE,EAEL;AACEE,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdE,MAAAA,SAAS,EAAE;AAAEE,QAAAA,IAAI,EAAE;AAAR;AADG,KAAP;AAAA;AAFX,CAFK,CAfF,EAwBLrB,OAAO,CACLL,GAAG,CAACE,OAAO,CAACkB,SAAT,CADE,EAEL;AACEC,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,WAAH,SAAGA,WAAH;AAAA,WAAsB;AAC7BC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAEF,WAAW,CAACE,IAAZ,IAAoB,EADjB;AAETE,QAAAA,MAAM,EAAEJ,WAAW,CAACI,MAAZ,IAAsB;AAFrB;AADkB,KAAtB;AAAA;AAFX,CAFK,CAxBF,CAAP,CAoCErB,UAAU,CAAaG,gBAAb,CApCZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { queries as tagQueries } from 'modules/tags/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { withProps } from '../../common/utils';\nimport { TagsQueryResponse } from '../../tags/types';\nimport Sidebar from '../components/Sidebar';\nimport { queries } from '../graphql';\nimport { CountQueryResponse, TagCountQueryResponse } from '../types';\n\ntype Props = {\n  queryParams: any;\n};\n\ntype FinalProps = {\n  kindCountsQuery: CountQueryResponse;\n  statusCountsQuery: CountQueryResponse;\n  tagsQuery: TagsQueryResponse;\n  tagCountsQuery: TagCountQueryResponse;\n} & IRouterProps;\n\nconst SidebarContainer = (props: FinalProps) => {\n  const {\n    kindCountsQuery,\n    statusCountsQuery,\n    tagsQuery,\n    tagCountsQuery\n  } = props;\n\n  const updatedProps = {\n    ...props,\n    kindCounts: kindCountsQuery.engageMessageCounts || {},\n    statusCounts: statusCountsQuery.engageMessageCounts || {},\n    tags: tagsQuery.tags || [],\n    tagCounts: tagCountsQuery.engageMessageCounts || {}\n  };\n\n  return <Sidebar {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, CountQueryResponse>(gql(queries.kindCounts), {\n      name: 'kindCountsQuery'\n    }),\n    graphql<Props, CountQueryResponse, { kind: string }>(\n      gql(queries.statusCounts),\n      {\n        name: 'statusCountsQuery',\n        options: ({ queryParams }) => ({\n          variables: {\n            kind: queryParams.kind || ''\n          }\n        })\n      }\n    ),\n    graphql<Props, TagCountQueryResponse, { type: string }>(\n      gql(tagQueries.tags),\n      {\n        name: 'tagsQuery',\n        options: () => ({\n          variables: { type: 'engageMessage' }\n        })\n      }\n    ),\n    graphql<Props, CountQueryResponse, { kind: string; status: string }>(\n      gql(queries.tagCounts),\n      {\n        name: 'tagCountsQuery',\n        options: ({ queryParams }) => ({\n          variables: {\n            kind: queryParams.kind || '',\n            status: queryParams.status || ''\n          }\n        })\n      }\n    )\n  )(withRouter<FinalProps>(SidebarContainer))\n);\n"]},"metadata":{},"sourceType":"module"}