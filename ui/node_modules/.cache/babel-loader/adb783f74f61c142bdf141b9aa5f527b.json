{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/step/Common.tsx\";\nimport FormControl from 'modules/common/components/form/Control';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { __ } from 'modules/common/utils';\nimport { CustomerCounts, RadioContainer } from 'modules/engage/styles';\nimport React from 'react';\nimport Targets from '../Targets';\n\nvar Common =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Common, _React$Component);\n\n  function Common(props) {\n    var _this;\n\n    _classCallCheck(this, Common);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Common).call(this, props));\n\n    _this.toggleForm = function () {\n      _this.setState(function (s) {\n        return {\n          show: !s.show\n        };\n      });\n    };\n\n    _this.onChangeStep = function (name, targetIds) {\n      _this.setState({\n        targetIds: targetIds\n      }, function () {\n        _this.props.onChange(name, targetIds);\n      });\n    };\n\n    _this.renderRadioControl = function (_ref) {\n      var title = _ref.title,\n          checked = _ref.checked;\n      var label = _this.props.label;\n      return React.createElement(FormControl, {\n        checked: checked,\n        name: label,\n        onChange: _this.toggleForm,\n        value: _this.state.show,\n        componentClass: \"radio\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, title);\n    };\n\n    _this.state = {\n      targetIds: props.targetIds || [],\n      show: false\n    };\n    return _this;\n  }\n\n  _createClass(Common, [{\n    key: \"renderCounts\",\n    value: function renderCounts() {\n      var targetIds = this.state.targetIds;\n      return React.createElement(CustomerCounts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"users\",\n        size: 50,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.props.customersCount(targetIds), \" \", __('customers')));\n    }\n  }, {\n    key: \"renderActionSelector\",\n    value: function renderActionSelector() {\n      var show = this.state.show;\n      var messageType = this.props.messageType;\n      return React.createElement(RadioContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.renderRadioControl({\n        checked: show === false,\n        title: __(\"Choose a \".concat(messageType))\n      }), this.renderRadioControl({\n        checked: show === true,\n        title: __(\"Create a \".concat(messageType))\n      }));\n    }\n  }, {\n    key: \"renderSelectedComponent\",\n    value: function renderSelectedComponent() {\n      var _this$props = this.props,\n          targets = _this$props.targets,\n          messageType = _this$props.messageType,\n          targetCount = _this$props.targetCount,\n          targetIds = _this$props.targetIds,\n          name = _this$props.name,\n          renderButton = _this$props.renderButton,\n          Form = _this$props.Form,\n          formProps = _this$props.formProps,\n          onSubmit = _this$props.onSubmit,\n          icons = _this$props.icons;\n\n      if (this.state.show) {\n        return React.createElement(Form, Object.assign({}, formProps, {\n          renderButton: renderButton,\n          save: onSubmit,\n          afterSave: this.toggleForm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(Targets, {\n        name: name,\n        targets: targets,\n        messageType: messageType,\n        targetCount: targetCount,\n        defaultValues: targetIds,\n        onChangeStep: this.onChangeStep,\n        icons: icons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var actionSelector = this.renderActionSelector();\n      var selectedComponent = this.renderSelectedComponent();\n      var customerCounts = this.renderCounts();\n      return this.props.content({\n        actionSelector: actionSelector,\n        selectedComponent: selectedComponent,\n        customerCounts: customerCounts\n      });\n    }\n  }]);\n\n  return Common;\n}(React.Component);\n\nexport default Common;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/step/Common.tsx"],"names":["FormControl","Icon","__","CustomerCounts","RadioContainer","React","Targets","Common","props","toggleForm","setState","s","show","onChangeStep","name","targetIds","onChange","renderRadioControl","title","checked","label","state","customersCount","messageType","targets","targetCount","renderButton","Form","formProps","onSubmit","icons","actionSelector","renderActionSelector","selectedComponent","renderSelectedComponent","customerCounts","renderCounts","content","Component"],"mappings":"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","sourcesContent":["import FormControl from 'modules/common/components/form/Control';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport { CustomerCounts, RadioContainer } from 'modules/engage/styles';\nimport { TargetCount } from 'modules/engage/types';\nimport { ISegment, ISegmentDoc } from 'modules/segments/types';\nimport React from 'react';\nimport Targets from '../Targets';\n\ntype Props<Target, OnSubmit> = {\n  name: string;\n  label: string;\n  targetIds: string[];\n  messageType: string;\n  targets: Target[];\n  onSubmit?: OnSubmit;\n  renderButton?: (props: IButtonMutateProps) => JSX.Element;\n  targetCount: TargetCount;\n  Form: any;\n  formProps?: {\n    count?: (segment: ISegmentDoc) => void;\n    headSegments?: ISegment[];\n    segmentFields?: any[];\n  };\n  customersCount: (ids: string[]) => number;\n  onChange: (name: string, value: string[]) => void;\n  content: ({\n    actionSelector,\n    selectedComponent,\n    customerCounts\n  }: {\n    actionSelector: React.ReactNode;\n    selectedComponent: React.ReactNode;\n    customerCounts: React.ReactNode;\n  }) => React.ReactNode;\n  icons?: React.ReactNode[];\n};\n\ntype State = {\n  targetIds: string[];\n  show: boolean;\n};\n\nclass Common<Target, OnSubmit> extends React.Component<\n  Props<Target, OnSubmit>,\n  State\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      targetIds: props.targetIds || [],\n      show: false\n    };\n  }\n\n  toggleForm = () => {\n    this.setState(s => ({ show: !s.show }));\n  };\n\n  onChangeStep = (name: string, targetIds: string[]) => {\n    this.setState({ targetIds }, () => {\n      this.props.onChange(name, targetIds);\n    });\n  };\n\n  renderCounts() {\n    const { targetIds } = this.state;\n\n    return (\n      <CustomerCounts>\n        <Icon icon=\"users\" size={50} />\n        <p>\n          {this.props.customersCount(targetIds)} {__('customers')}\n        </p>\n      </CustomerCounts>\n    );\n  }\n\n  renderRadioControl = ({\n    title,\n    checked\n  }: {\n    title: string;\n    checked: boolean;\n  }) => {\n    const { label } = this.props;\n\n    return (\n      <FormControl\n        checked={checked}\n        name={label}\n        onChange={this.toggleForm}\n        value={this.state.show}\n        componentClass=\"radio\"\n      >\n        {title}\n      </FormControl>\n    );\n  };\n\n  renderActionSelector() {\n    const { show } = this.state;\n    const { messageType } = this.props;\n\n    return (\n      <RadioContainer>\n        {this.renderRadioControl({\n          checked: show === false,\n          title: __(`Choose a ${messageType}`)\n        })}\n\n        {this.renderRadioControl({\n          checked: show === true,\n          title: __(`Create a ${messageType}`)\n        })}\n      </RadioContainer>\n    );\n  }\n\n  renderSelectedComponent() {\n    const {\n      targets,\n      messageType,\n      targetCount,\n      targetIds,\n      name,\n      renderButton,\n      Form,\n      formProps,\n      onSubmit,\n      icons\n    } = this.props;\n\n    if (this.state.show) {\n      return (\n        <Form\n          {...formProps}\n          renderButton={renderButton}\n          save={onSubmit}\n          afterSave={this.toggleForm}\n        />\n      );\n    }\n\n    return (\n      <Targets<Target>\n        name={name}\n        targets={targets}\n        messageType={messageType}\n        targetCount={targetCount}\n        defaultValues={targetIds}\n        onChangeStep={this.onChangeStep}\n        icons={icons}\n      />\n    );\n  }\n\n  render() {\n    const actionSelector = this.renderActionSelector();\n    const selectedComponent = this.renderSelectedComponent();\n    const customerCounts = this.renderCounts();\n\n    return this.props.content({\n      actionSelector,\n      selectedComponent,\n      customerCounts\n    });\n  }\n}\n\nexport default Common;\n"]},"metadata":{},"sourceType":"module"}