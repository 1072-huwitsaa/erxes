{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/containers/LogModalContainer.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport LogModal from '../components/LogModalContent';\nimport queries from '../queries';\n\nvar LogModalContainer = function LogModalContainer(props) {\n  var schemaLabelsQuery = props.schemaLabelsQuery,\n      log = props.log;\n\n  if (!log) {\n    return null;\n  }\n\n  if (schemaLabelsQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LogModal, {\n    log: log,\n    schemaLabelMaps: schemaLabelsQuery.getDbSchemaLabels || [],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n};\n\nexport default compose(graphql(gql(queries.getDbSchemaLabels), {\n  name: 'schemaLabelsQuery',\n  options: function options(_ref) {\n    var log = _ref.log;\n    return {\n      variables: {\n        type: log.type\n      }\n    };\n  }\n}))(LogModalContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/logs/containers/LogModalContainer.tsx"],"names":["gql","compose","Spinner","React","graphql","LogModal","queries","LogModalContainer","props","schemaLabelsQuery","log","loading","getDbSchemaLabels","name","options","variables","type"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAQA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAkB;AAAA,MAClCC,iBADkC,GACPD,KADO,CAClCC,iBADkC;AAAA,MACfC,GADe,GACPF,KADO,CACfE,GADe;;AAG1C,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAID,iBAAiB,CAACE,OAAtB,EAA+B;AAC7B,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,oBAAC,QAAD;AACE,IAAA,GAAG,EAAED,GADP;AAEE,IAAA,eAAe,EAAED,iBAAiB,CAACG,iBAAlB,IAAuC,EAF1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD,CAjBD;;AAmBA,eAAeX,OAAO,CACpBG,OAAO,CAAmCJ,GAAG,CAACM,OAAO,CAACM,iBAAT,CAAtC,EAAmE;AACxEC,EAAAA,IAAI,EAAE,mBADkE;AAExEC,EAAAA,OAAO,EAAE;AAAA,QAAGJ,GAAH,QAAGA,GAAH;AAAA,WAAc;AAAEK,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAEN,GAAG,CAACM;AAAZ;AAAb,KAAd;AAAA;AAF+D,CAAnE,CADa,CAAP,CAKbT,iBALa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport LogModal from '../components/LogModalContent';\nimport queries from '../queries';\nimport { ILog, SchemaLabelsQueryResponse } from '../types';\n\ntype Props = {\n  schemaLabelsQuery: SchemaLabelsQueryResponse;\n  log: ILog;\n};\n\nconst LogModalContainer = (props: Props) => {\n  const { schemaLabelsQuery, log } = props;\n\n  if (!log) {\n    return null;\n  }\n\n  if (schemaLabelsQuery.loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <LogModal\n      log={log}\n      schemaLabelMaps={schemaLabelsQuery.getDbSchemaLabels || []}\n    />\n  );\n};\n\nexport default compose(\n  graphql<Props, SchemaLabelsQueryResponse>(gql(queries.getDbSchemaLabels), {\n    name: 'schemaLabelsQuery',\n    options: ({ log }) => ({ variables: { type: log.type } })\n  })\n)(LogModalContainer);\n"]},"metadata":{},"sourceType":"module"}