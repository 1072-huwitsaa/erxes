{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = attachImmutableEntitiesToEmojis;\n\nvar _draftJs = require('draft-js');\n\nvar _findWithRegex = require('find-with-regex');\n\nvar _findWithRegex2 = _interopRequireDefault(_findWithRegex);\n\nvar _emojione = require('emojione');\n\nvar _emojione2 = _interopRequireDefault(_emojione);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar unicodeRegex = new RegExp(_emojione2.default.unicodeRegexp, 'g');\n/*\n * Attaches Immutable DraftJS Entities to the Emoji text.\n *\n * This is necessary as emojis consist of 2 characters (unicode). By making them\n * immutable the whole Emoji is removed when hitting backspace.\n */\n\nfunction attachImmutableEntitiesToEmojis(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var blocks = contentState.getBlockMap();\n  var newContentState = contentState;\n  blocks.forEach(function (block) {\n    var plainText = block.getText();\n\n    var addEntityToEmoji = function addEntityToEmoji(start, end) {\n      var existingEntityKey = block.getEntityAt(start);\n\n      if (existingEntityKey) {\n        // avoid manipulation in case the emoji already has an entity\n        var entity = newContentState.getEntity(existingEntityKey);\n\n        if (entity && entity.get('type') === 'emoji') {\n          return;\n        }\n      }\n\n      var selection = _draftJs.SelectionState.createEmpty(block.getKey()).set('anchorOffset', start).set('focusOffset', end);\n\n      var emojiText = plainText.substring(start, end);\n      var contentStateWithEntity = newContentState.createEntity('emoji', 'IMMUTABLE', {\n        emojiUnicode: emojiText\n      });\n      var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      newContentState = _draftJs.Modifier.replaceText(newContentState, selection, emojiText, null, entityKey);\n    };\n\n    (0, _findWithRegex2.default)(unicodeRegex, block, addEntityToEmoji);\n  });\n\n  if (!newContentState.equals(contentState)) {\n    return _draftJs.EditorState.push(editorState, newContentState, 'convert-to-immutable-emojis');\n  }\n\n  return editorState;\n}","map":null,"metadata":{},"sourceType":"script"}