{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/scripts/containers/Form.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport { queries as integrationQueries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport Form from '../components/Form';\n\nvar FormContainer = function FormContainer(props) {\n  var integrationsQuery = props.integrationsQuery,\n      kbTopicsQuery = props.kbTopicsQuery;\n\n  if (integrationsQuery.loading || kbTopicsQuery.loading) {\n    return React.createElement(Spinner, {\n      objective: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n  var integrations = integrationsQuery.integrations;\n  var kbTopics = kbTopicsQuery.knowledgeBaseTopics;\n\n  var updatedProps = _objectSpread({}, props, {\n    messengers: integrations.filter(function (i) {\n      return i.kind === 'messenger';\n    }),\n    leads: integrations.filter(function (i) {\n      return i.kind === 'lead';\n    }),\n    kbTopics: kbTopics\n  });\n\n  return React.createElement(Form, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(integrationQueries.integrations), {\n  name: 'integrationsQuery'\n}), graphql(gql(kbQueries.knowledgeBaseTopics), {\n  name: 'kbTopicsQuery'\n}))(FormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/scripts/containers/Form.tsx"],"names":["gql","compose","Spinner","queries","kbQueries","integrationQueries","React","graphql","withProps","Form","FormContainer","props","integrationsQuery","kbTopicsQuery","loading","integrations","kbTopics","knowledgeBaseTopics","updatedProps","messengers","filter","i","kind","leads","name"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,OAAO,IAAIC,SAApB,QAAqC,+BAArC;AAEA,SAASD,OAAO,IAAIE,kBAApB,QAA8C,uCAA9C;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;;AAQA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAqC;AAAA,MACjDC,iBADiD,GACZD,KADY,CACjDC,iBADiD;AAAA,MAC9BC,aAD8B,GACZF,KADY,CAC9BE,aAD8B;;AAGzD,MAAID,iBAAiB,CAACE,OAAlB,IAA6BD,aAAa,CAACC,OAA/C,EAAwD;AACtD,WAAO,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMC,YAAY,GAAGH,iBAAiB,CAACG,YAAvC;AAEA,MAAMC,QAAQ,GAAGH,aAAa,CAACI,mBAA/B;;AAEA,MAAMC,YAAY,qBACbP,KADa;AAEhBQ,IAAAA,UAAU,EAAEJ,YAAY,CAACK,MAAb,CAAoB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,KAAW,WAAf;AAAA,KAArB,CAFI;AAGhBC,IAAAA,KAAK,EAAER,YAAY,CAACK,MAAb,CAAoB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,KAAW,MAAf;AAAA,KAArB,CAHS;AAIhBN,IAAAA,QAAQ,EAARA;AAJgB,IAAlB;;AAOA,SAAO,oBAAC,IAAD,oBAAUE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAnBD;;AAqBA,eAAeV,SAAS,CACtBP,OAAO,CACLM,OAAO,CAACP,GAAG,CAACK,kBAAkB,CAACU,YAApB,CAAJ,EAAuC;AAC5CS,EAAAA,IAAI,EAAE;AADsC,CAAvC,CADF,EAILjB,OAAO,CAACP,GAAG,CAACI,SAAS,CAACa,mBAAX,CAAJ,EAAqC;AAAEO,EAAAA,IAAI,EAAE;AAAR,CAArC,CAJF,CAAP,CAKEd,aALF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport { TopicsQueryResponse } from 'modules/knowledgeBase/types';\nimport { queries as integrationQueries } from 'modules/settings/integrations/graphql';\nimport { IntegrationsQueryResponse } from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { ICommonFormProps } from '../../common/types';\nimport Form from '../components/Form';\n\ntype Props = {\n  integrationsQuery: IntegrationsQueryResponse;\n  kbTopicsQuery: TopicsQueryResponse;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n};\n\nconst FormContainer = (props: Props & ICommonFormProps) => {\n  const { integrationsQuery, kbTopicsQuery } = props;\n\n  if (integrationsQuery.loading || kbTopicsQuery.loading) {\n    return <Spinner objective={true} />;\n  }\n\n  const integrations = integrationsQuery.integrations;\n\n  const kbTopics = kbTopicsQuery.knowledgeBaseTopics;\n\n  const updatedProps = {\n    ...props,\n    messengers: integrations.filter(i => i.kind === 'messenger'),\n    leads: integrations.filter(i => i.kind === 'lead'),\n    kbTopics\n  };\n\n  return <Form {...updatedProps} />;\n};\n\nexport default withProps<ICommonFormProps>(\n  compose(\n    graphql(gql(integrationQueries.integrations), {\n      name: 'integrationsQuery'\n    }),\n    graphql(gql(kbQueries.knowledgeBaseTopics), { name: 'kbTopicsQuery' })\n  )(FormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}