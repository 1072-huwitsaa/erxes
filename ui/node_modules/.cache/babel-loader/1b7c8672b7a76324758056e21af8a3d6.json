{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/Board.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyContent from 'modules/common/components/empty/EmptyContent';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { EMPTY_CONTENT_DEAL, EMPTY_CONTENT_TASK } from '../constants';\nimport { queries } from '../graphql';\nimport { RootBack, ScrolledContent } from '../styles/common';\nimport Pipeline from './Pipeline';\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board() {\n    _classCallCheck(this, Board);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Board).apply(this, arguments));\n  }\n\n  _createClass(Board, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          pipelineDetailQuery = _this$props.pipelineDetailQuery,\n          queryParams = _this$props.queryParams,\n          options = _this$props.options;\n\n      if (!pipelineDetailQuery || !pipelineDetailQuery.pipelineDetail) {\n        var type = options.type;\n\n        if (type === 'deal' || type === 'task') {\n          return React.createElement(EmptyContent, {\n            content: type === 'deal' ? EMPTY_CONTENT_DEAL : EMPTY_CONTENT_TASK,\n            maxItemWidth: \"400px\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(EmptyState, {\n          image: \"/images/actions/18.svg\",\n          text: \"Oh boy, looks like you need to get a head start on your board\",\n          size: \"small\",\n          light: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      }\n\n      var pipeline = pipelineDetailQuery.pipelineDetail;\n      return React.createElement(RootBack, {\n        style: {\n          backgroundColor: pipeline.bgColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(ScrolledContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Pipeline, {\n        options: options,\n        pipeline: pipeline,\n        key: pipeline._id,\n        queryParams: queryParams,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.pipelineDetail), {\n  name: 'pipelineDetailQuery',\n  skip: function skip(_ref) {\n    var queryParams = _ref.queryParams;\n    return !queryParams.pipelineId;\n  },\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        _id: queryParams && queryParams.pipelineId\n      }\n    };\n  }\n}))(withRouter(Board)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/Board.tsx"],"names":["gql","compose","EmptyContent","EmptyState","withProps","React","graphql","withRouter","EMPTY_CONTENT_DEAL","EMPTY_CONTENT_TASK","queries","RootBack","ScrolledContent","Pipeline","Board","props","pipelineDetailQuery","queryParams","options","pipelineDetail","type","pipeline","backgroundColor","bgColor","_id","Component","name","skip","pipelineId","variables"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,8CAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,cAAvD;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,kBAA1C;AAEA,OAAOC,QAAP,MAAqB,YAArB;;IAOMC,K;;;;;;;;;;;;;6BACK;AAAA,wBAC+C,KAAKC,KADpD;AAAA,UACCC,mBADD,eACCA,mBADD;AAAA,UACsBC,WADtB,eACsBA,WADtB;AAAA,UACmCC,OADnC,eACmCA,OADnC;;AAGP,UAAI,CAACF,mBAAD,IAAwB,CAACA,mBAAmB,CAACG,cAAjD,EAAiE;AAC/D,YAAMC,IAAI,GAAGF,OAAO,CAACE,IAArB;;AAEA,YAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,MAAhC,EAAwC;AACtC,iBACE,oBAAC,YAAD;AACE,YAAA,OAAO,EAAEA,IAAI,KAAK,MAAT,GAAkBZ,kBAAlB,GAAuCC,kBADlD;AAEE,YAAA,YAAY,EAAC,OAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAED,eACE,oBAAC,UAAD;AACE,UAAA,KAAK,EAAC,wBADR;AAEE,UAAA,IAAI,EAAC,+DAFP;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,KAAK,EAAE,IAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,UAAMY,QAAQ,GAAGL,mBAAmB,CAACG,cAArC;AAEA,aACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE;AAAEG,UAAAA,eAAe,EAAED,QAAQ,CAACE;AAA5B,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,OAAO,EAAEL,OADX;AAEE,QAAA,QAAQ,EAAEG,QAFZ;AAGE,QAAA,GAAG,EAAEA,QAAQ,CAACG,GAHhB;AAIE,QAAA,WAAW,EAAEP,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAYD;;;;EAxCiBZ,KAAK,CAACoB,S;;AAgD1B,eAAerB,SAAS,CACtBH,OAAO,CACLK,OAAO,CACLN,GAAG,CAACU,OAAO,CAACS,cAAT,CADE,EAEL;AACEO,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,IAAI,EAAE;AAAA,QAAGV,WAAH,QAAGA,WAAH;AAAA,WAAqB,CAACA,WAAW,CAACW,UAAlC;AAAA,GAFR;AAGEV,EAAAA,OAAO,EAAE;AAAA,QAAGD,WAAH,SAAGA,WAAH;AAAA,WAAsB;AAC7BY,MAAAA,SAAS,EAAE;AAAEL,QAAAA,GAAG,EAAEP,WAAW,IAAIA,WAAW,CAACW;AAAlC;AADkB,KAAtB;AAAA;AAHX,CAFK,CADF,CAAP,CAWErB,UAAU,CAACO,KAAD,CAXZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyContent from 'modules/common/components/empty/EmptyContent';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport { IRouterProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { EMPTY_CONTENT_DEAL, EMPTY_CONTENT_TASK } from '../constants';\nimport { queries } from '../graphql';\nimport { RootBack, ScrolledContent } from '../styles/common';\nimport { IOptions, PipelineDetailQueryResponse } from '../types';\nimport Pipeline from './Pipeline';\n\ntype Props = {\n  pipelineDetailQuery: PipelineDetailQueryResponse;\n} & WrapperProps &\n  IRouterProps;\n\nclass Board extends React.Component<Props> {\n  render() {\n    const { pipelineDetailQuery, queryParams, options } = this.props;\n\n    if (!pipelineDetailQuery || !pipelineDetailQuery.pipelineDetail) {\n      const type = options.type;\n\n      if (type === 'deal' || type === 'task') {\n        return (\n          <EmptyContent\n            content={type === 'deal' ? EMPTY_CONTENT_DEAL : EMPTY_CONTENT_TASK}\n            maxItemWidth=\"400px\"\n          />\n        );\n      }\n\n      return (\n        <EmptyState\n          image=\"/images/actions/18.svg\"\n          text=\"Oh boy, looks like you need to get a head start on your board\"\n          size=\"small\"\n          light={true}\n        />\n      );\n    }\n\n    const pipeline = pipelineDetailQuery.pipelineDetail;\n\n    return (\n      <RootBack style={{ backgroundColor: pipeline.bgColor }}>\n        <ScrolledContent>\n          <Pipeline\n            options={options}\n            pipeline={pipeline}\n            key={pipeline._id}\n            queryParams={queryParams}\n          />\n        </ScrolledContent>\n      </RootBack>\n    );\n  }\n}\n\ntype WrapperProps = {\n  queryParams: any;\n  options: IOptions;\n};\n\nexport default withProps<WrapperProps>(\n  compose(\n    graphql<WrapperProps, PipelineDetailQueryResponse, { _id?: string }>(\n      gql(queries.pipelineDetail),\n      {\n        name: 'pipelineDetailQuery',\n        skip: ({ queryParams }) => !queryParams.pipelineId,\n        options: ({ queryParams }) => ({\n          variables: { _id: queryParams && queryParams.pipelineId }\n        })\n      }\n    )\n  )(withRouter(Board))\n);\n"]},"metadata":{},"sourceType":"module"}