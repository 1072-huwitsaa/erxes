{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/Inbox.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport { can, router as routerUtils } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Empty from '../components/Empty';\nimport Inbox from '../components/Inbox';\nimport { queries } from '../graphql';\nimport { generateParams } from '../utils';\nvar InboxManagementActionContext = React.createContext({});\nexport var InboxManagementActionConsumer = InboxManagementActionContext.Consumer;\n\nvar WithRefetchHandling =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WithRefetchHandling, _React$Component);\n\n  function WithRefetchHandling(props) {\n    var _this;\n\n    _classCallCheck(this, WithRefetchHandling);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WithRefetchHandling).call(this, props));\n\n    var notifHandler = function notifHandler() {\n      _this.setState({\n        refetchRequired: new Date().toISOString()\n      });\n    };\n\n    _this.state = {\n      notifyConsumersOfManagementAction: notifHandler,\n      refetchRequired: ''\n    };\n    return _this;\n  }\n\n  _createClass(WithRefetchHandling, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(InboxManagementActionContext.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return WithRefetchHandling;\n}(React.Component);\n\nvar WithCurrentId =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(WithCurrentId, _React$Component2);\n\n  function WithCurrentId() {\n    _classCallCheck(this, WithCurrentId);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WithCurrentId).apply(this, arguments));\n  }\n\n  _createClass(WithCurrentId, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var conversationsGetLast = nextProps.conversationsGetLast,\n          loading = nextProps.loading,\n          history = nextProps.history,\n          queryParams = nextProps.queryParams;\n      var _id = queryParams._id;\n\n      if (!_id && conversationsGetLast && !loading) {\n        routerUtils.setParams(history, {\n          _id: conversationsGetLast._id\n        }, true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(AppConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, function (_ref) {\n        var currentUser = _ref.currentUser;\n        var queryParams = _this2.props.queryParams;\n        var _id = queryParams._id;\n\n        if (!currentUser) {\n          return null;\n        }\n\n        if (!_id || !can('showConversations', currentUser)) {\n          return React.createElement(Empty, {\n            queryParams: queryParams,\n            currentUser: currentUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(WithRefetchHandling, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Inbox, {\n          queryParams: queryParams,\n          currentConversationId: _id,\n          currentUser: currentUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return WithCurrentId;\n}(React.Component);\n\nexport default graphql(gql(queries.lastConversation), {\n  skip: function skip(props) {\n    return props.queryParams._id;\n  },\n  options: function options(props) {\n    return {\n      variables: generateParams(props.queryParams),\n      fetchPolicy: 'network-only'\n    };\n  },\n  props: function props(_ref2) {\n    var data = _ref2.data,\n        ownProps = _ref2.ownProps;\n    return {\n      conversationsGetLast: data.conversationsGetLast,\n      loading: data.loading,\n      history: ownProps.history,\n      queryParams: ownProps.queryParams\n    };\n  }\n})(WithCurrentId);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/Inbox.tsx"],"names":["AppConsumer","gql","can","router","routerUtils","React","graphql","Empty","Inbox","queries","generateParams","InboxManagementActionContext","createContext","InboxManagementActionConsumer","Consumer","WithRefetchHandling","props","notifHandler","setState","refetchRequired","Date","toISOString","state","notifyConsumersOfManagementAction","children","Component","WithCurrentId","nextProps","conversationsGetLast","loading","history","queryParams","_id","setParams","currentUser","lastConversation","skip","options","variables","fetchPolicy","data","ownProps"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,GAAT,EAAcC,MAAM,IAAIC,WAAxB,QAA2C,sBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAKA,SAASC,cAAT,QAA+B,UAA/B;AAiBA,IAAMC,4BAA4B,GAAGN,KAAK,CAACO,aAAN,CACnC,EADmC,CAArC;AAIA,OAAO,IAAMC,6BAA6B,GACxCF,4BAA4B,CAACG,QADxB;;IAGDC,mB;;;;;AAIJ,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6FAAMA,KAAN;;AAEA,QAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,eAAe,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AAAnB,OAAd;AACD,KAFD;;AAIA,UAAKC,KAAL,GAAa;AACXC,MAAAA,iCAAiC,EAAEN,YADxB;AAEXE,MAAAA,eAAe,EAAE;AAFN,KAAb;AAPiB;AAWlB;;;;6BAEe;AACd,aACE,oBAAC,4BAAD,CAA8B,QAA9B;AAAuC,QAAA,KAAK,EAAE,KAAKG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKN,KAAL,CAAWQ,QADd,CADF;AAKD;;;;EAvB+BnB,KAAK,CAACoB,S;;IA0BlCC,a;;;;;;;;;;;;;8CACsBC,S,EAAmB;AAAA,UACnCC,oBADmC,GACqBD,SADrB,CACnCC,oBADmC;AAAA,UACbC,OADa,GACqBF,SADrB,CACbE,OADa;AAAA,UACJC,OADI,GACqBH,SADrB,CACJG,OADI;AAAA,UACKC,WADL,GACqBJ,SADrB,CACKI,WADL;AAAA,UAEnCC,GAFmC,GAE3BD,WAF2B,CAEnCC,GAFmC;;AAI3C,UAAI,CAACA,GAAD,IAAQJ,oBAAR,IAAgC,CAACC,OAArC,EAA8C;AAC5CzB,QAAAA,WAAW,CAAC6B,SAAZ,CAAsBH,OAAtB,EAA+B;AAAEE,UAAAA,GAAG,EAAEJ,oBAAoB,CAACI;AAA5B,SAA/B,EAAkE,IAAlE;AACD;AACF;;;6BAEQ;AAAA;;AACP,aACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,gBAAqB;AAAA,YAAlBE,WAAkB,QAAlBA,WAAkB;AAAA,YACZH,WADY,GACI,MAAI,CAACf,KADT,CACZe,WADY;AAAA,YAEZC,GAFY,GAEJD,WAFI,CAEZC,GAFY;;AAIpB,YAAI,CAACE,WAAL,EAAkB;AAChB,iBAAO,IAAP;AACD;;AAED,YAAI,CAACF,GAAD,IAAQ,CAAC9B,GAAG,CAAC,mBAAD,EAAsBgC,WAAtB,CAAhB,EAAoD;AAClD,iBACE,oBAAC,KAAD;AAAO,YAAA,WAAW,EAAEH,WAApB;AAAiC,YAAA,WAAW,EAAEG,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAED,eACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AACE,UAAA,WAAW,EAAEH,WADf;AAEE,UAAA,qBAAqB,EAAEC,GAFzB;AAGE,UAAA,WAAW,EAAEE,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AASD,OAxBH,CADF;AA4BD;;;;EAvCyB7B,KAAK,CAACoB,S;;AA0ClC,eAAenB,OAAO,CAKpBL,GAAG,CAACQ,OAAO,CAAC0B,gBAAT,CALiB,EAKW;AAC/BC,EAAAA,IAAI,EAAE,cAACpB,KAAD,EAAwB;AAC5B,WAAOA,KAAK,CAACe,WAAN,CAAkBC,GAAzB;AACD,GAH8B;AAI/BK,EAAAA,OAAO,EAAE,iBAACrB,KAAD;AAAA,WAAyB;AAChCsB,MAAAA,SAAS,EAAE5B,cAAc,CAACM,KAAK,CAACe,WAAP,CADO;AAEhCQ,MAAAA,WAAW,EAAE;AAFmB,KAAzB;AAAA,GAJsB;AAQ/BvB,EAAAA,KAAK,EAAE,sBAA+D;AAAA,QAA5DwB,IAA4D,SAA5DA,IAA4D;AAAA,QAAtDC,QAAsD,SAAtDA,QAAsD;AACpE,WAAO;AACLb,MAAAA,oBAAoB,EAAEY,IAAI,CAACZ,oBADtB;AAELC,MAAAA,OAAO,EAAEW,IAAI,CAACX,OAFT;AAGLC,MAAAA,OAAO,EAAEW,QAAQ,CAACX,OAHb;AAILC,MAAAA,WAAW,EAAEU,QAAQ,CAACV;AAJjB,KAAP;AAMD;AAf8B,CALX,CAAP,CAqBZL,aArBY,CAAf","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport { can, router as routerUtils } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Empty from '../components/Empty';\nimport Inbox from '../components/Inbox';\nimport { queries } from '../graphql';\nimport {\n  ConvesationsQueryVariables,\n  LastConversationQueryResponse\n} from '../types';\nimport { generateParams } from '../utils';\n\ninterface IRouteProps {\n  queryParams: any;\n  history: any;\n}\n\ninterface IProps extends IRouteProps {\n  conversationsGetLast: any;\n  loading: boolean;\n}\n\ninterface IInboxRefetchController {\n  notifyConsumersOfManagementAction: () => void;\n  refetchRequired: string;\n}\n\nconst InboxManagementActionContext = React.createContext(\n  {} as IInboxRefetchController\n);\n\nexport const InboxManagementActionConsumer =\n  InboxManagementActionContext.Consumer;\n\nclass WithRefetchHandling extends React.Component<\n  any,\n  IInboxRefetchController\n> {\n  constructor(props) {\n    super(props);\n\n    const notifHandler = () => {\n      this.setState({ refetchRequired: new Date().toISOString() });\n    };\n\n    this.state = {\n      notifyConsumersOfManagementAction: notifHandler,\n      refetchRequired: ''\n    };\n  }\n\n  public render() {\n    return (\n      <InboxManagementActionContext.Provider value={this.state}>\n        {this.props.children}\n      </InboxManagementActionContext.Provider>\n    );\n  }\n}\n\nclass WithCurrentId extends React.Component<IProps> {\n  componentWillReceiveProps(nextProps: IProps) {\n    const { conversationsGetLast, loading, history, queryParams } = nextProps;\n    const { _id } = queryParams;\n\n    if (!_id && conversationsGetLast && !loading) {\n      routerUtils.setParams(history, { _id: conversationsGetLast._id }, true);\n    }\n  }\n\n  render() {\n    return (\n      <AppConsumer>\n        {({ currentUser }) => {\n          const { queryParams } = this.props;\n          const { _id } = queryParams;\n\n          if (!currentUser) {\n            return null;\n          }\n\n          if (!_id || !can('showConversations', currentUser)) {\n            return (\n              <Empty queryParams={queryParams} currentUser={currentUser} />\n            );\n          }\n\n          return (\n            <WithRefetchHandling>\n              <Inbox\n                queryParams={queryParams}\n                currentConversationId={_id}\n                currentUser={currentUser}\n              />\n            </WithRefetchHandling>\n          );\n        }}\n      </AppConsumer>\n    );\n  }\n}\n\nexport default graphql<\n  IRouteProps,\n  LastConversationQueryResponse,\n  ConvesationsQueryVariables,\n  IProps\n>(gql(queries.lastConversation), {\n  skip: (props: IRouteProps) => {\n    return props.queryParams._id;\n  },\n  options: (props: IRouteProps) => ({\n    variables: generateParams(props.queryParams),\n    fetchPolicy: 'network-only'\n  }),\n  props: ({ data, ownProps }: { data?: any; ownProps: IRouteProps }) => {\n    return {\n      conversationsGetLast: data.conversationsGetLast,\n      loading: data.loading,\n      history: ownProps.history,\n      queryParams: ownProps.queryParams\n    };\n  }\n})(WithCurrentId);\n"]},"metadata":{},"sourceType":"module"}