{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/tags/containers/Tagger.tsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation tagsTag(\\n    $type: String!\\n    $targetIds: [String!]!\\n    $tagIds: [String!]!\\n  ) {\\n    tagsTag(type: $type, targetIds: $targetIds, tagIds: $tagIds)\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($type: String!) {\\n    tags(type: $type) {\\n      _id\\n      name\\n      colorCode\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Tagger from '../components/Tagger';\n\nvar TaggerContainer = function TaggerContainer(props) {\n  var type = props.type,\n      _props$targets = props.targets,\n      targets = _props$targets === void 0 ? [] : _props$targets,\n      successCallback = props.successCallback,\n      tagsQuery = props.tagsQuery,\n      tagMutation = props.tagMutation;\n\n  var tag = function tag(selectedTagIds) {\n    var variables = {\n      type: type,\n      targetIds: targets.map(function (t) {\n        return t._id;\n      }),\n      tagIds: selectedTagIds\n    };\n    tagMutation({\n      variables: variables\n    }).then(function () {\n      var message = \"The \".concat(type, \" has been tagged!\");\n\n      if (targets.length > 1) {\n        message = \"Selected \".concat(type, \"s have been tagged!\");\n      }\n\n      Alert.success(message);\n\n      if (successCallback) {\n        successCallback();\n      }\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    loading: tagsQuery.loading,\n    tags: tagsQuery.tags || [],\n    tag: tag\n  });\n\n  return React.createElement(Tagger, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nvar query = gql(_templateObject());\nvar mutation = gql(_templateObject2());\nexport default withProps(compose(graphql(query, {\n  name: 'tagsQuery',\n  options: function options(props) {\n    return {\n      variables: {\n        type: props.type\n      }\n    };\n  }\n}), graphql(mutation, {\n  name: 'tagMutation',\n  options: function options(_ref) {\n    var refetchQueries = _ref.refetchQueries;\n    return {\n      refetchQueries: refetchQueries\n    };\n  }\n}))(TaggerContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/tags/containers/Tagger.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","Tagger","TaggerContainer","props","type","targets","successCallback","tagsQuery","tagMutation","tag","selectedTagIds","variables","targetIds","map","t","_id","tagIds","then","message","length","success","catch","error","updatedProps","loading","tags","query","mutation","name","options","refetchQueries"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,sBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAuBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAuB;AAAA,MACrCC,IADqC,GAC2BD,KAD3B,CACrCC,IADqC;AAAA,uBAC2BD,KAD3B,CAC/BE,OAD+B;AAAA,MAC/BA,OAD+B,+BACrB,EADqB;AAAA,MACjBC,eADiB,GAC2BH,KAD3B,CACjBG,eADiB;AAAA,MACAC,SADA,GAC2BJ,KAD3B,CACAI,SADA;AAAA,MACWC,WADX,GAC2BL,KAD3B,CACWK,WADX;;AAG7C,MAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,cAAc,EAAI;AAC5B,QAAMC,SAAS,GAAG;AAChBP,MAAAA,IAAI,EAAJA,IADgB;AAEhBQ,MAAAA,SAAS,EAAEP,OAAO,CAACQ,GAAR,CAAY,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,GAAN;AAAA,OAAb,CAFK;AAGhBC,MAAAA,MAAM,EAAEN;AAHQ,KAAlB;AAMAF,IAAAA,WAAW,CAAC;AAAEG,MAAAA,SAAS,EAATA;AAAF,KAAD,CAAX,CACGM,IADH,CACQ,YAAM;AACV,UAAIC,OAAO,iBAAUd,IAAV,sBAAX;;AAEA,UAAIC,OAAO,CAACc,MAAR,GAAiB,CAArB,EAAwB;AACtBD,QAAAA,OAAO,sBAAed,IAAf,wBAAP;AACD;;AAEDP,MAAAA,KAAK,CAACuB,OAAN,CAAcF,OAAd;;AAEA,UAAIZ,eAAJ,EAAqB;AACnBA,QAAAA,eAAe;AAChB;AACF,KAbH,EAcGe,KAdH,CAcS,UAAAC,KAAK,EAAI;AACdzB,MAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACJ,OAAlB;AACD,KAhBH;AAiBD,GAxBD;;AA0BA,MAAMK,YAAY,qBACbpB,KADa;AAEhBqB,IAAAA,OAAO,EAAEjB,SAAS,CAACiB,OAFH;AAGhBC,IAAAA,IAAI,EAAElB,SAAS,CAACkB,IAAV,IAAkB,EAHR;AAIhBhB,IAAAA,GAAG,EAAHA;AAJgB,IAAlB;;AAOA,SAAO,oBAAC,MAAD,oBAAYc,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArCD;;AAuCA,IAAMG,KAAK,GAAG/B,GAAH,mBAAX;AAUA,IAAMgC,QAAQ,GAAGhC,GAAH,oBAAd;AAUA,eAAeG,SAAS,CACtBF,OAAO,CACLI,OAAO,CAA6C0B,KAA7C,EAAoD;AACzDE,EAAAA,IAAI,EAAE,WADmD;AAEzDC,EAAAA,OAAO,EAAE,iBAAC1B,KAAD;AAAA,WAAmB;AAC1BQ,MAAAA,SAAS,EAAE;AAAEP,QAAAA,IAAI,EAAED,KAAK,CAACC;AAAd;AADe,KAAnB;AAAA;AAFgD,CAApD,CADF,EAOLJ,OAAO,CAAmD2B,QAAnD,EAA6D;AAClEC,EAAAA,IAAI,EAAE,aAD4D;AAElEC,EAAAA,OAAO,EAAE;AAAA,QAAGC,cAAH,QAAGA,cAAH;AAAA,WAAyB;AAChCA,MAAAA,cAAc,EAAdA;AADgC,KAAzB;AAAA;AAFyD,CAA7D,CAPF,CAAP,CAaE5B,eAbF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport Tagger from '../components/Tagger';\nimport {\n  ITagTypes,\n  TagMutationResponse,\n  TagMutationVariables,\n  TagsQueryResponse\n} from '../types';\n\ntype Props = {\n  // targets can be conversation, customer, company etc ...\n  targets?: any[];\n  event?: 'onClick' | 'onExit';\n  type: ITagTypes | string;\n  successCallback?: () => void;\n  className?: string;\n  refetchQueries?: any[];\n};\n\ntype FinalProps = {\n  tagsQuery: TagsQueryResponse;\n} & Props &\n  TagMutationResponse;\n\nconst TaggerContainer = (props: FinalProps) => {\n  const { type, targets = [], successCallback, tagsQuery, tagMutation } = props;\n\n  const tag = selectedTagIds => {\n    const variables = {\n      type,\n      targetIds: targets.map(t => t._id),\n      tagIds: selectedTagIds\n    };\n\n    tagMutation({ variables })\n      .then(() => {\n        let message = `The ${type} has been tagged!`;\n\n        if (targets.length > 1) {\n          message = `Selected ${type}s have been tagged!`;\n        }\n\n        Alert.success(message);\n\n        if (successCallback) {\n          successCallback();\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    loading: tagsQuery.loading,\n    tags: tagsQuery.tags || [],\n    tag\n  };\n\n  return <Tagger {...updatedProps} />;\n};\n\nconst query = gql`\n  query($type: String!) {\n    tags(type: $type) {\n      _id\n      name\n      colorCode\n    }\n  }\n`;\n\nconst mutation = gql`\n  mutation tagsTag(\n    $type: String!\n    $targetIds: [String!]!\n    $tagIds: [String!]!\n  ) {\n    tagsTag(type: $type, targetIds: $targetIds, tagIds: $tagIds)\n  }\n`;\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, TagsQueryResponse, { type: string }>(query, {\n      name: 'tagsQuery',\n      options: (props: Props) => ({\n        variables: { type: props.type }\n      })\n    }),\n    graphql<Props, TagMutationResponse, TagMutationVariables>(mutation, {\n      name: 'tagMutation',\n      options: ({ refetchQueries }) => ({\n        refetchQueries\n      })\n    })\n  )(TaggerContainer)\n);\n"]},"metadata":{},"sourceType":"module"}