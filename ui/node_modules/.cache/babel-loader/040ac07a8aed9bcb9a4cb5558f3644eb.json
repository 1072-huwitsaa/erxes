{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/telegram/Telegram.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport Form from \"modules/common/components/form/Form\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { __ } from \"modules/common/utils\";\nimport React from \"react\";\nimport SelectBrand from \"../../containers/SelectBrand\";\nimport SelectChannels from \"../../containers/SelectChannels\";\n\nvar Telegram =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Telegram, _React$Component);\n\n  function Telegram() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Telegram);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Telegram)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.generateDoc = function (values) {\n      return {\n        name: values.name,\n        brandId: values.brandId,\n        kind: \"smooch-telegram\",\n        data: {\n          displayName: values.name,\n          token: values.token\n        }\n      };\n    };\n\n    _this.renderContent = function (formProps) {\n      var _this$props = _this.props,\n          renderButton = _this$props.renderButton,\n          callback = _this$props.callback,\n          channelIds = _this$props.channelIds,\n          onChannelChange = _this$props.onChannelChange;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      return React.createElement(React.Fragment, null, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Name\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"name\",\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Telegram Bot Token\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        type: \"text\",\n        name: \"token\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }))), React.createElement(\"a\", {\n        href: \"https://docs.erxes.io/administrator/system-config#telegram\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Learn more about Telegram\"), React.createElement(SelectBrand, {\n        isRequired: true,\n        formProps: formProps,\n        description: __(\"Which specific Brand does this integration belong to?\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(SelectChannels, {\n        defaultValue: channelIds,\n        isRequired: true,\n        onChange: onChannelChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        type: \"button\",\n        onClick: callback,\n        icon: \"times-circle\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Cancel\"), renderButton({\n        name: \"integration\",\n        values: _this.generateDoc(values),\n        isSubmitted: isSubmitted,\n        callback: callback\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(Telegram, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Telegram;\n}(React.Component);\n\nexport default Telegram;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/telegram/Telegram.tsx"],"names":["Button","FormControl","Form","FormGroup","ControlLabel","ModalFooter","__","React","SelectBrand","SelectChannels","Telegram","generateDoc","values","name","brandId","kind","data","displayName","token","renderContent","formProps","props","renderButton","callback","channelIds","onChannelChange","isSubmitted","Component"],"mappings":"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","sourcesContent":["import { IButtonMutateProps, IFormProps } from \"modules/common/types\";\n\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport Form from \"modules/common/components/form/Form\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport { ModalFooter } from \"modules/common/styles/main\";\nimport { __ } from \"modules/common/utils\";\nimport React from \"react\";\nimport SelectBrand from \"../../containers/SelectBrand\";\nimport SelectChannels from \"../../containers/SelectChannels\";\n\ntype Props = {\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  callback: () => void;\n  onChannelChange: () => void;\n  channelIds: string[];\n};\n\nclass Telegram extends React.Component<Props> {\n  generateDoc = (values: { name: string; token: string; brandId: string }) => {\n    return {\n      name: values.name,\n      brandId: values.brandId,\n      kind: \"smooch-telegram\",\n      data: {\n        displayName: values.name,\n        token: values.token,\n      },\n    };\n  };\n\n  renderContent = (formProps: IFormProps) => {\n    const { renderButton, callback, channelIds, onChannelChange } = this.props;\n    const { values, isSubmitted } = formProps;\n\n    return (\n      <>\n        <FormGroup>\n          <ControlLabel required={true}>Name</ControlLabel>\n          <FormControl\n            {...formProps}\n            name=\"name\"\n            required={true}\n            autoFocus={true}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel required={true}>Telegram Bot Token</ControlLabel>\n          <FormControl\n            {...formProps}\n            type=\"text\"\n            name=\"token\"\n            required={true}\n          />\n        </FormGroup>\n\n        <a\n          href=\"https://docs.erxes.io/administrator/system-config#telegram\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {\"Learn more about Telegram\"}\n        </a>\n\n        <SelectBrand\n          isRequired={true}\n          formProps={formProps}\n          description={__(\n            \"Which specific Brand does this integration belong to?\"\n          )}\n        />\n\n        <SelectChannels\n          defaultValue={channelIds}\n          isRequired={true}\n          onChange={onChannelChange}\n        />\n\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            type=\"button\"\n            onClick={callback}\n            icon=\"times-circle\"\n            uppercase={false}\n          >\n            Cancel\n          </Button>\n          {renderButton({\n            name: \"integration\",\n            values: this.generateDoc(values),\n            isSubmitted,\n            callback,\n          })}\n        </ModalFooter>\n      </>\n    );\n  };\n\n  render() {\n    return <Form renderContent={this.renderContent} />;\n  }\n}\n\nexport default Telegram;\n"]},"metadata":{},"sourceType":"module"}