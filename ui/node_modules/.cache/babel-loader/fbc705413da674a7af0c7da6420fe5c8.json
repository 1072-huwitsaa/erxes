{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/KnowledgeBase.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport KnowledgeBaseComponent from '../components/KnowledgeBase';\nimport { queries } from '../graphql';\n\nvar KnowledgeBase = function KnowledgeBase(props) {\n  var categoryDetailQuery = props.categoryDetailQuery,\n      articlesCountQuery = props.articlesCountQuery;\n  var articlesCount = articlesCountQuery && articlesCountQuery.knowledgeBaseArticlesTotalCount;\n  var currentCategory = categoryDetailQuery && categoryDetailQuery.knowledgeBaseCategoryDetail;\n\n  var updatedProps = _objectSpread({}, props, {\n    articlesCount: articlesCount || 0,\n    currentCategory: currentCategory || {}\n  });\n\n  return React.createElement(KnowledgeBaseComponent, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n};\n\nvar KnowledgeBaseContainer = withProps(compose(graphql(gql(queries.knowledgeBaseCategoryDetail), {\n  name: 'categoryDetailQuery',\n  options: function options(_ref) {\n    var currentCategoryId = _ref.currentCategoryId;\n    return {\n      variables: {\n        _id: currentCategoryId\n      },\n      fetchPolicy: 'network-only'\n    };\n  },\n  skip: function skip(_ref2) {\n    var currentCategoryId = _ref2.currentCategoryId;\n    return !currentCategoryId;\n  }\n}), graphql(gql(queries.knowledgeBaseArticlesTotalCount), {\n  name: 'articlesCountQuery',\n  options: function options(_ref3) {\n    var currentCategoryId = _ref3.currentCategoryId;\n    return {\n      variables: {\n        categoryIds: [currentCategoryId]\n      }\n    };\n  },\n  skip: function skip(_ref4) {\n    var currentCategoryId = _ref4.currentCategoryId;\n    return !currentCategoryId;\n  }\n}))(KnowledgeBase));\n\nvar WithCurrentId =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WithCurrentId, _React$Component);\n\n  function WithCurrentId() {\n    _classCallCheck(this, WithCurrentId);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WithCurrentId).apply(this, arguments));\n  }\n\n  _createClass(WithCurrentId, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var lastCategoryQuery = nextProps.lastCategoryQuery,\n          history = nextProps.history,\n          _id = nextProps.queryParams._id;\n\n      if (!lastCategoryQuery) {\n        return;\n      }\n\n      var knowledgeBaseCategoriesGetLast = lastCategoryQuery.knowledgeBaseCategoriesGetLast,\n          loading = lastCategoryQuery.loading;\n\n      if (!_id && knowledgeBaseCategoriesGetLast && !loading) {\n        routerUtils.setParams(history, {\n          id: knowledgeBaseCategoriesGetLast._id\n        }, true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var id = this.props.queryParams.id;\n\n      var updatedProps = _objectSpread({}, this.props, {\n        currentCategoryId: id || ''\n      });\n\n      return React.createElement(KnowledgeBaseContainer, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WithCurrentId;\n}(React.Component);\n\nvar WithLastCategory = withProps(compose(graphql(gql(queries.categoriesGetLast), {\n  name: 'lastCategoryQuery',\n  skip: function skip(_ref5) {\n    var queryParams = _ref5.queryParams;\n    return queryParams.id;\n  },\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(WithCurrentId));\n\nvar WithQueryParams = function WithQueryParams(props) {\n  var location = props.location;\n  var queryParams = queryString.parse(location.search);\n\n  var extendedProps = _objectSpread({}, props, {\n    queryParams: queryParams\n  });\n\n  return React.createElement(WithLastCategory, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(withRouter(WithQueryParams));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/KnowledgeBase.tsx"],"names":["gql","compose","router","routerUtils","withProps","queryString","React","graphql","withRouter","KnowledgeBaseComponent","queries","KnowledgeBase","props","categoryDetailQuery","articlesCountQuery","articlesCount","knowledgeBaseArticlesTotalCount","currentCategory","knowledgeBaseCategoryDetail","updatedProps","KnowledgeBaseContainer","name","options","currentCategoryId","variables","_id","fetchPolicy","skip","categoryIds","WithCurrentId","nextProps","lastCategoryQuery","history","queryParams","knowledgeBaseCategoriesGetLast","loading","setParams","id","Component","WithLastCategory","categoriesGetLast","WithQueryParams","location","parse","search","extendedProps"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport KnowledgeBaseComponent from '../components/KnowledgeBase';\nimport { queries } from '../graphql';\nimport {\n  ArticlesTotalCountQueryResponse,\n  CategoryDetailQueryResponse,\n  ICategory,\n  LastCategoryQueryResponse\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n  currentCategoryId: string;\n};\n\ntype FinalProps = {\n  articlesCountQuery?: ArticlesTotalCountQueryResponse;\n  categoryDetailQuery?: CategoryDetailQueryResponse;\n} & Props &\n  IRouterProps;\n\nconst KnowledgeBase = (props: FinalProps) => {\n  const { categoryDetailQuery, articlesCountQuery } = props;\n\n  const articlesCount =\n    articlesCountQuery && articlesCountQuery.knowledgeBaseArticlesTotalCount;\n\n  const currentCategory =\n    categoryDetailQuery && categoryDetailQuery.knowledgeBaseCategoryDetail;\n\n  const updatedProps = {\n    ...props,\n    articlesCount: articlesCount || 0,\n    currentCategory: currentCategory || ({} as ICategory)\n  };\n\n  return <KnowledgeBaseComponent {...updatedProps} />;\n};\n\nconst KnowledgeBaseContainer = withProps<Props>(\n  compose(\n    graphql<Props, CategoryDetailQueryResponse, { _id: string }>(\n      gql(queries.knowledgeBaseCategoryDetail),\n      {\n        name: 'categoryDetailQuery',\n        options: ({ currentCategoryId }) => ({\n          variables: { _id: currentCategoryId },\n          fetchPolicy: 'network-only'\n        }),\n        skip: ({ currentCategoryId }) => !currentCategoryId\n      }\n    ),\n    graphql<Props, ArticlesTotalCountQueryResponse, { categoryIds: string[] }>(\n      gql(queries.knowledgeBaseArticlesTotalCount),\n      {\n        name: 'articlesCountQuery',\n        options: ({ currentCategoryId }) => ({\n          variables: { categoryIds: [currentCategoryId] }\n        }),\n        skip: ({ currentCategoryId }) => !currentCategoryId\n      }\n    )\n  )(KnowledgeBase)\n);\n\ntype WithCurrentIdProps = {\n  history: any;\n  queryParams: any;\n};\n\ntype WithCurrentIdFinalProps = {\n  lastCategoryQuery: LastCategoryQueryResponse;\n} & WithCurrentIdProps;\n\nclass WithCurrentId extends React.Component<WithCurrentIdFinalProps> {\n  componentWillReceiveProps(nextProps: WithCurrentIdFinalProps) {\n    const {\n      lastCategoryQuery,\n      history,\n      queryParams: { _id }\n    } = nextProps;\n\n    if (!lastCategoryQuery) {\n      return;\n    }\n\n    const { knowledgeBaseCategoriesGetLast, loading } = lastCategoryQuery;\n\n    if (!_id && knowledgeBaseCategoriesGetLast && !loading) {\n      routerUtils.setParams(\n        history,\n        {\n          id: knowledgeBaseCategoriesGetLast._id\n        },\n        true\n      );\n    }\n  }\n\n  render() {\n    const {\n      queryParams: { id }\n    } = this.props;\n\n    const updatedProps = {\n      ...this.props,\n      currentCategoryId: id || ''\n    };\n\n    return <KnowledgeBaseContainer {...updatedProps} />;\n  }\n}\n\nconst WithLastCategory = withProps<WithCurrentIdProps>(\n  compose(\n    graphql<WithCurrentIdProps, LastCategoryQueryResponse>(\n      gql(queries.categoriesGetLast),\n      {\n        name: 'lastCategoryQuery',\n        skip: ({ queryParams }: { queryParams: any }) => queryParams.id,\n        options: () => ({ fetchPolicy: 'network-only' })\n      }\n    )\n  )(WithCurrentId)\n);\n\nconst WithQueryParams = (props: IRouterProps) => {\n  const { location } = props;\n  const queryParams = queryString.parse(location.search);\n\n  const extendedProps = { ...props, queryParams };\n\n  return <WithLastCategory {...extendedProps} />;\n};\n\nexport default withProps<{}>(withRouter<IRouterProps>(WithQueryParams));\n"]},"metadata":{},"sourceType":"module"}