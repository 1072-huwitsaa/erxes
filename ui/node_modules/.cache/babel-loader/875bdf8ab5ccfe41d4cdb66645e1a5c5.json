{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/components/items/Conversation.tsx\";\nimport dayjs from 'dayjs';\nimport { ActivityDate, ActivityIcon, ActivityRow, CenterText, Collapse, CollapseTrigger, ConversationContent, Count, FlexBody, FlexCenterContent, Header } from 'modules/activityLogs/styles';\nimport { formatText, getIconAndColor } from 'modules/activityLogs/utils';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Tip from 'modules/common/components/Tip';\nimport { __, renderFullName } from 'modules/common/utils';\nimport Message from 'modules/inbox/components/conversationDetail/workarea/conversation/messages/Message';\nimport { Comment, PostContainer } from 'modules/inbox/components/conversationDetail/workarea/facebook/styles';\nimport UserName from 'modules/inbox/components/conversationDetail/workarea/facebook/UserName';\nimport MailConversation from 'modules/inbox/components/conversationDetail/workarea/mail/MailConversation';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport xss from 'xss';\n\nvar Conversation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Conversation, _React$Component);\n\n  function Conversation(props) {\n    var _this;\n\n    _classCallCheck(this, Conversation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Conversation).call(this, props));\n\n    _this.onCollapse = function () {\n      _this.setState({\n        toggleMessage: !_this.state.toggleMessage\n      });\n    };\n\n    _this.state = {\n      toggleMessage: false\n    };\n    return _this;\n  }\n\n  _createClass(Conversation, [{\n    key: \"renderComments\",\n    value: function renderComments() {\n      var comments = this.props.comments;\n\n      if (!comments || comments.length === 0) {\n        return null;\n      }\n\n      return comments.map(function (comment) {\n        return React.createElement(\"div\", {\n          key: comment.commentId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(Comment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(UserName, {\n          username: \"\".concat(comment.customer.firstName, \" \").concat(comment.customer.lastName || ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          dangerouslySetInnerHTML: {\n            __html: xss(comment.content)\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        })));\n      });\n    }\n  }, {\n    key: \"renderMessages\",\n    value: function renderMessages() {\n      var _this$props = this.props,\n          conversation = _this$props.conversation,\n          messages = _this$props.messages;\n\n      if (!conversation) {\n        return null;\n      }\n\n      var kind = conversation.integration.kind;\n\n      if (kind === 'facebook-post') {\n        return React.createElement(React.Fragment, null, React.createElement(PostContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, conversation.content), this.renderComments());\n      }\n\n      if (kind.includes('nylas')) {\n        return React.createElement(MailConversation, {\n          conversation: conversation,\n          conversationMessages: messages,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      }\n\n      var rows = [];\n      var tempId;\n      messages.forEach(function (message) {\n        tempId = message.userId ? message.userId : message.customerId;\n        rows.push(React.createElement(Message, {\n          isSameUser: message.userId ? message.userId === tempId : message.customerId === tempId,\n          message: message,\n          key: message._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(React.Fragment, null, rows, React.createElement(CenterText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/inbox/index?_id=\".concat(conversation._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, __('See full conversation'), \" \", React.createElement(Icon, {\n        icon: \"angle-double-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"renderAction\",\n    value: function renderAction() {\n      var _this$props2 = this.props,\n          activity = _this$props2.activity,\n          conversation = _this$props2.conversation,\n          comments = _this$props2.comments;\n      var _id = conversation._id,\n          integration = conversation.integration;\n      var customer = conversation.customer;\n      var kind = integration ? integration.kind : 'conversation';\n      var condition = activity.contentType === 'comment' ? activity.contentType : kind;\n      var action = 'sent a';\n      var item = 'message';\n\n      switch (condition) {\n        case 'chatfuel':\n          kind = 'chatfuel';\n          break;\n\n        case 'callpro':\n          action = 'made a';\n          kind = 'phone call';\n          item = 'by CallPro';\n          break;\n\n        case 'comment':\n          action = '';\n          kind = 'commented';\n          item = \"on \".concat(renderFullName(customer), \"'s facebook post\");\n          break;\n\n        case 'facebook-post':\n          action = 'wrote a Facebook';\n          kind = 'Post';\n          item = '';\n          break;\n\n        case 'facebook-messenger':\n          kind = 'message';\n          item = 'by Facebook Messenger';\n          break;\n\n        case 'lead':\n          action = 'filled in';\n          kind = 'Pop ups';\n          item = '';\n          break;\n\n        case 'nylas-gmail':\n          action = 'send';\n          kind = 'email';\n          item = 'by gmail';\n          break;\n\n        case 'nylas-imap':\n          action = 'send';\n          kind = 'email';\n          item = 'by imap';\n          break;\n      }\n\n      if (condition === 'comment') {\n        customer = comments.length > 0 ? comments[0].customer : customer;\n      }\n\n      return React.createElement(FlexBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, renderFullName(customer)), \" \", action, \"\\xA0\", React.createElement(Link, {\n        to: \"/inbox/index?_id=\".concat(_id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, kind)), \"\\xA0\", item);\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this$props3 = this.props,\n          conversation = _this$props3.conversation,\n          messages = _this$props3.messages;\n      var customer = conversation.customer,\n          content = conversation.content,\n          createdAt = conversation.createdAt,\n          integration = conversation.integration;\n\n      if (!this.state.toggleMessage && integration) {\n        return React.createElement(React.Fragment, null, React.createElement(Header, {\n          onClick: this.onCollapse,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, integration.kind.includes('messenger') ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, __('Conversation with'), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, renderFullName(customer))) : React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, this.renderAction())), this.renderMessages());\n      }\n\n      return React.createElement(CollapseTrigger, {\n        onClick: this.onCollapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(FlexCenterContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, this.renderAction(), React.createElement(Tip, {\n        text: dayjs(createdAt).format('llll'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(ActivityDate, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, dayjs(createdAt).format('MMM D, h:mm A')))), content && React.createElement(FlexCenterContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(ConversationContent, {\n        dangerouslySetInnerHTML: {\n          __html: xss(content)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), React.createElement(Count, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, messages && messages.length)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          conversation = _this$props4.conversation,\n          activity = _this$props4.activity;\n      var integration = conversation.integration;\n      var kind = integration ? integration.kind : 'conversation';\n      var condition = activity.contentType === 'comment' ? activity.contentType : kind;\n      var iconAndColor = getIconAndColor(condition);\n      return React.createElement(ActivityRow, {\n        key: Math.random(),\n        isConversation: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(Tip, {\n        text: formatText(condition),\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(ActivityIcon, {\n        color: iconAndColor.color,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: iconAndColor.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }))), React.createElement(Collapse, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, this.renderContent()));\n    }\n  }]);\n\n  return Conversation;\n}(React.Component);\n\nexport default Conversation;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/activityLogs/components/items/Conversation.tsx"],"names":["dayjs","ActivityDate","ActivityIcon","ActivityRow","CenterText","Collapse","CollapseTrigger","ConversationContent","Count","FlexBody","FlexCenterContent","Header","formatText","getIconAndColor","Icon","Tip","__","renderFullName","Message","Comment","PostContainer","UserName","MailConversation","React","Link","xss","Conversation","props","onCollapse","setState","toggleMessage","state","comments","length","map","comment","commentId","customer","firstName","lastName","__html","content","conversation","messages","kind","integration","renderComments","includes","rows","tempId","forEach","message","userId","customerId","push","_id","activity","condition","contentType","action","item","createdAt","renderAction","renderMessages","format","iconAndColor","Math","random","color","icon","renderContent","Component"],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport {\n  ActivityDate,\n  ActivityIcon,\n  ActivityRow,\n  CenterText,\n  Collapse,\n  CollapseTrigger,\n  ConversationContent,\n  Count,\n  FlexBody,\n  FlexCenterContent,\n  Header\n} from 'modules/activityLogs/styles';\nimport { formatText, getIconAndColor } from 'modules/activityLogs/utils';\nimport Icon from 'erxes-common-ui/lib/components/icon';\nimport Tip from 'modules/common/components/Tip';\nimport { __, renderFullName } from 'modules/common/utils';\nimport Message from 'modules/inbox/components/conversationDetail/workarea/conversation/messages/Message';\nimport {\n  Comment,\n  PostContainer\n} from 'modules/inbox/components/conversationDetail/workarea/facebook/styles';\nimport UserName from 'modules/inbox/components/conversationDetail/workarea/facebook/UserName';\nimport MailConversation from 'modules/inbox/components/conversationDetail/workarea/mail/MailConversation';\nimport { IConversation, IFacebookComment, IMessage } from 'modules/inbox/types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport xss from 'xss';\n\ntype Props = {\n  activity: any;\n  conversation: IConversation;\n  messages: IMessage[];\n  comments: IFacebookComment[];\n};\n\nclass Conversation extends React.Component<Props, { toggleMessage: boolean }> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggleMessage: false\n    };\n  }\n\n  onCollapse = () => {\n    this.setState({ toggleMessage: !this.state.toggleMessage });\n  };\n\n  renderComments() {\n    const { comments } = this.props;\n\n    if (!comments || comments.length === 0) {\n      return null;\n    }\n\n    return comments.map(comment => (\n      <div key={comment.commentId}>\n        <Comment>\n          <UserName\n            username={`${comment.customer.firstName} ${comment.customer\n              .lastName || ''}`}\n          />\n          <p\n            dangerouslySetInnerHTML={{\n              __html: xss(comment.content)\n            }}\n          />\n        </Comment>\n      </div>\n    ));\n  }\n\n  renderMessages() {\n    const { conversation, messages } = this.props;\n\n    if (!conversation) {\n      return null;\n    }\n\n    const { kind } = conversation.integration;\n\n    if (kind === 'facebook-post') {\n      return (\n        <>\n          <PostContainer>{conversation.content}</PostContainer>\n          {this.renderComments()}\n        </>\n      );\n    }\n\n    if (kind.includes('nylas')) {\n      return (\n        <MailConversation\n          conversation={conversation}\n          conversationMessages={messages}\n        />\n      );\n    }\n\n    const rows: React.ReactNode[] = [];\n    let tempId;\n\n    messages.forEach(message => {\n      tempId = message.userId ? message.userId : message.customerId;\n\n      rows.push(\n        <Message\n          isSameUser={\n            message.userId\n              ? message.userId === tempId\n              : message.customerId === tempId\n          }\n          message={message}\n          key={message._id}\n        />\n      );\n    });\n\n    return (\n      <>\n        {rows}\n        <CenterText>\n          <Link to={`/inbox/index?_id=${conversation._id}`}>\n            {__('See full conversation')} <Icon icon=\"angle-double-right\" />\n          </Link>\n        </CenterText>\n      </>\n    );\n  }\n\n  renderAction() {\n    const { activity, conversation, comments } = this.props;\n    const { _id, integration } = conversation;\n    let { customer } = conversation;\n\n    let kind = integration ? integration.kind : 'conversation';\n\n    const condition =\n      activity.contentType === 'comment' ? activity.contentType : kind;\n\n    let action = 'sent a';\n    let item = 'message';\n\n    switch (condition) {\n      case 'chatfuel':\n        kind = 'chatfuel';\n        break;\n      case 'callpro':\n        action = 'made a';\n        kind = 'phone call';\n        item = 'by CallPro';\n        break;\n      case 'comment':\n        action = '';\n        kind = 'commented';\n        item = `on ${renderFullName(customer)}'s facebook post`;\n        break;\n      case 'facebook-post':\n        action = 'wrote a Facebook';\n        kind = 'Post';\n        item = '';\n        break;\n      case 'facebook-messenger':\n        kind = 'message';\n        item = 'by Facebook Messenger';\n        break;\n      case 'lead':\n        action = 'filled in';\n        kind = 'Pop ups';\n        item = '';\n        break;\n      case 'nylas-gmail':\n        action = 'send';\n        kind = 'email';\n        item = 'by gmail';\n        break;\n      case 'nylas-imap':\n        action = 'send';\n        kind = 'email';\n        item = 'by imap';\n        break;\n    }\n\n    if (condition === 'comment') {\n      customer = comments.length > 0 ? comments[0].customer : customer;\n    }\n\n    return (\n      <FlexBody>\n        <b>{renderFullName(customer)}</b> {action}&nbsp;\n        <Link to={`/inbox/index?_id=${_id}`}>\n          <strong>{kind}</strong>\n        </Link>\n        &nbsp;{item}\n      </FlexBody>\n    );\n  }\n\n  renderContent() {\n    const { conversation, messages } = this.props;\n\n    const { customer, content, createdAt, integration } = conversation;\n\n    if (!this.state.toggleMessage && integration) {\n      return (\n        <>\n          <Header onClick={this.onCollapse}>\n            {integration.kind.includes('messenger') ? (\n              <span>\n                {__('Conversation with')}\n                <b>{renderFullName(customer)}</b>\n              </span>\n            ) : (\n              <span>{this.renderAction()}</span>\n            )}\n          </Header>\n          {this.renderMessages()}\n        </>\n      );\n    }\n\n    return (\n      <CollapseTrigger onClick={this.onCollapse}>\n        <FlexCenterContent>\n          {this.renderAction()}\n\n          <Tip text={dayjs(createdAt).format('llll')}>\n            <ActivityDate>\n              {dayjs(createdAt).format('MMM D, h:mm A')}\n            </ActivityDate>\n          </Tip>\n        </FlexCenterContent>\n        {content && (\n          <FlexCenterContent>\n            <ConversationContent\n              dangerouslySetInnerHTML={{ __html: xss(content) }}\n            />\n            <Count>{messages && messages.length}</Count>\n          </FlexCenterContent>\n        )}\n      </CollapseTrigger>\n    );\n  }\n\n  render() {\n    const { conversation, activity } = this.props;\n    const { integration } = conversation;\n\n    const kind = integration ? integration.kind : 'conversation';\n\n    const condition =\n      activity.contentType === 'comment' ? activity.contentType : kind;\n\n    const iconAndColor = getIconAndColor(condition);\n\n    return (\n      <ActivityRow key={Math.random()} isConversation={true}>\n        <Tip text={formatText(condition)} placement=\"top\">\n          <ActivityIcon color={iconAndColor.color}>\n            <Icon icon={iconAndColor.icon} />\n          </ActivityIcon>\n        </Tip>\n        <Collapse>{this.renderContent()}</Collapse>\n      </ActivityRow>\n    );\n  }\n}\n\nexport default Conversation;\n"]},"metadata":{},"sourceType":"module"}