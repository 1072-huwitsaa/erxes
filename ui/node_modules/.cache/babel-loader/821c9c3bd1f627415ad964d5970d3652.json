{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/growthHacks/components/PipelineForm.tsx\";\nimport client from \"apolloClient\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport gql from \"graphql-tag\";\nimport { COLORS } from \"modules/boards/constants\";\nimport { FlexContent } from \"modules/boards/styles/item\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport DateControl from \"modules/common/components/form/DateControl\";\nimport Form from \"modules/common/components/form/Form\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport { colors } from \"modules/common/styles\";\nimport { __ } from \"modules/common/utils\";\nimport { SelectMemberStyled } from \"modules/settings/boards/styles\";\nimport { ColorPick, ColorPicker, ExpandWrapper } from \"modules/settings/styles\";\nimport SelectTeamMembers from \"modules/settings/team/containers/SelectTeamMembers\";\nimport React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport TwitterPicker from \"react-color/lib/Twitter\";\nimport Select from \"react-select-plus\";\nimport { metricOptions } from \"../constants\";\nimport { queries } from \"../graphql\";\nimport { Box, DateItem } from \"../styles\";\n\nvar PipelineForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PipelineForm, _React$Component);\n\n  function PipelineForm(props) {\n    var _this;\n\n    _classCallCheck(this, PipelineForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PipelineForm).call(this, props));\n\n    _this.onChangeVisibility = function (e) {\n      _this.setState({\n        visibility: e.currentTarget.value\n      });\n    };\n\n    _this.onChangeValue = function (key, value) {\n      _this.setState(_defineProperty({}, key, value));\n    };\n\n    _this.onDateInputChange = function (type, date) {\n      if (type === \"endDate\") {\n        _this.setState({\n          endDate: date\n        });\n      } else {\n        _this.setState({\n          startDate: date\n        });\n      }\n    };\n\n    _this.collectValues = function (items) {\n      return items.map(function (item) {\n        return item.value;\n      });\n    };\n\n    _this.onColorChange = function (e) {\n      _this.setState({\n        backgroundColor: e.hex\n      });\n    };\n\n    _this.generateDoc = function (values) {\n      var _this$props = _this.props,\n          pipeline = _this$props.pipeline,\n          type = _this$props.type;\n      var _this$state = _this.state,\n          selectedMemberIds = _this$state.selectedMemberIds,\n          backgroundColor = _this$state.backgroundColor,\n          templateId = _this$state.templateId,\n          hackScoringType = _this$state.hackScoringType,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate,\n          metric = _this$state.metric,\n          boardId = _this$state.boardId;\n      var finalValues = values;\n\n      if (pipeline) {\n        finalValues._id = pipeline._id;\n      }\n\n      return _objectSpread({}, finalValues, {\n        type: type,\n        boardId: boardId,\n        memberIds: selectedMemberIds,\n        bgColor: backgroundColor,\n        templateId: templateId,\n        hackScoringType: hackScoringType,\n        startDate: startDate,\n        endDate: endDate,\n        metric: metric\n      });\n    };\n\n    _this.renderContent = function (formProps) {\n      var _this$props2 = _this.props,\n          pipeline = _this$props2.pipeline,\n          renderButton = _this$props2.renderButton,\n          closeModal = _this$props2.closeModal;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      var object = pipeline || {};\n      var _this$state2 = _this.state,\n          startDate = _this$state2.startDate,\n          endDate = _this$state2.endDate,\n          metric = _this$state2.metric,\n          visibility = _this$state2.visibility;\n\n      var onChangeMetric = function onChangeMetric(item) {\n        return _this.onChangeValue(\"metric\", item.value);\n      };\n\n      var popoverBottom = React.createElement(Popover, {\n        id: \"color-picker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(TwitterPicker, {\n        width: \"266px\",\n        triangle: \"hide\",\n        color: _this.state.backgroundColor,\n        onChange: _this.onColorChange,\n        colors: COLORS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }));\n      return React.createElement(React.Fragment, null, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, pipeline ? \"\".concat(__(\"Edit project\")) : \"\".concat(__(\"Add project\")))), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"Name\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"name\",\n        defaultValue: object.name,\n        autoFocus: true,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }))), _this.renderBoards(), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, \"Scoring type\"), React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, _this.renderBox(\"ice\", \"Set the Impact, Confidence and Ease factors for your tasks. Final score is calculated by the formula:\", \"Impact * Confidence * Ease\"), _this.renderBox(\"rice\", \"Set the Reach, Impact, Confidence and Effort factors for your tasks. Final score is calculated by the formula:\", \"(Reach * Impact * Confidence) / Effort\"), _this.renderBox(\"pie\", \"Set the Potential, Importance and Ease factors for your tasks. Final score is calculated by the formula:\", \"(Potential + Importance + Ease) / 3\"))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(DateItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, \"Start date\"), React.createElement(DateControl, Object.assign({}, formProps, {\n        required: true,\n        name: \"startDate\",\n        placeholder: __(\"Start date\"),\n        value: startDate,\n        onChange: _this.onDateInputChange.bind(_assertThisInitialized(_this), \"startDate\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }))), React.createElement(DateItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"End date\"), React.createElement(DateControl, Object.assign({}, formProps, {\n        required: true,\n        name: \"endDate\",\n        placeholder: __(\"End date\"),\n        value: endDate,\n        onChange: _this.onDateInputChange.bind(_assertThisInitialized(_this), \"endDate\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }))))), React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(ExpandWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, \"Metric\"), React.createElement(Select, {\n        placeholder: __(\"Choose a metric\"),\n        value: metric,\n        options: metricOptions,\n        onChange: onChangeMetric,\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }))), React.createElement(ExpandWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(ExpandWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"Visibility\"), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: \"visibility\",\n        componentClass: \"select\",\n        value: visibility,\n        onChange: _this.onChangeVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        value: \"public\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, __(\"Public\")), React.createElement(\"option\", {\n        value: \"private\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, __(\"Private\"))))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, \"Background\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(OverlayTrigger, {\n        trigger: \"click\",\n        rootClose: true,\n        placement: \"bottom\",\n        overlay: popoverBottom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(ColorPick, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, React.createElement(ColorPicker, {\n        style: {\n          backgroundColor: _this.state.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      })))))))), _this.renderSelectMembers(), _this.renderTemplates(), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        type: \"button\",\n        icon: \"cancel-1\",\n        onClick: closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \"Cancel\"), renderButton({\n        name: \"pipeline\",\n        values: _this.generateDoc(values),\n        isSubmitted: isSubmitted,\n        callback: closeModal,\n        object: pipeline\n      }))));\n    };\n\n    var _pipeline = _this.props.pipeline;\n    _this.state = {\n      visibility: _pipeline ? _pipeline.visibility || \"public\" : \"public\",\n      selectedMemberIds: _pipeline ? _pipeline.memberIds || [] : [],\n      backgroundColor: _pipeline && _pipeline.bgColor || colors.colorPrimaryDark,\n      hackScoringType: _pipeline && _pipeline.hackScoringType || \"ice\",\n      templates: [],\n      templateId: _pipeline ? _pipeline.templateId : \"\",\n      metric: _pipeline ? _pipeline.metric : \"\",\n      startDate: _pipeline ? _pipeline.startDate : undefined,\n      endDate: _pipeline ? _pipeline.endDate : undefined,\n      boardId: props.boardId || \"\"\n    };\n    return _this;\n  }\n\n  _createClass(PipelineForm, [{\n    key: \"getTemplates\",\n    value: function getTemplates() {\n      var _this2 = this;\n\n      client.query({\n        query: gql(queries.pipelineTemplates),\n        variables: {\n          type: \"growthHack\"\n        }\n      }).then(function (_ref) {\n        var data = _ref.data;\n\n        if (data && data.pipelineTemplates) {\n          _this2.setState({\n            templates: data.pipelineTemplates\n          });\n        }\n      }).catch(function (error) {\n        console.log(error.message); // tslint:disable-line\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getTemplates();\n    }\n  }, {\n    key: \"renderSelectMembers\",\n    value: function renderSelectMembers() {\n      var _this$state3 = this.state,\n          visibility = _this$state3.visibility,\n          selectedMemberIds = _this$state3.selectedMemberIds;\n\n      if (visibility === \"public\") {\n        return;\n      }\n\n      var self = this;\n\n      var onChange = function onChange(items) {\n        self.setState({\n          selectedMemberIds: items\n        });\n      };\n\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(SelectMemberStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Members\"), React.createElement(SelectTeamMembers, {\n        label: \"Choose members\",\n        name: \"selectedMemberIds\",\n        value: selectedMemberIds,\n        onSelect: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"renderTemplates\",\n    value: function renderTemplates() {\n      var _this3 = this;\n\n      var _this$state4 = this.state,\n          templates = _this$state4.templates,\n          templateId = _this$state4.templateId;\n      var templateOptions = templates.map(function (template) {\n        return {\n          value: template._id,\n          label: template.name\n        };\n      });\n\n      var onChange = function onChange(item) {\n        return _this3.onChangeValue(\"templateId\", item.value);\n      };\n\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Template\"), React.createElement(Select, {\n        placeholder: __(\"Choose template\"),\n        value: templateId,\n        options: templateOptions,\n        onChange: onChange,\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderBoards\",\n    value: function renderBoards() {\n      var _this4 = this;\n\n      var boards = this.props.boards;\n      var boardOptions = boards.map(function (board) {\n        return {\n          value: board._id,\n          label: board.name\n        };\n      });\n\n      var onChange = function onChange(item) {\n        return _this4.onChangeValue(\"boardId\", item.value);\n      };\n\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Campaign\"), React.createElement(Select, {\n        placeholder: __(\"Choose a campaign\"),\n        value: this.state.boardId,\n        options: boardOptions,\n        onChange: onChange,\n        clearable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderBox\",\n    value: function renderBox(type, desc, formula) {\n      var _this5 = this;\n\n      var onClick = function onClick() {\n        return _this5.onChangeValue(\"hackScoringType\", type);\n      };\n\n      return React.createElement(Box, {\n        selected: this.state.hackScoringType === type,\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, __(type)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, __(desc), \" \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, formula)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          show = _this$props3.show,\n          closeModal = _this$props3.closeModal;\n\n      if (!show) {\n        return null;\n      }\n\n      return React.createElement(Modal, {\n        size: \"lg\",\n        show: show,\n        onHide: closeModal,\n        enforceFocus: false,\n        animation: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }, React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PipelineForm;\n}(React.Component);\n\nexport default PipelineForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/growthHacks/components/PipelineForm.tsx"],"names":["client","Button","gql","COLORS","FlexContent","FormControl","DateControl","Form","FormGroup","ControlLabel","colors","__","SelectMemberStyled","ColorPick","ColorPicker","ExpandWrapper","SelectTeamMembers","React","Modal","OverlayTrigger","Popover","TwitterPicker","Select","metricOptions","queries","Box","DateItem","PipelineForm","props","onChangeVisibility","e","setState","visibility","currentTarget","value","onChangeValue","key","onDateInputChange","type","date","endDate","startDate","collectValues","items","map","item","onColorChange","backgroundColor","hex","generateDoc","values","pipeline","state","selectedMemberIds","templateId","hackScoringType","metric","boardId","finalValues","_id","memberIds","bgColor","renderContent","formProps","renderButton","closeModal","isSubmitted","object","onChangeMetric","popoverBottom","name","renderBoards","renderBox","bind","renderSelectMembers","renderTemplates","callback","colorPrimaryDark","templates","undefined","query","pipelineTemplates","variables","then","data","catch","error","console","log","message","getTemplates","self","onChange","templateOptions","template","label","boards","boardOptions","board","desc","formula","onClick","show","Component"],"mappings":"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","sourcesContent":["import client from \"apolloClient\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport gql from \"graphql-tag\";\nimport { COLORS } from \"modules/boards/constants\";\nimport { FlexContent } from \"modules/boards/styles/item\";\nimport { IBoard, IPipeline } from \"modules/boards/types\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport DateControl from \"modules/common/components/form/DateControl\";\nimport Form from \"modules/common/components/form/Form\";\nimport FormGroup from \"modules/common/components/form/Group\";\nimport ControlLabel from \"modules/common/components/form/Label\";\nimport { colors } from \"modules/common/styles\";\nimport { IButtonMutateProps, IFormProps } from \"modules/common/types\";\nimport { __ } from \"modules/common/utils\";\nimport { SelectMemberStyled } from \"modules/settings/boards/styles\";\nimport { ColorPick, ColorPicker, ExpandWrapper } from \"modules/settings/styles\";\nimport SelectTeamMembers from \"modules/settings/team/containers/SelectTeamMembers\";\nimport React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport TwitterPicker from \"react-color/lib/Twitter\";\nimport Select from \"react-select-plus\";\nimport { metricOptions } from \"../constants\";\nimport { queries } from \"../graphql\";\nimport { Box, DateItem } from \"../styles\";\n\ntype Props = {\n  type: string;\n  show: boolean;\n  boardId?: string;\n  pipeline?: IPipeline;\n  boards: IBoard[];\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  closeModal: () => void;\n};\n\ntype State = {\n  visibility: string;\n  selectedMemberIds: string[];\n  backgroundColor: string;\n  hackScoringType: string;\n  templates: any[];\n  templateId?: string;\n  metric?: string;\n  boardId: string;\n  startDate?: Date;\n  endDate?: Date;\n};\n\nclass PipelineForm extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { pipeline } = this.props;\n\n    this.state = {\n      visibility: pipeline ? pipeline.visibility || \"public\" : \"public\",\n      selectedMemberIds: pipeline ? pipeline.memberIds || [] : [],\n      backgroundColor:\n        (pipeline && pipeline.bgColor) || colors.colorPrimaryDark,\n      hackScoringType: (pipeline && pipeline.hackScoringType) || \"ice\",\n      templates: [],\n      templateId: pipeline ? pipeline.templateId : \"\",\n      metric: pipeline ? pipeline.metric : \"\",\n      startDate: pipeline ? pipeline.startDate : undefined,\n      endDate: pipeline ? pipeline.endDate : undefined,\n      boardId: props.boardId || \"\",\n    };\n  }\n\n  getTemplates() {\n    client\n      .query({\n        query: gql(queries.pipelineTemplates),\n        variables: { type: \"growthHack\" },\n      })\n      .then(({ data }: { data: any }) => {\n        if (data && data.pipelineTemplates) {\n          this.setState({ templates: data.pipelineTemplates });\n        }\n      })\n      .catch((error) => {\n        console.log(error.message); // tslint:disable-line\n      });\n  }\n\n  componentDidMount() {\n    this.getTemplates();\n  }\n\n  onChangeVisibility = (e: React.FormEvent<HTMLElement>) => {\n    this.setState({\n      visibility: (e.currentTarget as HTMLInputElement).value,\n    });\n  };\n\n  onChangeValue = <T extends keyof State>(key: T, value: State[T]) => {\n    this.setState(({ [key]: value } as unknown) as Pick<State, keyof State>);\n  };\n\n  onDateInputChange = (type: string, date) => {\n    if (type === \"endDate\") {\n      this.setState({ endDate: date });\n    } else {\n      this.setState({ startDate: date });\n    }\n  };\n\n  collectValues = (items) => {\n    return items.map((item) => item.value);\n  };\n\n  onColorChange = (e) => {\n    this.setState({ backgroundColor: e.hex });\n  };\n\n  generateDoc = (values: {\n    _id?: string;\n    name: string;\n    visibility: string;\n  }) => {\n    const { pipeline, type } = this.props;\n    const {\n      selectedMemberIds,\n      backgroundColor,\n      templateId,\n      hackScoringType,\n      startDate,\n      endDate,\n      metric,\n      boardId,\n    } = this.state;\n    const finalValues = values;\n\n    if (pipeline) {\n      finalValues._id = pipeline._id;\n    }\n\n    return {\n      ...finalValues,\n      type,\n      boardId,\n      memberIds: selectedMemberIds,\n      bgColor: backgroundColor,\n      templateId,\n      hackScoringType,\n      startDate,\n      endDate,\n      metric,\n    };\n  };\n\n  renderSelectMembers() {\n    const { visibility, selectedMemberIds } = this.state;\n\n    if (visibility === \"public\") {\n      return;\n    }\n    const self = this;\n\n    const onChange = (items) => {\n      self.setState({ selectedMemberIds: items });\n    };\n\n    return (\n      <FormGroup>\n        <SelectMemberStyled>\n          <ControlLabel>Members</ControlLabel>\n\n          <SelectTeamMembers\n            label=\"Choose members\"\n            name=\"selectedMemberIds\"\n            value={selectedMemberIds}\n            onSelect={onChange}\n          />\n        </SelectMemberStyled>\n      </FormGroup>\n    );\n  }\n\n  renderTemplates() {\n    const { templates, templateId } = this.state;\n\n    const templateOptions = templates.map((template) => ({\n      value: template._id,\n      label: template.name,\n    }));\n\n    const onChange = (item) => this.onChangeValue(\"templateId\", item.value);\n\n    return (\n      <FormGroup>\n        <ControlLabel>Template</ControlLabel>\n\n        <Select\n          placeholder={__(\"Choose template\")}\n          value={templateId}\n          options={templateOptions}\n          onChange={onChange}\n          clearable={false}\n        />\n      </FormGroup>\n    );\n  }\n\n  renderBoards() {\n    const { boards } = this.props;\n\n    const boardOptions = boards.map((board) => ({\n      value: board._id,\n      label: board.name,\n    }));\n\n    const onChange = (item) => this.onChangeValue(\"boardId\", item.value);\n\n    return (\n      <FormGroup>\n        <ControlLabel required={true}>Campaign</ControlLabel>\n        <Select\n          placeholder={__(\"Choose a campaign\")}\n          value={this.state.boardId}\n          options={boardOptions}\n          onChange={onChange}\n          clearable={false}\n        />\n      </FormGroup>\n    );\n  }\n\n  renderBox(type, desc, formula) {\n    const onClick = () => this.onChangeValue(\"hackScoringType\", type);\n\n    return (\n      <Box selected={this.state.hackScoringType === type} onClick={onClick}>\n        <b>{__(type)}</b>\n        <p>\n          {__(desc)} <strong>{formula}</strong>\n        </p>\n      </Box>\n    );\n  }\n\n  renderContent = (formProps: IFormProps) => {\n    const { pipeline, renderButton, closeModal } = this.props;\n    const { values, isSubmitted } = formProps;\n    const object = pipeline || ({} as IPipeline);\n    const { startDate, endDate, metric, visibility } = this.state;\n\n    const onChangeMetric = (item) => this.onChangeValue(\"metric\", item.value);\n\n    const popoverBottom = (\n      <Popover id=\"color-picker\">\n        <TwitterPicker\n          width=\"266px\"\n          triangle=\"hide\"\n          color={this.state.backgroundColor}\n          onChange={this.onColorChange}\n          colors={COLORS}\n        />\n      </Popover>\n    );\n\n    return (\n      <>\n        <Modal.Header closeButton={true}>\n          <Modal.Title>\n            {pipeline ? `${__(\"Edit project\")}` : `${__(\"Add project\")}`}\n          </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormGroup>\n            <ControlLabel required={true}>Name</ControlLabel>\n            <FormControl\n              {...formProps}\n              name=\"name\"\n              defaultValue={object.name}\n              autoFocus={true}\n              required={true}\n            />\n          </FormGroup>\n\n          {this.renderBoards()}\n\n          <FormGroup>\n            <ControlLabel>Scoring type</ControlLabel>\n\n            <FlexContent>\n              {this.renderBox(\n                \"ice\",\n                \"Set the Impact, Confidence and Ease factors for your tasks. Final score is calculated by the formula:\",\n                \"Impact * Confidence * Ease\"\n              )}\n              {this.renderBox(\n                \"rice\",\n                \"Set the Reach, Impact, Confidence and Effort factors for your tasks. Final score is calculated by the formula:\",\n                \"(Reach * Impact * Confidence) / Effort\"\n              )}\n              {this.renderBox(\n                \"pie\",\n                \"Set the Potential, Importance and Ease factors for your tasks. Final score is calculated by the formula:\",\n                \"(Potential + Importance + Ease) / 3\"\n              )}\n            </FlexContent>\n          </FormGroup>\n\n          <FormGroup>\n            <FlexContent>\n              <DateItem>\n                <ControlLabel required={true}>Start date</ControlLabel>\n                <DateControl\n                  {...formProps}\n                  required={true}\n                  name=\"startDate\"\n                  placeholder={__(\"Start date\")}\n                  value={startDate}\n                  onChange={this.onDateInputChange.bind(this, \"startDate\")}\n                />\n              </DateItem>\n              <DateItem>\n                <ControlLabel required={true}>End date</ControlLabel>\n                <DateControl\n                  {...formProps}\n                  required={true}\n                  name=\"endDate\"\n                  placeholder={__(\"End date\")}\n                  value={endDate}\n                  onChange={this.onDateInputChange.bind(this, \"endDate\")}\n                />\n              </DateItem>\n            </FlexContent>\n          </FormGroup>\n\n          <FlexContent>\n            <ExpandWrapper>\n              <FormGroup>\n                <ControlLabel>Metric</ControlLabel>\n                <Select\n                  placeholder={__(\"Choose a metric\")}\n                  value={metric}\n                  options={metricOptions}\n                  onChange={onChangeMetric}\n                  clearable={false}\n                />\n              </FormGroup>\n            </ExpandWrapper>\n            <ExpandWrapper>\n              <FlexContent>\n                <ExpandWrapper>\n                  <FormGroup>\n                    <ControlLabel required={true}>Visibility</ControlLabel>\n                    <FormControl\n                      {...formProps}\n                      name=\"visibility\"\n                      componentClass=\"select\"\n                      value={visibility}\n                      onChange={this.onChangeVisibility}\n                    >\n                      <option value=\"public\">{__(\"Public\")}</option>\n                      <option value=\"private\">{__(\"Private\")}</option>\n                    </FormControl>\n                  </FormGroup>\n                </ExpandWrapper>\n                <FormGroup>\n                  <ControlLabel>Background</ControlLabel>\n                  <div>\n                    <OverlayTrigger\n                      trigger=\"click\"\n                      rootClose={true}\n                      placement=\"bottom\"\n                      overlay={popoverBottom}\n                    >\n                      <ColorPick>\n                        <ColorPicker\n                          style={{\n                            backgroundColor: this.state.backgroundColor,\n                          }}\n                        />\n                      </ColorPick>\n                    </OverlayTrigger>\n                  </div>\n                </FormGroup>\n              </FlexContent>\n            </ExpandWrapper>\n          </FlexContent>\n\n          {this.renderSelectMembers()}\n          {this.renderTemplates()}\n\n          <Modal.Footer>\n            <Button\n              btnStyle=\"simple\"\n              type=\"button\"\n              icon=\"cancel-1\"\n              onClick={closeModal}\n            >\n              Cancel\n            </Button>\n\n            {renderButton({\n              name: \"pipeline\",\n              values: this.generateDoc(values),\n              isSubmitted,\n              callback: closeModal,\n              object: pipeline,\n            })}\n          </Modal.Footer>\n        </Modal.Body>\n      </>\n    );\n  };\n\n  render() {\n    const { show, closeModal } = this.props;\n\n    if (!show) {\n      return null;\n    }\n\n    return (\n      <Modal\n        size=\"lg\"\n        show={show}\n        onHide={closeModal}\n        enforceFocus={false}\n        animation={false}\n      >\n        <Form renderContent={this.renderContent} />\n      </Modal>\n    );\n  }\n}\n\nexport default PipelineForm;\n"]},"metadata":{},"sourceType":"module"}