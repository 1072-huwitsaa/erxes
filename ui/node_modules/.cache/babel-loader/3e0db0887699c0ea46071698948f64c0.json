{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/containers/Filter.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { router, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Filter from '../components/SidebarFilter';\nimport { queries } from '../graphql';\n\nvar FilterContainer = function FilterContainer(props) {\n  var segmentsQuery = props.segmentsQuery,\n      history = props.history;\n  var currentSegment = router.getParam(history, 'segment');\n\n  var setSegment = function setSegment(segment) {\n    router.setParams(history, {\n      segment: segment\n    });\n    router.removeParams(history, 'page');\n  };\n\n  var removeSegment = function removeSegment() {\n    router.removeParams(history, 'segment');\n  };\n\n  var extendedProps = _objectSpread({}, props, {\n    currentSegment: currentSegment,\n    setSegment: setSegment,\n    removeSegment: removeSegment,\n    segments: segmentsQuery.segments || [],\n    loading: segmentsQuery.loading\n  });\n\n  return React.createElement(Filter, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.segments), {\n  name: 'segmentsQuery',\n  options: function options(_ref) {\n    var contentType = _ref.contentType;\n    return {\n      variables: {\n        contentTypes: [contentType]\n      }\n    };\n  }\n}))(withRouter(FilterContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/segments/containers/Filter.tsx"],"names":["gql","compose","router","withProps","React","graphql","withRouter","Filter","queries","FilterContainer","props","segmentsQuery","history","currentSegment","getParam","setSegment","segment","setParams","removeParams","removeSegment","extendedProps","segments","loading","name","options","contentType","variables","contentTypes"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,sBAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAaA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAuB;AAAA,MACrCC,aADqC,GACVD,KADU,CACrCC,aADqC;AAAA,MACtBC,OADsB,GACVF,KADU,CACtBE,OADsB;AAG7C,MAAMC,cAAc,GAAGX,MAAM,CAACY,QAAP,CAAgBF,OAAhB,EAAyB,SAAzB,CAAvB;;AAEA,MAAMG,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO,EAAI;AAC5Bd,IAAAA,MAAM,CAACe,SAAP,CAAiBL,OAAjB,EAA0B;AAAEI,MAAAA,OAAO,EAAPA;AAAF,KAA1B;AACAd,IAAAA,MAAM,CAACgB,YAAP,CAAoBN,OAApB,EAA6B,MAA7B;AACD,GAHD;;AAKA,MAAMO,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BjB,IAAAA,MAAM,CAACgB,YAAP,CAAoBN,OAApB,EAA6B,SAA7B;AACD,GAFD;;AAIA,MAAMQ,aAAa,qBACdV,KADc;AAEjBG,IAAAA,cAAc,EAAdA,cAFiB;AAGjBE,IAAAA,UAAU,EAAVA,UAHiB;AAIjBI,IAAAA,aAAa,EAAbA,aAJiB;AAKjBE,IAAAA,QAAQ,EAAEV,aAAa,CAACU,QAAd,IAA0B,EALnB;AAMjBC,IAAAA,OAAO,EAAEX,aAAa,CAACW;AANN,IAAnB;;AASA,SAAO,oBAAC,MAAD,oBAAYF,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAxBD;;AA0BA,eAAejB,SAAS,CACtBF,OAAO,CACLI,OAAO,CAACL,GAAG,CAACQ,OAAO,CAACa,QAAT,CAAJ,EAAwB;AAC7BE,EAAAA,IAAI,EAAE,eADuB;AAE7BC,EAAAA,OAAO,EAAE;AAAA,QAAGC,WAAH,QAAGA,WAAH;AAAA,WAA+C;AACtDC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,YAAY,EAAE,CAACF,WAAD;AAAhB;AAD2C,KAA/C;AAAA;AAFoB,CAAxB,CADF,CAAP,CAOEnB,UAAU,CAAaG,eAAb,CAPZ,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { router, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Filter from '../components/SidebarFilter';\nimport { queries } from '../graphql';\nimport { Counts, SegmentsQueryResponse } from '../types';\n\ntype Props = {\n  contentType: string;\n  counts: Counts;\n};\n\ntype FinalProps = {\n  segmentsQuery: SegmentsQueryResponse;\n} & Props &\n  IRouterProps;\n\nconst FilterContainer = (props: FinalProps) => {\n  const { segmentsQuery, history } = props;\n\n  const currentSegment = router.getParam(history, 'segment');\n\n  const setSegment = segment => {\n    router.setParams(history, { segment });\n    router.removeParams(history, 'page');\n  };\n\n  const removeSegment = () => {\n    router.removeParams(history, 'segment');\n  };\n\n  const extendedProps = {\n    ...props,\n    currentSegment,\n    setSegment,\n    removeSegment,\n    segments: segmentsQuery.segments || [],\n    loading: segmentsQuery.loading\n  };\n\n  return <Filter {...extendedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql(gql(queries.segments), {\n      name: 'segmentsQuery',\n      options: ({ contentType }: { contentType: string }) => ({\n        variables: { contentTypes: [contentType] }\n      })\n    })\n  )(withRouter<FinalProps>(FilterContainer))\n);\n"]},"metadata":{},"sourceType":"module"}