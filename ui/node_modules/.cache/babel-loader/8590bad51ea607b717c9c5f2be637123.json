{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/forms/containers/EditForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Form from '../components/Form';\nimport { mutations, queries } from '../graphql';\n\nvar EditFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditFormContainer, _React$Component);\n\n  function EditFormContainer() {\n    _classCallCheck(this, EditFormContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EditFormContainer).apply(this, arguments));\n  }\n\n  _createClass(EditFormContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props = this.props,\n          onInit = _this$props.onInit,\n          fieldsQuery = _this$props.fieldsQuery;\n\n      if (fieldsQuery.loading && !nextProps.fieldsQuery.loading && onInit) {\n        onInit(nextProps.fieldsQuery.fields || []);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          formId = _this$props2.formId,\n          afterDbSave = _this$props2.afterDbSave,\n          addFieldMutation = _this$props2.addFieldMutation,\n          editFieldMutation = _this$props2.editFieldMutation,\n          editFormMutation = _this$props2.editFormMutation,\n          removeFieldMutation = _this$props2.removeFieldMutation,\n          fieldsQuery = _this$props2.fieldsQuery,\n          formDetailQuery = _this$props2.formDetailQuery,\n          showMessage = _this$props2.showMessage;\n\n      if (fieldsQuery.loading || formDetailQuery.loading) {\n        return false;\n      }\n\n      var dbFields = fieldsQuery.fields || [];\n      var form = formDetailQuery.formDetail || {};\n\n      var saveForm = function saveForm(doc) {\n        var title = doc.title,\n            desc = doc.desc,\n            btnText = doc.btnText,\n            fields = doc.fields,\n            type = doc.type;\n        editFormMutation({\n          variables: {\n            _id: formId,\n            title: title,\n            description: desc,\n            buttonText: btnText,\n            type: type\n          }\n        }).then(function () {\n          var dbFieldIds = dbFields.map(function (field) {\n            return field._id;\n          });\n          var existingIds = [];\n          var createFieldsData = [];\n          var updateFieldsData = [];\n          var removeFieldsData = []; // collect fields ================\n\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var field = _step.value;\n\n              // collect fields to update\n              if (dbFieldIds.includes(field._id)) {\n                existingIds.push(field._id);\n                updateFieldsData.push(field);\n                continue;\n              } // collect fields to create\n\n\n              var _id = field._id,\n                  fieldToCreate = _objectWithoutProperties(field, [\"_id\"]);\n\n              createFieldsData.push(_objectSpread({}, fieldToCreate, {\n                contentType: 'form',\n                contentTypeId: formId\n              }));\n            } // collect fields to remove\n\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = dbFieldIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var dbFieldId = _step2.value;\n\n              if (!existingIds.includes(dbFieldId || '')) {\n                removeFieldsData.push({\n                  _id: dbFieldId || ''\n                });\n              }\n            } // save fields ===================\n\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          var promises = [];\n\n          var doMutation = function doMutation(_ref) {\n            var datas = _ref.datas,\n                mutation = _ref.mutation;\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = datas[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var data = _step3.value;\n                promises.push(mutation({\n                  variables: data\n                }));\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          };\n\n          doMutation({\n            datas: createFieldsData,\n            mutation: addFieldMutation\n          });\n          doMutation({\n            datas: updateFieldsData,\n            mutation: editFieldMutation\n          });\n          doMutation({\n            datas: removeFieldsData,\n            mutation: removeFieldMutation\n          });\n          return Promise.all(promises);\n        }).then(function () {\n          if (showMessage) {\n            Alert.success('You successfully updated a form');\n          }\n\n          fieldsQuery.refetch().then(function () {\n            afterDbSave(formId);\n          });\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        fields: dbFields.map(function (field) {\n          return _objectSpread({}, field);\n        }),\n        saveForm: saveForm,\n        form: form\n      });\n\n      return React.createElement(Form, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditFormContainer;\n}(React.Component);\n\nEditFormContainer.defaultProps = {\n  showMessage: true\n};\nexport default withProps(compose(graphql(gql(queries.fields), {\n  name: 'fieldsQuery',\n  options: function options(_ref2) {\n    var formId = _ref2.formId;\n    return {\n      variables: {\n        contentType: 'form',\n        contentTypeId: formId\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.formDetail), {\n  name: 'formDetailQuery',\n  options: function options(_ref3) {\n    var formId = _ref3.formId;\n    return {\n      variables: {\n        _id: formId\n      }\n    };\n  }\n}), graphql(gql(mutations.fieldsAdd), {\n  name: 'addFieldMutation'\n}), graphql(gql(mutations.editForm), {\n  name: 'editFormMutation'\n}), graphql(gql(mutations.fieldsEdit), {\n  name: 'editFieldMutation'\n}), graphql(gql(mutations.fieldsRemove), {\n  name: 'removeFieldMutation'\n}))(withRouter(EditFormContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/forms/containers/EditForm.tsx"],"names":["gql","compose","Alert","withProps","React","graphql","withRouter","Form","mutations","queries","EditFormContainer","nextProps","props","onInit","fieldsQuery","loading","fields","formId","afterDbSave","addFieldMutation","editFieldMutation","editFormMutation","removeFieldMutation","formDetailQuery","showMessage","dbFields","form","formDetail","saveForm","doc","title","desc","btnText","type","variables","_id","description","buttonText","then","dbFieldIds","map","field","existingIds","createFieldsData","updateFieldsData","removeFieldsData","includes","push","fieldToCreate","contentType","contentTypeId","dbFieldId","promises","doMutation","datas","mutation","data","Promise","all","success","refetch","catch","error","message","updatedProps","Component","defaultProps","name","options","fetchPolicy","fieldsAdd","editForm","fieldsEdit","fieldsRemove"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { IIntegration } from 'modules/settings/integrations/types';\nimport { FieldsQueryResponse, IField } from 'modules/settings/properties/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IRouterProps } from '../../common/types';\nimport Form from '../components/Form';\nimport { mutations, queries } from '../graphql';\nimport {\n  AddFieldMutationResponse,\n  AddFieldMutationVariables,\n  EditFieldMutationResponse,\n  EditFieldMutationVariables,\n  EditFormMutationResponse,\n  EditFormMutationVariables,\n  FormDetailQueryResponse,\n  IFormData,\n  RemoveFieldMutationResponse,\n  RemoveFieldMutationVariables\n} from '../types';\n\ntype Props = {\n  renderPreviewWrapper: (previewRenderer, fields: IField[]) => void;\n  afterDbSave: (formId: string) => void;\n  onDocChange?: (doc: IFormData) => void;\n  onInit?: (fields: IField[]) => void;\n  type: string;\n  isReadyToSave: boolean;\n  formId: string;\n  integration?: IIntegration;\n  showMessage?: boolean;\n};\n\ntype FinalProps = {\n  fieldsQuery: FieldsQueryResponse;\n  formDetailQuery: FormDetailQueryResponse;\n} & Props &\n  EditFormMutationResponse &\n  AddFieldMutationResponse &\n  EditFieldMutationResponse &\n  RemoveFieldMutationResponse &\n  IRouterProps;\n\nclass EditFormContainer extends React.Component<FinalProps> {\n  static defaultProps = {\n    showMessage: true\n  };\n\n  componentWillReceiveProps(nextProps: FinalProps) {\n    const { onInit, fieldsQuery } = this.props;\n\n    if (fieldsQuery.loading && !nextProps.fieldsQuery.loading && onInit) {\n      onInit(nextProps.fieldsQuery.fields || []);\n    }\n  }\n\n  render() {\n    const {\n      formId,\n      afterDbSave,\n      addFieldMutation,\n      editFieldMutation,\n      editFormMutation,\n      removeFieldMutation,\n      fieldsQuery,\n      formDetailQuery,\n      showMessage\n    } = this.props;\n\n    if (fieldsQuery.loading || formDetailQuery.loading) {\n      return false;\n    }\n\n    const dbFields = fieldsQuery.fields || [];\n    const form = formDetailQuery.formDetail || {};\n\n    const saveForm = doc => {\n      const { title, desc, btnText, fields, type } = doc;\n\n      editFormMutation({\n        variables: {\n          _id: formId,\n          title,\n          description: desc,\n          buttonText: btnText,\n          type\n        }\n      })\n        .then(() => {\n          const dbFieldIds = dbFields.map(field => field._id);\n          const existingIds: string[] = [];\n          const createFieldsData: IField[] = [];\n          const updateFieldsData: IField[] = [];\n          const removeFieldsData: Array<{ _id: string }> = [];\n\n          // collect fields ================\n          for (const field of fields) {\n            // collect fields to update\n            if (dbFieldIds.includes(field._id)) {\n              existingIds.push(field._id);\n              updateFieldsData.push(field);\n              continue;\n            }\n\n            // collect fields to create\n            const { _id, ...fieldToCreate } = field;\n\n            createFieldsData.push({\n              ...fieldToCreate,\n              contentType: 'form',\n              contentTypeId: formId\n            });\n          }\n\n          // collect fields to remove\n          for (const dbFieldId of dbFieldIds) {\n            if (!existingIds.includes(dbFieldId || '')) {\n              removeFieldsData.push({ _id: dbFieldId || '' });\n            }\n          }\n\n          // save fields ===================\n          const promises: any[] = [];\n\n          const doMutation = ({ datas, mutation }) => {\n            for (const data of datas) {\n              promises.push(mutation({ variables: data }));\n            }\n          };\n\n          doMutation({ datas: createFieldsData, mutation: addFieldMutation });\n          doMutation({ datas: updateFieldsData, mutation: editFieldMutation });\n          doMutation({\n            datas: removeFieldsData,\n            mutation: removeFieldMutation\n          });\n\n          return Promise.all(promises);\n        })\n\n        .then(() => {\n          if (showMessage) {\n            Alert.success('You successfully updated a form');\n          }\n\n          fieldsQuery.refetch().then(() => {\n            afterDbSave(formId);\n          });\n        })\n\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      fields: dbFields.map(field => ({ ...field })),\n      saveForm,\n      form\n    };\n\n    return <Form {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      FieldsQueryResponse,\n      { contentType: string; contentTypeId: string }\n    >(gql(queries.fields), {\n      name: 'fieldsQuery',\n      options: ({ formId }) => {\n        return {\n          variables: {\n            contentType: 'form',\n            contentTypeId: formId\n          },\n          fetchPolicy: 'network-only'\n        };\n      }\n    }),\n    graphql<Props, FormDetailQueryResponse, { _id: string }>(\n      gql(queries.formDetail),\n      {\n        name: 'formDetailQuery',\n        options: ({ formId }) => ({\n          variables: {\n            _id: formId\n          }\n        })\n      }\n    ),\n    graphql<Props, AddFieldMutationResponse, AddFieldMutationVariables>(\n      gql(mutations.fieldsAdd),\n      {\n        name: 'addFieldMutation'\n      }\n    ),\n    graphql<Props, EditFormMutationResponse, EditFormMutationVariables>(\n      gql(mutations.editForm),\n      {\n        name: 'editFormMutation'\n      }\n    ),\n    graphql<Props, EditFieldMutationResponse, EditFieldMutationVariables>(\n      gql(mutations.fieldsEdit),\n      {\n        name: 'editFieldMutation'\n      }\n    ),\n    graphql<Props, RemoveFieldMutationResponse, RemoveFieldMutationVariables>(\n      gql(mutations.fieldsRemove),\n      {\n        name: 'removeFieldMutation'\n      }\n    )\n  )(withRouter<FinalProps>(EditFormContainer))\n);\n"]},"metadata":{},"sourceType":"module"}