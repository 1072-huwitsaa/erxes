{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/containers/PipelineForm.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport PipelineForm from '../components/PipelineForm';\nimport { queries } from '../graphql';\n\nvar PipelineFormContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PipelineFormContainer, _React$Component);\n\n  function PipelineFormContainer() {\n    _classCallCheck(this, PipelineFormContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PipelineFormContainer).apply(this, arguments));\n  }\n\n  _createClass(PipelineFormContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          stagesQuery = _this$props.stagesQuery,\n          boardsQuery = _this$props.boardsQuery,\n          boardId = _this$props.boardId,\n          renderButton = _this$props.renderButton,\n          options = _this$props.options;\n\n      if (stagesQuery && stagesQuery.loading || boardsQuery && boardsQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      }\n\n      var stages = stagesQuery ? stagesQuery.stages : [];\n      var boards = boardsQuery.boards || [];\n\n      var extendedProps = _objectSpread({}, this.props, {\n        stages: stages,\n        boards: boards,\n        boardId: boardId,\n        renderButton: renderButton\n      });\n\n      var Form = options ? options.PipelineForm : PipelineForm;\n      return React.createElement(Form, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PipelineFormContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.stages), {\n  name: 'stagesQuery',\n  skip: function skip(props) {\n    return !props.pipeline;\n  },\n  options: function options(_ref) {\n    var pipeline = _ref.pipeline;\n    return {\n      variables: {\n        pipelineId: pipeline ? pipeline._id : '',\n        isAll: true\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.boards), {\n  name: 'boardsQuery',\n  options: function options(_ref2) {\n    var type = _ref2.type;\n    return {\n      variables: {\n        type: type\n      }\n    };\n  }\n}))(PipelineFormContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/boards/containers/PipelineForm.tsx"],"names":["gql","compose","Spinner","withProps","React","graphql","PipelineForm","queries","PipelineFormContainer","props","stagesQuery","boardsQuery","boardId","renderButton","options","loading","stages","boards","extendedProps","Form","Component","name","skip","pipeline","variables","pipelineId","_id","isAll","fetchPolicy","type"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAGA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,OAAT,QAAwB,YAAxB;;IAkBMC,qB;;;;;;;;;;;;;6BACK;AAAA,wBAOH,KAAKC,KAPF;AAAA,UAELC,WAFK,eAELA,WAFK;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILC,OAJK,eAILA,OAJK;AAAA,UAKLC,YALK,eAKLA,YALK;AAAA,UAMLC,OANK,eAMLA,OANK;;AASP,UACGJ,WAAW,IAAIA,WAAW,CAACK,OAA5B,IACCJ,WAAW,IAAIA,WAAW,CAACI,OAF9B,EAGE;AACA,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAMC,MAAM,GAAGN,WAAW,GAAGA,WAAW,CAACM,MAAf,GAAwB,EAAlD;AACA,UAAMC,MAAM,GAAGN,WAAW,CAACM,MAAZ,IAAsB,EAArC;;AAEA,UAAMC,aAAa,qBACd,KAAKT,KADS;AAEjBO,QAAAA,MAAM,EAANA,MAFiB;AAGjBC,QAAAA,MAAM,EAANA,MAHiB;AAIjBL,QAAAA,OAAO,EAAPA,OAJiB;AAKjBC,QAAAA,YAAY,EAAZA;AALiB,QAAnB;;AAQA,UAAMM,IAAI,GAAGL,OAAO,GAAGA,OAAO,CAACR,YAAX,GAA0BA,YAA9C;AAEA,aAAO,oBAAC,IAAD,oBAAUY,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA/BiCd,KAAK,CAACgB,S;;AAkC1C,eAAejB,SAAS,CACtBF,OAAO,CACLI,OAAO,CACLL,GAAG,CAACO,OAAO,CAACS,MAAT,CADE,EAEL;AACEK,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,IAAI,EAAE,cAAAb,KAAK;AAAA,WAAI,CAACA,KAAK,CAACc,QAAX;AAAA,GAFb;AAGET,EAAAA,OAAO,EAAE;AAAA,QAAGS,QAAH,QAAGA,QAAH;AAAA,WAA6C;AACpDC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,UAAU,EAAEF,QAAQ,GAAGA,QAAQ,CAACG,GAAZ,GAAkB,EAAxC;AAA4CC,QAAAA,KAAK,EAAE;AAAnD,OADyC;AAEpDC,MAAAA,WAAW,EAAE;AAFuC,KAA7C;AAAA;AAHX,CAFK,CADF,EAYLvB,OAAO,CAAiCL,GAAG,CAACO,OAAO,CAACU,MAAT,CAApC,EAAsD;AAC3DI,EAAAA,IAAI,EAAE,aADqD;AAE3DP,EAAAA,OAAO,EAAE;AAAA,QAAGe,IAAH,SAAGA,IAAH;AAAA,WAAe;AACtBL,MAAAA,SAAS,EAAE;AAAEK,QAAAA,IAAI,EAAJA;AAAF;AADW,KAAf;AAAA;AAFkD,CAAtD,CAZF,CAAP,CAkBErB,qBAlBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { BoardsQueryResponse, StagesQueryResponse } from 'modules/boards/types';\nimport { IPipeline } from 'modules/boards/types';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport PipelineForm from '../components/PipelineForm';\nimport { queries } from '../graphql';\nimport { IOption } from '../types';\n\ntype Props = {\n  pipeline?: IPipeline;\n  boardId?: string;\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  closeModal: () => void;\n  show: boolean;\n  type: string;\n  options?: IOption;\n};\n\ntype FinalProps = {\n  stagesQuery: StagesQueryResponse;\n  boardsQuery: BoardsQueryResponse;\n} & Props;\n\nclass PipelineFormContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      stagesQuery,\n      boardsQuery,\n      boardId,\n      renderButton,\n      options\n    } = this.props;\n\n    if (\n      (stagesQuery && stagesQuery.loading) ||\n      (boardsQuery && boardsQuery.loading)\n    ) {\n      return <Spinner />;\n    }\n\n    const stages = stagesQuery ? stagesQuery.stages : [];\n    const boards = boardsQuery.boards || [];\n\n    const extendedProps = {\n      ...this.props,\n      stages,\n      boards,\n      boardId,\n      renderButton\n    };\n\n    const Form = options ? options.PipelineForm : PipelineForm;\n\n    return <Form {...extendedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, StagesQueryResponse, { pipelineId: string }>(\n      gql(queries.stages),\n      {\n        name: 'stagesQuery',\n        skip: props => !props.pipeline,\n        options: ({ pipeline }: { pipeline?: IPipeline }) => ({\n          variables: { pipelineId: pipeline ? pipeline._id : '', isAll: true },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, BoardsQueryResponse, {}>(gql(queries.boards), {\n      name: 'boardsQuery',\n      options: ({ type }) => ({\n        variables: { type }\n      })\n    })\n  )(PipelineFormContainer)\n);\n"]},"metadata":{},"sourceType":"module"}