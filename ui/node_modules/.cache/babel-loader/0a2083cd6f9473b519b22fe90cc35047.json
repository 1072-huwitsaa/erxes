{"ast":null,"code":"import { COMPANY_INFO } from 'modules/companies/constants';\nimport { CUSTOMER_BASIC_INFO } from 'modules/customers/constants';\nimport { PRODUCT_INFO } from '../productService/constants';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from './constants';\n\nvar generateFields = function generateFields(infos, type) {\n  var fields = [];\n  infos.forEach(function (info, index) {\n    fields.push({\n      _id: \"customerBasicInfos\".concat(index),\n      contentType: type,\n      type: 'input',\n      text: info.label,\n      isVisible: true,\n      validation: '',\n      order: \"\".concat(index - 1),\n      options: [],\n      groupId: \"basicInfosGroup\".concat(type),\n      description: info.label,\n      isDefinedByErxes: true\n    });\n  });\n  return fields;\n};\n\nvar generateGroup = function generateGroup(infos, type) {\n  return {\n    _id: \"basicInfosGroup\".concat(type),\n    name: 'Basic information',\n    description: \"Basic information of a \".concat(type),\n    contentType: type,\n    order: -1,\n    isVisible: true,\n    lastUpdatedUser: {\n      _id: '123',\n      role: 'SYSTEM',\n      username: 'system',\n      email: 'system@erxes.io',\n      details: {\n        fullName: 'SYSTEM'\n      }\n    },\n    lastUpdatedUserId: '123',\n    isDefinedByErxes: true,\n    fields: generateFields(infos, type)\n  };\n};\n\nvar customerBasicInfos = generateGroup(CUSTOMER_BASIC_INFO.ALL, FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER);\nvar companyBasicInfos = generateGroup(COMPANY_INFO.ALL, FIELDS_GROUPS_CONTENT_TYPES.COMPANY);\nvar productBasicInfos = generateGroup(PRODUCT_INFO.ALL, FIELDS_GROUPS_CONTENT_TYPES.PRODUCT);\nexport { customerBasicInfos, companyBasicInfos, productBasicInfos };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/properties/utils.tsx"],"names":["COMPANY_INFO","CUSTOMER_BASIC_INFO","PRODUCT_INFO","FIELDS_GROUPS_CONTENT_TYPES","generateFields","infos","type","fields","forEach","info","index","push","_id","contentType","text","label","isVisible","validation","order","options","groupId","description","isDefinedByErxes","generateGroup","name","lastUpdatedUser","role","username","email","details","fullName","lastUpdatedUserId","customerBasicInfos","ALL","CUSTOMER","companyBasicInfos","COMPANY","productBasicInfos","PRODUCT"],"mappings":"AAAA,SAASA,YAAT,QAA6B,6BAA7B;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,2BAAT,QAA4C,aAA5C;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAeC,IAAf,EAAgC;AACrD,MAAMC,MAAgB,GAAG,EAAzB;AAEAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC7BH,IAAAA,MAAM,CAACI,IAAP,CAAY;AACVC,MAAAA,GAAG,8BAAuBF,KAAvB,CADO;AAEVG,MAAAA,WAAW,EAAEP,IAFH;AAGVA,MAAAA,IAAI,EAAE,OAHI;AAIVQ,MAAAA,IAAI,EAAEL,IAAI,CAACM,KAJD;AAKVC,MAAAA,SAAS,EAAE,IALD;AAMVC,MAAAA,UAAU,EAAE,EANF;AAOVC,MAAAA,KAAK,YAAKR,KAAK,GAAG,CAAb,CAPK;AAQVS,MAAAA,OAAO,EAAE,EARC;AASVC,MAAAA,OAAO,2BAAoBd,IAApB,CATG;AAUVe,MAAAA,WAAW,EAAEZ,IAAI,CAACM,KAVR;AAWVO,MAAAA,gBAAgB,EAAE;AAXR,KAAZ;AAaD,GAdD;AAgBA,SAAOf,MAAP;AACD,CApBD;;AAsBA,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB,CAAClB,KAAD,EAAeC,IAAf,EAAgC;AACpD,SAAO;AACLM,IAAAA,GAAG,2BAAoBN,IAApB,CADE;AAELkB,IAAAA,IAAI,EAAE,mBAFD;AAGLH,IAAAA,WAAW,mCAA4Bf,IAA5B,CAHN;AAILO,IAAAA,WAAW,EAAEP,IAJR;AAKLY,IAAAA,KAAK,EAAE,CAAC,CALH;AAMLF,IAAAA,SAAS,EAAE,IANN;AAOLS,IAAAA,eAAe,EAAE;AACfb,MAAAA,GAAG,EAAE,KADU;AAEfc,MAAAA,IAAI,EAAE,QAFS;AAGfC,MAAAA,QAAQ,EAAE,QAHK;AAIfC,MAAAA,KAAK,EAAE,iBAJQ;AAKfC,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AADH;AALM,KAPZ;AAgBLC,IAAAA,iBAAiB,EAAE,KAhBd;AAiBLT,IAAAA,gBAAgB,EAAE,IAjBb;AAkBLf,IAAAA,MAAM,EAAEH,cAAc,CAACC,KAAD,EAAQC,IAAR;AAlBjB,GAAP;AAoBD,CArBD;;AAuBA,IAAM0B,kBAAkB,GAAGT,aAAa,CACtCtB,mBAAmB,CAACgC,GADkB,EAEtC9B,2BAA2B,CAAC+B,QAFU,CAAxC;AAIA,IAAMC,iBAAiB,GAAGZ,aAAa,CACrCvB,YAAY,CAACiC,GADwB,EAErC9B,2BAA2B,CAACiC,OAFS,CAAvC;AAKA,IAAMC,iBAAiB,GAAGd,aAAa,CACrCrB,YAAY,CAAC+B,GADwB,EAErC9B,2BAA2B,CAACmC,OAFS,CAAvC;AAKA,SAASN,kBAAT,EAA6BG,iBAA7B,EAAgDE,iBAAhD","sourcesContent":["import { COMPANY_INFO } from 'modules/companies/constants';\nimport { CUSTOMER_BASIC_INFO } from 'modules/customers/constants';\nimport { PRODUCT_INFO } from '../productService/constants';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from './constants';\nimport { IField } from './types';\n\nconst generateFields = (infos: any[], type: string) => {\n  const fields: IField[] = [];\n\n  infos.forEach((info, index) => {\n    fields.push({\n      _id: `customerBasicInfos${index}`,\n      contentType: type,\n      type: 'input',\n      text: info.label,\n      isVisible: true,\n      validation: '',\n      order: `${index - 1}`,\n      options: [],\n      groupId: `basicInfosGroup${type}`,\n      description: info.label,\n      isDefinedByErxes: true\n    });\n  });\n\n  return fields;\n};\n\nconst generateGroup = (infos: any[], type: string) => {\n  return {\n    _id: `basicInfosGroup${type}`,\n    name: 'Basic information',\n    description: `Basic information of a ${type}`,\n    contentType: type,\n    order: -1,\n    isVisible: true,\n    lastUpdatedUser: {\n      _id: '123',\n      role: 'SYSTEM',\n      username: 'system',\n      email: 'system@erxes.io',\n      details: {\n        fullName: 'SYSTEM'\n      }\n    },\n    lastUpdatedUserId: '123',\n    isDefinedByErxes: true,\n    fields: generateFields(infos, type)\n  };\n};\n\nconst customerBasicInfos = generateGroup(\n  CUSTOMER_BASIC_INFO.ALL,\n  FIELDS_GROUPS_CONTENT_TYPES.CUSTOMER\n);\nconst companyBasicInfos = generateGroup(\n  COMPANY_INFO.ALL,\n  FIELDS_GROUPS_CONTENT_TYPES.COMPANY\n);\n\nconst productBasicInfos = generateGroup(\n  PRODUCT_INFO.ALL,\n  FIELDS_GROUPS_CONTENT_TYPES.PRODUCT\n);\n\nexport { customerBasicInfos, companyBasicInfos, productBasicInfos };\n"]},"metadata":{},"sourceType":"module"}