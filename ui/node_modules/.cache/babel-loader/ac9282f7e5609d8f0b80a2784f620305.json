{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/ConversationDetail.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ConversationDetail from 'modules/inbox/components/conversationDetail/ConversationDetail';\nimport { mutations, queries, subscriptions } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar DetailContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailContainer, _React$Component);\n\n  function DetailContainer(props) {\n    var _this;\n\n    _classCallCheck(this, DetailContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailContainer).call(this, props));\n    _this.prevSubscriptions = void 0;\n    _this.prevSubscriptions = null;\n    return _this;\n  }\n\n  _createClass(DetailContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var currentId = nextProps.currentId,\n          detailQuery = nextProps.detailQuery; // if conversation id changed. then unsubscribe previous subscriptions\n\n      if (this.prevSubscriptions && this.props.currentId !== currentId) {\n        var _this$prevSubscriptio = this.prevSubscriptions,\n            detailHandler = _this$prevSubscriptio.detailHandler,\n            customerHandler = _this$prevSubscriptio.customerHandler;\n\n        if (detailHandler) {\n          detailHandler();\n        }\n\n        if (customerHandler) {\n          customerHandler();\n        }\n\n        this.prevSubscriptions = null;\n      }\n\n      if (detailQuery.loading) {\n        return;\n      }\n\n      if (!detailQuery.conversationDetail) {\n        return;\n      }\n\n      if (this.prevSubscriptions) {\n        return;\n      } // Start new subscriptions =============\n\n\n      this.prevSubscriptions = {}; // listen for conversation changes like status, assignee\n\n      this.prevSubscriptions.detailHandler = detailQuery.subscribeToMore({\n        document: gql(subscriptions.conversationChanged),\n        variables: {\n          _id: currentId\n        },\n        updateQuery: function updateQuery() {\n          _this2.props.detailQuery.refetch();\n        }\n      }); // listen for customer connection\n\n      var conversation = detailQuery.conversationDetail;\n\n      if (conversation.integration && conversation.integration.kind === 'messenger') {\n        var customerId = conversation.customer && conversation.customer._id;\n        this.prevSubscriptions.customerHandler = detailQuery.subscribeToMore({\n          document: gql(subscriptions.customerConnectionChanged),\n          variables: {\n            _id: customerId\n          },\n          updateQuery: function updateQuery(prev, _ref) {\n            var data = _ref.subscriptionData.data;\n            var prevConv = prev.conversationDetail;\n            var customerConnection = data.customerConnectionChanged;\n\n            if (prevConv && prevConv.customer._id === customerConnection._id) {\n              _this2.props.detailQuery.refetch();\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          currentId = _this$props.currentId,\n          detailQuery = _this$props.detailQuery,\n          markAsReadMutation = _this$props.markAsReadMutation,\n          currentUser = _this$props.currentUser;\n      var loading = detailQuery.loading;\n      var conversation = detailQuery.conversationDetail; // mark as read ============\n\n      if (!loading && conversation) {\n        var readUserIds = conversation.readUserIds || [];\n\n        if (!readUserIds.includes(currentUser._id)) {\n          markAsReadMutation({\n            variables: {\n              _id: conversation._id\n            }\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        }\n      }\n\n      var updatedProps = _objectSpread({}, this.props, {\n        currentConversationId: currentId,\n        currentConversation: conversation,\n        refetchDetail: detailQuery.refetch,\n        loading: loading\n      });\n\n      return React.createElement(ConversationDetail, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DetailContainer;\n}(React.Component);\n\nvar WithQuery = withProps(compose(graphql(gql(queries.conversationDetail), {\n  name: 'detailQuery',\n  options: function options(_ref2) {\n    var currentId = _ref2.currentId;\n    return {\n      variables: {\n        _id: currentId\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.markAsRead), {\n  name: 'markAsReadMutation',\n  options: function options(_ref3) {\n    var currentId = _ref3.currentId;\n    return {\n      refetchQueries: [{\n        query: gql(queries.conversationDetailMarkAsRead),\n        variables: {\n          _id: currentId\n        }\n      }, {\n        query: gql(queries.unreadConversationsCount)\n      }]\n    };\n  }\n}))(DetailContainer));\n\nvar WithConsumer = function WithConsumer(props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, function (_ref4) {\n    var currentUser = _ref4.currentUser;\n    return React.createElement(WithQuery, Object.assign({}, props, {\n      currentUser: currentUser || {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default WithConsumer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/ConversationDetail.tsx"],"names":["AppConsumer","gql","compose","Alert","withProps","ConversationDetail","mutations","queries","subscriptions","React","graphql","DetailContainer","props","prevSubscriptions","nextProps","currentId","detailQuery","detailHandler","customerHandler","loading","conversationDetail","subscribeToMore","document","conversationChanged","variables","_id","updateQuery","refetch","conversation","integration","kind","customerId","customer","customerConnectionChanged","prev","data","subscriptionData","prevConv","customerConnection","markAsReadMutation","currentUser","readUserIds","includes","catch","e","error","message","updatedProps","currentConversationId","currentConversation","refetchDetail","Component","WithQuery","name","options","fetchPolicy","markAsRead","refetchQueries","query","conversationDetailMarkAsRead","unreadConversationsCount","WithConsumer"],"mappings":"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","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport ConversationDetail from 'modules/inbox/components/conversationDetail/ConversationDetail';\nimport { mutations, queries, subscriptions } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { IUser } from '../../../auth/types';\nimport {\n  ConversationDetailQueryResponse,\n  MarkAsReadMutationResponse\n} from '../../types';\n\ntype Props = {\n  currentId: string;\n};\n\ntype FinalProps = {\n  detailQuery: ConversationDetailQueryResponse;\n} & Props &\n  MarkAsReadMutationResponse & { currentUser: IUser };\n\nclass DetailContainer extends React.Component<FinalProps> {\n  private prevSubscriptions;\n\n  constructor(props) {\n    super(props);\n\n    this.prevSubscriptions = null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { currentId, detailQuery } = nextProps;\n\n    // if conversation id changed. then unsubscribe previous subscriptions\n    if (this.prevSubscriptions && this.props.currentId !== currentId) {\n      const { detailHandler, customerHandler } = this.prevSubscriptions;\n\n      if (detailHandler) {\n        detailHandler();\n      }\n\n      if (customerHandler) {\n        customerHandler();\n      }\n\n      this.prevSubscriptions = null;\n    }\n\n    if (detailQuery.loading) {\n      return;\n    }\n\n    if (!detailQuery.conversationDetail) {\n      return;\n    }\n\n    if (this.prevSubscriptions) {\n      return;\n    }\n\n    // Start new subscriptions =============\n    this.prevSubscriptions = {};\n\n    // listen for conversation changes like status, assignee\n    this.prevSubscriptions.detailHandler = detailQuery.subscribeToMore({\n      document: gql(subscriptions.conversationChanged),\n      variables: { _id: currentId },\n      updateQuery: () => {\n        this.props.detailQuery.refetch();\n      }\n    });\n\n    // listen for customer connection\n    const conversation = detailQuery.conversationDetail;\n\n    if (\n      conversation.integration &&\n      conversation.integration.kind === 'messenger'\n    ) {\n      const customerId = conversation.customer && conversation.customer._id;\n\n      this.prevSubscriptions.customerHandler = detailQuery.subscribeToMore({\n        document: gql(subscriptions.customerConnectionChanged),\n        variables: { _id: customerId },\n        updateQuery: (prev, { subscriptionData: { data } }) => {\n          const prevConv = prev.conversationDetail;\n          const customerConnection = data.customerConnectionChanged;\n\n          if (prevConv && prevConv.customer._id === customerConnection._id) {\n            this.props.detailQuery.refetch();\n          }\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      currentId,\n      detailQuery,\n      markAsReadMutation,\n      currentUser\n    } = this.props;\n\n    const loading = detailQuery.loading;\n    const conversation = detailQuery.conversationDetail;\n\n    // mark as read ============\n    if (!loading && conversation) {\n      const readUserIds = conversation.readUserIds || [];\n\n      if (!readUserIds.includes(currentUser._id)) {\n        markAsReadMutation({\n          variables: { _id: conversation._id }\n        }).catch(e => {\n          Alert.error(e.message);\n        });\n      }\n    }\n\n    const updatedProps = {\n      ...this.props,\n      currentConversationId: currentId,\n      currentConversation: conversation,\n      refetchDetail: detailQuery.refetch,\n      loading\n    };\n\n    return <ConversationDetail {...updatedProps} />;\n  }\n}\n\nconst WithQuery = withProps<Props & { currentUser: IUser }>(\n  compose(\n    graphql<Props, ConversationDetailQueryResponse, { _id: string }>(\n      gql(queries.conversationDetail),\n      {\n        name: 'detailQuery',\n        options: ({ currentId }) => ({\n          variables: { _id: currentId },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<Props, MarkAsReadMutationResponse, { _id: string }>(\n      gql(mutations.markAsRead),\n      {\n        name: 'markAsReadMutation',\n        options: ({ currentId }) => {\n          return {\n            refetchQueries: [\n              {\n                query: gql(queries.conversationDetailMarkAsRead),\n                variables: { _id: currentId }\n              },\n              { query: gql(queries.unreadConversationsCount) }\n            ]\n          };\n        }\n      }\n    )\n  )(DetailContainer)\n);\n\nconst WithConsumer = (props: Props) => {\n  return (\n    <AppConsumer>\n      {({ currentUser }) => (\n        <WithQuery {...props} currentUser={currentUser || ({} as IUser)} />\n      )}\n    </AppConsumer>\n  );\n};\n\nexport default WithConsumer;\n"]},"metadata":{},"sourceType":"module"}