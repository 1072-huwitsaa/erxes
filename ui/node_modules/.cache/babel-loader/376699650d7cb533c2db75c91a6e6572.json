{"ast":null,"code":"var _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/checklists/containers/Checklists.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport React, { useEffect } from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries, subscriptions } from '../graphql';\nimport List from './List';\n\nfunction ChecklistsContainer(props) {\n  var checklistsQuery = props.checklistsQuery,\n      stageId = props.stageId,\n      addItem = props.addItem,\n      contentType = props.contentType,\n      contentTypeId = props.contentTypeId;\n  useEffect(function () {\n    return checklistsQuery.subscribeToMore({\n      document: gql(subscriptions.checklistsChanged),\n      variables: {\n        contentType: contentType,\n        contentTypeId: contentTypeId\n      },\n      updateQuery: function updateQuery() {\n        checklistsQuery.refetch();\n      }\n    });\n  });\n  var checklists = checklistsQuery.checklists || [];\n  return checklists.map(function (list) {\n    return React.createElement(List, {\n      key: list._id,\n      listId: list._id,\n      stageId: stageId,\n      addItem: addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n  });\n}\n\nexport default withProps(compose(graphql(gql(queries.checklists), {\n  name: 'checklistsQuery',\n  options: function options(_ref) {\n    var contentType = _ref.contentType,\n        contentTypeId = _ref.contentTypeId;\n    return {\n      variables: {\n        contentType: contentType,\n        contentTypeId: contentTypeId\n      },\n      refetchQueries: ['checklists']\n    };\n  }\n}))(ChecklistsContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/checklists/containers/Checklists.tsx"],"names":["gql","compose","withProps","React","useEffect","graphql","queries","subscriptions","List","ChecklistsContainer","props","checklistsQuery","stageId","addItem","contentType","contentTypeId","subscribeToMore","document","checklistsChanged","variables","updateQuery","refetch","checklists","map","list","_id","name","options","refetchQueries"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,YAAvC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAaA,SAASC,mBAAT,CAA6BC,KAA7B,EAAgD;AAAA,MAE5CC,eAF4C,GAO1CD,KAP0C,CAE5CC,eAF4C;AAAA,MAG5CC,OAH4C,GAO1CF,KAP0C,CAG5CE,OAH4C;AAAA,MAI5CC,OAJ4C,GAO1CH,KAP0C,CAI5CG,OAJ4C;AAAA,MAK5CC,WAL4C,GAO1CJ,KAP0C,CAK5CI,WAL4C;AAAA,MAM5CC,aAN4C,GAO1CL,KAP0C,CAM5CK,aAN4C;AAS9CX,EAAAA,SAAS,CAAC,YAAM;AACd,WAAOO,eAAe,CAACK,eAAhB,CAAgC;AACrCC,MAAAA,QAAQ,EAAEjB,GAAG,CAACO,aAAa,CAACW,iBAAf,CADwB;AAErCC,MAAAA,SAAS,EAAE;AAAEL,QAAAA,WAAW,EAAXA,WAAF;AAAeC,QAAAA,aAAa,EAAbA;AAAf,OAF0B;AAGrCK,MAAAA,WAAW,EAAE,uBAAM;AACjBT,QAAAA,eAAe,CAACU,OAAhB;AACD;AALoC,KAAhC,CAAP;AAOD,GARQ,CAAT;AAUA,MAAMC,UAAU,GAAGX,eAAe,CAACW,UAAhB,IAA8B,EAAjD;AAEA,SAAOA,UAAU,CAACC,GAAX,CAAe,UAAAC,IAAI;AAAA,WACxB,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,MAAA,MAAM,EAAED,IAAI,CAACC,GAFf;AAGE,MAAA,OAAO,EAAEb,OAHX;AAIE,MAAA,OAAO,EAAEC,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADwB;AAAA,GAAnB,CAAP;AAQD;;AAED,eAAeX,SAAS,CACtBD,OAAO,CACLI,OAAO,CACLL,GAAG,CAACM,OAAO,CAACgB,UAAT,CADE,EAEL;AACEI,EAAAA,IAAI,EAAE,iBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGb,WAAH,QAAGA,WAAH;AAAA,QAAgBC,aAAhB,QAAgBA,aAAhB;AAAA,WAAqC;AAC5CI,MAAAA,SAAS,EAAE;AACTL,QAAAA,WAAW,EAAXA,WADS;AAETC,QAAAA,aAAa,EAAbA;AAFS,OADiC;AAK5Ca,MAAAA,cAAc,EAAE,CAAC,YAAD;AAL4B,KAArC;AAAA;AAFX,CAFK,CADF,CAAP,CAcEnB,mBAdF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IItemParams } from 'modules/boards/types';\nimport { withProps } from 'modules/common/utils';\nimport React, { useEffect } from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries, subscriptions } from '../graphql';\nimport { ChecklistsQueryResponse, IChecklistsParam } from '../types';\nimport List from './List';\n\ntype IProps = {\n  contentType: string;\n  contentTypeId: string;\n  stageId: string;\n  addItem: (doc: IItemParams, callback: () => void) => void;\n};\n\ntype FinalProps = {\n  checklistsQuery: ChecklistsQueryResponse;\n} & IProps;\n\nfunction ChecklistsContainer(props: FinalProps) {\n  const {\n    checklistsQuery,\n    stageId,\n    addItem,\n    contentType,\n    contentTypeId\n  } = props;\n\n  useEffect(() => {\n    return checklistsQuery.subscribeToMore({\n      document: gql(subscriptions.checklistsChanged),\n      variables: { contentType, contentTypeId },\n      updateQuery: () => {\n        checklistsQuery.refetch();\n      }\n    });\n  });\n\n  const checklists = checklistsQuery.checklists || [];\n\n  return checklists.map(list => (\n    <List\n      key={list._id}\n      listId={list._id}\n      stageId={stageId}\n      addItem={addItem}\n    />\n  ));\n}\n\nexport default withProps<IProps>(\n  compose(\n    graphql<IProps, ChecklistsQueryResponse, IChecklistsParam>(\n      gql(queries.checklists),\n      {\n        name: 'checklistsQuery',\n        options: ({ contentType, contentTypeId }) => ({\n          variables: {\n            contentType,\n            contentTypeId\n          },\n          refetchQueries: ['checklists']\n        })\n      }\n    )\n  )(ChecklistsContainer)\n);\n"]},"metadata":{},"sourceType":"module"}