{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/auth/containers/withCurrentUser.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { storeConstantToStore, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../graphql';\n\nvar withCurrentUser = function withCurrentUser(Component) {\n  var Container = function Container(props) {\n    var currentUserQuery = props.currentUserQuery;\n\n    if (currentUserQuery.loading) {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      });\n    }\n\n    var currentUser = currentUserQuery.currentUser;\n\n    var updatedProps = _objectSpread({}, props, {\n      currentUser: currentUser\n    });\n\n    if (currentUser) {\n      var constants = currentUser.configsConstants || [];\n      constants.forEach(function (c) {\n        return storeConstantToStore(c.key, c.values);\n      });\n    }\n\n    return React.createElement(Component, Object.assign({}, updatedProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  };\n\n  return withProps(compose(graphql(gql(queries.currentUser), {\n    name: 'currentUserQuery'\n  }))(Container));\n};\n\nexport default withCurrentUser;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/auth/containers/withCurrentUser.tsx"],"names":["gql","compose","Spinner","storeConstantToStore","withProps","React","graphql","queries","withCurrentUser","Component","Container","props","currentUserQuery","loading","currentUser","updatedProps","constants","configsConstants","forEach","c","key","values","name"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,oBAAT,EAA+BC,SAA/B,QAAgD,sBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,SAAS,EAAI;AACnC,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAkB;AAAA,QAC1BC,gBAD0B,GACLD,KADK,CAC1BC,gBAD0B;;AAGlC,QAAIA,gBAAgB,CAACC,OAArB,EAA8B;AAC5B,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,QAAMC,WAAW,GAAGF,gBAAgB,CAACE,WAArC;;AAEA,QAAMC,YAAY,qBACbJ,KADa;AAEhBG,MAAAA,WAAW,EAAXA;AAFgB,MAAlB;;AAKA,QAAIA,WAAJ,EAAiB;AACf,UAAME,SAAS,GAAGF,WAAW,CAACG,gBAAZ,IAAgC,EAAlD;AAEAD,MAAAA,SAAS,CAACE,OAAV,CAAkB,UAAAC,CAAC;AAAA,eAAIhB,oBAAoB,CAACgB,CAAC,CAACC,GAAH,EAAQD,CAAC,CAACE,MAAV,CAAxB;AAAA,OAAnB;AACD;;AAED,WAAO,oBAAC,SAAD,oBAAeN,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GArBD;;AAuBA,SAAOX,SAAS,CACdH,OAAO,CACLK,OAAO,CAA+BN,GAAG,CAACO,OAAO,CAACO,WAAT,CAAlC,EAAyD;AAC9DQ,IAAAA,IAAI,EAAE;AADwD,GAAzD,CADF,CAAP,CAIEZ,SAJF,CADc,CAAhB;AAOD,CA/BD;;AAiCA,eAAeF,eAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { storeConstantToStore, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { queries } from '../graphql';\nimport { CurrentUserQueryResponse } from '../types';\n\ntype Props = {\n  currentUserQuery: CurrentUserQueryResponse;\n};\n\nconst withCurrentUser = Component => {\n  const Container = (props: Props) => {\n    const { currentUserQuery } = props;\n\n    if (currentUserQuery.loading) {\n      return <Spinner />;\n    }\n\n    const currentUser = currentUserQuery.currentUser;\n\n    const updatedProps = {\n      ...props,\n      currentUser\n    };\n\n    if (currentUser) {\n      const constants = currentUser.configsConstants || [];\n\n      constants.forEach(c => storeConstantToStore(c.key, c.values));\n    }\n\n    return <Component {...updatedProps} />;\n  };\n\n  return withProps<{}>(\n    compose(\n      graphql<{}, CurrentUserQueryResponse>(gql(queries.currentUser), {\n        name: 'currentUserQuery'\n      })\n    )(Container)\n  );\n};\n\nexport default withCurrentUser;\n"]},"metadata":{},"sourceType":"module"}