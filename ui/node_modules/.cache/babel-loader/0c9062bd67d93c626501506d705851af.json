{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/label/Overlay.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport FilterableList from \"modules/common/components/filterableList/FilterableList\";\nimport { __ } from \"modules/common/utils\";\nimport * as React from \"react\";\nimport Popover from \"react-bootstrap/Popover\";\nimport Form from \"../../containers/label/Form\";\nimport { ButtonContainer, LabelWrapper, PipelineLabelList, Title } from \"../../styles/label\";\n\nvar Overlay =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Overlay, _React$Component);\n\n  function Overlay(props) {\n    var _this;\n\n    _classCallCheck(this, Overlay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Overlay).call(this, props));\n\n    _this.onChangeForm = function () {\n      _this.setState({\n        showForm: !_this.state.showForm\n      });\n    };\n\n    _this.onEdit = function (labelId) {\n      _this.setState({\n        labelId: labelId,\n        showForm: true\n      });\n    };\n\n    _this.onCreate = function () {\n      _this.setState({\n        labelId: undefined,\n        showForm: true\n      });\n    };\n\n    _this.onClose = function () {\n      _this.setState({\n        showForm: false\n      }, _this.props.onClose);\n    };\n\n    _this.onLabelClick = function (labels) {\n      var selectedLabelIds = labels.filter(function (t) {\n        return t.selectedBy === \"all\";\n      }).map(function (t) {\n        return t._id;\n      });\n\n      _this.props.onSelectLabels(selectedLabelIds);\n    };\n\n    _this.state = {\n      showForm: false\n    };\n    return _this;\n  }\n\n  _createClass(Overlay, [{\n    key: \"generateLabelsParams\",\n    value: function generateLabelsParams() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          _this$props$labels = _this$props.labels,\n          labels = _this$props$labels === void 0 ? [] : _this$props$labels,\n          selectedLabelIds = _this$props.selectedLabelIds;\n      return labels.map(function (_ref) {\n        var _id = _ref._id,\n            name = _ref.name,\n            colorCode = _ref.colorCode;\n        var count = (selectedLabelIds || []).includes(_id || \"\") ? 1 : 0;\n        return {\n          _id: _id,\n          title: name,\n          style: {\n            backgroundColor: colorCode\n          },\n          selectedBy: count === 1 ? \"all\" : \"none\",\n          additionalIconOnClick: _this2.onEdit,\n          additionalIconClass: \"pen-1\"\n        };\n      });\n    }\n  }, {\n    key: \"renderList\",\n    value: function renderList() {\n      var props = {\n        selectable: true,\n        items: this.generateLabelsParams(),\n        onClick: this.onLabelClick\n      };\n      return React.createElement(PipelineLabelList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(FilterableList, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var elm = document.getElementById(\"filter-label\");\n\n      if (elm) {\n        elm.className = \"popover bottom\";\n        elm.style.marginTop = \"35px\";\n        elm.style.left = \"-80px\";\n      }\n    }\n  }, {\n    key: \"renderPopover\",\n    value: function renderPopover() {\n      var _this$state = this.state,\n          showForm = _this$state.showForm,\n          labelId = _this$state.labelId;\n      var _this$props2 = this.props,\n          pipelineId = _this$props2.pipelineId,\n          toggleConfirm = _this$props2.toggleConfirm,\n          selectedLabelIds = _this$props2.selectedLabelIds,\n          onSelectLabels = _this$props2.onSelectLabels;\n\n      if (showForm) {\n        return React.createElement(LabelWrapper, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(Form, {\n          selectedLabelIds: selectedLabelIds,\n          onSelectLabels: onSelectLabels,\n          showForm: showForm,\n          pipelineId: pipelineId,\n          afterSave: this.onChangeForm,\n          labelId: labelId,\n          toggleConfirm: toggleConfirm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(React.Fragment, null, this.renderList(), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.onCreate,\n        block: true,\n        icon: \"check-1\",\n        size: \"small\",\n        btnStyle: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Create a new label\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          labelId = _this$state2.labelId,\n          showForm = _this$state2.showForm;\n      var title = labelId ? \"Edit label\" : \"Create label\";\n      return React.createElement(Popover, {\n        id: \"filter-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, showForm && React.createElement(Icon, {\n        icon: \"arrow-left\",\n        onClick: this.onChangeForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), showForm ? __(title) : __(\"Labels\"), React.createElement(Icon, {\n        icon: \"times\",\n        onClick: this.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), this.renderPopover());\n    }\n  }]);\n\n  return Overlay;\n}(React.Component);\n\nexport { Overlay as default };","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/components/label/Overlay.tsx"],"names":["Button","Icon","FilterableList","__","React","Popover","Form","ButtonContainer","LabelWrapper","PipelineLabelList","Title","Overlay","props","onChangeForm","setState","showForm","state","onEdit","labelId","onCreate","undefined","onClose","onLabelClick","labels","selectedLabelIds","filter","t","selectedBy","map","_id","onSelectLabels","name","colorCode","count","includes","title","style","backgroundColor","additionalIconOnClick","additionalIconClass","selectable","items","generateLabelsParams","onClick","elm","document","getElementById","className","marginTop","left","pipelineId","toggleConfirm","renderList","renderPopover","Component"],"mappings":"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","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport Icon from \"erxes-common-ui/lib/components/icon\";\nimport FilterableList from \"modules/common/components/filterableList/FilterableList\";\nimport { __ } from \"modules/common/utils\";\nimport * as React from \"react\";\nimport Popover from \"react-bootstrap/Popover\";\nimport Form from \"../../containers/label/Form\";\nimport {\n  ButtonContainer,\n  LabelWrapper,\n  PipelineLabelList,\n  Title,\n} from \"../../styles/label\";\nimport { IPipelineLabel } from \"../../types\";\n\ntype IOverlayProps = {\n  selectedLabelIds: string[];\n  labels: IPipelineLabel[];\n  pipelineId: string;\n  toggleConfirm: (callback?: () => void) => void;\n  onSelectLabels: (selectedLabelIds: string[]) => void;\n  onClose: () => void;\n};\n\ntype IOverlayState = {\n  showForm: boolean;\n  labelId?: string;\n};\n\nexport default class Overlay extends React.Component<\n  IOverlayProps,\n  IOverlayState\n> {\n  constructor(props: IOverlayProps) {\n    super(props);\n\n    this.state = {\n      showForm: false,\n    };\n  }\n\n  onChangeForm = () => {\n    this.setState({ showForm: !this.state.showForm });\n  };\n\n  onEdit = (labelId: string) => {\n    this.setState({ labelId, showForm: true });\n  };\n\n  onCreate = () => {\n    this.setState({ labelId: undefined, showForm: true });\n  };\n\n  onClose = () => {\n    this.setState({ showForm: false }, this.props.onClose);\n  };\n\n  generateLabelsParams() {\n    const { labels = [], selectedLabelIds } = this.props;\n\n    return labels.map(({ _id, name, colorCode }) => {\n      const count = (selectedLabelIds || []).includes(_id || \"\") ? 1 : 0;\n\n      return {\n        _id,\n        title: name,\n        style: { backgroundColor: colorCode },\n        selectedBy: count === 1 ? \"all\" : \"none\",\n        additionalIconOnClick: this.onEdit,\n        additionalIconClass: \"pen-1\",\n      };\n    });\n  }\n\n  onLabelClick = (labels) => {\n    const selectedLabelIds: string[] = labels\n      .filter((t) => t.selectedBy === \"all\")\n      .map((t) => t._id);\n\n    this.props.onSelectLabels(selectedLabelIds);\n  };\n\n  renderList() {\n    const props = {\n      selectable: true,\n      items: this.generateLabelsParams(),\n      onClick: this.onLabelClick,\n    };\n\n    return (\n      <PipelineLabelList>\n        <FilterableList {...props} />\n      </PipelineLabelList>\n    );\n  }\n\n  componentDidMount() {\n    const elm = document.getElementById(\"filter-label\");\n\n    if (elm) {\n      elm.className = \"popover bottom\";\n      elm.style.marginTop = \"35px\";\n      elm.style.left = \"-80px\";\n    }\n  }\n\n  renderPopover() {\n    const { showForm, labelId } = this.state;\n    const {\n      pipelineId,\n      toggleConfirm,\n      selectedLabelIds,\n      onSelectLabels,\n    } = this.props;\n\n    if (showForm) {\n      return (\n        <LabelWrapper>\n          <Form\n            selectedLabelIds={selectedLabelIds}\n            onSelectLabels={onSelectLabels}\n            showForm={showForm}\n            pipelineId={pipelineId}\n            afterSave={this.onChangeForm}\n            labelId={labelId}\n            toggleConfirm={toggleConfirm}\n          />\n        </LabelWrapper>\n      );\n    }\n\n    return (\n      <>\n        {this.renderList()}\n        <ButtonContainer>\n          <Button\n            onClick={this.onCreate}\n            block={true}\n            icon=\"check-1\"\n            size=\"small\"\n            btnStyle=\"success\"\n          >\n            Create a new label\n          </Button>\n        </ButtonContainer>\n      </>\n    );\n  }\n\n  render() {\n    const { labelId, showForm } = this.state;\n    const title = labelId ? \"Edit label\" : \"Create label\";\n\n    return (\n      <Popover id=\"filter-label\">\n        <Title>\n          {showForm && <Icon icon=\"arrow-left\" onClick={this.onChangeForm} />}\n          {showForm ? __(title) : __(\"Labels\")}\n          <Icon icon=\"times\" onClick={this.onClose} />\n        </Title>\n\n        {this.renderPopover()}\n      </Popover>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}