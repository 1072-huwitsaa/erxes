{"ast":null,"code":"var makeString = require('./helper/makeString');\n/**\n * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein\n */\n\n\nmodule.exports = function levenshtein(str1, str2) {\n  'use strict';\n\n  str1 = makeString(str1);\n  str2 = makeString(str2); // Short cut cases  \n\n  if (str1 === str2) return 0;\n  if (!str1 || !str2) return Math.max(str1.length, str2.length); // two rows\n\n  var prevRow = new Array(str2.length + 1); // initialise previous row\n\n  for (var i = 0; i < prevRow.length; ++i) {\n    prevRow[i] = i;\n  } // calculate current row distance from previous row\n\n\n  for (i = 0; i < str1.length; ++i) {\n    var nextCol = i + 1;\n\n    for (var j = 0; j < str2.length; ++j) {\n      var curCol = nextCol; // substution\n\n      nextCol = prevRow[j] + (str1.charAt(i) === str2.charAt(j) ? 0 : 1); // insertion\n\n      var tmp = curCol + 1;\n\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      } // deletion\n\n\n      tmp = prevRow[j + 1] + 1;\n\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      } // copy current col value into previous (in preparation for next iteration)\n\n\n      prevRow[j] = curCol;\n    } // copy last col value into previous (in preparation for next iteration)\n\n\n    prevRow[j] = nextCol;\n  }\n\n  return nextCol;\n};","map":null,"metadata":{},"sourceType":"script"}