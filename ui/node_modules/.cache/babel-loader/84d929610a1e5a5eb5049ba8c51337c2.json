{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/AutoAndManualForm.tsx\";\nimport Button from \"erxes-common-ui/lib/components/button\";\nimport { SmallLoader } from \"modules/common/components/ButtonMutate\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport { Step, Steps } from \"modules/common/components/step\";\nimport { StepWrapper, TitleContainer } from \"modules/common/components/step/styles\";\nimport { Alert } from \"modules/common/utils\";\nimport { __ } from \"modules/common/utils\";\nimport Wrapper from \"modules/layout/components/Wrapper\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { METHODS } from \"../constants\";\nimport SmsForm from \"./SmsForm\";\nimport ChannelStep from \"./step/ChannelStep\";\nimport FullPreviewStep from \"./step/FullPreviewStep\";\nimport MessageStep from \"./step/MessageStep\";\nimport MessageTypeStep from \"./step/MessageTypeStep\";\n\nvar AutoAndManualForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoAndManualForm, _React$Component);\n\n  function AutoAndManualForm(props) {\n    var _this;\n\n    _classCallCheck(this, AutoAndManualForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoAndManualForm).call(this, props));\n\n    _this.changeState = function (key, value) {\n      _this.setState(_defineProperty({}, key, value));\n    };\n\n    _this.clearState = function () {\n      _this.setState({\n        segmentIds: [],\n        brandIds: [],\n        tagIds: []\n      });\n    };\n\n    _this.handleSubmit = function (type) {\n      var doc = {\n        segmentIds: _this.state.segmentIds,\n        tagIds: _this.state.tagIds,\n        brandIds: _this.state.brandIds,\n        title: _this.state.title,\n        fromUserId: _this.state.fromUserId,\n        method: _this.state.method,\n        scheduleDate: _this.state.scheduleDate,\n        shortMessage: _this.state.shortMessage\n      };\n\n      if (_this.state.method === METHODS.EMAIL) {\n        var email = _this.state.email || {};\n        doc.email = {\n          subject: email.subject || \"\",\n          sender: email.sender || \"\",\n          replyTo: (email.replyTo || \"\").split(\" \").toString(),\n          content: _this.state.content,\n          attachments: email.attachments,\n          templateId: email.templateId || \"\"\n        };\n      }\n\n      if (_this.state.method === METHODS.MESSENGER) {\n        var messenger = _this.state.messenger || {};\n        doc.messenger = {\n          brandId: messenger.brandId || \"\",\n          kind: messenger.kind || \"\",\n          sentAs: messenger.sentAs || \"\",\n          content: _this.state.content\n        };\n      }\n\n      if (_this.state.method === METHODS.SMS) {\n        var shortMessage = _this.state.shortMessage || {\n          from: \"\",\n          content: \"\",\n          fromIntegrationId: \"\"\n        };\n        doc.shortMessage = {\n          from: shortMessage.from,\n          content: shortMessage.content,\n          fromIntegrationId: shortMessage.fromIntegrationId\n        };\n      }\n\n      var response = _this.props.validateDoc(type, doc);\n\n      if (_this.state.method === METHODS.SMS && !_this.props.smsConfig) {\n        return Alert.warning(\"SMS integration is not configured. Go to Settings > System config > Integrations config and set Telnyx SMS API key.\");\n      }\n\n      if (response.status === \"ok\" && response.doc) {\n        return _this.props.save(response.doc);\n      }\n    };\n\n    _this.renderSaveButton = function () {\n      var _this$props = _this.props,\n          isActionLoading = _this$props.isActionLoading,\n          kind = _this$props.kind;\n      var cancelButton = React.createElement(Link, {\n        to: \"/engage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        uppercase: false,\n        icon: \"times-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Cancel\"));\n\n      var saveButton = function saveButton() {\n        if (kind === \"auto\") {\n          return React.createElement(React.Fragment, null, React.createElement(Button, {\n            disabled: isActionLoading,\n            btnStyle: \"warning\",\n            uppercase: false,\n            icon: isActionLoading ? undefined : \"file-alt\",\n            onClick: _this.handleSubmit.bind(_assertThisInitialized(_this), \"draft\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }, \"Save & Draft\"), React.createElement(Button, {\n            disabled: isActionLoading,\n            btnStyle: \"success\",\n            uppercase: false,\n            icon: isActionLoading ? undefined : \"check-circle\",\n            onClick: _this.handleSubmit.bind(_assertThisInitialized(_this), \"live\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198\n            },\n            __self: this\n          }, \"Send & Live\"));\n        }\n\n        return React.createElement(Button, {\n          disabled: isActionLoading,\n          btnStyle: \"success\",\n          icon: isActionLoading ? undefined : \"check-circle\",\n          onClick: _this.handleSubmit.bind(_assertThisInitialized(_this), \"live\"),\n          uppercase: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, isActionLoading && React.createElement(SmallLoader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }), \"Send\");\n      };\n\n      return React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, cancelButton, saveButton());\n    };\n\n    var message = props.message || {};\n\n    var _messenger = message.messenger || {};\n\n    var _email = message.email || {};\n\n    var content = _email.content || \"\";\n\n    if (_messenger.content && _messenger.content !== \"\") {\n      content = _messenger.content;\n    }\n\n    _this.state = {\n      activeStep: 1,\n      maxStep: 3,\n      method: message.method || METHODS.EMAIL,\n      title: message.title || \"\",\n      segmentIds: message.segmentIds || [],\n      brandIds: message.brandIds || [],\n      tagIds: message.tagIds || [],\n      content: content,\n      fromUserId: message.fromUserId,\n      messenger: message.messenger,\n      email: message.email,\n      scheduleDate: message.scheduleDate,\n      shortMessage: message.shortMessage\n    };\n    return _this;\n  }\n\n  _createClass(AutoAndManualForm, [{\n    key: \"renderMessageContent\",\n    value: function renderMessageContent() {\n      var _this$props2 = this.props,\n          message = _this$props2.message,\n          brands = _this$props2.brands,\n          users = _this$props2.users,\n          kind = _this$props2.kind,\n          templates = _this$props2.templates,\n          smsConfig = _this$props2.smsConfig,\n          integrations = _this$props2.integrations;\n      var _this$state = this.state,\n          messenger = _this$state.messenger,\n          email = _this$state.email,\n          fromUserId = _this$state.fromUserId,\n          content = _this$state.content,\n          scheduleDate = _this$state.scheduleDate,\n          method = _this$state.method,\n          shortMessage = _this$state.shortMessage;\n      var imagePath = \"/images/icons/erxes-08.svg\";\n\n      if (method === METHODS.SMS) {\n        return React.createElement(Step, {\n          noButton: true,\n          title: \"Compose your SMS\",\n          img: imagePath,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, React.createElement(SmsForm, {\n          onChange: this.changeState,\n          messageKind: kind,\n          scheduleDate: scheduleDate,\n          shortMessage: shortMessage,\n          fromUserId: fromUserId,\n          smsConfig: smsConfig,\n          integrations: integrations,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(Step, {\n        img: imagePath,\n        title: \"Compose your message\",\n        message: message,\n        noButton: method !== METHODS.EMAIL && true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(MessageStep, {\n        brands: brands,\n        onChange: this.changeState,\n        users: users,\n        method: this.state.method,\n        templates: templates,\n        kind: kind,\n        messenger: messenger,\n        email: email,\n        fromUserId: fromUserId,\n        content: content,\n        scheduleDate: scheduleDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderPreviewContent\",\n    value: function renderPreviewContent() {\n      var _this$state2 = this.state,\n          content = _this$state2.content,\n          email = _this$state2.email,\n          method = _this$state2.method;\n\n      if (method !== METHODS.EMAIL) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Step, {\n        img: \"/images/icons/erxes-19.svg\",\n        title: \"Full Preview\",\n        noButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(FullPreviewStep, {\n        content: content,\n        templateId: email && email.templateId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          renderTitle = _this$props3.renderTitle,\n          breadcrumbs = _this$props3.breadcrumbs;\n      var _this$state3 = this.state,\n          activeStep = _this$state3.activeStep,\n          maxStep = _this$state3.maxStep,\n          segmentIds = _this$state3.segmentIds,\n          brandIds = _this$state3.brandIds,\n          title = _this$state3.title,\n          tagIds = _this$state3.tagIds;\n\n      var onChange = function onChange(e) {\n        return _this2.changeState(\"title\", e.target.value);\n      };\n\n      return React.createElement(StepWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(Wrapper.Header, {\n        title: renderTitle(),\n        breadcrumb: breadcrumbs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }), React.createElement(TitleContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, __(\"Title\")), React.createElement(FormControl, {\n        required: true,\n        onChange: onChange,\n        defaultValue: title,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }), this.renderSaveButton()), React.createElement(Steps, {\n        maxStep: maxStep,\n        active: activeStep,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(Step, {\n        img: \"/images/icons/erxes-05.svg\",\n        title: \"Choose channel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(ChannelStep, {\n        onChange: this.changeState,\n        method: this.state.method,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      })), React.createElement(Step, {\n        img: \"/images/icons/erxes-02.svg\",\n        title: \"Who is this message for?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(MessageTypeStep, {\n        onChange: this.changeState,\n        clearState: this.clearState,\n        segmentIds: segmentIds,\n        brandIds: brandIds,\n        tagIds: tagIds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      })), this.renderMessageContent(), this.renderPreviewContent()));\n    }\n  }]);\n\n  return AutoAndManualForm;\n}(React.Component);\n\nexport default AutoAndManualForm;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/components/AutoAndManualForm.tsx"],"names":["Button","SmallLoader","FormControl","Step","Steps","StepWrapper","TitleContainer","Alert","__","Wrapper","React","Link","METHODS","SmsForm","ChannelStep","FullPreviewStep","MessageStep","MessageTypeStep","AutoAndManualForm","props","changeState","key","value","setState","clearState","segmentIds","brandIds","tagIds","handleSubmit","type","doc","state","title","fromUserId","method","scheduleDate","shortMessage","EMAIL","email","subject","sender","replyTo","split","toString","content","attachments","templateId","MESSENGER","messenger","brandId","kind","sentAs","SMS","from","fromIntegrationId","response","validateDoc","smsConfig","warning","status","save","renderSaveButton","isActionLoading","cancelButton","saveButton","undefined","bind","message","activeStep","maxStep","brands","users","templates","integrations","imagePath","renderTitle","breadcrumbs","onChange","e","target","renderMessageContent","renderPreviewContent","Component"],"mappings":"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","sourcesContent":["import Button from \"erxes-common-ui/lib/components/button\";\nimport { IUser } from \"modules/auth/types\";\nimport { SmallLoader } from \"modules/common/components/ButtonMutate\";\nimport FormControl from \"modules/common/components/form/Control\";\nimport { Step, Steps } from \"modules/common/components/step\";\nimport {\n  StepWrapper,\n  TitleContainer,\n} from \"modules/common/components/step/styles\";\nimport { Alert } from \"modules/common/utils\";\nimport { __ } from \"modules/common/utils\";\nimport Wrapper from \"modules/layout/components/Wrapper\";\nimport { IBrand } from \"modules/settings/brands/types\";\nimport { IEmailTemplate } from \"modules/settings/emailTemplates/types\";\nimport { IConfig } from \"modules/settings/general/types\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IBreadCrumbItem } from \"../../common/types\";\nimport { METHODS } from \"../constants\";\nimport {\n  IEngageEmail,\n  IEngageMessage,\n  IEngageMessageDoc,\n  IEngageMessenger,\n  IEngageScheduleDate,\n  IEngageSms,\n  IIntegrationWithPhone,\n} from \"../types\";\nimport SmsForm from \"./SmsForm\";\nimport ChannelStep from \"./step/ChannelStep\";\nimport FullPreviewStep from \"./step/FullPreviewStep\";\nimport MessageStep from \"./step/MessageStep\";\nimport MessageTypeStep from \"./step/MessageTypeStep\";\n\ntype Props = {\n  message?: IEngageMessage;\n  brands: IBrand[];\n  users: IUser[];\n  templates: IEmailTemplate[];\n  kind: string;\n  isActionLoading: boolean;\n  handleSubmit?: (name: string, e: React.MouseEvent) => void;\n  save: (doc: IEngageMessageDoc) => Promise<any>;\n  validateDoc: (\n    type: string,\n    doc: IEngageMessageDoc\n  ) => { status: string; doc?: IEngageMessageDoc };\n  renderTitle: () => string;\n  breadcrumbs: IBreadCrumbItem[];\n  smsConfig: IConfig;\n  integrations: IIntegrationWithPhone[];\n};\n\ntype State = {\n  activeStep: number;\n  maxStep: number;\n  method: string;\n  title: string;\n  segmentIds: string[];\n  brandIds: string[];\n  tagIds: string[];\n  content: string;\n  fromUserId: string;\n  messenger?: IEngageMessenger;\n  email?: IEngageEmail;\n  scheduleDate: IEngageScheduleDate;\n  shortMessage?: IEngageSms;\n};\n\nclass AutoAndManualForm extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    const message = props.message || {};\n    const messenger = message.messenger || ({} as IEngageMessenger);\n    const email = message.email || {};\n\n    let content = email.content || \"\";\n\n    if (messenger.content && messenger.content !== \"\") {\n      content = messenger.content;\n    }\n\n    this.state = {\n      activeStep: 1,\n      maxStep: 3,\n      method: message.method || METHODS.EMAIL,\n      title: message.title || \"\",\n      segmentIds: message.segmentIds || [],\n      brandIds: message.brandIds || [],\n      tagIds: message.tagIds || [],\n      content,\n      fromUserId: message.fromUserId,\n      messenger: message.messenger,\n      email: message.email,\n      scheduleDate: message.scheduleDate,\n      shortMessage: message.shortMessage,\n    };\n  }\n\n  changeState = <T extends keyof State>(key: T, value: State[T]) => {\n    this.setState(({ [key]: value } as unknown) as Pick<State, keyof State>);\n  };\n\n  clearState = () => {\n    this.setState({\n      segmentIds: [],\n      brandIds: [],\n      tagIds: [],\n    });\n  };\n\n  handleSubmit = (type: string): Promise<any> | void => {\n    const doc = {\n      segmentIds: this.state.segmentIds,\n      tagIds: this.state.tagIds,\n      brandIds: this.state.brandIds,\n      title: this.state.title,\n      fromUserId: this.state.fromUserId,\n      method: this.state.method,\n      scheduleDate: this.state.scheduleDate,\n      shortMessage: this.state.shortMessage,\n    } as IEngageMessageDoc;\n\n    if (this.state.method === METHODS.EMAIL) {\n      const email = this.state.email || ({} as IEngageEmail);\n\n      doc.email = {\n        subject: email.subject || \"\",\n        sender: email.sender || \"\",\n        replyTo: (email.replyTo || \"\").split(\" \").toString(),\n        content: this.state.content,\n        attachments: email.attachments,\n        templateId: email.templateId || \"\",\n      };\n    }\n    if (this.state.method === METHODS.MESSENGER) {\n      const messenger = this.state.messenger || ({} as IEngageMessenger);\n\n      doc.messenger = {\n        brandId: messenger.brandId || \"\",\n        kind: messenger.kind || \"\",\n        sentAs: messenger.sentAs || \"\",\n        content: this.state.content,\n      };\n    }\n    if (this.state.method === METHODS.SMS) {\n      const shortMessage = this.state.shortMessage || {\n        from: \"\",\n        content: \"\",\n        fromIntegrationId: \"\",\n      };\n\n      doc.shortMessage = {\n        from: shortMessage.from,\n        content: shortMessage.content,\n        fromIntegrationId: shortMessage.fromIntegrationId,\n      };\n    }\n\n    const response = this.props.validateDoc(type, doc);\n\n    if (this.state.method === METHODS.SMS && !this.props.smsConfig) {\n      return Alert.warning(\n        \"SMS integration is not configured. Go to Settings > System config > Integrations config and set Telnyx SMS API key.\"\n      );\n    }\n\n    if (response.status === \"ok\" && response.doc) {\n      return this.props.save(response.doc);\n    }\n  };\n\n  renderSaveButton = () => {\n    const { isActionLoading, kind } = this.props;\n\n    const cancelButton = (\n      <Link to=\"/engage\">\n        <Button btnStyle=\"simple\" uppercase={false} icon=\"times-circle\">\n          Cancel\n        </Button>\n      </Link>\n    );\n\n    const saveButton = () => {\n      if (kind === \"auto\") {\n        return (\n          <>\n            <Button\n              disabled={isActionLoading}\n              btnStyle=\"warning\"\n              uppercase={false}\n              icon={isActionLoading ? undefined : \"file-alt\"}\n              onClick={this.handleSubmit.bind(this, \"draft\")}\n            >\n              Save & Draft\n            </Button>\n            <Button\n              disabled={isActionLoading}\n              btnStyle=\"success\"\n              uppercase={false}\n              icon={isActionLoading ? undefined : \"check-circle\"}\n              onClick={this.handleSubmit.bind(this, \"live\")}\n            >\n              Send & Live\n            </Button>\n          </>\n        );\n      }\n\n      return (\n        <Button\n          disabled={isActionLoading}\n          btnStyle=\"success\"\n          icon={isActionLoading ? undefined : \"check-circle\"}\n          onClick={this.handleSubmit.bind(this, \"live\")}\n          uppercase={false}\n        >\n          {isActionLoading && <SmallLoader />}\n          Send\n        </Button>\n      );\n    };\n\n    return (\n      <Button.Group>\n        {cancelButton}\n        {saveButton()}\n      </Button.Group>\n    );\n  };\n\n  renderMessageContent() {\n    const {\n      message,\n      brands,\n      users,\n      kind,\n      templates,\n      smsConfig,\n      integrations,\n    } = this.props;\n\n    const {\n      messenger,\n      email,\n      fromUserId,\n      content,\n      scheduleDate,\n      method,\n      shortMessage,\n    } = this.state;\n\n    const imagePath = \"/images/icons/erxes-08.svg\";\n\n    if (method === METHODS.SMS) {\n      return (\n        <Step noButton={true} title=\"Compose your SMS\" img={imagePath}>\n          <SmsForm\n            onChange={this.changeState}\n            messageKind={kind}\n            scheduleDate={scheduleDate}\n            shortMessage={shortMessage}\n            fromUserId={fromUserId}\n            smsConfig={smsConfig}\n            integrations={integrations}\n          />\n        </Step>\n      );\n    }\n\n    return (\n      <Step\n        img={imagePath}\n        title=\"Compose your message\"\n        message={message}\n        noButton={method !== METHODS.EMAIL && true}\n      >\n        <MessageStep\n          brands={brands}\n          onChange={this.changeState}\n          users={users}\n          method={this.state.method}\n          templates={templates}\n          kind={kind}\n          messenger={messenger}\n          email={email}\n          fromUserId={fromUserId}\n          content={content}\n          scheduleDate={scheduleDate}\n        />\n      </Step>\n    );\n  }\n\n  renderPreviewContent() {\n    const { content, email, method } = this.state;\n\n    if (method !== METHODS.EMAIL) {\n      return <div />;\n    }\n\n    return (\n      <Step\n        img=\"/images/icons/erxes-19.svg\"\n        title=\"Full Preview\"\n        noButton={true}\n      >\n        <FullPreviewStep\n          content={content}\n          templateId={email && email.templateId}\n        />\n      </Step>\n    );\n  }\n\n  render() {\n    const { renderTitle, breadcrumbs } = this.props;\n\n    const {\n      activeStep,\n      maxStep,\n      segmentIds,\n      brandIds,\n      title,\n      tagIds,\n    } = this.state;\n\n    const onChange = (e) =>\n      this.changeState(\"title\", (e.target as HTMLInputElement).value);\n\n    return (\n      <StepWrapper>\n        <Wrapper.Header title={renderTitle()} breadcrumb={breadcrumbs} />\n        <TitleContainer>\n          <div>{__(\"Title\")}</div>\n          <FormControl\n            required={true}\n            onChange={onChange}\n            defaultValue={title}\n            autoFocus={true}\n          />\n          {this.renderSaveButton()}\n        </TitleContainer>\n        <Steps maxStep={maxStep} active={activeStep}>\n          <Step img=\"/images/icons/erxes-05.svg\" title=\"Choose channel\">\n            <ChannelStep\n              onChange={this.changeState}\n              method={this.state.method}\n            />\n          </Step>\n\n          <Step\n            img=\"/images/icons/erxes-02.svg\"\n            title=\"Who is this message for?\"\n          >\n            <MessageTypeStep\n              onChange={this.changeState}\n              clearState={this.clearState}\n              segmentIds={segmentIds}\n              brandIds={brandIds}\n              tagIds={tagIds}\n            />\n          </Step>\n\n          {this.renderMessageContent()}\n          {this.renderPreviewContent()}\n        </Steps>\n      </StepWrapper>\n    );\n  }\n}\n\nexport default AutoAndManualForm;\n"]},"metadata":{},"sourceType":"module"}