{"ast":null,"code":"import _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/containers/conversion/Stage.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport Stage from 'modules/deals/components/conversion/table/Stage';\nimport { queries } from 'modules/deals/graphql';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\nvar StageContainer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(StageContainer, _React$PureComponent);\n\n  function StageContainer(props) {\n    var _this;\n\n    _classCallCheck(this, StageContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StageContainer).call(this, props));\n\n    _this.loadMore = function () {\n      var _this$props = _this.props,\n          stage = _this$props.stage,\n          dealsQuery = _this$props.dealsQuery,\n          queryParams = _this$props.queryParams;\n      var deals = dealsQuery.deals || [];\n      var loading = dealsQuery.loading || dealsQuery.loading;\n      var hasMore = stage.initialDealsTotalCount > deals.length;\n\n      if (deals.length === stage.initialDealsTotalCount) {\n        return;\n      }\n\n      if (!loading && hasMore) {\n        _this.setState({\n          loadingDeals: true\n        });\n\n        dealsQuery.fetchMore({\n          variables: _objectSpread({\n            initialStageId: stage._id,\n            skip: deals.length\n          }, getFilterParams(queryParams)),\n          updateQuery: function updateQuery(prev, _ref) {\n            var fetchMoreResult = _ref.fetchMoreResult;\n\n            _this.setState({\n              loadingDeals: false\n            });\n\n            if (!fetchMoreResult) {\n              return prev;\n            }\n\n            var prevDeals = prev.deals || [];\n            var prevDealIds = prevDeals.map(function (deal) {\n              return deal._id;\n            });\n            var fetchedDeals = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = fetchMoreResult.deals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var deal = _step.value;\n\n                if (!prevDealIds.includes(deal._id)) {\n                  fetchedDeals.push(deal);\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            return _objectSpread({}, prev, {\n              deals: [].concat(_toConsumableArray(prevDeals), fetchedDeals)\n            });\n          }\n        });\n      }\n    };\n\n    _this.state = {\n      loadingDeals: false\n    };\n    return _this;\n  }\n\n  _createClass(StageContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          stage = _this$props2.stage,\n          dealsQuery = _this$props2.dealsQuery;\n      var loadingDeals = this.state.loadingDeals;\n\n      if (localStorage.getItem('cacheInvalidated') === 'true') {\n        localStorage.setItem('cacheInvalidated', 'false');\n        dealsQuery.refetch();\n      }\n\n      if (dealsQuery.loading) {\n        return React.createElement(Spinner, {\n          objective: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      }\n\n      var deals = dealsQuery.deals;\n\n      if (!deals) {\n        return React.createElement(EmptyState, {\n          text: \"Deals not found\",\n          icon: \"piggy-bank\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        });\n      }\n\n      var hasMore = stage.initialDealsTotalCount > deals.length;\n      return React.createElement(Stage, {\n        hasMore: hasMore,\n        stage: stage,\n        deals: deals,\n        loadMore: this.loadMore,\n        loadingDeals: loadingDeals,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return StageContainer;\n}(React.PureComponent);\n\nvar getFilterParams = function getFilterParams(queryParams) {\n  if (!queryParams) {\n    return {};\n  }\n\n  return {\n    search: queryParams.search,\n    customerIds: queryParams.customerIds,\n    companyIds: queryParams.companyIds,\n    assignedUserIds: queryParams.assignedUserIds,\n    closeDateType: queryParams.closeDateType,\n    productIds: queryParams.productIds,\n    labelIds: queryParams.labelIds,\n    userIds: queryParams.userIds\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.deals), {\n  name: 'dealsQuery',\n  options: function options(_ref2) {\n    var pipelineId = _ref2.pipelineId,\n        stage = _ref2.stage,\n        queryParams = _ref2.queryParams;\n    return {\n      variables: _objectSpread({\n        initialStageId: stage._id,\n        pipelineId: pipelineId\n      }, getFilterParams(queryParams))\n    };\n  }\n}))(StageContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/deals/containers/conversion/Stage.tsx"],"names":["gql","compose","EmptyState","Spinner","withProps","Stage","queries","React","graphql","StageContainer","props","loadMore","stage","dealsQuery","queryParams","deals","loading","hasMore","initialDealsTotalCount","length","setState","loadingDeals","fetchMore","variables","initialStageId","_id","skip","getFilterParams","updateQuery","prev","fetchMoreResult","prevDeals","prevDealIds","map","deal","fetchedDeals","includes","push","state","localStorage","getItem","setItem","refetch","PureComponent","search","customerIds","companyIds","assignedUserIds","closeDateType","productIds","labelIds","userIds","name","options","pipelineId"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IConversionStage } from 'modules/boards/types';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Spinner from 'modules/common/components/Spinner';\nimport { withProps } from 'modules/common/utils';\nimport Stage from 'modules/deals/components/conversion/table/Stage';\nimport { queries } from 'modules/deals/graphql';\nimport { DealsQueryResponse, IDeal } from 'modules/deals/types';\nimport { IQueryParams } from 'modules/insights/types';\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\n\ntype Props = {\n  stage: IConversionStage;\n  queryParams: IQueryParams;\n  pipelineId: string;\n};\n\ntype FinalStageProps = {\n  dealsQuery: DealsQueryResponse;\n} & Props;\n\ntype State = {\n  loadingDeals: boolean;\n};\n\nclass StageContainer extends React.PureComponent<FinalStageProps, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loadingDeals: false\n    };\n  }\n\n  loadMore = () => {\n    const { stage, dealsQuery, queryParams } = this.props;\n\n    const deals = dealsQuery.deals || [];\n    const loading = dealsQuery.loading || dealsQuery.loading;\n    const hasMore = stage.initialDealsTotalCount > deals.length;\n\n    if (deals.length === stage.initialDealsTotalCount) {\n      return;\n    }\n\n    if (!loading && hasMore) {\n      this.setState({ loadingDeals: true });\n\n      dealsQuery.fetchMore({\n        variables: {\n          initialStageId: stage._id,\n          skip: deals.length,\n          ...getFilterParams(queryParams)\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          this.setState({ loadingDeals: false });\n\n          if (!fetchMoreResult) {\n            return prev;\n          }\n\n          const prevDeals = prev.deals || [];\n          const prevDealIds = prevDeals.map((deal: IDeal) => deal._id);\n          const fetchedDeals: IDeal[] = [];\n\n          for (const deal of fetchMoreResult.deals) {\n            if (!prevDealIds.includes(deal._id)) {\n              fetchedDeals.push(deal);\n            }\n          }\n\n          return {\n            ...prev,\n            deals: [...prevDeals, ...fetchedDeals]\n          };\n        }\n      });\n    }\n  };\n\n  render() {\n    const { stage, dealsQuery } = this.props;\n    const { loadingDeals } = this.state;\n\n    if (localStorage.getItem('cacheInvalidated') === 'true') {\n      localStorage.setItem('cacheInvalidated', 'false');\n\n      dealsQuery.refetch();\n    }\n\n    if (dealsQuery.loading) {\n      return <Spinner objective={true} />;\n    }\n\n    const deals = dealsQuery.deals;\n\n    if (!deals) {\n      return <EmptyState text=\"Deals not found\" icon=\"piggy-bank\" />;\n    }\n\n    const hasMore = stage.initialDealsTotalCount > deals.length;\n\n    return (\n      <Stage\n        hasMore={hasMore}\n        stage={stage}\n        deals={deals}\n        loadMore={this.loadMore}\n        loadingDeals={loadingDeals}\n      />\n    );\n  }\n}\n\nconst getFilterParams = queryParams => {\n  if (!queryParams) {\n    return {};\n  }\n\n  return {\n    search: queryParams.search,\n    customerIds: queryParams.customerIds,\n    companyIds: queryParams.companyIds,\n    assignedUserIds: queryParams.assignedUserIds,\n    closeDateType: queryParams.closeDateType,\n    productIds: queryParams.productIds,\n    labelIds: queryParams.labelIds,\n    userIds: queryParams.userIds\n  };\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, DealsQueryResponse>(gql(queries.deals), {\n      name: 'dealsQuery',\n      options: ({ pipelineId, stage, queryParams }) => ({\n        variables: {\n          initialStageId: stage._id,\n          pipelineId,\n          ...getFilterParams(queryParams)\n        }\n      })\n    })\n  )(StageContainer)\n);\n"]},"metadata":{},"sourceType":"module"}