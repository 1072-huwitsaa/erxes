{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/detail/CustomFieldsSection.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport GenerateCustomFields from 'modules/settings/properties/components/GenerateCustomFields';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from 'modules/settings/properties/constants';\nimport { queries as fieldQueries } from 'modules/settings/properties/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { mutations } from '../../graphql';\n\nvar CustomFieldsSection = function CustomFieldsSection(props) {\n  var loading = props.loading,\n      company = props.company,\n      companiesEdit = props.companiesEdit,\n      fieldsGroupsQuery = props.fieldsGroupsQuery;\n\n  if (fieldsGroupsQuery.loading) {\n    return React.createElement(Sidebar, {\n      full: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n  var _id = company._id;\n\n  var save = function save(data, callback) {\n    companiesEdit({\n      variables: _objectSpread({\n        _id: _id\n      }, data)\n    }).then(function () {\n      callback();\n    }).catch(function (e) {\n      callback(e);\n    });\n  };\n\n  var updatedProps = {\n    save: save,\n    loading: loading,\n    customFieldsData: company.customFieldsData,\n    fieldsGroups: fieldsGroupsQuery.fieldsGroups || []\n  };\n  return React.createElement(GenerateCustomFields, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nvar options = function options() {\n  return {\n    refetchQueries: ['companDetail']\n  };\n};\n\nexport default withProps(compose(graphql(gql(fieldQueries.fieldsGroups), {\n  name: 'fieldsGroupsQuery',\n  options: function options() {\n    return {\n      variables: {\n        contentType: FIELDS_GROUPS_CONTENT_TYPES.COMPANY\n      }\n    };\n  }\n}), graphql(gql(mutations.companiesEdit), {\n  name: 'companiesEdit',\n  options: options\n}))(CustomFieldsSection));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/detail/CustomFieldsSection.tsx"],"names":["gql","compose","Spinner","Sidebar","GenerateCustomFields","FIELDS_GROUPS_CONTENT_TYPES","queries","fieldQueries","React","graphql","withProps","mutations","CustomFieldsSection","props","loading","company","companiesEdit","fieldsGroupsQuery","_id","save","data","callback","variables","then","catch","e","updatedProps","customFieldsData","fieldsGroups","options","refetchQueries","name","contentType","COMPANY"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,oBAAP,MAAiC,6DAAjC;AACA,SAASC,2BAAT,QAA4C,uCAA5C;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,qCAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASC,SAAT,QAA0B,eAA1B;;AAaA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAuB;AAAA,MACzCC,OADyC,GACcD,KADd,CACzCC,OADyC;AAAA,MAChCC,OADgC,GACcF,KADd,CAChCE,OADgC;AAAA,MACvBC,aADuB,GACcH,KADd,CACvBG,aADuB;AAAA,MACRC,iBADQ,GACcJ,KADd,CACRI,iBADQ;;AAGjD,MAAIA,iBAAiB,CAACH,OAAtB,EAA+B;AAC7B,WACE,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AATgD,MAWzCI,GAXyC,GAWjCH,OAXiC,CAWzCG,GAXyC;;AAajD,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAC/BL,IAAAA,aAAa,CAAC;AACZM,MAAAA,SAAS;AAAIJ,QAAAA,GAAG,EAAHA;AAAJ,SAAYE,IAAZ;AADG,KAAD,CAAb,CAGGG,IAHH,CAGQ,YAAM;AACVF,MAAAA,QAAQ;AACT,KALH,EAMGG,KANH,CAMS,UAAAC,CAAC,EAAI;AACVJ,MAAAA,QAAQ,CAACI,CAAD,CAAR;AACD,KARH;AASD,GAVD;;AAYA,MAAMC,YAAY,GAAG;AACnBP,IAAAA,IAAI,EAAJA,IADmB;AAEnBL,IAAAA,OAAO,EAAPA,OAFmB;AAGnBa,IAAAA,gBAAgB,EAAEZ,OAAO,CAACY,gBAHP;AAInBC,IAAAA,YAAY,EAAEX,iBAAiB,CAACW,YAAlB,IAAkC;AAJ7B,GAArB;AAOA,SAAO,oBAAC,oBAAD,oBAA0BF,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAjCD;;AAmCA,IAAMG,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAO;AACrBC,IAAAA,cAAc,EAAE,CAAC,cAAD;AADK,GAAP;AAAA,CAAhB;;AAIA,eAAepB,SAAS,CACtBT,OAAO,CACLQ,OAAO,CACLT,GAAG,CAACO,YAAY,CAACqB,YAAd,CADE,EAEL;AACEG,EAAAA,IAAI,EAAE,mBADR;AAEEF,EAAAA,OAAO,EAAE;AAAA,WAAO;AACdP,MAAAA,SAAS,EAAE;AACTU,QAAAA,WAAW,EAAE3B,2BAA2B,CAAC4B;AADhC;AADG,KAAP;AAAA;AAFX,CAFK,CADF,EAYLxB,OAAO,CACLT,GAAG,CAACW,SAAS,CAACK,aAAX,CADE,EAEL;AACEe,EAAAA,IAAI,EAAE,eADR;AAEEF,EAAAA,OAAO,EAAPA;AAFF,CAFK,CAZF,CAAP,CAmBEjB,mBAnBF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport Sidebar from 'modules/layout/components/Sidebar';\nimport GenerateCustomFields from 'modules/settings/properties/components/GenerateCustomFields';\nimport { FIELDS_GROUPS_CONTENT_TYPES } from 'modules/settings/properties/constants';\nimport { queries as fieldQueries } from 'modules/settings/properties/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { FieldsGroupsQueryResponse } from '../../../settings/properties/types';\nimport { mutations } from '../../graphql';\nimport { EditMutationResponse, ICompany } from '../../types';\n\ntype Props = {\n  company: ICompany;\n  loading?: boolean;\n};\n\ntype FinalProps = {\n  fieldsGroupsQuery: FieldsGroupsQueryResponse;\n} & Props &\n  EditMutationResponse;\n\nconst CustomFieldsSection = (props: FinalProps) => {\n  const { loading, company, companiesEdit, fieldsGroupsQuery } = props;\n\n  if (fieldsGroupsQuery.loading) {\n    return (\n      <Sidebar full={true}>\n        <Spinner />\n      </Sidebar>\n    );\n  }\n\n  const { _id } = company;\n\n  const save = (data, callback) => {\n    companiesEdit({\n      variables: { _id, ...data }\n    })\n      .then(() => {\n        callback();\n      })\n      .catch(e => {\n        callback(e);\n      });\n  };\n\n  const updatedProps = {\n    save,\n    loading,\n    customFieldsData: company.customFieldsData,\n    fieldsGroups: fieldsGroupsQuery.fieldsGroups || []\n  };\n\n  return <GenerateCustomFields {...updatedProps} />;\n};\n\nconst options = () => ({\n  refetchQueries: ['companDetail']\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, FieldsGroupsQueryResponse, { contentType: string }>(\n      gql(fieldQueries.fieldsGroups),\n      {\n        name: 'fieldsGroupsQuery',\n        options: () => ({\n          variables: {\n            contentType: FIELDS_GROUPS_CONTENT_TYPES.COMPANY\n          }\n        })\n      }\n    ),\n    graphql<Props, EditMutationResponse, ICompany>(\n      gql(mutations.companiesEdit),\n      {\n        name: 'companiesEdit',\n        options\n      }\n    )\n  )(CustomFieldsSection)\n);\n"]},"metadata":{},"sourceType":"module"}