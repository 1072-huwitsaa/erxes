{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/notifications/containers/NotificationList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport NotificationList from '../components/NotificationList';\nimport { mutations, queries } from '../graphql';\n\nvar NotificationListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NotificationListContainer, _React$Component);\n\n  function NotificationListContainer() {\n    _classCallCheck(this, NotificationListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NotificationListContainer).apply(this, arguments));\n  }\n\n  _createClass(NotificationListContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          notificationsQuery = _this$props.notificationsQuery,\n          notificationCountQuery = _this$props.notificationCountQuery,\n          notificationsMarkAsReadMutation = _this$props.notificationsMarkAsReadMutation;\n\n      var markAsRead = function markAsRead(notificationIds) {\n        notificationsMarkAsReadMutation({\n          variables: {\n            _ids: notificationIds\n          }\n        }).then(function () {\n          if (notificationsQuery.refetch) {\n            notificationsQuery.refetch();\n            notificationCountQuery.refetch();\n          }\n\n          Alert.success('Notification have been seen');\n        }).catch(function (error) {\n          Alert.error(error.message);\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        markAsRead: markAsRead,\n        notifications: notificationsQuery.notifications || [],\n        count: notificationCountQuery.notificationCounts || 0,\n        loading: notificationsQuery.loading\n      });\n\n      return React.createElement(NotificationList, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NotificationListContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.notifications), {\n  name: 'notificationsQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      variables: _objectSpread({}, generatePaginationParams(queryParams), {\n        requireRead: queryParams.requireRead === 'true' ? true : false,\n        title: queryParams.title\n      })\n    };\n  }\n}), graphql(gql(queries.notificationCounts), {\n  name: 'notificationCountQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        requireRead: queryParams.requireRead === 'true' ? true : false\n      }\n    };\n  }\n}), graphql(gql(mutations.markAsRead), {\n  name: 'notificationsMarkAsReadMutation',\n  options: {\n    refetchQueries: [{\n      query: gql(queries.notifications),\n      variables: {\n        limit: 10,\n        requireRead: false\n      }\n    }, 'notificationCounts']\n  }\n}))(NotificationListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/notifications/containers/NotificationList.tsx"],"names":["gql","compose","Alert","withProps","generatePaginationParams","React","graphql","NotificationList","mutations","queries","NotificationListContainer","props","notificationsQuery","notificationCountQuery","notificationsMarkAsReadMutation","markAsRead","notificationIds","variables","_ids","then","refetch","success","catch","error","message","updatedProps","notifications","count","notificationCounts","loading","Component","name","options","queryParams","requireRead","title","refetchQueries","query","limit"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IQueryParams } from 'modules/common/types';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport NotificationList from '../components/NotificationList';\nimport { mutations, queries } from '../graphql';\nimport {\n  MarkAsReadMutationResponse,\n  NotificationsCountQueryResponse,\n  NotificationsQueryResponse\n} from '../types';\n\ntype Props = {\n  queryParams: IQueryParams;\n};\n\ntype FinalProps = {\n  notificationsQuery: NotificationsQueryResponse;\n  notificationCountQuery: NotificationsCountQueryResponse;\n} & Props &\n  MarkAsReadMutationResponse;\n\nclass NotificationListContainer extends React.Component<FinalProps> {\n  render() {\n    const {\n      notificationsQuery,\n      notificationCountQuery,\n      notificationsMarkAsReadMutation\n    } = this.props;\n\n    const markAsRead = (notificationIds?: string[]) => {\n      notificationsMarkAsReadMutation({\n        variables: { _ids: notificationIds }\n      })\n        .then(() => {\n          if (notificationsQuery.refetch) {\n            notificationsQuery.refetch();\n            notificationCountQuery.refetch();\n          }\n\n          Alert.success('Notification have been seen');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      markAsRead,\n      notifications: notificationsQuery.notifications || [],\n      count: notificationCountQuery.notificationCounts || 0,\n      loading: notificationsQuery.loading\n    };\n\n    return <NotificationList {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      NotificationsQueryResponse,\n      { requireRead: boolean; page?: number; perPage?: number; title?: string }\n    >(gql(queries.notifications), {\n      name: 'notificationsQuery',\n      options: ({ queryParams }) => ({\n        variables: {\n          ...generatePaginationParams(queryParams),\n          requireRead: queryParams.requireRead === 'true' ? true : false,\n          title: queryParams.title\n        }\n      })\n    }),\n    graphql<Props, NotificationsCountQueryResponse>(\n      gql(queries.notificationCounts),\n      {\n        name: 'notificationCountQuery',\n        options: ({ queryParams }) => ({\n          variables: {\n            requireRead: queryParams.requireRead === 'true' ? true : false\n          }\n        })\n      }\n    ),\n    graphql<Props, MarkAsReadMutationResponse, { _ids?: string[] }>(\n      gql(mutations.markAsRead),\n      {\n        name: 'notificationsMarkAsReadMutation',\n        options: {\n          refetchQueries: [\n            {\n              query: gql(queries.notifications),\n              variables: {\n                limit: 10,\n                requireRead: false\n              }\n            },\n            'notificationCounts'\n          ]\n        }\n      }\n    )\n  )(NotificationListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}