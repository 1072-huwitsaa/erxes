{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/messenger/Edit.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { __, Alert, withProps } from 'modules/common/utils';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport Form from 'modules/settings/integrations/components/messenger/Form';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nvar EditMessenger = function EditMessenger(props) {\n  var history = props.history,\n      integrationId = props.integrationId,\n      usersQuery = props.usersQuery,\n      brandsQuery = props.brandsQuery,\n      integrationDetailQuery = props.integrationDetailQuery,\n      editMessengerMutation = props.editMessengerMutation,\n      saveConfigsMutation = props.saveConfigsMutation,\n      saveAppearanceMutation = props.saveAppearanceMutation,\n      messengerAppSaveMutation = props.messengerAppSaveMutation,\n      knowledgeBaseTopicsQuery = props.knowledgeBaseTopicsQuery;\n\n  if (integrationDetailQuery.loading || usersQuery.loading || brandsQuery.loading) {\n    return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  var users = usersQuery.users || [];\n  var brands = brandsQuery.brands || [];\n  var integration = integrationDetailQuery.integrationDetail || {};\n  var topics = knowledgeBaseTopicsQuery.knowledgeBaseTopics || [];\n\n  var save = function save(doc) {\n    var name = doc.name,\n        brandId = doc.brandId,\n        channelIds = doc.channelIds,\n        languageCode = doc.languageCode,\n        messengerData = doc.messengerData,\n        uiOptions = doc.uiOptions,\n        messengerApps = doc.messengerApps;\n    editMessengerMutation({\n      variables: {\n        _id: integrationId,\n        name: name,\n        brandId: brandId,\n        languageCode: languageCode,\n        channelIds: channelIds\n      }\n    }).then(function (_ref) {\n      var data = _ref.data;\n      var id = data.integrationsEditMessengerIntegration._id;\n      return saveConfigsMutation({\n        variables: {\n          _id: id,\n          messengerData: messengerData\n        }\n      });\n    }).then(function (_ref2) {\n      var data = _ref2.data;\n      var id = data.integrationsSaveMessengerConfigs._id;\n      return saveAppearanceMutation({\n        variables: {\n          _id: id,\n          uiOptions: uiOptions\n        }\n      });\n    }).then(function () {\n      return messengerAppSaveMutation({\n        variables: {\n          integrationId: integrationId,\n          messengerApps: messengerApps\n        }\n      });\n    }).then(function () {\n      Alert.success('You successfully updated a messenger');\n      history.push('/settings/integrations?refetch=true');\n    }).catch(function (error) {\n      if (error.message.includes('Duplicated messenger for single brand')) {\n        return Alert.warning(__(\"You've already created a messenger for the brand you've selected. Please choose a different brand or edit the previously created messenger\"), 6000);\n      }\n\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    teamMembers: users || [],\n    brands: brands,\n    save: save,\n    topics: topics,\n    integration: integration\n  });\n\n  return React.createElement(Form, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }));\n};\n\nvar commonOptions = function commonOptions(_ref3) {\n  var integrationId = _ref3.integrationId;\n  return {\n    refetchQueries: [{\n      query: gql(queries.integrationDetail),\n      variables: {\n        _id: integrationId || ''\n      },\n      fetchPolicy: 'network-only'\n    }]\n  };\n};\n\nexport default withProps(compose(graphql(gql(queries.users), {\n  name: 'usersQuery'\n}), graphql(gql(queries.brands), {\n  name: 'brandsQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(kbQueries.knowledgeBaseTopics), {\n  name: 'knowledgeBaseTopicsQuery'\n}), graphql(gql(queries.integrationDetail), {\n  name: 'integrationDetailQuery',\n  options: function options(_ref4) {\n    var integrationId = _ref4.integrationId;\n    return {\n      variables: {\n        _id: integrationId || ''\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(mutations.integrationsEditMessenger), {\n  name: 'editMessengerMutation',\n  options: commonOptions\n}), graphql(gql(mutations.integrationsSaveMessengerConfigs), {\n  name: 'saveConfigsMutation',\n  options: commonOptions\n}), graphql(gql(mutations.messengerAppSave), {\n  name: 'messengerAppSaveMutation',\n  options: commonOptions\n}), graphql(gql(mutations.integrationsSaveMessengerAppearance), {\n  name: 'saveAppearanceMutation',\n  options: commonOptions\n}))(withRouter(EditMessenger)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/containers/messenger/Edit.tsx"],"names":["gql","compose","Spinner","__","Alert","withProps","queries","kbQueries","Form","mutations","React","graphql","withRouter","EditMessenger","props","history","integrationId","usersQuery","brandsQuery","integrationDetailQuery","editMessengerMutation","saveConfigsMutation","saveAppearanceMutation","messengerAppSaveMutation","knowledgeBaseTopicsQuery","loading","users","brands","integration","integrationDetail","topics","knowledgeBaseTopics","save","doc","name","brandId","channelIds","languageCode","messengerData","uiOptions","messengerApps","variables","_id","then","data","id","integrationsEditMessengerIntegration","integrationsSaveMessengerConfigs","success","push","catch","error","message","includes","warning","updatedProps","teamMembers","commonOptions","refetchQueries","query","fetchPolicy","options","integrationsEditMessenger","messengerAppSave","integrationsSaveMessengerAppearance"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IRouterProps } from 'modules/common/types';\nimport { __, Alert, withProps } from 'modules/common/utils';\nimport { queries as kbQueries } from 'modules/knowledgeBase/graphql';\nimport Form from 'modules/settings/integrations/components/messenger/Form';\nimport { mutations, queries } from 'modules/settings/integrations/graphql';\nimport {\n  EditMessengerMutationResponse,\n  EditMessengerMutationVariables,\n  IMessengerApps,\n  IMessengerData,\n  IntegrationDetailQueryResponse,\n  IUiOptions,\n  SaveMessengerAppearanceMutationResponse,\n  SaveMessengerAppsMutationResponse,\n  SaveMessengerConfigsMutationResponse\n} from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { TopicsQueryResponse } from '../../../../knowledgeBase/types';\nimport { BrandsQueryResponse } from '../../../brands/types';\nimport { UsersQueryResponse } from '../../../team/types';\n\ntype Props = {\n  integrationId: string;\n};\n\ntype FinalProps = {\n  usersQuery: UsersQueryResponse;\n  brandsQuery: BrandsQueryResponse;\n  integrationDetailQuery: IntegrationDetailQueryResponse;\n  knowledgeBaseTopicsQuery: TopicsQueryResponse;\n} & Props &\n  SaveMessengerConfigsMutationResponse &\n  SaveMessengerAppearanceMutationResponse &\n  SaveMessengerAppsMutationResponse &\n  EditMessengerMutationResponse &\n  IRouterProps;\n\nconst EditMessenger = (props: FinalProps) => {\n  const {\n    history,\n    integrationId,\n    usersQuery,\n    brandsQuery,\n    integrationDetailQuery,\n    editMessengerMutation,\n    saveConfigsMutation,\n    saveAppearanceMutation,\n    messengerAppSaveMutation,\n    knowledgeBaseTopicsQuery\n  } = props;\n\n  if (\n    integrationDetailQuery.loading ||\n    usersQuery.loading ||\n    brandsQuery.loading\n  ) {\n    return <Spinner />;\n  }\n\n  const users = usersQuery.users || [];\n  const brands = brandsQuery.brands || [];\n  const integration = integrationDetailQuery.integrationDetail || {};\n  const topics = knowledgeBaseTopicsQuery.knowledgeBaseTopics || [];\n\n  const save = doc => {\n    const {\n      name,\n      brandId,\n      channelIds,\n      languageCode,\n      messengerData,\n      uiOptions,\n      messengerApps\n    } = doc;\n\n    editMessengerMutation({\n      variables: { _id: integrationId, name, brandId, languageCode, channelIds }\n    })\n      .then(({ data }) => {\n        const id = data.integrationsEditMessengerIntegration._id;\n\n        return saveConfigsMutation({\n          variables: { _id: id, messengerData }\n        });\n      })\n      .then(({ data }) => {\n        const id = data.integrationsSaveMessengerConfigs._id;\n\n        return saveAppearanceMutation({\n          variables: { _id: id, uiOptions }\n        });\n      })\n      .then(() => {\n        return messengerAppSaveMutation({\n          variables: { integrationId, messengerApps }\n        });\n      })\n      .then(() => {\n        Alert.success('You successfully updated a messenger');\n\n        history.push('/settings/integrations?refetch=true');\n      })\n      .catch(error => {\n        if (error.message.includes('Duplicated messenger for single brand')) {\n          return Alert.warning(\n            __(\n              \"You've already created a messenger for the brand you've selected. Please choose a different brand or edit the previously created messenger\"\n            ),\n            6000\n          );\n        }\n\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    teamMembers: users || [],\n    brands,\n    save,\n    topics,\n    integration\n  };\n\n  return <Form {...updatedProps} />;\n};\n\nconst commonOptions = ({ integrationId }) => {\n  return {\n    refetchQueries: [\n      {\n        query: gql(queries.integrationDetail),\n        variables: { _id: integrationId || '' },\n        fetchPolicy: 'network-only'\n      }\n    ]\n  };\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, UsersQueryResponse>(gql(queries.users), {\n      name: 'usersQuery'\n    }),\n    graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n      name: 'brandsQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, TopicsQueryResponse>(gql(kbQueries.knowledgeBaseTopics), {\n      name: 'knowledgeBaseTopicsQuery'\n    }),\n    graphql<Props, IntegrationDetailQueryResponse, { _id: string }>(\n      gql(queries.integrationDetail),\n      {\n        name: 'integrationDetailQuery',\n        options: ({ integrationId }: { integrationId: string }) => ({\n          variables: {\n            _id: integrationId || ''\n          },\n          fetchPolicy: 'network-only'\n        })\n      }\n    ),\n    graphql<\n      Props,\n      EditMessengerMutationResponse,\n      EditMessengerMutationVariables\n    >(gql(mutations.integrationsEditMessenger), {\n      name: 'editMessengerMutation',\n      options: commonOptions\n    }),\n    graphql<\n      Props,\n      SaveMessengerConfigsMutationResponse,\n      { _id: string; messengerData: IMessengerData }\n    >(gql(mutations.integrationsSaveMessengerConfigs), {\n      name: 'saveConfigsMutation',\n      options: commonOptions\n    }),\n    graphql<\n      Props,\n      SaveMessengerAppsMutationResponse,\n      { _id: string; messengerApps: IMessengerApps }\n    >(gql(mutations.messengerAppSave), {\n      name: 'messengerAppSaveMutation',\n      options: commonOptions\n    }),\n    graphql<\n      Props,\n      SaveMessengerAppearanceMutationResponse,\n      { _id: string; uiOptions: IUiOptions }\n    >(gql(mutations.integrationsSaveMessengerAppearance), {\n      name: 'saveAppearanceMutation',\n      options: commonOptions\n    })\n  )(withRouter<FinalProps>(EditMessenger))\n);\n"]},"metadata":{},"sourceType":"module"}