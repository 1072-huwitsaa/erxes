{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/leads/containers/List.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport { mutations as integrationMutations } from 'modules/settings/integrations/graphql/index';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport routerUtils from '../../common/utils/router';\nimport List from '../components/List';\nimport { mutations, queries } from '../graphql';\n\nvar ListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListContainer, _React$Component);\n\n  function ListContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.refetch = function () {\n      var _this$props = _this.props,\n          integrationsQuery = _this$props.integrationsQuery,\n          integrationsTotalCountQuery = _this$props.integrationsTotalCountQuery;\n      integrationsQuery.refetch();\n      integrationsTotalCountQuery.refetch();\n    };\n\n    return _this;\n  }\n\n  _createClass(ListContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var history = this.props.history;\n      var shouldRefetchList = routerUtils.getParam(history, 'popUpRefetchList');\n\n      if (shouldRefetchList) {\n        this.refetch();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          integrationsQuery = _this$props2.integrationsQuery,\n          integrationsTotalCountQuery = _this$props2.integrationsTotalCountQuery,\n          tagsQuery = _this$props2.tagsQuery,\n          removeMutation = _this$props2.removeMutation,\n          archiveIntegration = _this$props2.archiveIntegration;\n      var counts = integrationsTotalCountQuery.integrationsTotalCount || {\n        byKind: {}\n      };\n      var totalCount = counts.byKind.lead || 0;\n      var tagsCount = counts.byTag || {};\n      var integrations = integrationsQuery.integrations || [];\n\n      var remove = function remove(integrationId) {\n        var message = 'If you remove a pop ups, then all related conversations, customers will also be removed. Are you sure?';\n        confirm(message).then(function () {\n          removeMutation({\n            variables: {\n              _id: integrationId\n            }\n          }).then(function () {\n            // refresh queries\n            _this2.refetch();\n\n            Alert.success('You successfully deleted a pop ups.');\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        });\n      };\n\n      var archive = function archive(integrationId, status) {\n        var message = \"If you archive a pop ups, then you won't be able to see customers & conversations related to this pop ups anymore. Are you sure?\";\n        var action = 'archived';\n\n        if (!status) {\n          message = 'You are going to unarchive this pop ups. Are you sure?';\n          action = 'unarchived';\n        }\n\n        confirm(message).then(function () {\n          archiveIntegration({\n            variables: {\n              _id: integrationId,\n              status: status\n            }\n          }).then(function (_ref) {\n            var data = _ref.data;\n            var integration = data.integrationsArchive;\n\n            if (integration) {\n              Alert.success(\"Pop ups has been \".concat(action, \".\"));\n            }\n\n            _this2.refetch();\n          }).catch(function (e) {\n            Alert.error(e.message);\n          });\n        });\n      };\n\n      var updatedProps = _objectSpread({}, this.props, {\n        integrations: integrations,\n        remove: remove,\n        loading: integrationsQuery.loading,\n        totalCount: totalCount,\n        tagsCount: tagsCount,\n        tags: tagsQuery.tags || [],\n        archive: archive\n      });\n\n      var content = function content(props) {\n        return React.createElement(List, Object.assign({}, updatedProps, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(Bulk, {\n        content: content,\n        refetch: this.refetch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ListContainer;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.integrations), {\n  name: 'integrationsQuery',\n  options: function options(_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: _objectSpread({}, generatePaginationParams(queryParams), {\n        tag: queryParams.tag,\n        kind: 'lead'\n      })\n    };\n  }\n}), graphql(gql(queries.integrationsTotalCount), {\n  name: 'integrationsTotalCountQuery'\n}), graphql(gql(queries.tags), {\n  name: 'tagsQuery',\n  options: function options() {\n    return {\n      variables: {\n        type: 'integration'\n      }\n    };\n  }\n}), graphql(gql(mutations.integrationRemove), {\n  name: 'removeMutation'\n}), graphql(gql(integrationMutations.integrationsArchive), {\n  name: 'archiveIntegration'\n}))(ListContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/leads/containers/List.tsx"],"names":["gql","compose","Bulk","Alert","confirm","withProps","generatePaginationParams","mutations","integrationMutations","React","graphql","routerUtils","List","queries","ListContainer","refetch","props","integrationsQuery","integrationsTotalCountQuery","history","shouldRefetchList","getParam","tagsQuery","removeMutation","archiveIntegration","counts","integrationsTotalCount","byKind","totalCount","lead","tagsCount","byTag","integrations","remove","integrationId","message","then","variables","_id","success","catch","e","error","archive","status","action","data","integration","integrationsArchive","updatedProps","loading","tags","content","Component","name","options","queryParams","tag","kind","type","integrationRemove"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport Bulk from 'modules/common/components/Bulk';\nimport { IRouterProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport { mutations as integrationMutations } from 'modules/settings/integrations/graphql/index';\nimport { ArchiveIntegrationResponse } from 'modules/settings/integrations/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport routerUtils from '../../common/utils/router';\nimport { TagsQueryResponse } from '../../tags/types';\nimport List from '../components/List';\nimport { mutations, queries } from '../graphql';\nimport {\n  CountQueryResponse,\n  LeadIntegrationsQueryResponse,\n  RemoveMutationResponse,\n  RemoveMutationVariables\n} from '../types';\n\ntype Props = {\n  queryParams: any;\n};\n\ntype FinalProps = {\n  integrationsTotalCountQuery: CountQueryResponse;\n  integrationsQuery: LeadIntegrationsQueryResponse;\n  tagsQuery: TagsQueryResponse;\n} & RemoveMutationResponse &\n  ArchiveIntegrationResponse &\n  IRouterProps &\n  Props;\n\nclass ListContainer extends React.Component<FinalProps> {\n  componentDidMount() {\n    const { history } = this.props;\n\n    const shouldRefetchList = routerUtils.getParam(history, 'popUpRefetchList');\n\n    if (shouldRefetchList) {\n      this.refetch();\n    }\n  }\n\n  refetch = () => {\n    const { integrationsQuery, integrationsTotalCountQuery } = this.props;\n\n    integrationsQuery.refetch();\n    integrationsTotalCountQuery.refetch();\n  };\n\n  render() {\n    const {\n      integrationsQuery,\n      integrationsTotalCountQuery,\n      tagsQuery,\n      removeMutation,\n      archiveIntegration\n    } = this.props;\n\n    const counts = integrationsTotalCountQuery.integrationsTotalCount || {\n      byKind: {}\n    };\n    const totalCount = counts.byKind.lead || 0;\n    const tagsCount = counts.byTag || {};\n\n    const integrations = integrationsQuery.integrations || [];\n\n    const remove = (integrationId: string) => {\n      const message =\n        'If you remove a pop ups, then all related conversations, customers will also be removed. Are you sure?';\n\n      confirm(message).then(() => {\n        removeMutation({\n          variables: { _id: integrationId }\n        })\n          .then(() => {\n            // refresh queries\n            this.refetch();\n\n            Alert.success('You successfully deleted a pop ups.');\n          })\n          .catch(e => {\n            Alert.error(e.message);\n          });\n      });\n    };\n\n    const archive = (integrationId: string, status: boolean) => {\n      let message = `If you archive a pop ups, then you won't be able to see customers & conversations related to this pop ups anymore. Are you sure?`;\n      let action = 'archived';\n\n      if (!status) {\n        message = 'You are going to unarchive this pop ups. Are you sure?';\n        action = 'unarchived';\n      }\n\n      confirm(message).then(() => {\n        archiveIntegration({ variables: { _id: integrationId, status } })\n          .then(({ data }) => {\n            const integration = data.integrationsArchive;\n\n            if (integration) {\n              Alert.success(`Pop ups has been ${action}.`);\n            }\n\n            this.refetch();\n          })\n          .catch((e: Error) => {\n            Alert.error(e.message);\n          });\n      });\n    };\n\n    const updatedProps = {\n      ...this.props,\n      integrations,\n      remove,\n      loading: integrationsQuery.loading,\n      totalCount,\n      tagsCount,\n      tags: tagsQuery.tags || [],\n      archive\n    };\n\n    const content = props => {\n      return <List {...updatedProps} {...props} />;\n    };\n\n    return <Bulk content={content} refetch={this.refetch} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<\n      Props,\n      LeadIntegrationsQueryResponse,\n      { page?: number; perPage?: number; tag?: string; kind?: string }\n    >(gql(queries.integrations), {\n      name: 'integrationsQuery',\n      options: ({ queryParams }) => {\n        return {\n          variables: {\n            ...generatePaginationParams(queryParams),\n            tag: queryParams.tag,\n            kind: 'lead'\n          }\n        };\n      }\n    }),\n    graphql<Props, CountQueryResponse>(gql(queries.integrationsTotalCount), {\n      name: 'integrationsTotalCountQuery'\n    }),\n    graphql<Props, TagsQueryResponse, { type: string }>(gql(queries.tags), {\n      name: 'tagsQuery',\n      options: () => ({\n        variables: {\n          type: 'integration'\n        }\n      })\n    }),\n    graphql<Props, RemoveMutationResponse, RemoveMutationVariables>(\n      gql(mutations.integrationRemove),\n      {\n        name: 'removeMutation'\n      }\n    ),\n    graphql<Props, ArchiveIntegrationResponse>(\n      gql(integrationMutations.integrationsArchive),\n      {\n        name: 'archiveIntegration'\n      }\n    )\n  )(ListContainer)\n);\n"]},"metadata":{},"sourceType":"module"}