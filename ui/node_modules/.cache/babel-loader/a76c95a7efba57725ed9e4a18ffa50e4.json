{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/leads/components/Manage.tsx\";\nimport { getEnv } from 'apolloClient';\nimport Button from 'erxes-common-ui/lib/components/button';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Info from 'modules/common/components/Info';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport { MarkdownWrapper } from 'modules/settings/styles';\nimport React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport ReactMarkdown from 'react-markdown';\n\nvar installCodeIncludeScript = function installCodeIncludeScript(type) {\n  var _getEnv = getEnv(),\n      REACT_APP_CDN_HOST = _getEnv.REACT_APP_CDN_HOST;\n\n  return \"\\n    (function() {\\n      var script = document.createElement('script');\\n      script.src = \\\"\".concat(REACT_APP_CDN_HOST, \"/build/\").concat(type, \"Widget.bundle.js\\\";\\n      script.async = true;\\n\\n      var entry = document.getElementsByTagName('script')[0];\\n      entry.parentNode.insertBefore(script, entry);\\n    })();\\n  \");\n};\n\nvar getInstallCode = function getInstallCode(brandCode, formCode) {\n  return \"\\n    <script>\\n      window.erxesSettings = {\\n        forms: [{\\n          brand_id: \\\"\".concat(brandCode, \"\\\",\\n          form_id: \\\"\").concat(formCode, \"\\\",\\n        }],\\n      };\\n      \").concat(installCodeIncludeScript('form'), \"\\n    </script>\\n  \");\n};\n\nvar getEmbedCode = function getEmbedCode(formCode) {\n  return \"\\n    <div data-erxes-embed=\\\"\".concat(formCode, \"\\\" style=\\\"width:900px;height:300px\\\"></div>\\n  \");\n};\n\nvar getButtonCode = function getButtonCode(formCode) {\n  return \"\\n    data-erxes-modal=\\\"\".concat(formCode, \"\\\"\\n  \");\n};\n\nvar Manage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Manage, _React$Component);\n\n  function Manage(props) {\n    var _this;\n\n    _classCallCheck(this, Manage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Manage).call(this, props));\n\n    _this.renderContent = function () {\n      var onCopy = function onCopy() {\n        return _this.setState({\n          copied: true\n        });\n      };\n\n      var _this$state = _this.state,\n          code = _this$state.code,\n          embedCode = _this$state.embedCode,\n          copied = _this$state.copied,\n          buttonCode = _this$state.buttonCode;\n      return React.createElement(React.Fragment, null, React.createElement(MarkdownWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(ReactMarkdown, {\n        source: code || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), code ? React.createElement(CopyToClipboard, {\n        text: code,\n        onCopy: onCopy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"primary\",\n        icon: \"copy-1\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, copied ? 'Copied' : 'Copy to clipboard')) : React.createElement(EmptyState, {\n        icon: \"copy\",\n        text: \"No copyable code. You should connect Popup to brand first\",\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, __('If your flow type is embedded paste the code below additionally that you want erxes pop ups to appear')), React.createElement(MarkdownWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(ReactMarkdown, {\n        source: embedCode || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, __('If your flow type is popup paste the code below additionally in your button')), React.createElement(MarkdownWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(ReactMarkdown, {\n        source: buttonCode || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })));\n    };\n\n    var _code = '';\n    var _embedCode = '';\n    var _buttonCode = '';\n    var integration = props.integration; // showed install code automatically in edit mode\n\n    if (integration._id) {\n      var brand = integration.brand;\n      var form = integration.form || {};\n\n      if (brand) {\n        _code = getInstallCode(brand.code, form.code || '');\n      }\n\n      _embedCode = getEmbedCode(form.code || '');\n      _buttonCode = getButtonCode(form.code || '');\n    }\n\n    _this.state = {\n      code: _code,\n      embedCode: _embedCode,\n      buttonCode: _buttonCode,\n      copied: false\n    };\n    return _this;\n  }\n\n  _createClass(Manage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, __('Paste the code below before the body tag on every page you want erxes pop ups to appear')), this.renderContent(), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        icon: \"times-circle\",\n        uppercase: false,\n        onClick: this.props.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Close\")));\n    }\n  }]);\n\n  return Manage;\n}(React.Component);\n\nexport default Manage;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/leads/components/Manage.tsx"],"names":["getEnv","Button","EmptyState","Info","ModalFooter","__","MarkdownWrapper","React","CopyToClipboard","ReactMarkdown","installCodeIncludeScript","type","REACT_APP_CDN_HOST","getInstallCode","brandCode","formCode","getEmbedCode","getButtonCode","Manage","props","renderContent","onCopy","setState","copied","state","code","embedCode","buttonCode","integration","_id","brand","form","closeModal","Component"],"mappings":"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","sourcesContent":["import { getEnv } from 'apolloClient';\nimport Button from 'erxes-common-ui/lib/components/button';\nimport EmptyState from 'modules/common/components/EmptyState';\nimport Info from 'modules/common/components/Info';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport { MarkdownWrapper } from 'modules/settings/styles';\nimport React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport ReactMarkdown from 'react-markdown';\nimport { ILeadIntegration } from '../types';\n\ntype Props = {\n  integration: ILeadIntegration;\n  closeModal: () => void;\n};\n\ntype State = {\n  code?: string;\n  embedCode?: string;\n  buttonCode?: string;\n  copied: boolean;\n};\n\nconst installCodeIncludeScript = (type: string) => {\n  const { REACT_APP_CDN_HOST } = getEnv();\n\n  return `\n    (function() {\n      var script = document.createElement('script');\n      script.src = \"${REACT_APP_CDN_HOST}/build/${type}Widget.bundle.js\";\n      script.async = true;\n\n      var entry = document.getElementsByTagName('script')[0];\n      entry.parentNode.insertBefore(script, entry);\n    })();\n  `;\n};\n\nconst getInstallCode = (brandCode: string, formCode: string) => {\n  return `\n    <script>\n      window.erxesSettings = {\n        forms: [{\n          brand_id: \"${brandCode}\",\n          form_id: \"${formCode}\",\n        }],\n      };\n      ${installCodeIncludeScript('form')}\n    </script>\n  `;\n};\n\nconst getEmbedCode = (formCode: string) => {\n  return `\n    <div data-erxes-embed=\"${formCode}\" style=\"width:900px;height:300px\"></div>\n  `;\n};\n\nconst getButtonCode = (formCode: string) => {\n  return `\n    data-erxes-modal=\"${formCode}\"\n  `;\n};\n\nclass Manage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    let code = '';\n    let embedCode = '';\n    let buttonCode = '';\n    const integration = props.integration;\n\n    // showed install code automatically in edit mode\n    if (integration._id) {\n      const brand = integration.brand;\n      const form = integration.form || {};\n\n      if (brand) {\n        code = getInstallCode(brand.code, form.code || '');\n      }\n\n      embedCode = getEmbedCode(form.code || '');\n      buttonCode = getButtonCode(form.code || '');\n    }\n\n    this.state = {\n      code,\n      embedCode,\n      buttonCode,\n      copied: false\n    };\n  }\n\n  renderContent = () => {\n    const onCopy = () => this.setState({ copied: true });\n\n    const { code, embedCode, copied, buttonCode } = this.state;\n\n    return (\n      <>\n        <MarkdownWrapper>\n          <ReactMarkdown source={code || ''} />\n          {code ? (\n            <CopyToClipboard text={code} onCopy={onCopy}>\n              <Button btnStyle=\"primary\" icon=\"copy-1\" uppercase={false}>\n                {copied ? 'Copied' : 'Copy to clipboard'}\n              </Button>\n            </CopyToClipboard>\n          ) : (\n            <EmptyState\n              icon=\"copy\"\n              text=\"No copyable code. You should connect Popup to brand first\"\n              size=\"small\"\n            />\n          )}\n        </MarkdownWrapper>\n        <br />\n        <Info>\n          {__(\n            'If your flow type is embedded paste the code below additionally that you want erxes pop ups to appear'\n          )}\n        </Info>\n        <MarkdownWrapper>\n          <ReactMarkdown source={embedCode || ''} />\n        </MarkdownWrapper>\n        <br />\n        <Info>\n          {__(\n            'If your flow type is popup paste the code below additionally in your button'\n          )}\n        </Info>\n        <MarkdownWrapper>\n          <ReactMarkdown source={buttonCode || ''} />\n        </MarkdownWrapper>\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <Info>\n          {__(\n            'Paste the code below before the body tag on every page you want erxes pop ups to appear'\n          )}\n        </Info>\n\n        {this.renderContent()}\n\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            icon=\"times-circle\"\n            uppercase={false}\n            onClick={this.props.closeModal}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </>\n    );\n  }\n}\n\nexport default Manage;\n"]},"metadata":{},"sourceType":"module"}