{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/ConversationReport.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport ConversationReport from '../components/ConversationReport';\nimport { queries } from '../graphql';\n\nvar ConversationReportContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConversationReportContainer, _React$Component);\n\n  function ConversationReportContainer() {\n    _classCallCheck(this, ConversationReportContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConversationReportContainer).apply(this, arguments));\n  }\n\n  _createClass(ConversationReportContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          history = _this$props.history,\n          brandsQuery = _this$props.brandsQuery,\n          queryParams = _this$props.queryParams,\n          insightsConversationCustomerAvgQuery = _this$props.insightsConversationCustomerAvgQuery,\n          insightsConversationInternalAvgQuery = _this$props.insightsConversationInternalAvgQuery,\n          insightsConversationOverallAvgQuery = _this$props.insightsConversationOverallAvgQuery,\n          insightsConversationSummaryQuery = _this$props.insightsConversationSummaryQuery;\n      var extendedProps = {\n        history: history,\n        queryParams: queryParams,\n        brands: brandsQuery.brands || [],\n        conversationCustomerAvg: insightsConversationCustomerAvgQuery.insightsConversationCustomerAvg || [],\n        conversationInternalAvg: insightsConversationInternalAvgQuery.insightsConversationInternalAvg || [],\n        conversationOverallAvg: insightsConversationOverallAvgQuery.insightsConversationOverallAvg || [],\n        conversationReport: insightsConversationSummaryQuery.insightsConversationSummary || {\n          avg: [],\n          trend: [],\n          teamMembers: []\n        },\n        loading: insightsConversationSummaryQuery.loading\n      };\n      return React.createElement(ConversationReport, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ConversationReportContainer;\n}(React.Component);\n\nvar options = function options(_ref) {\n  var queryParams = _ref.queryParams;\n  return {\n    variables: {\n      brandIds: queryParams.brandIds,\n      integrationIds: queryParams.integrationIds,\n      startDate: queryParams.startDate,\n      endDate: queryParams.endDate\n    }\n  };\n};\n\nexport default compose(graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(queries.insightsConversationCustomerAvg), {\n  name: 'insightsConversationCustomerAvgQuery',\n  options: options\n}), graphql(gql(queries.insightsConversationInternalAvg), {\n  name: 'insightsConversationInternalAvgQuery',\n  options: options\n}), graphql(gql(queries.insightsConversationOverallAvg), {\n  name: 'insightsConversationOverallAvgQuery',\n  options: options\n}), graphql(gql(queries.insightsConversationSummary), {\n  name: 'insightsConversationSummaryQuery',\n  options: options\n}))(ConversationReportContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/insights/containers/ConversationReport.tsx"],"names":["gql","compose","React","graphql","ConversationReport","queries","ConversationReportContainer","props","history","brandsQuery","queryParams","insightsConversationCustomerAvgQuery","insightsConversationInternalAvgQuery","insightsConversationOverallAvgQuery","insightsConversationSummaryQuery","extendedProps","brands","conversationCustomerAvg","insightsConversationCustomerAvg","conversationInternalAvg","insightsConversationInternalAvg","conversationOverallAvg","insightsConversationOverallAvg","conversationReport","insightsConversationSummary","avg","trend","teamMembers","loading","Component","options","variables","brandIds","integrationIds","startDate","endDate","name"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,SAASC,OAAT,QAAwB,YAAxB;;IAmBMC,2B;;;;;;;;;;;;;6BACK;AAAA,wBASH,KAAKC,KATF;AAAA,UAELC,OAFK,eAELA,OAFK;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILC,WAJK,eAILA,WAJK;AAAA,UAKLC,oCALK,eAKLA,oCALK;AAAA,UAMLC,oCANK,eAMLA,oCANK;AAAA,UAOLC,mCAPK,eAOLA,mCAPK;AAAA,UAQLC,gCARK,eAQLA,gCARK;AAWP,UAAMC,aAAa,GAAG;AACpBP,QAAAA,OAAO,EAAPA,OADoB;AAEpBE,QAAAA,WAAW,EAAXA,WAFoB;AAGpBM,QAAAA,MAAM,EAAEP,WAAW,CAACO,MAAZ,IAAsB,EAHV;AAIpBC,QAAAA,uBAAuB,EACrBN,oCAAoC,CAACO,+BAArC,IACA,EANkB;AAOpBC,QAAAA,uBAAuB,EACrBP,oCAAoC,CAACQ,+BAArC,IACA,EATkB;AAUpBC,QAAAA,sBAAsB,EACpBR,mCAAmC,CAACS,8BAApC,IACA,EAZkB;AAapBC,QAAAA,kBAAkB,EAAET,gCAAgC,CAACU,2BAAjC,IAAgE;AAClFC,UAAAA,GAAG,EAAE,EAD6E;AAElFC,UAAAA,KAAK,EAAE,EAF2E;AAGlFC,UAAAA,WAAW,EAAE;AAHqE,SAbhE;AAkBpBC,QAAAA,OAAO,EAAEd,gCAAgC,CAACc;AAlBtB,OAAtB;AAqBA,aAAO,oBAAC,kBAAD,oBAAwBb,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAlCuCb,KAAK,CAAC2B,S;;AAqChD,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAqB;AAAA,MAAlBpB,WAAkB,QAAlBA,WAAkB;AACnC,SAAO;AACLqB,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAEtB,WAAW,CAACsB,QADb;AAETC,MAAAA,cAAc,EAAEvB,WAAW,CAACuB,cAFnB;AAGTC,MAAAA,SAAS,EAAExB,WAAW,CAACwB,SAHd;AAITC,MAAAA,OAAO,EAAEzB,WAAW,CAACyB;AAJZ;AADN,GAAP;AAQD,CATD;;AAWA,eAAelC,OAAO,CACpBE,OAAO,CAA6BH,GAAG,CAACK,OAAO,CAACW,MAAT,CAAhC,EAAkD;AACvDoB,EAAAA,IAAI,EAAE;AADiD,CAAlD,CADa,EAIpBjC,OAAO,CACLH,GAAG,CAACK,OAAO,CAACa,+BAAT,CADE,EAEL;AACEkB,EAAAA,IAAI,EAAE,sCADR;AAEEN,EAAAA,OAAO,EAAPA;AAFF,CAFK,CAJa,EAWpB3B,OAAO,CACLH,GAAG,CAACK,OAAO,CAACe,+BAAT,CADE,EAEL;AACEgB,EAAAA,IAAI,EAAE,sCADR;AAEEN,EAAAA,OAAO,EAAPA;AAFF,CAFK,CAXa,EAkBpB3B,OAAO,CACLH,GAAG,CAACK,OAAO,CAACiB,8BAAT,CADE,EAEL;AACEc,EAAAA,IAAI,EAAE,qCADR;AAEEN,EAAAA,OAAO,EAAPA;AAFF,CAFK,CAlBa,EAyBpB3B,OAAO,CACLH,GAAG,CAACK,OAAO,CAACmB,2BAAT,CADE,EAEL;AACEY,EAAAA,IAAI,EAAE,kCADR;AAEEN,EAAAA,OAAO,EAAPA;AAFF,CAFK,CAzBa,CAAP,CAgCbxB,2BAhCa,CAAf","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { BrandsQueryResponse } from '../../settings/brands/types';\nimport ConversationReport from '../components/ConversationReport';\nimport { queries } from '../graphql';\nimport {\n  ConversationCustomerAvgQueryResponse,\n  ConversationInternalAvgQueryResponse,\n  ConversationOverallAvgQueryResponse,\n  ConversationSummaryDataQueryResponse,\n  IQueryParams\n} from '../types';\n\ntype Props = {\n  history: any;\n  brandsQuery: BrandsQueryResponse;\n  queryParams: IQueryParams;\n  insightsConversationCustomerAvgQuery: ConversationCustomerAvgQueryResponse;\n  insightsConversationInternalAvgQuery: ConversationInternalAvgQueryResponse;\n  insightsConversationOverallAvgQuery: ConversationOverallAvgQueryResponse;\n  insightsConversationSummaryQuery: ConversationSummaryDataQueryResponse;\n};\n\nclass ConversationReportContainer extends React.Component<Props> {\n  render() {\n    const {\n      history,\n      brandsQuery,\n      queryParams,\n      insightsConversationCustomerAvgQuery,\n      insightsConversationInternalAvgQuery,\n      insightsConversationOverallAvgQuery,\n      insightsConversationSummaryQuery\n    } = this.props;\n\n    const extendedProps = {\n      history,\n      queryParams,\n      brands: brandsQuery.brands || [],\n      conversationCustomerAvg:\n        insightsConversationCustomerAvgQuery.insightsConversationCustomerAvg ||\n        [],\n      conversationInternalAvg:\n        insightsConversationInternalAvgQuery.insightsConversationInternalAvg ||\n        [],\n      conversationOverallAvg:\n        insightsConversationOverallAvgQuery.insightsConversationOverallAvg ||\n        [],\n      conversationReport: insightsConversationSummaryQuery.insightsConversationSummary || {\n        avg: [],\n        trend: [],\n        teamMembers: []\n      },\n      loading: insightsConversationSummaryQuery.loading\n    };\n\n    return <ConversationReport {...extendedProps} />;\n  }\n}\n\nconst options = ({ queryParams }) => {\n  return {\n    variables: {\n      brandIds: queryParams.brandIds,\n      integrationIds: queryParams.integrationIds,\n      startDate: queryParams.startDate,\n      endDate: queryParams.endDate\n    }\n  };\n};\n\nexport default compose(\n  graphql<Props, BrandsQueryResponse>(gql(queries.brands), {\n    name: 'brandsQuery'\n  }),\n  graphql<Props, ConversationCustomerAvgQueryResponse>(\n    gql(queries.insightsConversationCustomerAvg),\n    {\n      name: 'insightsConversationCustomerAvgQuery',\n      options\n    }\n  ),\n  graphql<Props, ConversationInternalAvgQueryResponse>(\n    gql(queries.insightsConversationInternalAvg),\n    {\n      name: 'insightsConversationInternalAvgQuery',\n      options\n    }\n  ),\n  graphql<Props, ConversationOverallAvgQueryResponse>(\n    gql(queries.insightsConversationOverallAvg),\n    {\n      name: 'insightsConversationOverallAvgQuery',\n      options\n    }\n  ),\n  graphql<Props, ConversationSummaryDataQueryResponse>(\n    gql(queries.insightsConversationSummary),\n    {\n      name: 'insightsConversationSummaryQuery',\n      options\n    }\n  )\n)(ConversationReportContainer);\n"]},"metadata":{},"sourceType":"module"}