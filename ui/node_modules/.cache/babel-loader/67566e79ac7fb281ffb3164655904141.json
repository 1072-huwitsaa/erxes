{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/messenger/steps/Options.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport FormControl from 'modules/common/components/form/Control';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { FlexItem, LeftItem } from 'modules/common/components/step/styles';\nimport Toggle from 'modules/common/components/Toggle';\nimport { __, Alert } from 'modules/common/utils';\nimport { LANGUAGES } from 'modules/settings/general/constants';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { Description } from '../../../styles';\n\nvar Options =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Options, _React$Component);\n\n  function Options() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Options);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Options)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onChangeFunction = function (name, value) {\n      _this.setState(_defineProperty({}, name, value));\n\n      _this.props.onChange(name, value);\n    };\n\n    _this.onInputChange = function (name, value) {\n      _this.setState(_defineProperty({}, name, value));\n\n      _this.props.onChange(name, value);\n    };\n\n    return _this;\n  }\n\n  _createClass(Options, [{\n    key: \"renderToggle\",\n    value: function renderToggle(_ref) {\n      var label = _ref.label,\n          description = _ref.description,\n          onChange = _ref.onChange,\n          checked = _ref.checked;\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, label), React.createElement(Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, description), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Toggle, {\n        checked: checked,\n        onChange: onChange,\n        icons: {\n          checked: React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, __('Yes')),\n          unchecked: React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, __('No'))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var languageOnChange = function languageOnChange(e) {\n        return _this2.onInputChange('languageCode', e.currentTarget.value);\n      };\n\n      var notifyCustomerChange = function notifyCustomerChange(e) {\n        return _this2.onChangeFunction('notifyCustomer', e.target.checked);\n      };\n\n      var showVideoCallRequestChange = function showVideoCallRequestChange(e) {\n        var checked = e.target.checked;\n\n        if (checked) {\n          client.query({\n            query: gql(queries.fetchApi),\n            variables: {\n              path: '/videoCall/usageStatus',\n              params: {}\n            },\n            fetchPolicy: 'network-only'\n          }).then(function (_ref2) {\n            var integrationsFetchApi = _ref2.data.integrationsFetchApi;\n\n            if (integrationsFetchApi) {\n              _this2.onChangeFunction('showVideoCallRequest', true);\n            } else {\n              Alert.error('Please configure a video call settings');\n            }\n          });\n        } else {\n          _this2.onChangeFunction('showVideoCallRequest', false);\n        }\n      };\n\n      var requireAuthChange = function requireAuthChange(e) {\n        return _this2.onChangeFunction('requireAuth', e.target.checked);\n      };\n\n      var showChatChange = function showChatChange(e) {\n        return _this2.onChangeFunction('showChat', e.target.checked);\n      };\n\n      var showLauncherChange = function showLauncherChange(e) {\n        return _this2.onChangeFunction('showLauncher', e.target.checked);\n      };\n\n      var forceLogoutWhenResolveChange = function forceLogoutWhenResolveChange(e) {\n        return _this2.onChangeFunction('forceLogoutWhenResolve', e.target.checked);\n      };\n\n      return React.createElement(FlexItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(LeftItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Default Language\"), React.createElement(FormControl, {\n        componentClass: \"select\",\n        id: \"languageCode\",\n        defaultValue: this.props.languageCode,\n        onChange: languageOnChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, LANGUAGES.map(function (item, index) {\n        return React.createElement(\"option\", {\n          key: index,\n          value: item.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, item.label);\n      }))), this.renderToggle({\n        label: __('Require Authentication'),\n        description: 'It will require email and phone in widget',\n        checked: this.props.requireAuth,\n        onChange: requireAuthChange\n      }), this.renderToggle({\n        label: __('Show chat'),\n        description: __('Hide chat section and show only knowledgebase and form'),\n        checked: this.props.showChat,\n        onChange: showChatChange\n      }), this.renderToggle({\n        label: __('Show launcher'),\n        description: __('The widget section will invisible but you can still get messenger data'),\n        checked: this.props.showLauncher,\n        onChange: showLauncherChange\n      }), this.renderToggle({\n        label: __('Force logout when resolve'),\n        description: __('If an operator resolve the conversation from inbox then client session will end automatically'),\n        checked: this.props.forceLogoutWhenResolve,\n        onChange: forceLogoutWhenResolveChange\n      }), this.renderToggle({\n        label: __('Notify customer'),\n        description: __('If customer is offline and inserted email, it will send email when operator respond'),\n        checked: this.props.notifyCustomer,\n        onChange: notifyCustomerChange\n      }), this.renderToggle({\n        label: __('Show video call request'),\n        checked: this.props.showVideoCallRequest,\n        onChange: showVideoCallRequestChange\n      })));\n    }\n  }]);\n\n  return Options;\n}(React.Component);\n\nexport default Options;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/messenger/steps/Options.tsx"],"names":["client","gql","FormControl","FormGroup","ControlLabel","FlexItem","LeftItem","Toggle","__","Alert","LANGUAGES","queries","React","Description","Options","onChangeFunction","name","value","setState","props","onChange","onInputChange","label","description","checked","unchecked","languageOnChange","e","currentTarget","notifyCustomerChange","target","showVideoCallRequestChange","query","fetchApi","variables","path","params","fetchPolicy","then","integrationsFetchApi","data","error","requireAuthChange","showChatChange","showLauncherChange","forceLogoutWhenResolveChange","languageCode","map","item","index","renderToggle","requireAuth","showChat","showLauncher","forceLogoutWhenResolve","notifyCustomer","showVideoCallRequest","Component"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport FormControl from 'modules/common/components/form/Control';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { FlexItem, LeftItem } from 'modules/common/components/step/styles';\nimport Toggle from 'modules/common/components/Toggle';\nimport { __, Alert } from 'modules/common/utils';\nimport { LANGUAGES } from 'modules/settings/general/constants';\nimport { queries } from 'modules/settings/integrations/graphql';\nimport React from 'react';\nimport { Description } from '../../../styles';\n\ntype Props = {\n  onChange: (\n    name:\n      | 'languageCode'\n      | 'notifyCustomer'\n      | 'requireAuth'\n      | 'showChat'\n      | 'showLauncher'\n      | 'forceLogoutWhenResolve',\n    value: string\n  ) => void;\n  brandId?: string;\n  languageCode: string;\n  notifyCustomer?: boolean;\n  requireAuth?: boolean;\n  showChat?: boolean;\n  showLauncher?: boolean;\n  forceLogoutWhenResolve?: boolean;\n  showVideoCallRequest?: boolean;\n};\n\ntype State = {\n  supporters?: any;\n  languageCode?: string;\n};\n\nclass Options extends React.Component<Props, State> {\n  onChangeFunction = (name, value) => {\n    this.setState({ [name]: value });\n    this.props.onChange(name, value);\n  };\n\n  onInputChange = <T extends keyof State>(name: any, value: State[T]) => {\n    this.setState({ [name]: value } as Pick<State, keyof State>);\n    this.props.onChange(name, value);\n  };\n\n  renderToggle({\n    label,\n    description,\n    onChange,\n    checked\n  }: {\n    label: string;\n    description?: string;\n    checked?: boolean;\n    onChange: (e: React.FormEvent) => void;\n  }) {\n    return (\n      <FormGroup>\n        <ControlLabel>{label}</ControlLabel>\n        <Description>{description}</Description>\n        <div>\n          <Toggle\n            checked={checked}\n            onChange={onChange}\n            icons={{\n              checked: <span>{__('Yes')}</span>,\n              unchecked: <span>{__('No')}</span>\n            }}\n          />\n        </div>\n      </FormGroup>\n    );\n  }\n\n  render() {\n    const languageOnChange = e =>\n      this.onInputChange(\n        'languageCode',\n        (e.currentTarget as HTMLInputElement).value\n      );\n\n    const notifyCustomerChange = e =>\n      this.onChangeFunction('notifyCustomer', e.target.checked);\n\n    const showVideoCallRequestChange = e => {\n      const checked = e.target.checked;\n\n      if (checked) {\n        client\n          .query({\n            query: gql(queries.fetchApi),\n            variables: { path: '/videoCall/usageStatus', params: {} },\n            fetchPolicy: 'network-only'\n          })\n          .then(({ data: { integrationsFetchApi } }) => {\n            if (integrationsFetchApi) {\n              this.onChangeFunction('showVideoCallRequest', true);\n            } else {\n              Alert.error('Please configure a video call settings');\n            }\n          });\n      } else {\n        this.onChangeFunction('showVideoCallRequest', false);\n      }\n    };\n\n    const requireAuthChange = e =>\n      this.onChangeFunction('requireAuth', e.target.checked);\n\n    const showChatChange = e =>\n      this.onChangeFunction('showChat', e.target.checked);\n\n    const showLauncherChange = e =>\n      this.onChangeFunction('showLauncher', e.target.checked);\n\n    const forceLogoutWhenResolveChange = e =>\n      this.onChangeFunction('forceLogoutWhenResolve', e.target.checked);\n\n    return (\n      <FlexItem>\n        <LeftItem>\n          <FormGroup>\n            <ControlLabel>Default Language</ControlLabel>\n\n            <FormControl\n              componentClass=\"select\"\n              id=\"languageCode\"\n              defaultValue={this.props.languageCode}\n              onChange={languageOnChange}\n            >\n              {LANGUAGES.map((item, index) => (\n                <option key={index} value={item.value}>\n                  {item.label}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n\n          {this.renderToggle({\n            label: __('Require Authentication'),\n            description: 'It will require email and phone in widget',\n            checked: this.props.requireAuth,\n            onChange: requireAuthChange\n          })}\n\n          {this.renderToggle({\n            label: __('Show chat'),\n            description: __(\n              'Hide chat section and show only knowledgebase and form'\n            ),\n            checked: this.props.showChat,\n            onChange: showChatChange\n          })}\n\n          {this.renderToggle({\n            label: __('Show launcher'),\n            description: __(\n              'The widget section will invisible but you can still get messenger data'\n            ),\n            checked: this.props.showLauncher,\n            onChange: showLauncherChange\n          })}\n\n          {this.renderToggle({\n            label: __('Force logout when resolve'),\n            description: __(\n              'If an operator resolve the conversation from inbox then client session will end automatically'\n            ),\n            checked: this.props.forceLogoutWhenResolve,\n            onChange: forceLogoutWhenResolveChange\n          })}\n\n          {this.renderToggle({\n            label: __('Notify customer'),\n            description: __(\n              'If customer is offline and inserted email, it will send email when operator respond'\n            ),\n            checked: this.props.notifyCustomer,\n            onChange: notifyCustomerChange\n          })}\n\n          {this.renderToggle({\n            label: __('Show video call request'),\n            checked: this.props.showVideoCallRequest,\n            onChange: showVideoCallRequestChange\n          })}\n        </LeftItem>\n      </FlexItem>\n    );\n  }\n}\n\nexport default Options;\n"]},"metadata":{},"sourceType":"module"}