{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/chatfuel/Form.tsx\";\nimport Button from 'erxes-common-ui/lib/components/button';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport SelectBrand from '../../containers/SelectBrand';\nimport SelectChannels from '../../containers/SelectChannels';\n\nvar Chatfuel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chatfuel, _React$Component);\n\n  function Chatfuel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chatfuel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chatfuel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.generateDoc = function (values) {\n      return {\n        name: \"\".concat(values.name, \" - \").concat(values.code),\n        brandId: values.brandId,\n        kind: 'chatfuel',\n        data: {\n          code: values.code,\n          broadcastToken: values.broadcastToken,\n          botId: values.botId,\n          blockName: values.blockName\n        }\n      };\n    };\n\n    _this.renderField = function (_ref) {\n      var label = _ref.label,\n          name = _ref.name,\n          formProps = _ref.formProps;\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, label), React.createElement(FormControl, Object.assign({}, formProps, {\n        name: name,\n        required: true,\n        autoFocus: name === 'name',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })));\n    };\n\n    _this.renderContent = function (formProps) {\n      var _this$props = _this.props,\n          renderButton = _this$props.renderButton,\n          callback = _this$props.callback,\n          onChannelChange = _this$props.onChannelChange,\n          channelIds = _this$props.channelIds;\n      var values = formProps.values,\n          isSubmitted = formProps.isSubmitted;\n      return React.createElement(React.Fragment, null, _this.renderField({\n        label: 'Name',\n        name: 'name',\n        formProps: formProps\n      }), _this.renderField({\n        label: 'Code',\n        name: 'code',\n        formProps: formProps\n      }), _this.renderField({\n        label: 'Broadcast token',\n        name: 'broadcastToken',\n        formProps: formProps\n      }), _this.renderField({\n        label: 'Bot ID',\n        name: 'botId',\n        formProps: formProps\n      }), _this.renderField({\n        label: 'Block name',\n        name: 'blockName',\n        formProps: formProps\n      }), React.createElement(SelectBrand, {\n        isRequired: true,\n        formProps: formProps,\n        description: __('Which specific Brand does this integration belong to?'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(SelectChannels, {\n        defaultValue: channelIds,\n        isRequired: true,\n        onChange: onChannelChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnStyle: \"simple\",\n        type: \"button\",\n        onClick: callback,\n        icon: \"times-circle\",\n        uppercase: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Cancel\"), renderButton({\n        name: 'integration',\n        values: _this.generateDoc(values),\n        isSubmitted: isSubmitted,\n        callback: callback\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(Chatfuel, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        renderContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Chatfuel;\n}(React.Component);\n\nexport default Chatfuel;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/integrations/components/chatfuel/Form.tsx"],"names":["Button","FormControl","Form","FormGroup","ControlLabel","ModalFooter","__","React","SelectBrand","SelectChannels","Chatfuel","generateDoc","values","name","code","brandId","kind","data","broadcastToken","botId","blockName","renderField","label","formProps","renderContent","props","renderButton","callback","onChannelChange","channelIds","isSubmitted","Component"],"mappings":"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","sourcesContent":["import Button from 'erxes-common-ui/lib/components/button';\nimport FormControl from 'modules/common/components/form/Control';\nimport Form from 'modules/common/components/form/Form';\nimport FormGroup from 'modules/common/components/form/Group';\nimport ControlLabel from 'modules/common/components/form/Label';\nimport { ModalFooter } from 'modules/common/styles/main';\nimport { IButtonMutateProps, IFormProps } from 'modules/common/types';\nimport { __ } from 'modules/common/utils';\nimport React from 'react';\nimport SelectBrand from '../../containers/SelectBrand';\nimport SelectChannels from '../../containers/SelectChannels';\n\ntype Props = {\n  renderButton: (props: IButtonMutateProps) => JSX.Element;\n  callback: () => void;\n  onChannelChange: () => void;\n  channelIds: string[];\n};\n\nclass Chatfuel extends React.Component<Props> {\n  generateDoc = (values: {\n    name: string;\n    code: string;\n    broadcastToken: string;\n    botId: string;\n    blockName: string;\n    brandId: string;\n  }) => {\n    return {\n      name: `${values.name} - ${values.code}`,\n      brandId: values.brandId,\n      kind: 'chatfuel',\n      data: {\n        code: values.code,\n        broadcastToken: values.broadcastToken,\n        botId: values.botId,\n        blockName: values.blockName\n      }\n    };\n  };\n\n  renderField = ({\n    label,\n    name,\n    formProps\n  }: {\n    label: string;\n    name: string;\n    formProps: IFormProps;\n  }) => {\n    return (\n      <FormGroup>\n        <ControlLabel required={true}>{label}</ControlLabel>\n        <FormControl\n          {...formProps}\n          name={name}\n          required={true}\n          autoFocus={name === 'name'}\n        />\n      </FormGroup>\n    );\n  };\n\n  renderContent = (formProps: IFormProps) => {\n    const { renderButton, callback, onChannelChange, channelIds } = this.props;\n    const { values, isSubmitted } = formProps;\n\n    return (\n      <>\n        {this.renderField({ label: 'Name', name: 'name', formProps })}\n        {this.renderField({ label: 'Code', name: 'code', formProps })}\n        {this.renderField({\n          label: 'Broadcast token',\n          name: 'broadcastToken',\n          formProps\n        })}\n        {this.renderField({ label: 'Bot ID', name: 'botId', formProps })}\n        {this.renderField({\n          label: 'Block name',\n          name: 'blockName',\n          formProps\n        })}\n\n        <SelectBrand\n          isRequired={true}\n          formProps={formProps}\n          description={__(\n            'Which specific Brand does this integration belong to?'\n          )}\n        />\n\n        <SelectChannels\n          defaultValue={channelIds}\n          isRequired={true}\n          onChange={onChannelChange}\n        />\n\n        <ModalFooter>\n          <Button\n            btnStyle=\"simple\"\n            type=\"button\"\n            onClick={callback}\n            icon=\"times-circle\"\n            uppercase={false}\n          >\n            Cancel\n          </Button>\n          {renderButton({\n            name: 'integration',\n            values: this.generateDoc(values),\n            isSubmitted,\n            callback\n          })}\n        </ModalFooter>\n      </>\n    );\n  };\n\n  render() {\n    return <Form renderContent={this.renderContent} />;\n  }\n}\n\nexport default Chatfuel;\n"]},"metadata":{},"sourceType":"module"}