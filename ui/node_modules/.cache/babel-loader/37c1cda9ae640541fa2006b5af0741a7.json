{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/SegmentStep.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SegmentStep from '../components/step/SegmentStep';\nimport { mutations, queries } from '../graphql';\nimport { sumCounts } from '../utils';\n\nvar SegmentStepContainer = function SegmentStepContainer(props) {\n  var segmentsQuery = props.segmentsQuery,\n      headSegmentsQuery = props.headSegmentsQuery,\n      customerCountsQuery = props.customerCountsQuery,\n      combinedFieldsQuery = props.combinedFieldsQuery;\n  var customerCounts = customerCountsQuery.customerCounts || {\n    bySegment: {}\n  };\n  var countValues = customerCounts.bySegment || {};\n\n  var customersCount = function customersCount(ids) {\n    return sumCounts(ids, countValues);\n  };\n\n  var segmentFields = combinedFieldsQuery.fieldsCombinedByContentType ? combinedFieldsQuery.fieldsCombinedByContentType.map(function (_ref) {\n    var name = _ref.name,\n        label = _ref.label;\n    return {\n      _id: name,\n      title: label,\n      selectedBy: 'none'\n    };\n  }) : [];\n\n  var count = function count() {\n    customerCountsQuery.refetch();\n  };\n\n  var renderButton = function renderButton(_ref2) {\n    var values = _ref2.values,\n        isSubmitted = _ref2.isSubmitted,\n        callback = _ref2.callback;\n\n    var callBackResponse = function callBackResponse() {\n      segmentsQuery.refetch();\n      customerCountsQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return React.createElement(ButtonMutate, {\n      mutation: mutations.segmentsAdd,\n      variables: values,\n      callback: callBackResponse,\n      isSubmitted: isSubmitted,\n      btnSize: \"small\",\n      type: \"submit\",\n      successMessage: \"You successfully added a segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    headSegments: headSegmentsQuery.segmentsGetHeads || [],\n    segmentFields: segmentFields,\n    renderButton: renderButton,\n    segments: segmentsQuery.segments || [],\n    targetCount: countValues,\n    customersCount: customersCount,\n    count: count\n  });\n\n  return React.createElement(SegmentStep, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.segments), {\n  name: 'segmentsQuery',\n  options: {\n    variables: {\n      contentTypes: ['lead', 'customer', 'visitor']\n    }\n  }\n}), graphql(gql(queries.customerCounts), {\n  name: 'customerCountsQuery',\n  options: {\n    variables: {\n      only: 'bySegment'\n    }\n  }\n}), graphql(gql(queries.headSegments), {\n  name: 'headSegmentsQuery'\n}), graphql(gql(mutations.segmentsAdd), {\n  name: 'segmentsAdd'\n}), graphql(gql(queries.combinedFields), {\n  name: 'combinedFieldsQuery'\n}))(SegmentStepContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/engage/containers/SegmentStep.tsx"],"names":["gql","compose","ButtonMutate","withProps","React","graphql","SegmentStep","mutations","queries","sumCounts","SegmentStepContainer","props","segmentsQuery","headSegmentsQuery","customerCountsQuery","combinedFieldsQuery","customerCounts","bySegment","countValues","customersCount","ids","segmentFields","fieldsCombinedByContentType","map","name","label","_id","title","selectedBy","count","refetch","renderButton","values","isSubmitted","callback","callBackResponse","segmentsAdd","updatedProps","headSegments","segmentsGetHeads","segments","targetCount","options","variables","contentTypes","only","combinedFields"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AASA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAyBA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAuB;AAAA,MAEhDC,aAFgD,GAM9CD,KAN8C,CAEhDC,aAFgD;AAAA,MAGhDC,iBAHgD,GAM9CF,KAN8C,CAGhDE,iBAHgD;AAAA,MAIhDC,mBAJgD,GAM9CH,KAN8C,CAIhDG,mBAJgD;AAAA,MAKhDC,mBALgD,GAM9CJ,KAN8C,CAKhDI,mBALgD;AAQlD,MAAMC,cAAc,GAAGF,mBAAmB,CAACE,cAApB,IAAsC;AAC3DC,IAAAA,SAAS,EAAE;AADgD,GAA7D;AAIA,MAAMC,WAAW,GAAGF,cAAc,CAACC,SAAf,IAA4B,EAAhD;;AACA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD;AAAA,WAAmBX,SAAS,CAACW,GAAD,EAAMF,WAAN,CAA5B;AAAA,GAAvB;;AAEA,MAAMG,aAAa,GAAGN,mBAAmB,CAACO,2BAApB,GAClBP,mBAAmB,CAACO,2BAApB,CAAgDC,GAAhD,CACE;AAAA,QAAGC,IAAH,QAAGA,IAAH;AAAA,QAASC,KAAT,QAASA,KAAT;AAAA,WAAsB;AACpBC,MAAAA,GAAG,EAAEF,IADe;AAEpBG,MAAAA,KAAK,EAAEF,KAFa;AAGpBG,MAAAA,UAAU,EAAE;AAHQ,KAAtB;AAAA,GADF,CADkB,GAQlB,EARJ;;AAUA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBf,IAAAA,mBAAmB,CAACgB,OAApB;AACD,GAFD;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,QAIK;AAAA,QAHxBC,MAGwB,SAHxBA,MAGwB;AAAA,QAFxBC,WAEwB,SAFxBA,WAEwB;AAAA,QADxBC,QACwB,SADxBA,QACwB;;AACxB,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BvB,MAAAA,aAAa,CAACkB,OAAd;AACAhB,MAAAA,mBAAmB,CAACgB,OAApB;;AAEA,UAAII,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACT;AACF,KAPD;;AASA,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAE3B,SAAS,CAAC6B,WADtB;AAEE,MAAA,SAAS,EAAEJ,MAFb;AAGE,MAAA,QAAQ,EAAEG,gBAHZ;AAIE,MAAA,WAAW,EAAEF,WAJf;AAKE,MAAA,OAAO,EAAC,OALV;AAME,MAAA,IAAI,EAAC,QANP;AAOE,MAAA,cAAc,oCAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAzBD;;AA2BA,MAAMI,YAAY,qBACb1B,KADa;AAEhB2B,IAAAA,YAAY,EAAEzB,iBAAiB,CAAC0B,gBAAlB,IAAsC,EAFpC;AAGhBlB,IAAAA,aAAa,EAAbA,aAHgB;AAIhBU,IAAAA,YAAY,EAAZA,YAJgB;AAKhBS,IAAAA,QAAQ,EAAE5B,aAAa,CAAC4B,QAAd,IAA0B,EALpB;AAMhBC,IAAAA,WAAW,EAAEvB,WANG;AAOhBC,IAAAA,cAAc,EAAdA,cAPgB;AAQhBU,IAAAA,KAAK,EAALA;AARgB,IAAlB;;AAWA,SAAO,oBAAC,WAAD,oBAAiBQ,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CApED;;AAsEA,eAAelC,SAAS,CACtBF,OAAO,CACLI,OAAO,CAA+BL,GAAG,CAACQ,OAAO,CAACgC,QAAT,CAAlC,EAAsD;AAC3DhB,EAAAA,IAAI,EAAE,eADqD;AAE3DkB,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,SAArB;AADL;AADJ;AAFkD,CAAtD,CADF,EASLvC,OAAO,CACLL,GAAG,CAACQ,OAAO,CAACQ,cAAT,CADE,EAEL;AACEQ,EAAAA,IAAI,EAAE,qBADR;AAEEkB,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AACTE,MAAAA,IAAI,EAAE;AADG;AADJ;AAFX,CAFK,CATF,EAoBLxC,OAAO,CAAmCL,GAAG,CAACQ,OAAO,CAAC8B,YAAT,CAAtC,EAA8D;AACnEd,EAAAA,IAAI,EAAE;AAD6D,CAA9D,CApBF,EAuBLnB,OAAO,CACLL,GAAG,CAACO,SAAS,CAAC6B,WAAX,CADE,EAEL;AAAEZ,EAAAA,IAAI,EAAE;AAAR,CAFK,CAvBF,EA2BLnB,OAAO,CACLL,GAAG,CAACQ,OAAO,CAACsC,cAAT,CADE,EAEL;AAAEtB,EAAAA,IAAI,EAAE;AAAR,CAFK,CA3BF,CAAP,CA+BEd,oBA/BF,CADsB,CAAxB","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { withProps } from 'modules/common/utils';\nimport { CountQueryResponse } from 'modules/customers/types';\nimport {\n  AddMutationResponse,\n  AddMutationVariables,\n  HeadSegmentsQueryResponse,\n  SegmentsQueryResponse\n} from 'modules/segments/types';\nimport { FieldsCombinedByTypeQueryResponse } from 'modules/settings/properties/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport SegmentStep from '../components/step/SegmentStep';\nimport { mutations, queries } from '../graphql';\nimport { sumCounts } from '../utils';\n\ntype Props = {\n  segmentIds: string[];\n  messageType: string;\n  onChange: (name: string, value: string[]) => void;\n  renderContent: ({\n    actionSelector,\n    selectedComponent,\n    customerCounts\n  }: {\n    actionSelector: React.ReactNode;\n    selectedComponent: React.ReactNode;\n    customerCounts: React.ReactNode;\n  }) => React.ReactNode;\n};\n\ntype FinalProps = {\n  segmentsQuery: SegmentsQueryResponse;\n  customerCountsQuery: CountQueryResponse;\n  headSegmentsQuery: HeadSegmentsQueryResponse;\n  combinedFieldsQuery: FieldsCombinedByTypeQueryResponse;\n} & AddMutationResponse &\n  Props;\n\nconst SegmentStepContainer = (props: FinalProps) => {\n  const {\n    segmentsQuery,\n    headSegmentsQuery,\n    customerCountsQuery,\n    combinedFieldsQuery\n  } = props;\n\n  const customerCounts = customerCountsQuery.customerCounts || {\n    bySegment: {}\n  };\n\n  const countValues = customerCounts.bySegment || {};\n  const customersCount = (ids: string[]) => sumCounts(ids, countValues);\n\n  const segmentFields = combinedFieldsQuery.fieldsCombinedByContentType\n    ? combinedFieldsQuery.fieldsCombinedByContentType.map(\n        ({ name, label }) => ({\n          _id: name,\n          title: label,\n          selectedBy: 'none'\n        })\n      )\n    : [];\n\n  const count = () => {\n    customerCountsQuery.refetch();\n  };\n\n  const renderButton = ({\n    values,\n    isSubmitted,\n    callback\n  }: IButtonMutateProps) => {\n    const callBackResponse = () => {\n      segmentsQuery.refetch();\n      customerCountsQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={mutations.segmentsAdd}\n        variables={values}\n        callback={callBackResponse}\n        isSubmitted={isSubmitted}\n        btnSize=\"small\"\n        type=\"submit\"\n        successMessage={`You successfully added a segment`}\n      />\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    headSegments: headSegmentsQuery.segmentsGetHeads || [],\n    segmentFields,\n    renderButton,\n    segments: segmentsQuery.segments || [],\n    targetCount: countValues,\n    customersCount,\n    count\n  };\n\n  return <SegmentStep {...updatedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, SegmentsQueryResponse>(gql(queries.segments), {\n      name: 'segmentsQuery',\n      options: {\n        variables: {\n          contentTypes: ['lead', 'customer', 'visitor']\n        }\n      }\n    }),\n    graphql<Props, CountQueryResponse, { only: string }>(\n      gql(queries.customerCounts),\n      {\n        name: 'customerCountsQuery',\n        options: {\n          variables: {\n            only: 'bySegment'\n          }\n        }\n      }\n    ),\n    graphql<Props, HeadSegmentsQueryResponse>(gql(queries.headSegments), {\n      name: 'headSegmentsQuery'\n    }),\n    graphql<Props, AddMutationResponse, AddMutationVariables>(\n      gql(mutations.segmentsAdd),\n      { name: 'segmentsAdd' }\n    ),\n    graphql<Props, FieldsCombinedByTypeQueryResponse>(\n      gql(queries.combinedFields),\n      { name: 'combinedFieldsQuery' }\n    )\n  )(SegmentStepContainer)\n);\n"]},"metadata":{},"sourceType":"module"}