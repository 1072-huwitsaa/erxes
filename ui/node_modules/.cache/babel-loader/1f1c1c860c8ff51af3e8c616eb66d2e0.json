{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/responseTemplate/PopoverContent.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport PopoverContent from 'modules/inbox/components/conversationDetail/workarea/responseTemplate/PopoverContent';\nimport { queries as responseTemplateQuery } from 'modules/settings/responseTemplates/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { AppConsumer } from 'appContext';\n\nvar PopoverContentContainer = function PopoverContentContainer(props) {\n  var brands = props.brands,\n      search = props.search,\n      responseTemplatesQuery = props.responseTemplatesQuery,\n      responseTemplatesTotalCountQuery = props.responseTemplatesTotalCountQuery;\n\n  if (responseTemplatesQuery.loading || responseTemplatesTotalCountQuery.loading) {\n    return null;\n  }\n\n  var fetchMore = function fetchMore(variables) {\n    responseTemplatesQuery.fetchMore({\n      variables: variables,\n      updateQuery: function updateQuery(prev, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        var prevTemplates = prev.responseTemplates || [];\n        var fetchedTemplates = fetchMoreResult.responseTemplates || [];\n        return _objectSpread({}, prev, {\n          responseTemplates: [].concat(_toConsumableArray(prevTemplates), _toConsumableArray(fetchedTemplates))\n        });\n      }\n    });\n  };\n\n  var onSearchChange = function onSearchChange(name, value) {\n    search(name, value);\n  };\n\n  var responseTemplates = responseTemplatesQuery.responseTemplates;\n  var count = responseTemplatesTotalCountQuery.responseTemplatesTotalCount;\n  var hasMore = count > responseTemplates.length;\n\n  var updatedProps = _objectSpread({}, props, {\n    onSearchChange: onSearchChange,\n    brands: brands,\n    fetchMore: fetchMore,\n    hasMore: hasMore,\n    responseTemplates: responseTemplatesQuery.responseTemplates\n  });\n\n  return React.createElement(PopoverContent, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n};\n\nvar withQuery = function withQuery() {\n  return withProps(compose(graphql(gql(responseTemplateQuery.responseTemplates), {\n    name: 'responseTemplatesQuery',\n    options: function options(_ref2) {\n      var searchValue = _ref2.searchValue,\n          brandId = _ref2.brandId;\n      return {\n        variables: {\n          perPage: 10,\n          searchValue: searchValue,\n          brandId: brandId\n        }\n      };\n    }\n  }), graphql(gql(responseTemplateQuery.responseTemplatesTotalCount), {\n    name: 'responseTemplatesTotalCountQuery'\n  }))(PopoverContentContainer));\n};\n\nvar Wrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Wrapper, _React$Component);\n\n  function Wrapper(props) {\n    var _this;\n\n    _classCallCheck(this, Wrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Wrapper).call(this, props));\n    _this.withQuery = void 0;\n\n    _this.search = function (name, value) {\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.withQuery = withQuery();\n    _this.state = {\n      searchValue: '',\n      brandId: props.brandId\n    };\n    return _this;\n  }\n\n  _createClass(Wrapper, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          brandId = _this$state.brandId;\n      var Component = this.withQuery;\n      return React.createElement(AppConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, function () {\n        return React.createElement(Component, Object.assign({}, _this2.props, {\n          search: _this2.search,\n          searchValue: searchValue,\n          brandId: brandId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return Wrapper;\n}(React.Component);\n\nexport default Wrapper;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/responseTemplate/PopoverContent.tsx"],"names":["gql","compose","withProps","PopoverContent","queries","responseTemplateQuery","React","graphql","AppConsumer","PopoverContentContainer","props","brands","search","responseTemplatesQuery","responseTemplatesTotalCountQuery","loading","fetchMore","variables","updateQuery","prev","fetchMoreResult","prevTemplates","responseTemplates","fetchedTemplates","onSearchChange","name","value","count","responseTemplatesTotalCount","hasMore","length","updatedProps","withQuery","options","searchValue","brandId","perPage","Wrapper","setState","state","Component"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { withProps } from 'modules/common/utils';\nimport PopoverContent from 'modules/inbox/components/conversationDetail/workarea/responseTemplate/PopoverContent';\nimport { IBrand } from 'modules/settings/brands/types';\nimport { queries as responseTemplateQuery } from 'modules/settings/responseTemplates/graphql';\nimport {\n  IResponseTemplate,\n  ResponseTemplatesQueryResponse,\n  ResponseTemplatesTotalCountQueryResponse\n} from 'modules/settings/responseTemplates/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { AppConsumer } from 'appContext';\n\ntype Props = {\n  onSelect: (responseTemplate?: IResponseTemplate) => void;\n  brands: IBrand[];\n  brandId?: string;\n  searchValue?: string;\n  onSelectTemplate: () => void;\n};\n\ntype FinalProps = {\n  search: (name: string, value: string) => void;\n  responseTemplatesQuery: ResponseTemplatesQueryResponse;\n  responseTemplatesTotalCountQuery: ResponseTemplatesTotalCountQueryResponse;\n} & Props;\nconst PopoverContentContainer = (props: FinalProps) => {\n  const {\n    brands,\n    search,\n    responseTemplatesQuery,\n    responseTemplatesTotalCountQuery\n  } = props;\n\n  if (\n    responseTemplatesQuery.loading ||\n    responseTemplatesTotalCountQuery.loading\n  ) {\n    return null;\n  }\n\n  const fetchMore = (variables: { page: number; perPage: number }) => {\n    responseTemplatesQuery.fetchMore({\n      variables,\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        const prevTemplates = prev.responseTemplates || [];\n\n        const fetchedTemplates = fetchMoreResult.responseTemplates || [];\n\n        return {\n          ...prev,\n          responseTemplates: [...prevTemplates, ...fetchedTemplates]\n        };\n      }\n    });\n  };\n\n  const onSearchChange = (name: string, value: string) => {\n    search(name, value);\n  };\n\n  const responseTemplates = responseTemplatesQuery.responseTemplates;\n  const count = responseTemplatesTotalCountQuery.responseTemplatesTotalCount;\n  const hasMore = count > responseTemplates.length;\n\n  const updatedProps = {\n    ...props,\n    onSearchChange,\n    brands,\n    fetchMore,\n    hasMore,\n    responseTemplates: responseTemplatesQuery.responseTemplates\n  };\n\n  return <PopoverContent {...updatedProps} />;\n};\n\nconst withQuery = () =>\n  withProps<Props & { searchValue: string; brandId: string }>(\n    compose(\n      graphql<Props & { searchValue: string }, ResponseTemplatesQueryResponse>(\n        gql(responseTemplateQuery.responseTemplates),\n        {\n          name: 'responseTemplatesQuery',\n          options: ({ searchValue, brandId }) => {\n            return {\n              variables: {\n                perPage: 10,\n                searchValue,\n                brandId\n              }\n            };\n          }\n        }\n      ),\n      graphql(gql(responseTemplateQuery.responseTemplatesTotalCount), {\n        name: 'responseTemplatesTotalCountQuery'\n      })\n    )(PopoverContentContainer)\n  );\n\ntype WrapperState = {\n  searchValue: string;\n  brandId: string;\n};\n\nclass Wrapper extends React.Component<Props, WrapperState> {\n  private withQuery;\n\n  constructor(props) {\n    super(props);\n\n    this.withQuery = withQuery();\n\n    this.state = { searchValue: '', brandId: props.brandId };\n  }\n\n  search = <T extends keyof WrapperState>(name: T, value: WrapperState[T]) => {\n    this.setState(({ [name]: value } as unknown) as Pick<\n      WrapperState,\n      keyof WrapperState\n    >);\n  };\n\n  render() {\n    const { searchValue, brandId } = this.state;\n\n    const Component = this.withQuery;\n\n    return (\n      <AppConsumer>\n        {() => (\n          <Component\n            {...this.props}\n            search={this.search}\n            searchValue={searchValue}\n            brandId={brandId}\n          />\n        )}\n      </AppConsumer>\n    );\n  }\n}\n\nexport default Wrapper;\n"]},"metadata":{},"sourceType":"module"}