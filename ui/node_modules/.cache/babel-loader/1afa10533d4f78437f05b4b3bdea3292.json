{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/containers/Histories.tsx\";\nimport { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, router, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Histories from '../components/Histories';\nimport { mutations, queries } from '../graphql';\n\nvar HistoriesContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HistoriesContainer, _React$Component);\n\n  function HistoriesContainer(props) {\n    var _this;\n\n    _classCallCheck(this, HistoriesContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HistoriesContainer).call(this, props));\n    _this.state = {\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(HistoriesContainer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isDoneIndicatorAction !== prevProps.isDoneIndicatorAction) {\n        this.props.historiesQuery.refetch();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          historiesQuery = _this$props.historiesQuery,\n          history = _this$props.history,\n          importHistoriesRemove = _this$props.importHistoriesRemove,\n          showLoadingBar = _this$props.showLoadingBar,\n          closeLoadingBar = _this$props.closeLoadingBar;\n\n      if (!router.getParam(history, 'type')) {\n        router.setParams(history, {\n          type: 'customer'\n        }, true);\n      }\n\n      var currentType = router.getParam(history, 'type');\n\n      var removeHistory = function removeHistory(historyId) {\n        // reset top indicator\n        closeLoadingBar();\n        localStorage.setItem('erxes_import_data', historyId);\n        localStorage.setItem('erxes_import_data_type', 'remove');\n        showLoadingBar(true);\n        importHistoriesRemove({\n          variables: {\n            _id: historyId\n          }\n        }).then(function () {\n          historiesQuery.refetch();\n        }).catch(function (e) {\n          Alert.error(e.message);\n          closeLoadingBar();\n        });\n      };\n\n      var histories = historiesQuery.importHistories || {};\n\n      var updatedProps = _objectSpread({}, this.props, {\n        histories: histories.list || [],\n        loading: historiesQuery.loading || this.state.loading,\n        removeHistory: removeHistory,\n        currentType: currentType,\n        totalCount: histories.count || 0\n      });\n\n      return React.createElement(Histories, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return HistoriesContainer;\n}(React.Component);\n\nvar historiesListParams = function historiesListParams(queryParams) {\n  return _objectSpread({}, generatePaginationParams(queryParams), {\n    type: queryParams.type || 'customer'\n  });\n};\n\nvar HistoriesWithProps = withProps(compose(graphql(gql(queries.histories), {\n  name: 'historiesQuery',\n  options: function options(_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      fetchPolicy: 'network-only',\n      variables: historiesListParams(queryParams)\n    };\n  }\n}), graphql(gql(mutations.importHistoriesRemove), {\n  name: 'importHistoriesRemove',\n  options: {\n    refetchQueries: ['importHistories']\n  }\n}))(withRouter(HistoriesContainer)));\n\nvar WithConsumer = function WithConsumer(props) {\n  return React.createElement(AppConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, function (_ref2) {\n    var showLoadingBar = _ref2.showLoadingBar,\n        closeLoadingBar = _ref2.closeLoadingBar,\n        isDoneIndicatorAction = _ref2.isDoneIndicatorAction;\n    return React.createElement(HistoriesWithProps, Object.assign({}, props, {\n      showLoadingBar: showLoadingBar,\n      closeLoadingBar: closeLoadingBar,\n      isDoneIndicatorAction: isDoneIndicatorAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n  });\n};\n\nexport default WithConsumer;","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/settings/importHistory/containers/Histories.tsx"],"names":["AppConsumer","gql","compose","Alert","router","withProps","generatePaginationParams","React","graphql","withRouter","Histories","mutations","queries","HistoriesContainer","props","state","loading","prevProps","isDoneIndicatorAction","historiesQuery","refetch","history","importHistoriesRemove","showLoadingBar","closeLoadingBar","getParam","setParams","type","currentType","removeHistory","historyId","localStorage","setItem","variables","_id","then","catch","e","error","message","histories","importHistories","updatedProps","list","totalCount","count","Component","historiesListParams","queryParams","HistoriesWithProps","name","options","fetchPolicy","refetchQueries","WithConsumer"],"mappings":";;;;;;;AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,sBAAzC;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;;IAoBMC,kB;;;;;AACJ,8BAAYC,KAAZ,EAA+B;AAAA;;AAAA;;AAC7B,4FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAH6B;AAM9B;;;;uCAEkBC,S,EAAuB;AACxC,UAAI,KAAKH,KAAL,CAAWI,qBAAX,KAAqCD,SAAS,CAACC,qBAAnD,EAA0E;AACxE,aAAKJ,KAAL,CAAWK,cAAX,CAA0BC,OAA1B;AACD;AACF;;;6BAEQ;AAAA,wBAOH,KAAKN,KAPF;AAAA,UAELK,cAFK,eAELA,cAFK;AAAA,UAGLE,OAHK,eAGLA,OAHK;AAAA,UAILC,qBAJK,eAILA,qBAJK;AAAA,UAKLC,cALK,eAKLA,cALK;AAAA,UAMLC,eANK,eAMLA,eANK;;AASP,UAAI,CAACpB,MAAM,CAACqB,QAAP,CAAgBJ,OAAhB,EAAyB,MAAzB,CAAL,EAAuC;AACrCjB,QAAAA,MAAM,CAACsB,SAAP,CAAiBL,OAAjB,EAA0B;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAA1B,EAAgD,IAAhD;AACD;;AAED,UAAMC,WAAW,GAAGxB,MAAM,CAACqB,QAAP,CAAgBJ,OAAhB,EAAyB,MAAzB,CAApB;;AAEA,UAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,SAAS,EAAI;AACjC;AACAN,QAAAA,eAAe;AAEfO,QAAAA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CF,SAA1C;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,wBAArB,EAA+C,QAA/C;AAEAT,QAAAA,cAAc,CAAC,IAAD,CAAd;AAEAD,QAAAA,qBAAqB,CAAC;AACpBW,UAAAA,SAAS,EAAE;AAAEC,YAAAA,GAAG,EAAEJ;AAAP;AADS,SAAD,CAArB,CAGGK,IAHH,CAGQ,YAAM;AACVhB,UAAAA,cAAc,CAACC,OAAf;AACD,SALH,EAMGgB,KANH,CAMS,UAAAC,CAAC,EAAI;AACVlC,UAAAA,KAAK,CAACmC,KAAN,CAAYD,CAAC,CAACE,OAAd;AACAf,UAAAA,eAAe;AAChB,SATH;AAUD,OAnBD;;AAqBA,UAAMgB,SAAS,GAAGrB,cAAc,CAACsB,eAAf,IAAkC,EAApD;;AAEA,UAAMC,YAAY,qBACb,KAAK5B,KADQ;AAEhB0B,QAAAA,SAAS,EAAEA,SAAS,CAACG,IAAV,IAAkB,EAFb;AAGhB3B,QAAAA,OAAO,EAAEG,cAAc,CAACH,OAAf,IAA0B,KAAKD,KAAL,CAAWC,OAH9B;AAIhBa,QAAAA,aAAa,EAAbA,aAJgB;AAKhBD,QAAAA,WAAW,EAAXA,WALgB;AAMhBgB,QAAAA,UAAU,EAAEJ,SAAS,CAACK,KAAV,IAAmB;AANf,QAAlB;;AASA,aAAO,oBAAC,SAAD,oBAAeH,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA/D8BnC,KAAK,CAACuC,S;;AAkEvC,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,WAAW;AAAA,2BAClC1C,wBAAwB,CAAC0C,WAAD,CADU;AAErCrB,IAAAA,IAAI,EAAEqB,WAAW,CAACrB,IAAZ,IAAoB;AAFW;AAAA,CAAvC;;AAKA,IAAMsB,kBAAkB,GAAG5C,SAAS,CAClCH,OAAO,CACLM,OAAO,CACLP,GAAG,CAACW,OAAO,CAAC4B,SAAT,CADE,EAEL;AACEU,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,OAAO,EAAE;AAAA,QAAGH,WAAH,QAAGA,WAAH;AAAA,WAAsB;AAC7BI,MAAAA,WAAW,EAAE,cADgB;AAE7BnB,MAAAA,SAAS,EAAEc,mBAAmB,CAACC,WAAD;AAFD,KAAtB;AAAA;AAFX,CAFK,CADF,EAWLxC,OAAO,CACLP,GAAG,CAACU,SAAS,CAACW,qBAAX,CADE,EAEL;AACE4B,EAAAA,IAAI,EAAE,uBADR;AAEEC,EAAAA,OAAO,EAAE;AACPE,IAAAA,cAAc,EAAE,CAAC,iBAAD;AADT;AAFX,CAFK,CAXF,CAAP,CAoBE5C,UAAU,CAAaI,kBAAb,CApBZ,CADkC,CAApC;;AAwBA,IAAMyC,YAAY,GAAG,SAAfA,YAAe,CAAAxC,KAAK,EAAI;AAC5B,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGS,cAAH,SAAGA,cAAH;AAAA,QAAmBC,eAAnB,SAAmBA,eAAnB;AAAA,QAAoCN,qBAApC,SAAoCA,qBAApC;AAAA,WACC,oBAAC,kBAAD,oBACMJ,KADN;AAEE,MAAA,cAAc,EAAES,cAFlB;AAGE,MAAA,eAAe,EAAEC,eAHnB;AAIE,MAAA,qBAAqB,EAAEN,qBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD;AAAA,GADH,CADF;AAYD,CAbD;;AAeA,eAAeoC,YAAf","sourcesContent":["import { AppConsumer } from 'appContext';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { IRouterProps } from 'modules/common/types';\nimport { Alert, router, withProps } from 'modules/common/utils';\nimport { generatePaginationParams } from 'modules/common/utils/router';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport Histories from '../components/Histories';\nimport { mutations, queries } from '../graphql';\nimport { ImportHistoriesQueryResponse, RemoveMutationResponse } from '../types';\n\ntype Props = {\n  queryParams: any;\n  showLoadingBar: (isRemovingImport: boolean) => void;\n  closeLoadingBar: () => void;\n  isDoneIndicatorAction: boolean;\n};\n\ntype FinalProps = {\n  historiesQuery: ImportHistoriesQueryResponse;\n} & Props &\n  IRouterProps &\n  RemoveMutationResponse;\n\ntype State = {\n  loading: boolean;\n};\n\nclass HistoriesContainer extends React.Component<FinalProps, State> {\n  constructor(props: FinalProps) {\n    super(props);\n\n    this.state = {\n      loading: false\n    };\n  }\n\n  componentDidUpdate(prevProps: FinalProps) {\n    if (this.props.isDoneIndicatorAction !== prevProps.isDoneIndicatorAction) {\n      this.props.historiesQuery.refetch();\n    }\n  }\n\n  render() {\n    const {\n      historiesQuery,\n      history,\n      importHistoriesRemove,\n      showLoadingBar,\n      closeLoadingBar\n    } = this.props;\n\n    if (!router.getParam(history, 'type')) {\n      router.setParams(history, { type: 'customer' }, true);\n    }\n\n    const currentType = router.getParam(history, 'type');\n\n    const removeHistory = historyId => {\n      // reset top indicator\n      closeLoadingBar();\n\n      localStorage.setItem('erxes_import_data', historyId);\n      localStorage.setItem('erxes_import_data_type', 'remove');\n\n      showLoadingBar(true);\n\n      importHistoriesRemove({\n        variables: { _id: historyId }\n      })\n        .then(() => {\n          historiesQuery.refetch();\n        })\n        .catch(e => {\n          Alert.error(e.message);\n          closeLoadingBar();\n        });\n    };\n\n    const histories = historiesQuery.importHistories || {};\n\n    const updatedProps = {\n      ...this.props,\n      histories: histories.list || [],\n      loading: historiesQuery.loading || this.state.loading,\n      removeHistory,\n      currentType,\n      totalCount: histories.count || 0\n    };\n\n    return <Histories {...updatedProps} />;\n  }\n}\n\nconst historiesListParams = queryParams => ({\n  ...generatePaginationParams(queryParams),\n  type: queryParams.type || 'customer'\n});\n\nconst HistoriesWithProps = withProps<Props>(\n  compose(\n    graphql<Props, ImportHistoriesQueryResponse, { type: string }>(\n      gql(queries.histories),\n      {\n        name: 'historiesQuery',\n        options: ({ queryParams }) => ({\n          fetchPolicy: 'network-only',\n          variables: historiesListParams(queryParams)\n        })\n      }\n    ),\n    graphql<Props, RemoveMutationResponse, { _id: string }>(\n      gql(mutations.importHistoriesRemove),\n      {\n        name: 'importHistoriesRemove',\n        options: {\n          refetchQueries: ['importHistories']\n        }\n      }\n    )\n  )(withRouter<FinalProps>(HistoriesContainer))\n);\n\nconst WithConsumer = props => {\n  return (\n    <AppConsumer>\n      {({ showLoadingBar, closeLoadingBar, isDoneIndicatorAction }) => (\n        <HistoriesWithProps\n          {...props}\n          showLoadingBar={showLoadingBar}\n          closeLoadingBar={closeLoadingBar}\n          isDoneIndicatorAction={isDoneIndicatorAction}\n        />\n      )}\n    </AppConsumer>\n  );\n};\n\nexport default WithConsumer;\n"]},"metadata":{},"sourceType":"module"}