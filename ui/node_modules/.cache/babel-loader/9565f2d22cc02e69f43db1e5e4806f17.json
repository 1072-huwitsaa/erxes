{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/MainActionBar.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { PageHeader } from 'modules/boards/styles/header';\nimport { getDefaultBoardAndPipelines } from 'modules/boards/utils';\nimport Spinner from 'modules/common/components/Spinner';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { STORAGE_BOARD_KEY, STORAGE_PIPELINE_KEY } from '../constants';\nimport { queries } from '../graphql';\nvar FILTER_PARAMS = ['search', 'userIds', 'priority', 'assignedUserIds', 'labelIds', 'productIds', 'companyIds', 'customerIds', 'closeDateType'];\n\nvar generateQueryParams = function generateQueryParams(_ref) {\n  var location = _ref.location;\n  return queryString.parse(location.search);\n};\n\nexport var getBoardId = function getBoardId(_ref2) {\n  var location = _ref2.location;\n  var queryParams = generateQueryParams({\n    location: location\n  });\n  return queryParams.id;\n};\nvar defaultParams = ['id', 'pipelineId'];\n/*\n * Main board component\n */\n\nvar Main =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Main, _React$Component);\n\n  function Main() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Main)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSearch = function (search) {\n      if (!search) {\n        return routerUtils.removeParams(_this.props.history, 'search');\n      }\n\n      routerUtils.setParams(_this.props.history, {\n        search: search\n      });\n    };\n\n    _this.onSelect = function (values, name) {\n      var params = generateQueryParams(_this.props.history);\n\n      if (params.closeDateType === values) {\n        return routerUtils.removeParams(_this.props.history, name);\n      }\n\n      return routerUtils.setParams(_this.props.history, _defineProperty({}, name, values));\n    };\n\n    _this.isFiltered = function () {\n      var params = generateQueryParams(_this.props.history);\n\n      for (var param in params) {\n        if (FILTER_PARAMS.includes(param)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.clearFilter = function () {\n      var params = generateQueryParams(_this.props.history);\n      var remainedParams = Object.keys(params).filter(function (key) {\n        return !defaultParams.includes(key);\n      });\n      routerUtils.removeParams.apply(routerUtils, [_this.props.history].concat(_toConsumableArray(remainedParams)));\n    };\n\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          history = _this$props.history,\n          location = _this$props.location,\n          boardsQuery = _this$props.boardsQuery,\n          boardGetLastQuery = _this$props.boardGetLastQuery,\n          boardDetailQuery = _this$props.boardDetailQuery,\n          type = _this$props.type,\n          middleContent = _this$props.middleContent;\n\n      if (boardsQuery.loading) {\n        return React.createElement(PageHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }\n\n      var queryParams = generateQueryParams({\n        location: location\n      });\n      var boardId = getBoardId({\n        location: location\n      });\n      var pipelineId = queryParams.pipelineId;\n\n      var _getDefaultBoardAndPi = getDefaultBoardAndPipelines(),\n          defaultBoards = _getDefaultBoardAndPi.defaultBoards,\n          defaultPipelines = _getDefaultBoardAndPi.defaultPipelines;\n\n      if (boardId && pipelineId) {\n        defaultBoards[type] = boardId;\n        defaultPipelines[type] = pipelineId;\n        localStorage.setItem(STORAGE_BOARD_KEY, JSON.stringify(defaultBoards));\n        localStorage.setItem(STORAGE_PIPELINE_KEY, JSON.stringify(defaultPipelines));\n      } // wait for load\n\n\n      if (boardDetailQuery && boardDetailQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n      }\n\n      if (boardGetLastQuery && boardGetLastQuery.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        });\n      }\n\n      var lastBoard = boardGetLastQuery && boardGetLastQuery.boardGetLast;\n      var currentBoard = boardDetailQuery && boardDetailQuery.boardDetail; // if there is no boardId in queryparams and there is one in localstorage\n      // then put those in queryparams\n\n      var _ref3 = [defaultBoards[type], defaultPipelines[type]],\n          defaultBoardId = _ref3[0],\n          defaultPipelineId = _ref3[1];\n\n      if (!boardId && defaultBoardId) {\n        routerUtils.setParams(history, {\n          id: defaultBoardId,\n          pipelineId: defaultPipelineId\n        });\n        return null;\n      } // if there is no boardId in queryparams and there is lastBoard\n      // then put lastBoard._id and this board's first pipelineId to queryparams\n\n\n      if (!boardId && lastBoard && lastBoard.pipelines && lastBoard.pipelines.length > 0) {\n        var _lastBoard$pipelines = _slicedToArray(lastBoard.pipelines, 1),\n            firstPipeline = _lastBoard$pipelines[0];\n\n        routerUtils.setParams(history, {\n          id: lastBoard._id,\n          pipelineId: firstPipeline._id\n        });\n        return null;\n      } // If there is an invalid boardId localstorage then remove invalid keys\n      // and reload the page\n\n\n      if (!currentBoard && boardId) {\n        delete defaultBoards[type];\n        delete defaultPipelines[type];\n        localStorage.setItem(STORAGE_BOARD_KEY, JSON.stringify(defaultBoards));\n        localStorage.setItem(STORAGE_PIPELINE_KEY, JSON.stringify(defaultPipelines));\n        window.location.href = \"/\".concat(type, \"/board\");\n        return null;\n      }\n\n      var pipelines = currentBoard ? currentBoard.pipelines || [] : [];\n      var currentPipeline = pipelineId ? pipelines.find(function (pipe) {\n        return pipe._id === pipelineId;\n      }) : pipelines[0];\n      var props = {\n        middleContent: middleContent,\n        onSearch: this.onSearch,\n        queryParams: queryParams,\n        history: history,\n        currentBoard: currentBoard,\n        currentPipeline: currentPipeline,\n        boards: boardsQuery.boards || []\n      };\n\n      var extendedProps = _objectSpread({}, props, {\n        type: type,\n        onSelect: this.onSelect,\n        isFiltered: this.isFiltered,\n        clearFilter: this.clearFilter\n      });\n\n      var Component = this.props.component;\n      return React.createElement(Component, Object.assign({}, extendedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Main;\n}(React.Component);\n\nvar MainActionBarContainer = withProps(compose(graphql(gql(queries.boards), {\n  name: 'boardsQuery',\n  options: function options(_ref4) {\n    var type = _ref4.type;\n    return {\n      variables: {\n        type: type\n      }\n    };\n  }\n}), graphql(gql(queries.boardGetLast), {\n  name: 'boardGetLastQuery',\n  skip: getBoardId,\n  options: function options(_ref5) {\n    var type = _ref5.type;\n    return {\n      variables: {\n        type: type\n      }\n    };\n  }\n}), graphql(gql(queries.boardDetail), {\n  name: 'boardDetailQuery',\n  skip: function skip(props) {\n    return !getBoardId(props);\n  },\n  options: function options(props) {\n    return {\n      variables: {\n        _id: getBoardId(props)\n      }\n    };\n  }\n}))(Main));\nexport default withRouter(MainActionBarContainer);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/MainActionBar.tsx"],"names":["gql","compose","PageHeader","getDefaultBoardAndPipelines","Spinner","router","routerUtils","withProps","queryString","React","graphql","withRouter","STORAGE_BOARD_KEY","STORAGE_PIPELINE_KEY","queries","FILTER_PARAMS","generateQueryParams","location","parse","search","getBoardId","queryParams","id","defaultParams","Main","onSearch","removeParams","props","history","setParams","onSelect","values","name","params","closeDateType","isFiltered","param","includes","clearFilter","remainedParams","Object","keys","filter","key","boardsQuery","boardGetLastQuery","boardDetailQuery","type","middleContent","loading","boardId","pipelineId","defaultBoards","defaultPipelines","localStorage","setItem","JSON","stringify","lastBoard","boardGetLast","currentBoard","boardDetail","defaultBoardId","defaultPipelineId","pipelines","length","firstPipeline","_id","window","href","currentPipeline","find","pipe","boards","extendedProps","Component","component","MainActionBarContainer","options","variables","skip"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { PageHeader } from 'modules/boards/styles/header';\nimport { getDefaultBoardAndPipelines } from 'modules/boards/utils';\nimport Spinner from 'modules/common/components/Spinner';\nimport { IRouterProps } from 'modules/common/types';\nimport { router as routerUtils, withProps } from 'modules/common/utils';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { STORAGE_BOARD_KEY, STORAGE_PIPELINE_KEY } from '../constants';\nimport { queries } from '../graphql';\nimport {\n  BoardDetailQueryResponse,\n  BoardsGetLastQueryResponse,\n  BoardsQueryResponse\n} from '../types';\n\ntype Props = {\n  type: string;\n  component: any;\n  middleContent?: () => React.ReactNode;\n} & IRouterProps;\n\ntype FinalProps = {\n  boardsQuery: BoardsQueryResponse;\n  boardGetLastQuery?: BoardsGetLastQueryResponse;\n  boardDetailQuery?: BoardDetailQueryResponse;\n} & Props;\n\nconst FILTER_PARAMS = [\n  'search',\n  'userIds',\n  'priority',\n  'assignedUserIds',\n  'labelIds',\n  'productIds',\n  'companyIds',\n  'customerIds',\n  'closeDateType'\n];\n\nconst generateQueryParams = ({ location }) => {\n  return queryString.parse(location.search);\n};\n\nexport const getBoardId = ({ location }) => {\n  const queryParams = generateQueryParams({ location });\n  return queryParams.id;\n};\n\nconst defaultParams = ['id', 'pipelineId'];\n\n/*\n * Main board component\n */\nclass Main extends React.Component<FinalProps> {\n  onSearch = (search: string) => {\n    if (!search) {\n      return routerUtils.removeParams(this.props.history, 'search');\n    }\n\n    routerUtils.setParams(this.props.history, { search });\n  };\n\n  onSelect = (values: string[] | string, name: string) => {\n    const params = generateQueryParams(this.props.history);\n\n    if (params.closeDateType === values) {\n      return routerUtils.removeParams(this.props.history, name);\n    }\n\n    return routerUtils.setParams(this.props.history, { [name]: values });\n  };\n\n  isFiltered = (): boolean => {\n    const params = generateQueryParams(this.props.history);\n\n    for (const param in params) {\n      if (FILTER_PARAMS.includes(param)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  clearFilter = () => {\n    const params = generateQueryParams(this.props.history);\n\n    const remainedParams = Object.keys(params).filter(\n      key => !defaultParams.includes(key)\n    );\n\n    routerUtils.removeParams(this.props.history, ...remainedParams);\n  };\n\n  render() {\n    const {\n      history,\n      location,\n      boardsQuery,\n      boardGetLastQuery,\n      boardDetailQuery,\n      type,\n      middleContent\n    } = this.props;\n\n    if (boardsQuery.loading) {\n      return <PageHeader />;\n    }\n\n    const queryParams = generateQueryParams({ location });\n    const boardId = getBoardId({ location });\n    const { pipelineId } = queryParams;\n\n    const { defaultBoards, defaultPipelines } = getDefaultBoardAndPipelines();\n\n    if (boardId && pipelineId) {\n      defaultBoards[type] = boardId;\n      defaultPipelines[type] = pipelineId;\n\n      localStorage.setItem(STORAGE_BOARD_KEY, JSON.stringify(defaultBoards));\n      localStorage.setItem(\n        STORAGE_PIPELINE_KEY,\n        JSON.stringify(defaultPipelines)\n      );\n    }\n\n    // wait for load\n    if (boardDetailQuery && boardDetailQuery.loading) {\n      return <Spinner />;\n    }\n\n    if (boardGetLastQuery && boardGetLastQuery.loading) {\n      return <Spinner />;\n    }\n\n    const lastBoard = boardGetLastQuery && boardGetLastQuery.boardGetLast;\n    const currentBoard = boardDetailQuery && boardDetailQuery.boardDetail;\n\n    // if there is no boardId in queryparams and there is one in localstorage\n    // then put those in queryparams\n    const [defaultBoardId, defaultPipelineId] = [\n      defaultBoards[type],\n      defaultPipelines[type]\n    ];\n\n    if (!boardId && defaultBoardId) {\n      routerUtils.setParams(history, {\n        id: defaultBoardId,\n        pipelineId: defaultPipelineId\n      });\n\n      return null;\n    }\n\n    // if there is no boardId in queryparams and there is lastBoard\n    // then put lastBoard._id and this board's first pipelineId to queryparams\n    if (\n      !boardId &&\n      lastBoard &&\n      lastBoard.pipelines &&\n      lastBoard.pipelines.length > 0\n    ) {\n      const [firstPipeline] = lastBoard.pipelines;\n\n      routerUtils.setParams(history, {\n        id: lastBoard._id,\n        pipelineId: firstPipeline._id\n      });\n\n      return null;\n    }\n\n    // If there is an invalid boardId localstorage then remove invalid keys\n    // and reload the page\n    if (!currentBoard && boardId) {\n      delete defaultBoards[type];\n      delete defaultPipelines[type];\n\n      localStorage.setItem(STORAGE_BOARD_KEY, JSON.stringify(defaultBoards));\n      localStorage.setItem(\n        STORAGE_PIPELINE_KEY,\n        JSON.stringify(defaultPipelines)\n      );\n\n      window.location.href = `/${type}/board`;\n      return null;\n    }\n\n    const pipelines = currentBoard ? currentBoard.pipelines || [] : [];\n\n    const currentPipeline = pipelineId\n      ? pipelines.find(pipe => pipe._id === pipelineId)\n      : pipelines[0];\n\n    const props = {\n      middleContent,\n      onSearch: this.onSearch,\n      queryParams,\n      history,\n      currentBoard,\n      currentPipeline,\n      boards: boardsQuery.boards || []\n    };\n\n    const extendedProps = {\n      ...props,\n      type,\n      onSelect: this.onSelect,\n      isFiltered: this.isFiltered,\n      clearFilter: this.clearFilter\n    };\n\n    const Component = this.props.component;\n\n    return <Component {...extendedProps} />;\n  }\n}\n\nconst MainActionBarContainer = withProps<Props>(\n  compose(\n    graphql<Props, BoardsQueryResponse>(gql(queries.boards), {\n      name: 'boardsQuery',\n      options: ({ type }) => ({\n        variables: { type }\n      })\n    }),\n    graphql<Props, BoardsGetLastQueryResponse>(gql(queries.boardGetLast), {\n      name: 'boardGetLastQuery',\n      skip: getBoardId,\n      options: ({ type }) => ({\n        variables: { type }\n      })\n    }),\n    graphql<Props, BoardDetailQueryResponse, { _id: string }>(\n      gql(queries.boardDetail),\n      {\n        name: 'boardDetailQuery',\n        skip: props => !getBoardId(props),\n        options: props => ({\n          variables: { _id: getBoardId(props) }\n        })\n      }\n    )\n  )(Main)\n);\n\nexport default withRouter(MainActionBarContainer);\n"]},"metadata":{},"sourceType":"module"}