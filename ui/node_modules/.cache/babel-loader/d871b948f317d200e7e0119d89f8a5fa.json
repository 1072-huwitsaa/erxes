{"ast":null,"code":"import _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/leftSidebar/ConversationItem.tsx\";\nimport dayjs from 'dayjs';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport FormControl from 'modules/common/components/form/Control';\nimport IntegrationIcon from 'modules/common/components/IntegrationIcon';\nimport NameCard from 'modules/common/components/nameCard/NameCard';\nimport Tags from 'modules/common/components/Tags';\nimport Tip from 'modules/common/components/Tip';\nimport { readFile, renderFullName } from 'modules/common/utils';\nimport { CallLabel } from 'modules/inbox/styles';\nimport { cleanIntegrationKind } from 'modules/settings/integrations/containers/utils';\nimport React from 'react';\nimport strip from 'strip';\nimport { AssigneeImg, CheckBox, Count, CustomerName, FlexContent, FlexRoot, FlexWidth, Idle, MainInfo, MessageContent, RowContent, RowItem, SmallTextOneLine } from './styles';\n\nvar ConversationItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConversationItem, _React$Component);\n\n  function ConversationItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ConversationItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ConversationItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.toggleCheckbox = function (e) {\n      var _this$props = _this.props,\n          toggleCheckbox = _this$props.toggleCheckbox,\n          conversation = _this$props.conversation;\n      toggleCheckbox(conversation, e.target.checked);\n    };\n\n    _this.onClick = function (e) {\n      e.preventDefault();\n      var _this$props2 = _this.props,\n          onClick = _this$props2.onClick,\n          conversation = _this$props2.conversation;\n      onClick(conversation);\n    };\n\n    _this.onClickCheckBox = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.isIdle = function (integration, idleTime) {\n      var kind = integration.kind;\n\n      if (kind === 'form' || kind.includes('nylas') || kind === 'gmail' || _this.props.conversation.status === 'closed') {\n        return false;\n      } // become idle in 3 minutes\n\n\n      return idleTime >= 3;\n    };\n\n    return _this;\n  }\n\n  _createClass(ConversationItem, [{\n    key: \"renderCheckbox\",\n    value: function renderCheckbox() {\n      if (!this.props.toggleCheckbox) {\n        return null;\n      }\n\n      return React.createElement(CheckBox, {\n        onClick: this.onClickCheckBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        componentClass: \"checkbox\",\n        onChange: this.toggleCheckbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"showMessageContent\",\n    value: function showMessageContent(kind, content) {\n      if (kind === 'callpro') {\n        return React.createElement(CallLabel, {\n          type: (content || '').toLocaleLowerCase(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, content);\n      }\n\n      return strip(content);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentUser = this.props.currentUser;\n      var _this$props3 = this.props,\n          conversation = _this$props3.conversation,\n          isActive = _this$props3.isActive,\n          _this$props3$selected = _this$props3.selectedIds,\n          selectedIds = _this$props3$selected === void 0 ? [] : _this$props3$selected;\n      var createdAt = conversation.createdAt,\n          updatedAt = conversation.updatedAt,\n          idleTime = conversation.idleTime,\n          content = conversation.content;\n      var customer = conversation.customer || {};\n      var integration = conversation.integration || {};\n      var brand = integration.brand || {};\n      var tags = conversation.tags || [];\n      var assignedUser = conversation.assignedUser;\n      var isExistingCustomer = customer && customer._id;\n      var isChecked = selectedIds.includes(conversation._id);\n      var messageCount = conversation.messageCount || 0;\n      var isRead = conversation.readUserIds && conversation.readUserIds.indexOf(currentUser._id) > -1;\n      return React.createElement(RowItem, {\n        onClick: this.onClick,\n        isActive: isActive,\n        isRead: isRead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(RowContent, {\n        isChecked: isChecked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.renderCheckbox(), React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(MainInfo, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, isExistingCustomer && React.createElement(NameCard.Avatar, {\n        size: 36,\n        letterCount: 1,\n        customer: customer,\n        icon: React.createElement(IntegrationIcon, {\n          integration: integration,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(FlexContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(CustomerName, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(FlexWidth, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, isExistingCustomer && renderFullName(customer)), React.createElement(\"time\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, dayjs(updatedAt || createdAt).fromNow(true))), React.createElement(SmallTextOneLine, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"to \", brand.name, \" via\", ' ', integration.kind === 'callpro' ? integration.name : cleanIntegrationKind(integration && integration.kind)))), React.createElement(MessageContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(FlexWidth, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this.showMessageContent(integration.kind, content || '')), React.createElement(FlexRoot, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, messageCount > 1 && React.createElement(Count, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, messageCount), assignedUser && React.createElement(Tip, {\n        key: assignedUser._id,\n        placement: \"top\",\n        text: assignedUser.details && assignedUser.details.fullName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(AssigneeImg, {\n        src: assignedUser.details && (assignedUser.details.avatar ? readFile(assignedUser.details.avatar) : '/images/avatar-colored.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })))), React.createElement(Tags, {\n        tags: tags,\n        limit: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }))), this.isIdle(integration, idleTime) && React.createElement(Tip, {\n        placement: \"left\",\n        text: \"Idle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Idle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ConversationItem;\n}(React.Component);\n\nexport default withCurrentUser(ConversationItem);","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/components/leftSidebar/ConversationItem.tsx"],"names":["dayjs","withCurrentUser","FormControl","IntegrationIcon","NameCard","Tags","Tip","readFile","renderFullName","CallLabel","cleanIntegrationKind","React","strip","AssigneeImg","CheckBox","Count","CustomerName","FlexContent","FlexRoot","FlexWidth","Idle","MainInfo","MessageContent","RowContent","RowItem","SmallTextOneLine","ConversationItem","toggleCheckbox","e","props","conversation","target","checked","onClick","preventDefault","onClickCheckBox","stopPropagation","isIdle","integration","idleTime","kind","includes","status","content","toLocaleLowerCase","currentUser","isActive","selectedIds","createdAt","updatedAt","customer","brand","tags","assignedUser","isExistingCustomer","_id","isChecked","messageCount","isRead","readUserIds","indexOf","renderCheckbox","fromNow","name","showMessageContent","details","fullName","avatar","Component"],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport FormControl from 'modules/common/components/form/Control';\nimport IntegrationIcon from 'modules/common/components/IntegrationIcon';\nimport NameCard from 'modules/common/components/nameCard/NameCard';\nimport Tags from 'modules/common/components/Tags';\nimport Tip from 'modules/common/components/Tip';\nimport { readFile, renderFullName } from 'modules/common/utils';\nimport { CallLabel } from 'modules/inbox/styles';\nimport { cleanIntegrationKind } from 'modules/settings/integrations/containers/utils';\nimport React from 'react';\nimport strip from 'strip';\nimport { IUser } from '../../../auth/types';\nimport { ICustomer } from '../../../customers/types';\nimport { IBrand } from '../../../settings/brands/types';\nimport { IIntegration } from '../../../settings/integrations/types';\nimport { IConversation } from '../../types';\nimport {\n  AssigneeImg,\n  CheckBox,\n  Count,\n  CustomerName,\n  FlexContent,\n  FlexRoot,\n  FlexWidth,\n  Idle,\n  MainInfo,\n  MessageContent,\n  RowContent,\n  RowItem,\n  SmallTextOneLine\n} from './styles';\n\ntype Props = {\n  conversation: IConversation;\n  channelId?: string;\n  isActive: boolean;\n  onClick: (conversation: IConversation) => void;\n  toggleCheckbox: (conversation: IConversation, checked: boolean) => void;\n  selectedIds?: string[];\n  currentUser: IUser;\n};\n\nclass ConversationItem extends React.Component<Props> {\n  toggleCheckbox = (e: React.FormEvent<HTMLElement>) => {\n    const { toggleCheckbox, conversation } = this.props;\n\n    toggleCheckbox(conversation, (e.target as HTMLInputElement).checked);\n  };\n\n  onClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    const { onClick, conversation } = this.props;\n\n    onClick(conversation);\n  };\n\n  renderCheckbox() {\n    if (!this.props.toggleCheckbox) {\n      return null;\n    }\n\n    return (\n      <CheckBox onClick={this.onClickCheckBox}>\n        <FormControl componentClass=\"checkbox\" onChange={this.toggleCheckbox} />\n      </CheckBox>\n    );\n  }\n\n  onClickCheckBox = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  isIdle = (integration: IIntegration, idleTime: number) => {\n    const kind = integration.kind;\n\n    if (\n      kind === 'form' ||\n      kind.includes('nylas') ||\n      kind === 'gmail' ||\n      this.props.conversation.status === 'closed'\n    ) {\n      return false;\n    }\n\n    // become idle in 3 minutes\n    return idleTime >= 3;\n  };\n\n  showMessageContent(kind: string, content: string) {\n    if (kind === 'callpro') {\n      return (\n        <CallLabel type={(content || '').toLocaleLowerCase()}>\n          {content}\n        </CallLabel>\n      );\n    }\n\n    return strip(content);\n  }\n\n  render() {\n    const { currentUser } = this.props;\n    const { conversation, isActive, selectedIds = [] } = this.props;\n    const { createdAt, updatedAt, idleTime, content } = conversation;\n    const customer = conversation.customer || ({} as ICustomer);\n    const integration = conversation.integration || ({} as IIntegration);\n    const brand = integration.brand || ({} as IBrand);\n    const tags = conversation.tags || [];\n    const assignedUser = conversation.assignedUser;\n    const isExistingCustomer = customer && customer._id;\n    const isChecked = selectedIds.includes(conversation._id);\n    const messageCount = conversation.messageCount || 0;\n\n    const isRead =\n      conversation.readUserIds &&\n      conversation.readUserIds.indexOf(currentUser._id) > -1;\n\n    return (\n      <RowItem onClick={this.onClick} isActive={isActive} isRead={isRead}>\n        <RowContent isChecked={isChecked}>\n          {this.renderCheckbox()}\n          <FlexContent>\n            <MainInfo>\n              {isExistingCustomer && (\n                <NameCard.Avatar\n                  size={36}\n                  letterCount={1}\n                  customer={customer}\n                  icon={<IntegrationIcon integration={integration} />}\n                />\n              )}\n              <FlexContent>\n                <CustomerName>\n                  <FlexWidth>\n                    {isExistingCustomer && renderFullName(customer)}\n                  </FlexWidth>\n                  <time>{dayjs(updatedAt || createdAt).fromNow(true)}</time>\n                </CustomerName>\n\n                <SmallTextOneLine>\n                  to {brand.name} via{' '}\n                  {integration.kind === 'callpro'\n                    ? integration.name\n                    : cleanIntegrationKind(integration && integration.kind)}\n                </SmallTextOneLine>\n              </FlexContent>\n            </MainInfo>\n\n            <MessageContent>\n              <FlexWidth>\n                {this.showMessageContent(integration.kind, content || '')}\n              </FlexWidth>\n              <FlexRoot>\n                {messageCount > 1 && <Count>{messageCount}</Count>}\n                {assignedUser && (\n                  <Tip\n                    key={assignedUser._id}\n                    placement=\"top\"\n                    text={assignedUser.details && assignedUser.details.fullName}\n                  >\n                    <AssigneeImg\n                      src={\n                        assignedUser.details &&\n                        (assignedUser.details.avatar\n                          ? readFile(assignedUser.details.avatar)\n                          : '/images/avatar-colored.svg')\n                      }\n                    />\n                  </Tip>\n                )}\n              </FlexRoot>\n            </MessageContent>\n            <Tags tags={tags} limit={3} />\n          </FlexContent>\n        </RowContent>\n        {this.isIdle(integration, idleTime) && (\n          <Tip placement=\"left\" text=\"Idle\">\n            <Idle />\n          </Tip>\n        )}\n      </RowItem>\n    );\n  }\n}\n\nexport default withCurrentUser(ConversationItem);\n"]},"metadata":{},"sourceType":"module"}