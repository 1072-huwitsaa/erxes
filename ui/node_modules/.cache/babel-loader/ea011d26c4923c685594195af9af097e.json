{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/knowledge/KnowledgeList.tsx\";\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport KnowledgeList from '../../components/knowledge/KnowledgeList';\nimport { mutations, queries } from '../../graphql';\n\nvar KnowledgeBaseContainer = function KnowledgeBaseContainer(props) {\n  var currentCategoryId = props.currentCategoryId,\n      topicsQuery = props.topicsQuery,\n      topicsCountQuery = props.topicsCountQuery,\n      removeTopicsMutation = props.removeTopicsMutation,\n      queryParams = props.queryParams,\n      articlesCount = props.articlesCount; // remove action\n\n  var remove = function remove(topicId) {\n    confirm().then(function () {\n      removeTopicsMutation({\n        variables: {\n          _id: topicId\n        }\n      }).then(function () {\n        topicsQuery.refetch();\n        topicsCountQuery.refetch();\n        Alert.success('You successfully deleted a knowledge base');\n      }).catch(function (error) {\n        Alert.error(error.message);\n      });\n    });\n  };\n\n  var renderButton = function renderButton(_ref) {\n    var name = _ref.name,\n        values = _ref.values,\n        isSubmitted = _ref.isSubmitted,\n        callback = _ref.callback,\n        object = _ref.object;\n\n    var callBackResponse = function callBackResponse() {\n      topicsQuery.refetch();\n      topicsCountQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return React.createElement(ButtonMutate, {\n      mutation: object ? mutations.knowledgeBaseTopicsEdit : mutations.knowledgeBaseTopicsAdd,\n      variables: values,\n      callback: callBackResponse,\n      isSubmitted: isSubmitted,\n      type: \"submit\",\n      successMessage: \"You successfully \".concat(object ? 'updated' : 'added', \" a \").concat(name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  };\n\n  var extendedProps = _objectSpread({}, props, {\n    remove: remove,\n    renderButton: renderButton,\n    currentCategoryId: currentCategoryId,\n    queryParams: queryParams,\n    articlesCount: articlesCount,\n    topics: topicsQuery.knowledgeBaseTopics || [],\n    loading: topicsQuery.loading,\n    refetch: topicsQuery.refetch,\n    topicsCount: topicsCountQuery.knowledgeBaseTopicsTotalCount || 0\n  });\n\n  return React.createElement(KnowledgeList, Object.assign({}, extendedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n};\n\nexport default withProps(compose(graphql(gql(queries.knowledgeBaseTopics), {\n  name: 'topicsQuery',\n  options: function options() {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.knowledgeBaseTopicsTotalCount), {\n  name: 'topicsCountQuery'\n}), graphql(gql(mutations.knowledgeBaseTopicsRemove), {\n  name: 'removeTopicsMutation',\n  options: function options(_ref2) {\n    var currentCategoryId = _ref2.currentCategoryId;\n    return {\n      refetchQueries: !currentCategoryId ? [] : [{\n        query: gql(queries.knowledgeBaseArticlesTotalCount),\n        variables: {\n          categoryIds: [currentCategoryId]\n        }\n      }, {\n        query: gql(queries.knowledgeBaseCategoryDetail),\n        variables: {\n          _id: currentCategoryId\n        }\n      }]\n    };\n  }\n}))(KnowledgeBaseContainer));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/knowledgeBase/containers/knowledge/KnowledgeList.tsx"],"names":["gql","compose","ButtonMutate","Alert","confirm","withProps","React","graphql","KnowledgeList","mutations","queries","KnowledgeBaseContainer","props","currentCategoryId","topicsQuery","topicsCountQuery","removeTopicsMutation","queryParams","articlesCount","remove","topicId","then","variables","_id","refetch","success","catch","error","message","renderButton","name","values","isSubmitted","callback","object","callBackResponse","knowledgeBaseTopicsEdit","knowledgeBaseTopicsAdd","extendedProps","topics","knowledgeBaseTopics","loading","topicsCount","knowledgeBaseTopicsTotalCount","options","fetchPolicy","knowledgeBaseTopicsRemove","refetchQueries","query","knowledgeBaseArticlesTotalCount","categoryIds","knowledgeBaseCategoryDetail"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport ButtonMutate from 'modules/common/components/ButtonMutate';\nimport { IButtonMutateProps } from 'modules/common/types';\nimport { Alert, confirm, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport KnowledgeList from '../../components/knowledge/KnowledgeList';\nimport { mutations, queries } from '../../graphql';\nimport {\n  RemoveTopicsMutation,\n  TopicsQueryResponse,\n  TopicsTotalCountQueryResponse\n} from '../../types';\n\ntype Props = {\n  queryParams: any;\n  currentCategoryId: string;\n  articlesCount: number;\n};\n\ntype FinalProps = {\n  topicsQuery: TopicsQueryResponse;\n  topicsCountQuery: TopicsTotalCountQueryResponse;\n} & Props &\n  RemoveTopicsMutation;\n\nconst KnowledgeBaseContainer = (props: FinalProps) => {\n  const {\n    currentCategoryId,\n    topicsQuery,\n    topicsCountQuery,\n    removeTopicsMutation,\n    queryParams,\n    articlesCount\n  } = props;\n\n  // remove action\n  const remove = topicId => {\n    confirm().then(() => {\n      removeTopicsMutation({\n        variables: { _id: topicId }\n      })\n        .then(() => {\n          topicsQuery.refetch();\n          topicsCountQuery.refetch();\n\n          Alert.success('You successfully deleted a knowledge base');\n        })\n        .catch(error => {\n          Alert.error(error.message);\n        });\n    });\n  };\n\n  const renderButton = ({\n    name,\n    values,\n    isSubmitted,\n    callback,\n    object\n  }: IButtonMutateProps) => {\n    const callBackResponse = () => {\n      topicsQuery.refetch();\n      topicsCountQuery.refetch();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    return (\n      <ButtonMutate\n        mutation={\n          object\n            ? mutations.knowledgeBaseTopicsEdit\n            : mutations.knowledgeBaseTopicsAdd\n        }\n        variables={values}\n        callback={callBackResponse}\n        isSubmitted={isSubmitted}\n        type=\"submit\"\n        successMessage={`You successfully ${\n          object ? 'updated' : 'added'\n        } a ${name}`}\n      />\n    );\n  };\n\n  const extendedProps = {\n    ...props,\n    remove,\n    renderButton,\n    currentCategoryId,\n    queryParams,\n    articlesCount,\n    topics: topicsQuery.knowledgeBaseTopics || [],\n    loading: topicsQuery.loading,\n    refetch: topicsQuery.refetch,\n    topicsCount: topicsCountQuery.knowledgeBaseTopicsTotalCount || 0\n  };\n\n  return <KnowledgeList {...extendedProps} />;\n};\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, TopicsQueryResponse>(gql(queries.knowledgeBaseTopics), {\n      name: 'topicsQuery',\n      options: () => ({\n        fetchPolicy: 'network-only'\n      })\n    }),\n    graphql<Props, TopicsTotalCountQueryResponse>(\n      gql(queries.knowledgeBaseTopicsTotalCount),\n      {\n        name: 'topicsCountQuery'\n      }\n    ),\n    graphql<Props, RemoveTopicsMutation, { _id: string }>(\n      gql(mutations.knowledgeBaseTopicsRemove),\n      {\n        name: 'removeTopicsMutation',\n        options: ({ currentCategoryId }) => {\n          return {\n            refetchQueries: !currentCategoryId\n              ? []\n              : [\n                  {\n                    query: gql(queries.knowledgeBaseArticlesTotalCount),\n                    variables: { categoryIds: [currentCategoryId] }\n                  },\n                  {\n                    query: gql(queries.knowledgeBaseCategoryDetail),\n                    variables: { _id: currentCategoryId }\n                  }\n                ]\n          };\n        }\n      }\n    )\n  )(KnowledgeBaseContainer)\n);\n"]},"metadata":{},"sourceType":"module"}