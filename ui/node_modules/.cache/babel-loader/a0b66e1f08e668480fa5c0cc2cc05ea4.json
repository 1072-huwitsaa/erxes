{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/detail/BasicInfo.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/companies/graphql';\nimport ActionSection from 'modules/customers/components/common/ActionSection';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nvar BasicInfoContainer = function BasicInfoContainer(props) {\n  var company = props.company,\n      companiesRemove = props.companiesRemove,\n      companiesMerge = props.companiesMerge,\n      history = props.history;\n  var _id = company._id;\n\n  var remove = function remove() {\n    companiesRemove({\n      variables: {\n        companyIds: [_id]\n      }\n    }).then(function () {\n      Alert.success('You successfully deleted a company');\n      history.push('/companies');\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var merge = function merge(_ref) {\n    var ids = _ref.ids,\n        data = _ref.data;\n    companiesMerge({\n      variables: {\n        companyIds: ids,\n        companyFields: data\n      }\n    }).then(function (response) {\n      Alert.success('You successfully merged companies');\n      history.push(\"/companies/details/\".concat(response.data.companiesMerge._id));\n    }).catch(function (e) {\n      Alert.error(e.message);\n    });\n  };\n\n  var searchCompany = function searchCompany(searchValue, callback) {\n    client.query({\n      query: gql(queries.companies),\n      variables: {\n        searchValue: searchValue,\n        page: 1,\n        perPage: 10\n      }\n    }).then(function (response) {\n      if (typeof callback === 'function') {\n        callback(response.data.companies);\n      }\n    }).catch(function (error) {\n      Alert.error(error.message);\n    });\n  };\n\n  var updatedProps = _objectSpread({}, props, {\n    coc: company,\n    cocType: 'company',\n    remove: remove,\n    merge: merge,\n    search: searchCompany\n  });\n\n  return React.createElement(ActionSection, Object.assign({}, updatedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n};\n\nvar generateOptions = function generateOptions() {\n  return {\n    refetchQueries: ['companiesMain', 'companyCounts']\n  };\n};\n\nexport default withProps(compose(graphql(gql(mutations.companiesRemove), {\n  name: 'companiesRemove',\n  options: generateOptions\n}), graphql(gql(mutations.companiesMerge), {\n  name: 'companiesMerge',\n  options: generateOptions\n}))(withRouter(BasicInfoContainer)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/companies/containers/detail/BasicInfo.tsx"],"names":["client","gql","compose","Alert","withProps","mutations","queries","ActionSection","React","graphql","withRouter","BasicInfoContainer","props","company","companiesRemove","companiesMerge","history","_id","remove","variables","companyIds","then","success","push","catch","e","error","message","merge","ids","data","companyFields","response","searchCompany","searchValue","callback","query","companies","page","perPage","updatedProps","coc","cocType","search","generateOptions","refetchQueries","name","options"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { mutations, queries } from 'modules/companies/graphql';\nimport ActionSection from 'modules/customers/components/common/ActionSection';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\nimport { IUser } from '../../../auth/types';\nimport { IRouterProps } from '../../../common/types';\nimport {\n  ICompany,\n  MergeMutationResponse,\n  MergeMutationVariables,\n  RemoveMutationResponse,\n  RemoveMutationVariables\n} from '../../types';\n\ntype Props = {\n  company: ICompany;\n};\n\ntype FinalProps = { currentUser: IUser } & Props &\n  IRouterProps &\n  RemoveMutationResponse &\n  MergeMutationResponse;\n\nconst BasicInfoContainer = (props: FinalProps) => {\n  const { company, companiesRemove, companiesMerge, history } = props;\n\n  const { _id } = company;\n\n  const remove = () => {\n    companiesRemove({ variables: { companyIds: [_id] } })\n      .then(() => {\n        Alert.success('You successfully deleted a company');\n        history.push('/companies');\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const merge = ({ ids, data }) => {\n    companiesMerge({\n      variables: {\n        companyIds: ids,\n        companyFields: data\n      }\n    })\n      .then(response => {\n        Alert.success('You successfully merged companies');\n        history.push(`/companies/details/${response.data.companiesMerge._id}`);\n      })\n      .catch(e => {\n        Alert.error(e.message);\n      });\n  };\n\n  const searchCompany = (\n    searchValue: string,\n    callback: (data?: any) => void\n  ) => {\n    client\n      .query({\n        query: gql(queries.companies),\n        variables: { searchValue, page: 1, perPage: 10 }\n      })\n      .then((response: any): void => {\n        if (typeof callback === 'function') {\n          callback(response.data.companies);\n        }\n      })\n      .catch(error => {\n        Alert.error(error.message);\n      });\n  };\n\n  const updatedProps = {\n    ...props,\n    coc: company,\n    cocType: 'company',\n    remove,\n    merge,\n    search: searchCompany\n  };\n\n  return <ActionSection {...updatedProps} />;\n};\n\nconst generateOptions = () => ({\n  refetchQueries: ['companiesMain', 'companyCounts']\n});\n\nexport default withProps<Props>(\n  compose(\n    graphql<{}, RemoveMutationResponse, RemoveMutationVariables>(\n      gql(mutations.companiesRemove),\n      {\n        name: 'companiesRemove',\n        options: generateOptions\n      }\n    ),\n    graphql<{}, MergeMutationResponse, MergeMutationVariables>(\n      gql(mutations.companiesMerge),\n      {\n        name: 'companiesMerge',\n        options: generateOptions\n      }\n    )\n  )(withRouter<FinalProps>(BasicInfoContainer))\n);\n"]},"metadata":{},"sourceType":"module"}