{"ast":null,"code":"import _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/Sidebar.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport DumbSidebar from 'modules/inbox/components/conversationDetail/sidebar/Sidebar';\nimport { queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport { getConfig } from '../../utils';\nvar STORAGE_KEY = \"erxes_sidebar_section_config\";\n\nvar Sidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n\n  function Sidebar(props) {\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).call(this, props));\n\n    _this.toggleSection = function () {\n      var customerId = _this.props.conversation.customerId;\n\n      _this.getCustomerDetail(customerId);\n    };\n\n    _this.state = {\n      customer: {},\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getCustomerDetail(this.props.conversation.customerId);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var currentDetail = this.props.customerDetailQuery;\n      var nextDetail = nextProps.customerDetailQuery;\n      var current = currentDetail.customerDetail || {};\n      var next = nextDetail.customerDetail || {};\n\n      if (JSON.stringify(current) !== JSON.stringify(next)) {\n        this.getCustomerDetail(next._id);\n      }\n    }\n  }, {\n    key: \"getCustomerDetail\",\n    value: function getCustomerDetail(customerId) {\n      var _this2 = this;\n\n      if (!customerId) {\n        return null;\n      }\n\n      var sectionParams = getConfig(STORAGE_KEY);\n      this.setState({\n        loading: true\n      });\n      client.query({\n        query: gql(queries.generateCustomerDetailQuery(sectionParams)),\n        fetchPolicy: 'network-only',\n        variables: {\n          _id: customerId\n        }\n      }).then(function (_ref) {\n        var data = _ref.data;\n\n        if (data && data.customerDetail) {\n          _this2.setState({\n            customer: data.customerDetail,\n            loading: false\n          });\n        }\n      }).catch(function (error) {\n        console.log(error.message); // tslint:disable-line\n      });\n      return;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          customer = _this$state.customer,\n          loading = _this$state.loading;\n      var taggerRefetchQueries = [{\n        query: gql(queries.generateCustomerDetailQuery(getConfig(STORAGE_KEY))),\n        variables: {\n          _id: customer._id\n        }\n      }];\n\n      var updatedProps = _objectSpread({}, this.props, {\n        customer: customer,\n        loading: loading,\n        toggleSection: this.toggleSection,\n        taggerRefetchQueries: taggerRefetchQueries\n      });\n\n      return React.createElement(DumbSidebar, Object.assign({}, updatedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Sidebar;\n}(React.Component);\n\nexport default withProps(compose(graphql(gql(queries.generateCustomerDetailQuery(getConfig(STORAGE_KEY))), {\n  name: 'customerDetailQuery',\n  options: function options(_ref2) {\n    var conversation = _ref2.conversation;\n    return {\n      variables: {\n        _id: conversation.customerId\n      }\n    };\n  }\n}))(withCurrentUser(Sidebar)));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/inbox/containers/conversationDetail/Sidebar.tsx"],"names":["client","gql","compose","withCurrentUser","DumbSidebar","queries","React","graphql","withProps","getConfig","STORAGE_KEY","Sidebar","props","toggleSection","customerId","conversation","getCustomerDetail","state","customer","loading","nextProps","currentDetail","customerDetailQuery","nextDetail","current","customerDetail","next","JSON","stringify","_id","sectionParams","setState","query","generateCustomerDetailQuery","fetchPolicy","variables","then","data","catch","error","console","log","message","taggerRefetchQueries","updatedProps","Component","name","options"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport withCurrentUser from 'modules/auth/containers/withCurrentUser';\nimport { IUser } from 'modules/auth/types';\nimport DumbSidebar from 'modules/inbox/components/conversationDetail/sidebar/Sidebar';\nimport { queries } from 'modules/inbox/graphql';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withProps } from '../../../common/utils';\nimport {\n  CustomerDetailQueryResponse,\n  ICustomer\n} from '../../../customers/types';\nimport { IConversation } from '../../types';\nimport { getConfig } from '../../utils';\n\ntype Props = {\n  conversation: IConversation;\n};\n\ntype FinalProps = {\n  customerDetailQuery: CustomerDetailQueryResponse;\n  currentUser: IUser;\n} & Props;\n\ntype State = {\n  customer: ICustomer;\n  loading: boolean;\n};\n\nconst STORAGE_KEY = `erxes_sidebar_section_config`;\n\nclass Sidebar extends React.Component<FinalProps, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = { customer: {} as ICustomer, loading: false };\n  }\n\n  componentDidMount() {\n    this.getCustomerDetail(this.props.conversation.customerId);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentDetail = this.props.customerDetailQuery;\n    const nextDetail = nextProps.customerDetailQuery;\n\n    const current = currentDetail.customerDetail || {};\n    const next = nextDetail.customerDetail || {};\n\n    if (JSON.stringify(current) !== JSON.stringify(next)) {\n      this.getCustomerDetail(next._id);\n    }\n  }\n\n  getCustomerDetail(customerId?: string) {\n    if (!customerId) {\n      return null;\n    }\n\n    const sectionParams = getConfig(STORAGE_KEY);\n\n    this.setState({ loading: true });\n\n    client\n      .query({\n        query: gql(queries.generateCustomerDetailQuery(sectionParams)),\n        fetchPolicy: 'network-only',\n        variables: { _id: customerId }\n      })\n      .then(({ data }: { data: any }) => {\n        if (data && data.customerDetail) {\n          this.setState({ customer: data.customerDetail, loading: false });\n        }\n      })\n      .catch(error => {\n        console.log(error.message); // tslint:disable-line\n      });\n\n    return;\n  }\n\n  toggleSection = (): void => {\n    const customerId = this.props.conversation.customerId;\n\n    this.getCustomerDetail(customerId);\n  };\n\n  render() {\n    const { customer, loading } = this.state;\n\n    const taggerRefetchQueries = [\n      {\n        query: gql(queries.generateCustomerDetailQuery(getConfig(STORAGE_KEY))),\n        variables: { _id: customer._id }\n      }\n    ];\n\n    const updatedProps = {\n      ...this.props,\n      customer,\n      loading,\n      toggleSection: this.toggleSection,\n      taggerRefetchQueries\n    };\n\n    return <DumbSidebar {...updatedProps} />;\n  }\n}\n\nexport default withProps<Props>(\n  compose(\n    graphql<Props, CustomerDetailQueryResponse, { _id?: string }>(\n      gql(queries.generateCustomerDetailQuery(getConfig(STORAGE_KEY))),\n      {\n        name: 'customerDetailQuery',\n        options: ({ conversation }) => ({\n          variables: {\n            _id: conversation.customerId\n          }\n        })\n      }\n    )\n  )(withCurrentUser(Sidebar))\n);\n"]},"metadata":{},"sourceType":"module"}