{"ast":null,"code":"import _defineProperty from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/anu-ujin/Works/open-source/erxes/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/PipelineContext.tsx\";\nimport client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { requestIdleCallback } from 'request-idle-callback';\nimport { mutations, queries, subscriptions } from '../graphql';\nimport { DragDisabler } from '../styles/common';\nimport { invalidateCache } from '../utils';\nimport { reorder, reorderItemMap } from '../utils';\nimport InvisibleItemInUrl from './InvisibleItemInUrl';\nvar PipelineContext = React.createContext({});\nexport var PipelineConsumer = PipelineContext.Consumer;\n\nvar PipelineProviderInner =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PipelineProviderInner, _React$Component);\n\n  function PipelineProviderInner(props) {\n    var _this;\n\n    _classCallCheck(this, PipelineProviderInner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PipelineProviderInner).call(this, props));\n\n    _this.findItemIndex = function (stageId, aboveItemId) {\n      var itemMap = _this.state.itemMap;\n\n      if (!aboveItemId) {\n        return;\n      }\n\n      var index;\n      var items = itemMap[stageId] || [];\n\n      for (var i = 0; i < items.length; i++) {\n        var _item = items[i];\n\n        if (_item._id === aboveItemId) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    };\n\n    _this.onDragEnd = function (result) {\n      var saveToDb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // dropped nowhere\n      if (!result.destination) {\n        return;\n      }\n\n      var source = result.source;\n      var destination = result.destination; // did not move anywhere - can bail early\n\n      if (source.droppableId === destination.droppableId && source.index === destination.index) {\n        return;\n      } // reordering stage\n\n\n      if (result.type === 'STAGE') {\n        var stageIds = reorder(_this.state.stageIds, source.index, destination.index);\n\n        _this.setState({\n          stageIds: stageIds\n        }); // save orders to database\n\n\n        if (saveToDb) {\n          return _this.saveStageOrders(stageIds);\n        }\n      }\n\n      var _reorderItemMap = reorderItemMap({\n        itemMap: _this.state.itemMap,\n        source: source,\n        destination: destination\n      }),\n          itemMap = _reorderItemMap.itemMap,\n          target = _reorderItemMap.target,\n          aboveItem = _reorderItemMap.aboveItem;\n\n      _this.setState({\n        itemMap: itemMap\n      });\n\n      invalidateCache(); // saving to database\n\n      if (saveToDb) {\n        _this.itemChange({\n          itemId: target._id,\n          aboveItemId: aboveItem ? aboveItem._id : '',\n          destinationStageId: destination.droppableId,\n          sourceStageId: source.droppableId\n        });\n      }\n    };\n\n    _this.refetchQueryVariables = function () {\n      var _this$props = _this.props,\n          options = _this$props.options,\n          queryParams = _this$props.queryParams;\n      return {\n        search: queryParams.search,\n        customerIds: queryParams.customerIds,\n        companyIds: queryParams.companyIds,\n        assignedUserIds: queryParams.assignedUserIds,\n        extraParams: options.getExtraParams(queryParams),\n        closeDateType: queryParams.closeDateType,\n        userIds: queryParams.userIds\n      };\n    };\n\n    _this.refetchQueryBuild = function (stageId) {\n      return {\n        query: gql(queries.stageDetail),\n        variables: _objectSpread({\n          _id: stageId\n        }, _this.refetchQueryVariables())\n      };\n    };\n\n    _this.refetchStagesQueryBuild = function (pipelineId) {\n      return {\n        query: gql(queries.stages),\n        variables: _objectSpread({\n          pipelineId: pipelineId\n        }, _this.refetchQueryVariables())\n      };\n    };\n\n    _this.itemChange = function (args) {\n      var itemId = args.itemId,\n          aboveItemId = args.aboveItemId,\n          destinationStageId = args.destinationStageId,\n          sourceStageId = args.sourceStageId;\n      var options = _this.props.options;\n      var refetchQueries = [_this.refetchQueryBuild(destinationStageId)];\n\n      if (sourceStageId) {\n        refetchQueries.unshift(_this.refetchQueryBuild(sourceStageId));\n      }\n\n      var proccessId = Math.random().toString();\n      localStorage.setItem('proccessId', proccessId);\n      client.mutate({\n        mutation: gql(options.mutations.changeMutation),\n        variables: {\n          itemId: itemId,\n          aboveItemId: aboveItemId,\n          destinationStageId: destinationStageId,\n          sourceStageId: sourceStageId,\n          proccessId: proccessId\n        },\n        refetchQueries: refetchQueries\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    _this.saveStageOrders = function (stageIds) {\n      var pipeline = _this.props.pipeline;\n      client.mutate({\n        mutation: gql(mutations.stagesUpdateOrder),\n        variables: {\n          orders: stageIds.map(function (stageId, index) {\n            return {\n              _id: stageId,\n              order: index\n            };\n          })\n        },\n        refetchQueries: [_this.refetchStagesQueryBuild(pipeline._id)]\n      }).catch(function (e) {\n        Alert.error(e.message);\n      });\n    };\n\n    _this.onLoadStage = function (stageId, items) {\n      var _this$state = _this.state,\n          itemMap = _this$state.itemMap,\n          stageLoadMap = _this$state.stageLoadMap,\n          itemIds = _this$state.itemIds;\n      var task = PipelineProviderInner.tasks.find(function (t) {\n        return t.stageId === stageId;\n      });\n\n      if (task) {\n        task.isComplete = true;\n      }\n\n      _this.setState({\n        itemIds: [].concat(_toConsumableArray(itemIds), _toConsumableArray(items.map(function (item) {\n          return item._id;\n        }))),\n        itemMap: _objectSpread({}, itemMap, _defineProperty({}, stageId, items)),\n        stageLoadMap: _objectSpread({}, stageLoadMap, _defineProperty({}, stageId, 'loaded'))\n      });\n    };\n\n    _this.scheduleStage = function (stageId) {\n      var currentTask = PipelineProviderInner.currentTask;\n      PipelineProviderInner.tasks.push({\n        handler: function handler(id) {\n          var stageLoadMap = _this.state.stageLoadMap;\n          var states = Object.values(stageLoadMap);\n\n          if (!states.includes('readyToLoad')) {\n            _this.setState({\n              stageLoadMap: _objectSpread({}, stageLoadMap, _defineProperty({}, id, 'readyToLoad'))\n            });\n          }\n        },\n        stageId: stageId,\n        isComplete: false\n      });\n\n      if (!currentTask) {\n        currentTask = requestIdleCallback(_this.runTaskQueue);\n      }\n    };\n\n    _this.runTaskQueue = function (deadline) {\n      var inCompleteTask = PipelineProviderInner.tasks.find(function (task) {\n        return !task.isComplete;\n      });\n\n      while ((deadline.timeRemaining() > 0 || deadline.didTimeout) && inCompleteTask) {\n        var handler = inCompleteTask.handler,\n            _stageId = inCompleteTask.stageId;\n        handler(_stageId);\n      }\n\n      PipelineProviderInner.currentTask = null;\n\n      if (inCompleteTask) {\n        PipelineProviderInner.currentTask = requestIdleCallback(_this.runTaskQueue);\n      }\n\n      if (PipelineProviderInner.currentTask === null) {\n        _this.setState({\n          isDragEnabled: true\n        });\n      }\n    };\n\n    _this.onAddItem = function (stageId, item, aboveItemId) {\n      var _this$state2 = _this.state,\n          itemMap = _this$state2.itemMap,\n          itemIds = _this$state2.itemIds;\n      var items = itemMap[stageId] || [];\n\n      if (aboveItemId === undefined) {\n        _this.setState({\n          itemMap: _objectSpread({}, itemMap, _defineProperty({}, stageId, [item].concat(_toConsumableArray(items)))),\n          itemIds: [].concat(_toConsumableArray(itemIds), [item._id])\n        });\n\n        return;\n      } // archive recovery to stages begin\n\n\n      if (!aboveItemId) {\n        _this.setState({\n          itemMap: _objectSpread({}, itemMap, _defineProperty({}, stageId, [item].concat(_toConsumableArray(items)))),\n          itemIds: [].concat(_toConsumableArray(itemIds), [item._id])\n        });\n\n        return;\n      }\n\n      var aboveIndex = _this.findItemIndex(stageId, aboveItemId);\n\n      if (aboveIndex !== undefined) {\n        items.splice(aboveIndex + 1, 0, _objectSpread({}, item));\n\n        _this.setState({\n          itemMap: _objectSpread({}, itemMap, _defineProperty({}, stageId, _toConsumableArray(items))),\n          itemIds: [].concat(_toConsumableArray(itemIds), [item._id])\n        });\n      }\n    };\n\n    _this.onRemoveItem = function (itemId, stageId) {\n      var itemMap = _this.state.itemMap;\n      var items = itemMap[stageId].filter(function (item) {\n        return item._id !== itemId;\n      });\n\n      _this.setState({\n        itemMap: _objectSpread({}, itemMap, _defineProperty({}, stageId, items))\n      });\n    };\n\n    _this.onUpdateItem = function (item, prevStageId) {\n      var stageId = item.stageId;\n      var itemMap = _this.state.itemMap; // Moved to anothor board or pipeline\n\n      if (!itemMap[stageId] && prevStageId) {\n        return _this.onRemoveItem(item._id, prevStageId);\n      }\n\n      if (item.status === 'archived') {\n        return _this.onRemoveItem(item._id, item.stageId);\n      } // Moved between stages\n\n\n      if (prevStageId && stageId !== prevStageId) {\n        var _objectSpread9;\n\n        // remove from old stage\n        var prevStageItems = itemMap[prevStageId].filter(function (d) {\n          return d._id !== item._id;\n        }); // add to new stage's front\n\n        var _items = _toConsumableArray(itemMap[stageId]);\n\n        _items.unshift(item);\n\n        var newItemMap = _objectSpread({}, itemMap, (_objectSpread9 = {}, _defineProperty(_objectSpread9, stageId, _items), _defineProperty(_objectSpread9, prevStageId, prevStageItems), _objectSpread9));\n\n        _this.setState({\n          itemMap: newItemMap\n        }, function () {\n          _this.itemChange({\n            itemId: item._id,\n            destinationStageId: stageId,\n            sourceStageId: prevStageId\n          });\n        });\n      } else {\n        var _items2 = _toConsumableArray(itemMap[stageId]);\n\n        var index = _items2.findIndex(function (d) {\n          return d._id === item._id;\n        });\n\n        _items2[index] = item;\n\n        _this.setState({\n          itemMap: _objectSpread({}, itemMap, _defineProperty({}, stageId, _items2))\n        });\n      }\n    };\n\n    _this.toggleLabels = function () {\n      _this.setState({\n        isShowLabel: !_this.state.isShowLabel\n      });\n    };\n\n    _this.renderInvisibleItemInUrl = function () {\n      var _this$props2 = _this.props,\n          queryParams = _this$props2.queryParams,\n          options = _this$props2.options;\n      var itemId = queryParams.itemId;\n      var isDragEnabled = _this.state.isDragEnabled;\n\n      if (!isDragEnabled || !itemId) {\n        return null;\n      }\n\n      var itemIds = _this.state.itemIds;\n\n      if (itemIds.includes(itemId)) {\n        return null;\n      }\n\n      return React.createElement(InvisibleItemInUrl, {\n        itemId: itemId,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594\n        },\n        __self: this\n      });\n    };\n\n    var _pipeline = props.pipeline,\n        pipelineDetailQuery = props.pipelineDetailQuery,\n        initialItemMap = props.initialItemMap;\n\n    var _stageIds = Object.keys(initialItemMap || {});\n\n    _this.state = {\n      itemIds: [],\n      itemMap: initialItemMap || {},\n      stageLoadMap: {},\n      stageIds: _stageIds,\n      isShowLabel: false\n    };\n    PipelineProviderInner.tasks = [];\n    PipelineProviderInner.currentTask = null;\n    pipelineDetailQuery.subscribeToMore({\n      document: gql(subscriptions.pipelinesChanged),\n      variables: {\n        _id: _pipeline._id\n      },\n      updateQuery: function updateQuery(prev, _ref) {\n        var pipelinesChanged = _ref.subscriptionData.data.pipelinesChanged;\n\n        if (!pipelinesChanged || !pipelinesChanged.data) {\n          return;\n        }\n\n        var _pipelinesChanged$dat = pipelinesChanged.data,\n            item = _pipelinesChanged$dat.item,\n            aboveItemId = _pipelinesChanged$dat.aboveItemId,\n            destinationStageId = _pipelinesChanged$dat.destinationStageId,\n            oldStageId = _pipelinesChanged$dat.oldStageId,\n            action = pipelinesChanged.action,\n            proccessId = pipelinesChanged.proccessId;\n\n        if (proccessId !== localStorage.getItem('proccessId')) {\n          if (action === 'orderUpdated') {\n            var destIndex = aboveItemId ? _this.findItemIndex(destinationStageId, aboveItemId) : 0;\n\n            var srcIndex = _this.findItemIndex(oldStageId, item._id);\n\n            if (destIndex !== undefined && aboveItemId && (destinationStageId === oldStageId && destIndex < srcIndex || destinationStageId !== oldStageId)) {\n              destIndex = destIndex + 1;\n            }\n\n            _this.onDragEnd({\n              destination: {\n                droppableId: destinationStageId,\n                index: destIndex\n              },\n              draggableId: item._id,\n              combine: null,\n              mode: 'FLUID',\n              reason: 'DROP',\n              source: {\n                item: item,\n                droppableId: oldStageId,\n                index: srcIndex\n              },\n              type: 'DEFAULT'\n            }, false);\n          }\n\n          if (action === 'itemAdd') {\n            _this.onAddItem(destinationStageId, item, aboveItemId);\n          }\n\n          if (action === 'itemRemove') {\n            _this.onRemoveItem(item._id, oldStageId);\n          }\n\n          if (action === 'itemsRemove') {\n            var itemMap = _this.state.itemMap;\n\n            _this.setState({\n              itemMap: _objectSpread({}, itemMap, _defineProperty({}, destinationStageId, []))\n            });\n          }\n\n          if (action === 'itemUpdate') {\n            var _itemMap = _this.state.itemMap;\n\n            var _items3 = _toConsumableArray(_itemMap[item.stageId]);\n\n            var index = _items3.findIndex(function (d) {\n              return d._id === item._id;\n            });\n\n            _items3[index] = item;\n\n            _this.setState({\n              itemMap: _objectSpread({}, _itemMap, _defineProperty({}, item.stageId, _items3))\n            });\n          } // refetch stages info ===\n\n\n          var changedStageIds = [item.stageId];\n\n          if (destinationStageId && !changedStageIds.includes(destinationStageId)) {\n            changedStageIds.push(destinationStageId);\n          }\n\n          if (oldStageId && !changedStageIds.includes(oldStageId)) {\n            changedStageIds.push(oldStageId);\n          }\n\n          for (var _i = 0, _changedStageIds = changedStageIds; _i < _changedStageIds.length; _i++) {\n            var id = _changedStageIds[_i];\n            client.query({\n              query: gql(queries.stageDetail),\n              fetchPolicy: 'network-only',\n              variables: {\n                _id: id\n              }\n            });\n          }\n        }\n      }\n    });\n    return _this;\n  }\n\n  _createClass(PipelineProviderInner, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          queryParams = _this$props3.queryParams,\n          queryParamsChanged = _this$props3.queryParamsChanged;\n\n      if (queryParamsChanged(queryParams, nextProps.queryParams)) {\n        var stageIds = this.state.stageIds;\n        PipelineProviderInner.tasks = [];\n        PipelineProviderInner.currentTask = null;\n        stageIds.forEach(function (stageId) {\n          _this2.scheduleStage(stageId);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          itemMap = _this$state3.itemMap,\n          stageLoadMap = _this$state3.stageLoadMap,\n          stageIds = _this$state3.stageIds,\n          isShowLabel = _this$state3.isShowLabel,\n          isDragEnabled = _this$state3.isDragEnabled;\n      return React.createElement(React.Fragment, null, !isDragEnabled && React.createElement(DragDisabler, {\n        style: {\n          width: \"\".concat(this.state.stageIds.length * 290 - 5, \"px\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609\n        },\n        __self: this\n      }), React.createElement(PipelineContext.Provider, {\n        value: {\n          options: this.props.options,\n          onDragEnd: this.onDragEnd,\n          onLoadStage: this.onLoadStage,\n          scheduleStage: this.scheduleStage,\n          onAddItem: this.onAddItem,\n          onRemoveItem: this.onRemoveItem,\n          onUpdateItem: this.onUpdateItem,\n          itemMap: itemMap,\n          stageLoadMap: stageLoadMap,\n          stageIds: stageIds,\n          isShowLabel: isShowLabel,\n          toggleLabels: this.toggleLabels\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        },\n        __self: this\n      }, this.props.children, this.renderInvisibleItemInUrl()));\n    }\n  }]);\n\n  return PipelineProviderInner;\n}(React.Component);\n\nPipelineProviderInner.tasks = [];\nPipelineProviderInner.currentTask = void 0;\nexport var PipelineProvider = withProps(compose(graphql(gql(queries.pipelineDetail), {\n  name: 'pipelineDetailQuery',\n  options: function options(_ref2) {\n    var pipeline = _ref2.pipeline;\n    return {\n      variables: {\n        _id: pipeline._id\n      }\n    };\n  }\n}))(PipelineProviderInner));","map":{"version":3,"sources":["/home/anu-ujin/Works/open-source/erxes/ui/src/modules/boards/containers/PipelineContext.tsx"],"names":["client","gql","compose","Alert","withProps","React","graphql","requestIdleCallback","mutations","queries","subscriptions","DragDisabler","invalidateCache","reorder","reorderItemMap","InvisibleItemInUrl","PipelineContext","createContext","PipelineConsumer","Consumer","PipelineProviderInner","props","findItemIndex","stageId","aboveItemId","itemMap","state","index","items","i","length","item","_id","onDragEnd","result","saveToDb","destination","source","droppableId","type","stageIds","setState","saveStageOrders","target","aboveItem","itemChange","itemId","destinationStageId","sourceStageId","refetchQueryVariables","options","queryParams","search","customerIds","companyIds","assignedUserIds","extraParams","getExtraParams","closeDateType","userIds","refetchQueryBuild","query","stageDetail","variables","refetchStagesQueryBuild","pipelineId","stages","args","refetchQueries","unshift","proccessId","Math","random","toString","localStorage","setItem","mutate","mutation","changeMutation","catch","e","error","message","pipeline","stagesUpdateOrder","orders","map","order","onLoadStage","stageLoadMap","itemIds","task","tasks","find","t","isComplete","scheduleStage","currentTask","push","handler","id","states","Object","values","includes","runTaskQueue","deadline","inCompleteTask","timeRemaining","didTimeout","isDragEnabled","onAddItem","undefined","aboveIndex","splice","onRemoveItem","filter","onUpdateItem","prevStageId","status","prevStageItems","d","newItemMap","findIndex","toggleLabels","isShowLabel","renderInvisibleItemInUrl","pipelineDetailQuery","initialItemMap","keys","subscribeToMore","document","pipelinesChanged","updateQuery","prev","subscriptionData","data","oldStageId","action","getItem","destIndex","srcIndex","draggableId","combine","mode","reason","changedStageIds","fetchPolicy","nextProps","queryParamsChanged","forEach","width","children","Component","PipelineProvider","pipelineDetail","name"],"mappings":"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","sourcesContent":["import client from 'apolloClient';\nimport gql from 'graphql-tag';\nimport * as compose from 'lodash.flowright';\nimport { Alert, withProps } from 'modules/common/utils';\nimport { UserDetailQueryResponse } from 'modules/settings/team/types';\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { requestIdleCallback } from 'request-idle-callback';\nimport { mutations, queries, subscriptions } from '../graphql';\nimport { DragDisabler } from '../styles/common';\nimport {\n  IDragResult,\n  IFilterParams,\n  IItem,\n  IItemMap,\n  INonFilterParams,\n  IOptions,\n  IPipeline,\n  PipelineDetailQueryResponse\n} from '../types';\nimport { invalidateCache } from '../utils';\nimport { reorder, reorderItemMap } from '../utils';\nimport InvisibleItemInUrl from './InvisibleItemInUrl';\n\ntype WrapperProps = {\n  pipeline: IPipeline;\n  initialItemMap?: IItemMap;\n  options: IOptions;\n  queryParams: IFilterParams & INonFilterParams;\n  queryParamsChanged: (\n    queryParams: IFilterParams,\n    nextQueryParams: IFilterParams\n  ) => boolean;\n};\n\ntype Props = WrapperProps & {\n  currentUserQuery: UserDetailQueryResponse;\n  pipelineDetailQuery: any;\n};\n\ntype StageLoadMap = {\n  [key: string]: 'readyToLoad' | 'loaded';\n};\n\ntype State = {\n  itemIds: string[];\n  itemMap: IItemMap;\n  stageLoadMap: StageLoadMap;\n  stageIds: string[];\n  isShowLabel: boolean;\n  isDragEnabled?: boolean;\n};\n\ninterface IStore {\n  options: IOptions;\n  itemMap: IItemMap;\n  stageLoadMap: StageLoadMap;\n  stageIds: string[];\n  onLoadStage: (stageId: string, items: IItem[]) => void;\n  scheduleStage: (stageId: string) => void;\n  onDragEnd: (result: IDragResult) => void;\n  onAddItem: (stageId: string, item: IItem, aboveItemId?: string) => void;\n  onRemoveItem: (itemId: string, stageId: string) => void;\n  onUpdateItem: (item: IItem, prevStageId?: string) => void;\n  isShowLabel: boolean;\n  toggleLabels: () => void;\n}\n\nconst PipelineContext = React.createContext({} as IStore);\n\nexport const PipelineConsumer = PipelineContext.Consumer;\n\ntype Task = {\n  handler: (stageId: string) => void;\n  stageId: string;\n  isComplete: boolean;\n};\n\nclass PipelineProviderInner extends React.Component<Props, State> {\n  static tasks: Task[] = [];\n  static currentTask: Task | null;\n\n  constructor(props: Props) {\n    super(props);\n\n    const { pipeline, pipelineDetailQuery, initialItemMap } = props;\n\n    const stageIds = Object.keys(initialItemMap || {});\n\n    this.state = {\n      itemIds: [],\n      itemMap: initialItemMap || {},\n      stageLoadMap: {},\n      stageIds,\n      isShowLabel: false\n    };\n\n    PipelineProviderInner.tasks = [];\n    PipelineProviderInner.currentTask = null;\n\n    pipelineDetailQuery.subscribeToMore({\n      document: gql(subscriptions.pipelinesChanged),\n      variables: { _id: pipeline._id },\n      updateQuery: (\n        prev,\n        {\n          subscriptionData: {\n            data: { pipelinesChanged }\n          }\n        }\n      ) => {\n        if (!pipelinesChanged || !pipelinesChanged.data) {\n          return;\n        }\n\n        const {\n          data: { item, aboveItemId, destinationStageId, oldStageId },\n          action,\n          proccessId\n        } = pipelinesChanged;\n\n        if (proccessId !== localStorage.getItem('proccessId')) {\n          if (action === 'orderUpdated') {\n            let destIndex = aboveItemId\n              ? this.findItemIndex(destinationStageId, aboveItemId)\n              : 0;\n\n            const srcIndex = this.findItemIndex(oldStageId, item._id);\n\n            if (\n              destIndex !== undefined &&\n              aboveItemId &&\n              ((destinationStageId === oldStageId && destIndex < srcIndex) ||\n                destinationStageId !== oldStageId)\n            ) {\n              destIndex = destIndex + 1;\n            }\n\n            this.onDragEnd(\n              {\n                destination: {\n                  droppableId: destinationStageId,\n                  index: destIndex\n                },\n                draggableId: item._id,\n                combine: null,\n                mode: 'FLUID',\n                reason: 'DROP',\n                source: {\n                  item,\n                  droppableId: oldStageId,\n                  index: srcIndex\n                },\n                type: 'DEFAULT'\n              },\n              false\n            );\n          }\n\n          if (action === 'itemAdd') {\n            this.onAddItem(destinationStageId, item, aboveItemId);\n          }\n\n          if (action === 'itemRemove') {\n            this.onRemoveItem(item._id, oldStageId);\n          }\n\n          if (action === 'itemsRemove') {\n            const { itemMap } = this.state;\n\n            this.setState({\n              itemMap: {\n                ...itemMap,\n                [destinationStageId]: []\n              }\n            });\n          }\n\n          if (action === 'itemUpdate') {\n            const { itemMap } = this.state;\n            const items = [...itemMap[item.stageId]];\n            const index = items.findIndex(d => d._id === item._id);\n\n            items[index] = item;\n\n            this.setState({\n              itemMap: { ...itemMap, [item.stageId]: items }\n            });\n          }\n\n          // refetch stages info ===\n          const changedStageIds: string[] = [item.stageId];\n\n          if (\n            destinationStageId &&\n            !changedStageIds.includes(destinationStageId)\n          ) {\n            changedStageIds.push(destinationStageId);\n          }\n\n          if (oldStageId && !changedStageIds.includes(oldStageId)) {\n            changedStageIds.push(oldStageId);\n          }\n\n          for (const id of changedStageIds) {\n            client.query({\n              query: gql(queries.stageDetail),\n              fetchPolicy: 'network-only',\n              variables: { _id: id }\n            });\n          }\n        }\n      }\n    });\n  }\n\n  findItemIndex = (stageId: string, aboveItemId: string) => {\n    const { itemMap } = this.state;\n\n    if (!aboveItemId) {\n      return;\n    }\n\n    let index;\n\n    const items = itemMap[stageId] || [];\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item._id === aboveItemId) {\n        index = i;\n        break;\n      }\n    }\n\n    return index;\n  };\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { queryParams, queryParamsChanged } = this.props;\n\n    if (queryParamsChanged(queryParams, nextProps.queryParams)) {\n      const { stageIds } = this.state;\n\n      PipelineProviderInner.tasks = [];\n      PipelineProviderInner.currentTask = null;\n\n      stageIds.forEach((stageId: string) => {\n        this.scheduleStage(stageId);\n      });\n    }\n  }\n\n  onDragEnd = (result, saveToDb = true) => {\n    // dropped nowhere\n    if (!result.destination) {\n      return;\n    }\n\n    const source = result.source;\n    const destination = result.destination;\n\n    // did not move anywhere - can bail early\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    // reordering stage\n    if (result.type === 'STAGE') {\n      const stageIds = reorder(\n        this.state.stageIds,\n        source.index,\n        destination.index\n      );\n\n      this.setState({ stageIds });\n\n      // save orders to database\n      if (saveToDb) {\n        return this.saveStageOrders(stageIds);\n      }\n    }\n\n    const { itemMap, target, aboveItem } = reorderItemMap({\n      itemMap: this.state.itemMap,\n      source,\n      destination\n    });\n\n    this.setState({\n      itemMap\n    });\n\n    invalidateCache();\n\n    // saving to database\n    if (saveToDb) {\n      this.itemChange({\n        itemId: target._id,\n        aboveItemId: aboveItem ? aboveItem._id : '',\n        destinationStageId: destination.droppableId,\n        sourceStageId: source.droppableId\n      });\n    }\n  };\n\n  refetchQueryVariables = () => {\n    const { options, queryParams } = this.props;\n\n    return {\n      search: queryParams.search,\n      customerIds: queryParams.customerIds,\n      companyIds: queryParams.companyIds,\n      assignedUserIds: queryParams.assignedUserIds,\n      extraParams: options.getExtraParams(queryParams),\n      closeDateType: queryParams.closeDateType,\n      userIds: queryParams.userIds\n    };\n  };\n\n  refetchQueryBuild = (stageId: string) => {\n    return {\n      query: gql(queries.stageDetail),\n      variables: {\n        _id: stageId,\n        ...this.refetchQueryVariables()\n      }\n    };\n  };\n\n  refetchStagesQueryBuild = (pipelineId: string) => {\n    return {\n      query: gql(queries.stages),\n      variables: {\n        pipelineId,\n        ...this.refetchQueryVariables()\n      }\n    };\n  };\n\n  itemChange = (args: {\n    itemId: string;\n    aboveItemId?: string;\n    destinationStageId: string;\n    sourceStageId: string;\n  }) => {\n    const { itemId, aboveItemId, destinationStageId, sourceStageId } = args;\n\n    const { options } = this.props;\n    const refetchQueries = [this.refetchQueryBuild(destinationStageId)];\n\n    if (sourceStageId) {\n      refetchQueries.unshift(this.refetchQueryBuild(sourceStageId));\n    }\n\n    const proccessId = Math.random().toString();\n    localStorage.setItem('proccessId', proccessId);\n\n    client\n      .mutate({\n        mutation: gql(options.mutations.changeMutation),\n        variables: {\n          itemId,\n          aboveItemId,\n          destinationStageId,\n          sourceStageId,\n          proccessId\n        },\n        refetchQueries\n      })\n      .catch((e: Error) => {\n        Alert.error(e.message);\n      });\n  };\n\n  saveStageOrders = (stageIds: string[]) => {\n    const { pipeline } = this.props;\n\n    client\n      .mutate({\n        mutation: gql(mutations.stagesUpdateOrder),\n        variables: {\n          orders: stageIds.map((stageId, index) => ({\n            _id: stageId,\n            order: index\n          }))\n        },\n        refetchQueries: [this.refetchStagesQueryBuild(pipeline._id)]\n      })\n      .catch((e: Error) => {\n        Alert.error(e.message);\n      });\n  };\n\n  /*\n   * - Stage container is sending loaded to items\n   * - Storing sent items to global itemsMap\n   * - Mark stage's task as complete\n   * - Mark stage's loading state as loaded\n   */\n  onLoadStage = (stageId: string, items: IItem[]) => {\n    const { itemMap, stageLoadMap, itemIds } = this.state;\n    const task = PipelineProviderInner.tasks.find(t => t.stageId === stageId);\n\n    if (task) {\n      task.isComplete = true;\n    }\n\n    this.setState({\n      itemIds: [...itemIds, ...items.map(item => item._id)],\n      itemMap: { ...itemMap, [stageId]: items },\n      stageLoadMap: { ...stageLoadMap, [stageId]: 'loaded' }\n    });\n  };\n\n  /*\n   * Register given stage to tasks queue\n   */\n  scheduleStage = (stageId: string) => {\n    let currentTask = PipelineProviderInner.currentTask;\n\n    PipelineProviderInner.tasks.push({\n      handler: (id: string) => {\n        const { stageLoadMap } = this.state;\n        const states = Object.values(stageLoadMap);\n\n        if (!states.includes('readyToLoad')) {\n          this.setState({\n            stageLoadMap: { ...stageLoadMap, [id]: 'readyToLoad' }\n          });\n        }\n      },\n      stageId,\n      isComplete: false\n    });\n\n    if (!currentTask) {\n      currentTask = requestIdleCallback(this.runTaskQueue);\n    }\n  };\n\n  /*\n   * If browser is idle then find first inComplete task and run it\n   */\n  runTaskQueue = (deadline: {\n    didTimeout: boolean;\n    timeRemaining: () => number;\n  }) => {\n    const inCompleteTask = PipelineProviderInner.tasks.find(\n      (task: Task) => !task.isComplete\n    );\n\n    while (\n      (deadline.timeRemaining() > 0 || deadline.didTimeout) &&\n      inCompleteTask\n    ) {\n      const { handler, stageId } = inCompleteTask;\n      handler(stageId);\n    }\n\n    PipelineProviderInner.currentTask = null;\n\n    if (inCompleteTask) {\n      PipelineProviderInner.currentTask = requestIdleCallback(\n        this.runTaskQueue\n      );\n    }\n\n    if (PipelineProviderInner.currentTask === null) {\n      this.setState({ isDragEnabled: true });\n    }\n  };\n\n  onAddItem = (stageId: string, item: IItem, aboveItemId?: string) => {\n    const { itemMap, itemIds } = this.state;\n    const items = itemMap[stageId] || [];\n\n    if (aboveItemId === undefined) {\n      this.setState({\n        itemMap: { ...itemMap, [stageId]: [item, ...items] },\n        itemIds: [...itemIds, item._id]\n      });\n\n      return;\n    }\n\n    // archive recovery to stages begin\n    if (!aboveItemId) {\n      this.setState({\n        itemMap: { ...itemMap, [stageId]: [item, ...items] },\n        itemIds: [...itemIds, item._id]\n      });\n\n      return;\n    }\n\n    const aboveIndex = this.findItemIndex(stageId, aboveItemId);\n\n    if (aboveIndex !== undefined) {\n      items.splice(aboveIndex + 1, 0, { ...item });\n\n      this.setState({\n        itemMap: {\n          ...itemMap,\n          [stageId]: [...items]\n        },\n        itemIds: [...itemIds, item._id]\n      });\n    }\n  };\n\n  onRemoveItem = (itemId: string, stageId: string) => {\n    const { itemMap } = this.state;\n\n    const items = itemMap[stageId].filter(item => item._id !== itemId);\n\n    this.setState({\n      itemMap: { ...itemMap, [stageId]: items }\n    });\n  };\n\n  onUpdateItem = (item: IItem, prevStageId?: string) => {\n    const { stageId } = item;\n    const { itemMap } = this.state;\n\n    // Moved to anothor board or pipeline\n    if (!itemMap[stageId] && prevStageId) {\n      return this.onRemoveItem(item._id, prevStageId);\n    }\n\n    if (item.status === 'archived') {\n      return this.onRemoveItem(item._id, item.stageId);\n    }\n\n    // Moved between stages\n    if (prevStageId && stageId !== prevStageId) {\n      // remove from old stage\n      const prevStageItems = itemMap[prevStageId].filter(\n        (d: IItem) => d._id !== item._id\n      );\n\n      // add to new stage's front\n      const items = [...itemMap[stageId]];\n      items.unshift(item);\n\n      const newItemMap = {\n        ...itemMap,\n        [stageId]: items,\n        [prevStageId]: prevStageItems\n      };\n\n      this.setState({ itemMap: newItemMap }, () => {\n        this.itemChange({\n          itemId: item._id,\n          destinationStageId: stageId,\n          sourceStageId: prevStageId\n        });\n      });\n    } else {\n      const items = [...itemMap[stageId]];\n      const index = items.findIndex(d => d._id === item._id);\n\n      items[index] = item;\n\n      this.setState({\n        itemMap: { ...itemMap, [stageId]: items }\n      });\n    }\n  };\n\n  toggleLabels = () => {\n    this.setState({ isShowLabel: !this.state.isShowLabel });\n  };\n\n  renderInvisibleItemInUrl = () => {\n    const { queryParams, options } = this.props;\n    const { itemId } = queryParams;\n    const { isDragEnabled } = this.state;\n\n    if (!isDragEnabled || !itemId) {\n      return null;\n    }\n\n    const { itemIds } = this.state;\n\n    if (itemIds.includes(itemId)) {\n      return null;\n    }\n\n    return <InvisibleItemInUrl itemId={itemId} options={options} />;\n  };\n\n  render() {\n    const {\n      itemMap,\n      stageLoadMap,\n      stageIds,\n      isShowLabel,\n      isDragEnabled\n    } = this.state;\n\n    return (\n      <>\n        {!isDragEnabled && (\n          <DragDisabler\n            style={{ width: `${this.state.stageIds.length * 290 - 5}px` }}\n          />\n        )}\n\n        <PipelineContext.Provider\n          value={{\n            options: this.props.options,\n            onDragEnd: this.onDragEnd,\n            onLoadStage: this.onLoadStage,\n            scheduleStage: this.scheduleStage,\n            onAddItem: this.onAddItem,\n            onRemoveItem: this.onRemoveItem,\n            onUpdateItem: this.onUpdateItem,\n            itemMap,\n            stageLoadMap,\n            stageIds,\n            isShowLabel,\n            toggleLabels: this.toggleLabels\n          }}\n        >\n          {this.props.children}\n          {this.renderInvisibleItemInUrl()}\n        </PipelineContext.Provider>\n      </>\n    );\n  }\n}\n\nexport const PipelineProvider = withProps<WrapperProps>(\n  compose(\n    graphql<Props, PipelineDetailQueryResponse>(gql(queries.pipelineDetail), {\n      name: 'pipelineDetailQuery',\n      options: ({ pipeline }) => ({\n        variables: { _id: pipeline._id }\n      })\n    })\n  )(PipelineProviderInner)\n);\n"]},"metadata":{},"sourceType":"module"}