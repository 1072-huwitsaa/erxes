"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var styles_1 = require("./styles");
var Textarea_1 = __importDefault(require("./Textarea"));
var renderElement = function (Element, attributes, type, child) {
    return (react_1.default.createElement(styles_1.FormLabel, { key: attributes.key ? attributes.key : null },
        react_1.default.createElement(Element, __assign({}, attributes, { type: type })),
        react_1.default.createElement("span", null,
            child && '\u00a0\u00a0',
            child)));
};
var FormControl = /** @class */ (function (_super) {
    __extends(FormControl, _super);
    function FormControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormControl.prototype.componentDidMount = function () {
        var registerChild = this.props.registerChild;
        if (registerChild) {
            registerChild(this);
        }
    };
    FormControl.prototype.render = function () {
        var _a;
        var props = this.props;
        var childNode = props.children;
        var elementType = props.componentClass;
        var errorMessage = props.errors && props.errors[props.name || ''];
        // cancel custom browser default form validation error
        var onChange = function (e) {
            if (props.onChange) {
                props.onChange(e);
            }
        };
        var attributes = (_a = {
                onChange: onChange,
                onKeyPress: props.onKeyPress,
                onClick: props.onClick,
                onBlur: props.onBlur,
                value: props.value,
                defaultValue: props.defaultValue
            },
            _a[props.defaultChecked
                ? 'defaultChecked'
                : 'checked'] = props.defaultChecked
                ? props.defaultChecked
                : props.checked,
            _a.placeholder = props.placeholder,
            _a.hasError = errorMessage ? true : false,
            _a.type = props.type,
            _a.name = props.name,
            _a.round = props.round,
            _a.required = props.required,
            _a.disabled = props.disabled,
            _a.onFocus = props.onFocus,
            _a.autoFocus = props.autoFocus,
            _a.autoComplete = props.autoComplete,
            _a.min = props.min,
            _a.max = props.max,
            _a.id = props.id,
            _a.maxHeight = props.maxHeight,
            _a.maxLength = props.maxLength,
            _a);
        if (elementType === 'select') {
            if (props.options) {
                return (react_1.default.createElement(styles_1.FlexWrapper, null,
                    react_1.default.createElement(styles_1.SelectWrapper, { hasError: errorMessage },
                        react_1.default.createElement(styles_1.Select, __assign({}, attributes), props.options.map(function (option, index) {
                            return (react_1.default.createElement("option", { key: index, value: option.value || '' }, option.label || ''));
                        }))),
                    errorMessage));
            }
            return (react_1.default.createElement(styles_1.FlexWrapper, null,
                react_1.default.createElement(styles_1.SelectWrapper, { hasError: errorMessage },
                    react_1.default.createElement(styles_1.Select, __assign({}, attributes), childNode)),
                errorMessage));
        }
        if (elementType === 'radio') {
            if (props.options) {
                return props.options.map(function (option, index) {
                    return renderElement(styles_1.Radio, __assign({ key: index }, attributes, option), elementType, option.childNode);
                });
            }
            return renderElement(styles_1.Radio, attributes, elementType, childNode);
        }
        if (elementType === 'checkbox') {
            return renderElement(styles_1.Checkbox, attributes, elementType, childNode);
        }
        if (elementType === 'textarea') {
            return (react_1.default.createElement(styles_1.FlexWrapper, null,
                react_1.default.createElement(Textarea_1.default, __assign({}, props, { hasError: errorMessage })),
                errorMessage));
        }
        return (react_1.default.createElement(styles_1.FlexWrapper, null,
            react_1.default.createElement(styles_1.Input, __assign({}, attributes)),
            errorMessage));
    };
    FormControl.defaultProps = {
        componentClass: 'input',
        required: false,
        defaultChecked: false,
        disabled: false
    };
    return FormControl;
}(react_1.default.Component));
exports.default = FormControl;
//# sourceMappingURL=Control.js.map