import React from 'react';
interface IFormProps {
    errors: any;
    values: any;
    registerChild: (child: React.ReactNode) => void;
    runValidations?: (callback: any) => void;
    resetSubmit?: () => void;
    isSubmitted: boolean;
}
declare type Props = {
    renderContent: (props: IFormProps) => React.ReactNode;
    onSubmit?: (values: any) => any;
    autoComplete?: string;
};
declare type State = {
    errors: any;
    values: any;
    isSubmitted: boolean;
};
declare class Form extends React.Component<Props, State> {
    private formId;
    private children;
    constructor(props: Props);
    registerChild: (child: any) => void;
    resetSubmit: () => void;
    runValidations: () => void;
    getSelector: (name: string) => any;
    getValue: (child: any) => any;
    onSubmit: (e: any) => void;
    validate: (child: any) => JSX.Element | null;
    render(): JSX.Element;
}
export default Form;
//# sourceMappingURL=Form.d.ts.map