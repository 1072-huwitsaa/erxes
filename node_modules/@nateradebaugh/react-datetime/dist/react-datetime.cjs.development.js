'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var cc = _interopDefault(require('classcat'));
var Popover = _interopDefault(require('@reach/popover'));
var useOnClickOutside = _interopDefault(require('use-onclickoutside'));
var format = _interopDefault(require('date-fns/format'));
var rawParse = _interopDefault(require('date-fns/parse'));
var isEqual = _interopDefault(require('date-fns/isEqual'));
var toDate = _interopDefault(require('date-fns/toDate'));
var isDateValid = _interopDefault(require('date-fns/isValid'));
var startOfDay = _interopDefault(require('date-fns/startOfDay'));
var getHours = _interopDefault(require('date-fns/getHours'));
var addHours = _interopDefault(require('date-fns/addHours'));
var addMinutes = _interopDefault(require('date-fns/addMinutes'));
var addSeconds = _interopDefault(require('date-fns/addSeconds'));
var addMilliseconds = _interopDefault(require('date-fns/addMilliseconds'));
var setHours = _interopDefault(require('date-fns/setHours'));
var addDays = _interopDefault(require('date-fns/addDays'));
var differenceInDays = _interopDefault(require('date-fns/differenceInDays'));
var startOfWeek = _interopDefault(require('date-fns/startOfWeek'));
var startOfMonth = _interopDefault(require('date-fns/startOfMonth'));
var endOfMonth = _interopDefault(require('date-fns/endOfMonth'));
var isSameDay = _interopDefault(require('date-fns/isSameDay'));
var isBefore = _interopDefault(require('date-fns/isBefore'));
var addMonths = _interopDefault(require('date-fns/addMonths'));
var getDate = _interopDefault(require('date-fns/getDate'));
var addYears = _interopDefault(require('date-fns/addYears'));
var isSameMonth = _interopDefault(require('date-fns/isSameMonth'));
var setMonth = _interopDefault(require('date-fns/setMonth'));
var getDaysInMonth = _interopDefault(require('date-fns/getDaysInMonth'));
var setDate = _interopDefault(require('date-fns/setDate'));
var getYear = _interopDefault(require('date-fns/getYear'));
var setYear = _interopDefault(require('date-fns/setYear'));
var getDaysInYear = _interopDefault(require('date-fns/getDaysInYear'));
var setDayOfYear = _interopDefault(require('date-fns/setDayOfYear'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var allCounters = ["hours", "minutes", "seconds", "milliseconds"];
var defaultTimeConstraints = {
  hours: {
    min: 0,
    max: 23,
    step: 1
  },
  minutes: {
    min: 0,
    max: 59,
    step: 1
  },
  seconds: {
    min: 0,
    max: 59,
    step: 1
  },
  milliseconds: {
    min: 0,
    max: 999,
    step: 1
  }
};

var TimePart = function TimePart(props) {
  var showPrefix = props.showPrefix,
      onUp = props.onUp,
      onDown = props.onDown,
      value = props.value;
  return value !== null && value !== undefined ? React.createElement(React.Fragment, null, showPrefix && React.createElement("div", {
    className: "rdtCounterSeparator"
  }, ":"), React.createElement("div", {
    className: "rdtCounter"
  }, React.createElement("span", {
    className: "rdtBtn",
    onMouseDown: onUp
  }, "\u25B2"), React.createElement("div", {
    className: "rdtCount"
  }, value), React.createElement("span", {
    className: "rdtBtn",
    onMouseDown: onDown
  }, "\u25BC"))) : null;
};

function getStepSize(type, timeConstraints) {
  var step = defaultTimeConstraints[type].step;
  var config = timeConstraints ? timeConstraints[type] : undefined;

  if (config && config.step) {
    step = config.step;
  }

  return step;
}

function change(op, type, timestamp, timeConstraints) {
  var mult = op === "sub" ? -1 : 1;
  var step = getStepSize(type, timeConstraints) * mult;

  if (type === "hours") {
    return addHours(timestamp, step);
  } else if (type === "minutes") {
    return addMinutes(timestamp, step);
  } else if (type === "seconds") {
    return addSeconds(timestamp, step);
  } else {
    return addMilliseconds(timestamp, step);
  }
}

function getFormatted(type, timestamp, timeFormat, formatOptions) {
  var fmt = typeof timeFormat === "string" ? timeFormat : "";

  function has(f, val) {
    return f.indexOf(val) !== -1;
  }

  var hasHours = has(fmt.toLowerCase(), "h");
  var hasMinutes = has(fmt, "m");
  var hasSeconds = has(fmt, "s");
  var hasMilliseconds = has(fmt, "S");
  var hasDayPart = has(fmt, "a");
  var typeFormat = type === "hours" && hasHours ? hasDayPart ? "h" : "H" : type === "minutes" && hasMinutes ? "mm" : type === "seconds" && hasSeconds ? "ss" : type === "milliseconds" && hasMilliseconds ? "SSS" : type === "daypart" && hasDayPart ? "a" : undefined;

  if (typeFormat) {
    return format(timestamp, typeFormat, formatOptions);
  }

  return undefined;
}

function toggleDayPart(timestamp, setSelectedDate) {
  return function () {
    var hours = getHours(timestamp);
    var newHours = hours >= 12 ? hours - 12 : hours + 12;
    setSelectedDate(setHours(timestamp, newHours));
  };
}

var timer;
var increaseTimer;

var _mouseUpListener;

function onStartClicking(op, type, props) {
  return function () {
    var readonly = props.readonly,
        _props$viewTimestamp = props.viewTimestamp,
        origViewTimestamp = _props$viewTimestamp === void 0 ? new Date() : _props$viewTimestamp,
        timeConstraints = props.timeConstraints,
        setViewTimestamp = props.setViewTimestamp,
        setSelectedDate = props.setSelectedDate;

    if (!readonly) {
      var viewTimestamp = change(op, type, origViewTimestamp, timeConstraints);
      setViewTimestamp(viewTimestamp);
      timer = setTimeout(function () {
        increaseTimer = setInterval(function () {
          viewTimestamp = change(op, type, viewTimestamp, timeConstraints);
          setViewTimestamp(viewTimestamp);
        }, 70);
      }, 500);

      _mouseUpListener = function mouseUpListener() {
        clearTimeout(timer);
        clearInterval(increaseTimer);
        setSelectedDate(viewTimestamp);
        document.body.removeEventListener("mouseup", _mouseUpListener);
        document.body.removeEventListener("touchend", _mouseUpListener);
      };

      document.body.addEventListener("mouseup", _mouseUpListener);
      document.body.addEventListener("touchend", _mouseUpListener);
    }
  };
}

function TimeView(props) {
  var _props$viewTimestamp2 = props.viewTimestamp,
      viewTimestamp = _props$viewTimestamp2 === void 0 ? new Date() : _props$viewTimestamp2,
      _props$dateFormat = props.dateFormat,
      dateFormat = _props$dateFormat === void 0 ? false : _props$dateFormat,
      setViewMode = props.setViewMode,
      timeFormat = props.timeFormat,
      formatOptions = props.formatOptions,
      setSelectedDate = props.setSelectedDate;
  var numCounters = 0;
  return React.createElement("div", {
    className: "rdtTime"
  }, React.createElement("table", null, dateFormat ? React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", {
    className: "rdtSwitch",
    colSpan: 4,
    onClick: function onClick() {
      return setViewMode("days");
    }
  }, format(viewTimestamp, dateFormat)))) : null, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("div", {
    className: "rdtCounters"
  }, allCounters.map(function (type) {
    var val = getFormatted(type, viewTimestamp, timeFormat, formatOptions);

    if (val) {
      numCounters++;
    }

    return React.createElement(TimePart, {
      key: type,
      showPrefix: numCounters > 1,
      onUp: onStartClicking("add", type, props),
      onDown: onStartClicking("sub", type, props),
      value: val
    });
  }), React.createElement(TimePart, {
    onUp: toggleDayPart(viewTimestamp, setSelectedDate),
    onDown: toggleDayPart(viewTimestamp, setSelectedDate),
    value: getFormatted("daypart", viewTimestamp, timeFormat, formatOptions)
  })))))));
}

function DaysView(props) {
  var _props$timeFormat = props.timeFormat,
      timeFormat = _props$timeFormat === void 0 ? false : _props$timeFormat,
      _props$viewDate = props.viewDate,
      viewDate = _props$viewDate === void 0 ? new Date() : _props$viewDate,
      setViewDate = props.setViewDate,
      selectedDate = props.selectedDate,
      setSelectedDate = props.setSelectedDate,
      formatOptions = props.formatOptions,
      setViewMode = props.setViewMode,
      isValidDate = props.isValidDate;
  var sunday = startOfWeek(viewDate);
  var prevMonth = addMonths(viewDate, -1);
  var daysSincePrevMonthLastWeekStart = differenceInDays(startOfWeek(endOfMonth(prevMonth)), viewDate);
  var prevMonthLastWeekStart = addDays(viewDate, daysSincePrevMonthLastWeekStart);
  return React.createElement("div", {
    className: "rdtDays"
  }, React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", {
    className: "rdtPrev",
    onClick: function onClick() {
      return setViewDate(addMonths(viewDate, -1));
    }
  }, React.createElement("span", null, "\u2039")), React.createElement("th", {
    className: "rdtSwitch",
    onClick: function onClick() {
      return setViewMode("months");
    },
    colSpan: 5
  }, format(viewDate, "LLLL yyyy", formatOptions)), React.createElement("th", {
    className: "rdtNext",
    onClick: function onClick() {
      return setViewDate(addMonths(viewDate, 1));
    }
  }, React.createElement("span", null, "\u203A"))), React.createElement("tr", null, [0, 1, 2, 3, 4, 5, 6].map(function (colNum) {
    return React.createElement("th", {
      key: colNum,
      className: "dow"
    }, format(addDays(sunday, colNum), "iiiiii", formatOptions));
  }))), React.createElement("tbody", null, [0, 1, 2, 3, 4, 5].map(function (rowNum) {
    // Use 7 columns per row
    var rowStartDay = rowNum * 7;
    return React.createElement("tr", {
      key: format(addDays(prevMonthLastWeekStart, rowStartDay), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
    }, [0, 1, 2, 3, 4, 5, 6].map(function (d) {
      var i = d + rowStartDay;
      var workingDate = addDays(prevMonthLastWeekStart, i);
      var isDisabled = typeof isValidDate === "function" && !isValidDate(workingDate);
      return React.createElement("td", {
        key: getDate(workingDate),
        className: cc(["rdtDay", {
          rdtOld: isBefore(workingDate, startOfMonth(viewDate)),
          rdtNew: isBefore(endOfMonth(viewDate), workingDate),
          rdtActive: selectedDate && isSameDay(workingDate, selectedDate),
          rdtToday: isSameDay(workingDate, new Date()),
          rdtDisabled: isDisabled
        }]),
        onClick: function onClick() {
          if (!isDisabled) {
            setSelectedDate(workingDate);
          }
        }
      }, format(workingDate, "d", formatOptions));
    }));
  })), typeof timeFormat === "string" && timeFormat.trim() && React.createElement("tfoot", null, React.createElement("tr", null, React.createElement("td", {
    onClick: function onClick() {
      return setViewMode("time");
    },
    colSpan: 7,
    className: "rdtTimeToggle"
  }, format(viewDate, timeFormat, formatOptions))))));
}

function MonthsView(props) {
  var _props$viewDate = props.viewDate,
      viewDate = _props$viewDate === void 0 ? new Date() : _props$viewDate,
      setViewDate = props.setViewDate,
      selectedDate = props.selectedDate,
      setSelectedDate = props.setSelectedDate,
      formatOptions = props.formatOptions,
      setViewMode = props.setViewMode,
      isValidDate = props.isValidDate;
  return React.createElement("div", {
    className: "rdtMonths"
  }, React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", {
    className: "rdtPrev",
    onClick: function onClick() {
      return setViewDate(addYears(viewDate, -1));
    }
  }, React.createElement("span", null, "\u2039")), React.createElement("th", {
    className: "rdtSwitch",
    onClick: function onClick() {
      return setViewMode("years");
    },
    colSpan: 2
  }, format(viewDate, "yyyy", formatOptions)), React.createElement("th", {
    className: "rdtNext",
    onClick: function onClick() {
      return setViewDate(addYears(viewDate, 1));
    }
  }, React.createElement("span", null, "\u203A"))))), React.createElement("table", null, React.createElement("tbody", null, [0, 1, 2].map(function (rowNum) {
    // Use 4 columns per row
    var rowStartMonth = rowNum * 4;
    return React.createElement("tr", {
      key: rowStartMonth
    }, [0, 1, 2, 3].map(function (m) {
      var month = m + rowStartMonth;
      var currentMonth = setMonth(viewDate, month);
      var daysInMonths = Array.from({
        length: getDaysInMonth(currentMonth)
      }, function (e, i) {
        return setDate(currentMonth, i + 1);
      });
      var isDisabled = daysInMonths.every(function (d) {
        return typeof isValidDate === "function" && !isValidDate(d);
      });
      var monthDate = setMonth(new Date(), month);
      return React.createElement("td", {
        key: month,
        className: cc(["rdtMonth", {
          rdtDisabled: isDisabled,
          rdtActive: selectedDate && isSameMonth(selectedDate, currentMonth)
        }]),
        onClick: function onClick() {
          if (!isDisabled) {
            setSelectedDate(setMonth(viewDate, month));
          }
        }
      }, format(monthDate, "LLL", formatOptions));
    }));
  }))));
}

function YearsView(props) {
  var _props$viewDate = props.viewDate,
      viewDate = _props$viewDate === void 0 ? new Date() : _props$viewDate,
      setViewDate = props.setViewDate,
      selectedDate = props.selectedDate,
      setSelectedDate = props.setSelectedDate,
      formatOptions = props.formatOptions,
      setViewMode = props.setViewMode,
      isValidDate = props.isValidDate;
  var startYear = Math.floor(getYear(viewDate) / 10) * 10;
  return React.createElement("div", {
    className: "rdtYears"
  }, React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", {
    className: "rdtPrev",
    onClick: function onClick() {
      return setViewDate(addYears(viewDate, -10));
    }
  }, React.createElement("span", null, "\u2039")), React.createElement("th", {
    className: "rdtSwitch",
    onClick: function onClick() {
      return setViewMode("years");
    },
    colSpan: 2
  }, startYear, "-", startYear + 9), React.createElement("th", {
    className: "rdtNext",
    onClick: function onClick() {
      return setViewDate(addYears(viewDate, 10));
    }
  }, React.createElement("span", null, "\u203A"))))), React.createElement("table", null, React.createElement("tbody", null, [0, 1, 2].map(function (rowNum) {
    // Use 4 columns per row
    var rowStartYear = startYear - 1 + rowNum * 4;
    return React.createElement("tr", {
      key: rowStartYear
    }, [0, 1, 2, 3].map(function (y) {
      var year = y + rowStartYear;
      var currentYear = setYear(viewDate, year);
      var daysInYear = Array.from({
        length: getDaysInYear(viewDate)
      }, function (e, i) {
        return setDayOfYear(currentYear, i + 1);
      });
      var isDisabled = daysInYear.every(function (d) {
        return typeof isValidDate === "function" && !isValidDate(d);
      });
      return React.createElement("td", {
        key: year,
        className: cc(["rdtYear", {
          rdtDisabled: isDisabled,
          rdtActive: selectedDate && getYear(selectedDate) === year
        }]),
        onClick: function onClick() {
          if (!isDisabled) {
            setSelectedDate(setYear(viewDate, year));
          }
        }
      }, format(currentYear, "yyyy", formatOptions));
    }));
  }))));
}

function CalendarContainer(props) {
  var viewMode = props.viewMode,
      rest = _objectWithoutPropertiesLoose(props, ["viewMode"]);

  switch (viewMode) {
    case "time":
      return React.createElement(TimeView, Object.assign({}, rest));

    case "days":
      return React.createElement(DaysView, Object.assign({}, rest));

    case "months":
      return React.createElement(MonthsView, Object.assign({}, rest));

    case "years":
      return React.createElement(YearsView, Object.assign({}, rest));
  }

  throw new Error("Unsupported view mode.");
}

var useRef = React.useRef,
    useState = React.useState,
    useEffect = React.useEffect,
    useCallback = React.useCallback;

function tryGetAsTime(date) {
  var asDate = toDate(date);

  if (asDate && isDateValid(asDate)) {
    return asDate.getTime();
  }

  return date;
}

function useDefaultStateWithOverride(defaultValue, maybeDate) {
  if (maybeDate === void 0) {
    maybeDate = true;
  }

  var _useState = useState(undefined),
      override = _useState[0],
      setOverride = _useState[1];

  var value = override || defaultValue; // Clear the override if the default changes

  var changeVal = maybeDate ? tryGetAsTime(defaultValue) : defaultValue;
  useEffect(function () {
    setOverride(undefined);
  }, [changeVal]);
  return [value, setOverride];
}

function parse(date, fullFormat, formatOptions) {
  if (typeof date === "string") {
    var asDate = rawParse(date, fullFormat, new Date(), formatOptions);

    if (isDateValid(asDate)) {
      var formatted = format(asDate, fullFormat, formatOptions);

      if (date === formatted) {
        return asDate;
      }
    }
  } else if (date) {
    var _asDate = toDate(date);

    if (isDateValid(_asDate)) {
      return _asDate;
    }
  }

  return undefined;
}

var nextViewModes = {
  days: "days",
  months: "days",
  years: "months"
};

function getViewMode(dateFormat, timeFormat) {
  if (typeof dateFormat === "string" && dateFormat) {
    if (dateFormat.match(/[d]/)) {
      return "days";
    } else if (dateFormat.indexOf("L") !== -1) {
      return "months";
    } else if (dateFormat.indexOf("y") !== -1) {
      return "years";
    }
  }

  if (typeof timeFormat === "string" && timeFormat) {
    return "time";
  }

  return undefined;
}

function DateTime(props) {
  var isValidDate = props.isValidDate,
      rawDateTypeMode = props.dateTypeMode,
      value = props.value,
      rawOnChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _props$dateFormat = props.dateFormat,
      rawDateFormat = _props$dateFormat === void 0 ? true : _props$dateFormat,
      _props$timeFormat = props.timeFormat,
      rawTimeFormat = _props$timeFormat === void 0 ? true : _props$timeFormat,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["isValidDate", "dateTypeMode", "value", "onChange", "onBlur", "onFocus", "dateFormat", "timeFormat", "locale"]); //
  // Formats
  //


  var dateFormat = rawDateFormat === true ? "LL/dd/yyyy" : rawDateFormat;
  var timeFormat = rawTimeFormat === true ? "h:mm a" : rawTimeFormat;
  var fullFormat = dateFormat && timeFormat ? dateFormat + " " + timeFormat : dateFormat || timeFormat || "";
  var formatOptions = {
    locale: locale
  };
  var valueAsDate = parse(value, fullFormat, formatOptions);
  var dateTypeMode = typeof rawDateTypeMode === "string" ? rawDateTypeMode.toLowerCase() === "utc-ms-timestamp" ? "utc-ms-timestamp" : rawDateTypeMode.toLowerCase() === "input-format" ? "input-format" : "Date" : value && typeof value === "number" ? "utc-ms-timestamp" : "Date";
  var getChangedValue = useCallback(function (newValue) {
    if (typeof newValue === "string") {
      return newValue;
    }

    if (!newValue) {
      return newValue;
    }

    switch (dateTypeMode) {
      case "utc-ms-timestamp":
        return newValue.getTime();

      case "input-format":
        return format(newValue, fullFormat, formatOptions);
    }

    return newValue;
  }, [dateTypeMode, formatOptions, fullFormat]); //
  // On Change
  // string -> string
  // falsy -> raw onChange
  // Date -> if numeric, number (ms)
  // Date -> if not numeric, Date
  //

  var onChange = useCallback(function (newValue) {
    if (typeof rawOnChange !== "function") {
      return;
    }

    var changedValue = getChangedValue(newValue); //
    // Suppress change event when the value didn't change!
    //

    if (value instanceof Date && changedValue instanceof Date && isEqual(value, changedValue)) {
      return;
    }

    if (value === changedValue) {
      return;
    }

    rawOnChange(changedValue);
  }, [getChangedValue, rawOnChange, value]); //
  // ViewDate
  //

  var _useDefaultStateWithO = useDefaultStateWithOverride(valueAsDate || startOfDay(new Date())),
      viewDate = _useDefaultStateWithO[0],
      setViewDate = _useDefaultStateWithO[1]; //
  // ViewMode
  //


  var defaultViewMode = getViewMode(dateFormat, timeFormat);

  var _useDefaultStateWithO2 = useDefaultStateWithOverride(defaultViewMode, false),
      viewMode = _useDefaultStateWithO2[0],
      setViewMode = _useDefaultStateWithO2[1]; //
  // ViewTimestamp
  //


  var _useDefaultStateWithO3 = useDefaultStateWithOverride(valueAsDate || viewDate),
      viewTimestamp = _useDefaultStateWithO3[0],
      setViewTimestamp = _useDefaultStateWithO3[1]; //
  // IsOpen
  //


  var _useState2 = useState(false),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  function open() {
    if (viewMode) {
      setIsOpen(true);

      if (typeof onFocus === "function") {
        onFocus();
      }
    }
  }

  function closeWith(newValue) {
    setIsOpen(false);

    if (typeof onBlur === "function") {
      var changedValue = getChangedValue(newValue);
      onBlur(changedValue);
    }
  }

  function close() {
    return closeWith(valueAsDate);
  } //
  // SetSelectedDate
  //


  function setSelectedDate(newDate, tryClose) {
    if (tryClose === void 0) {
      tryClose = true;
    }

    var asDate = toDate(newDate);
    setViewDate(asDate);
    setViewTimestamp(asDate); // Time switches value but stays open

    if (viewMode === "time") {
      onChange(newDate);
    } // When view mode is the default, switch and try to close
    else if (viewMode === defaultViewMode) {
        onChange(newDate);

        if (tryClose) {
          closeWith(newDate);
        }
      } // When view mode is not the default, switch to the next view mode
      else {
          var newViewMode = viewMode ? nextViewModes[viewMode] : undefined;
          setViewMode(newViewMode);
        }
  } //
  // Trigger change when important props change
  //


  useEffect(function () {
    if (valueAsDate) {
      setSelectedDate(valueAsDate);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [dateTypeMode, fullFormat]);

  function onInputChange(e) {
    var newValue = e.target.value;
    var newValueAsDate = parse(newValue, fullFormat, formatOptions);

    if (newValueAsDate) {
      setSelectedDate(newValueAsDate, false);
    } else {
      onChange(newValue);
    }
  }

  function onInputKeyDown(e) {
    if (isOpen) {
      switch (e.which) {
        // Enter key
        case 13: // Escape key

        case 27: // Tab key

        case 9:
          close();
          break;
      }
    } else {
      switch (e.which) {
        // Down arrow
        case 40:
          open();
          break;
      }
    }
  }

  var inputRef = useRef(null);
  var contentRef = useRef(null);
  useOnClickOutside(contentRef, close);
  var valueStr = valueAsDate && fullFormat ? format(valueAsDate, fullFormat, formatOptions) : typeof value === "string" ? value : ""; //
  // Input Props
  //

  var finalInputProps = _extends({}, rest, {
    type: "text",
    onClick: open,
    onFocus: open,
    onChange: onInputChange,
    onKeyDown: onInputKeyDown,
    value: valueStr
  }); //
  // Calendar props
  //


  var calendarProps = {
    dateFormat: dateFormat,
    timeFormat: timeFormat,
    viewDate: viewDate,
    setViewDate: setViewDate,
    selectedDate: valueAsDate,
    setSelectedDate: setSelectedDate,
    viewTimestamp: viewTimestamp,
    setViewTimestamp: setViewTimestamp,
    formatOptions: formatOptions,
    viewMode: viewMode,
    setViewMode: setViewMode,
    isValidDate: isValidDate
  };
  return React.createElement("div", {
    className: cc(["rdt", {
      rdtOpen: isOpen
    }])
  }, React.createElement("input", Object.assign({
    ref: inputRef,
    key: "i"
  }, finalInputProps)), isOpen && React.createElement(Popover, {
    targetRef: inputRef
  }, React.createElement("div", {
    ref: contentRef,
    className: "rdtPicker"
  }, React.createElement(CalendarContainer, Object.assign({}, calendarProps)))));
}

exports.default = DateTime;
//# sourceMappingURL=react-datetime.cjs.development.js.map
