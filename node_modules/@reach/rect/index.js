"use strict";

exports.__esModule = true;
exports.useRect = useRect;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _observeRect = _interopRequireDefault(require("@reach/observe-rect"));

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Rect = function Rect(_ref) {
  var onChange = _ref.onChange,
      observe = _ref.observe,
      children = _ref.children;

  var ref = _react["default"].useRef(null);

  var rect = useRect(ref, observe, onChange);
  return children({
    ref: ref,
    rect: rect
  });
};

Rect.defaultProps = {
  observe: true
};

if (process.env.NODE_ENV !== "production") {
  Rect.propTypes = {
    children: _propTypes.func,
    observe: _propTypes.bool,
    onChange: _propTypes.func
  };
}

function useRect(nodeRef, observe, onChange) {
  if (observe === void 0) {
    observe = true;
  }

  var _useState = (0, _react.useState)(null),
      rect = _useState[0],
      setRect = _useState[1];

  var observerRef = (0, _react.useRef)(null);
  (0, _react.useLayoutEffect)(function () {
    var cleanup = function cleanup() {
      observerRef.current && observerRef.current.unobserve();
    };

    if (!nodeRef.current) {
      console.warn("You need to place the ref");
      return cleanup;
    }

    if (!observerRef.current && nodeRef.current) {
      observerRef.current = (0, _observeRect["default"])(nodeRef.current, function (rect) {
        onChange && onChange(rect);
        setRect(rect);
      });
    }

    observe && observerRef.current.observe();
    return cleanup; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [observe, onChange]);
  return rect;
}

var _default = Rect;
exports["default"] = _default;