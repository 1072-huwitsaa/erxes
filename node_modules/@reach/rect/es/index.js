import React, { useRef, useState, useLayoutEffect } from "react";
import observeRect from "@reach/observe-rect";
import { func, bool } from "prop-types";

var Rect = function Rect(_ref) {
  var onChange = _ref.onChange,
      observe = _ref.observe,
      children = _ref.children;
  var ref = React.useRef(null);
  var rect = useRect(ref, observe, onChange);
  return children({
    ref: ref,
    rect: rect
  });
};

Rect.defaultProps = {
  observe: true
};

if (process.env.NODE_ENV !== "production") {
  Rect.propTypes = {
    children: func,
    observe: bool,
    onChange: func
  };
}

export function useRect(nodeRef, observe, onChange) {
  if (observe === void 0) {
    observe = true;
  }

  var _useState = useState(null),
      rect = _useState[0],
      setRect = _useState[1];

  var observerRef = useRef(null);
  useLayoutEffect(function () {
    var cleanup = function cleanup() {
      observerRef.current && observerRef.current.unobserve();
    };

    if (!nodeRef.current) {
      console.warn("You need to place the ref");
      return cleanup;
    }

    if (!observerRef.current && nodeRef.current) {
      observerRef.current = observeRect(nodeRef.current, function (rect) {
        onChange && onChange(rect);
        setRect(rect);
      });
    }

    observe && observerRef.current.observe();
    return cleanup; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [observe, onChange]);
  return rect;
}
export default Rect;