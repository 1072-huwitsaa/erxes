"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.init = exports.sendMessage = exports.sendRPCMessage = exports.consumeRPCQueue = exports.consumeQueue = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var amqplib = _interopRequireWildcard(require("amqplib"));

var _uuid = require("uuid");

var _debuggers = require("./debuggers");

var channel;

var consumeQueue = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(queueName, callback) {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return channel.assertQueue(queueName);

          case 2:
            channel.consume(queueName, /*#__PURE__*/function () {
              var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(msg) {
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (msg !== null) {
                          callback(JSON.parse(msg.content.toString()), msg);
                          channel.ack(msg);
                        }

                      case 1:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x3) {
                return _ref2.apply(this, arguments);
              };
            }());

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function consumeQueue(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.consumeQueue = consumeQueue;

var consumeRPCQueue = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(queueName, callback) {
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return channel.assertQueue(queueName);

          case 2:
            channel.consume(queueName, /*#__PURE__*/function () {
              var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(msg) {
                var response;
                return _regenerator["default"].wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!(msg !== null)) {
                          _context3.next = 7;
                          break;
                        }

                        (0, _debuggers.debugBase)("Received rpc queue message ".concat(msg.content.toString()));
                        _context3.next = 4;
                        return callback(JSON.parse(msg.content.toString()));

                      case 4:
                        response = _context3.sent;
                        channel.sendToQueue(msg.properties.replyTo, Buffer.from(JSON.stringify(response)), {
                          correlationId: msg.properties.correlationId
                        });
                        channel.ack(msg);

                      case 7:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              return function (_x6) {
                return _ref4.apply(this, arguments);
              };
            }());

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function consumeRPCQueue(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

exports.consumeRPCQueue = consumeRPCQueue;

var sendRPCMessage = /*#__PURE__*/function () {
  var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(queueName, message) {
    var response;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            (0, _debuggers.debugBase)("Sending rpc message ".concat(JSON.stringify(message), " to queue ").concat(queueName));
            _context5.next = 3;
            return new Promise(function (resolve, reject) {
              var correlationId = (0, _uuid.v4)();
              return channel.assertQueue("", {
                exclusive: true
              }).then(function (q) {
                channel.consume(q.queue, function (msg) {
                  if (!msg) {
                    return reject(new Error("consumer cancelled by rabbitmq"));
                  }

                  if (msg.properties.correlationId === correlationId) {
                    var res = JSON.parse(msg.content.toString());

                    if (res.status === "success") {
                      resolve(res.data);
                    } else {
                      reject(new Error(res.errorMessage));
                    }

                    channel.deleteQueue(q.queue);
                  }
                }, {
                  noAck: true
                });
                channel.sendToQueue(queueName, Buffer.from(JSON.stringify(message)), {
                  correlationId: correlationId,
                  replyTo: q.queue
                });
              });
            });

          case 3:
            response = _context5.sent;
            return _context5.abrupt("return", response);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function sendRPCMessage(_x7, _x8) {
    return _ref5.apply(this, arguments);
  };
}();

exports.sendRPCMessage = sendRPCMessage;

var sendMessage = /*#__PURE__*/function () {
  var _ref6 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(queueName, data) {
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            (0, _debuggers.debugBase)("Sending message to ".concat(queueName));
            _context6.next = 3;
            return channel.assertQueue(queueName);

          case 3:
            _context6.next = 5;
            return channel.sendToQueue(queueName, Buffer.from(JSON.stringify(data || {})));

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function sendMessage(_x9, _x10) {
    return _ref6.apply(this, arguments);
  };
}();

exports.sendMessage = sendMessage;

var init = /*#__PURE__*/function () {
  var _ref7 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(RABBITMQ_HOST) {
    var connection;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return amqplib.connect(RABBITMQ_HOST);

          case 2:
            connection = _context7.sent;
            _context7.next = 5;
            return connection.createChannel();

          case 5:
            channel = _context7.sent;

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function init(_x11) {
    return _ref7.apply(this, arguments);
  };
}();

exports.init = init;