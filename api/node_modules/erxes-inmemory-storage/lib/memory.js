"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.removeKey = exports.getArray = exports.removeFromArray = exports.addToArray = exports.inArray = exports.set = exports.get = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var storage = {};
/*
 * Get item
 */

var get = function get(key, defaultValue) {
  return new Promise(function (resolve) {
    var value = storage[key];
    return resolve(value || defaultValue);
  });
};
/*
 * Set item
 */


exports.get = get;

var set = function set(key, value) {
  storage[key] = value;
};
/*
 * Check if value exists in set
 */


exports.set = set;

var inArray = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(setKey, setMember) {
    var value;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            value = storage[setKey];

            if (value) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", false);

          case 3:
            return _context.abrupt("return", value.includes(setMember));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function inArray(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/*
 * Add a value to a set or do nothing if it already exists
 */


exports.inArray = inArray;

var addToArray = function addToArray(setKey, setMember) {
  var value = storage[setKey];

  if (value) {
    value.push(setMember);
  }
};
/*
 * Remove a value from a set or do nothing if it is not present
 */


exports.addToArray = addToArray;

var removeFromArray = function removeFromArray(setKey, setMember) {
  var value = storage[setKey];

  if (value) {
    value.filter(function (m) {
      return m !== setMember;
    });
  }
};

exports.removeFromArray = removeFromArray;

var getArray = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(key) {
    var defaultValue,
        value,
        _args2 = arguments;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            defaultValue = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];
            value = storage[key];

            if (!Array.isArray(value)) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", value);

          case 4:
            return _context2.abrupt("return", defaultValue);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getArray(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getArray = getArray;

var removeKey = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(key) {
    var selectedKey;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            selectedKey = storage[key];

            if (selectedKey) {
              delete storage[key];
            }

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function removeKey(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

exports.removeKey = removeKey;