"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = exports.init = exports.redisOptions = void 0;

var redis = _interopRequireWildcard(require("redis"));

var memoryClient = _interopRequireWildcard(require("./memory"));

var redisClient = _interopRequireWildcard(require("./redis"));

;
;
var redisOptions = {
  connect_timeout: 20000,
  enable_offline_queue: true,
  retry_unfulfilled_commands: true,
  retry_strategy: function retry_strategy(options) {
    return Math.max(options.attempt * 100, 3000);
  }
};
exports.redisOptions = redisOptions;

var init = function init() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (options.host) {
    redisOptions.host = options.host;
    redisOptions.port = options.port;
    redisOptions.password = options.password;

    if (options.timeout) {
      redisOptions.connect_timeout = options.timeout;
    }

    if (options.enableOfflineQueue) {
      redisOptions.enable_offline_queue = options.enableOfflineQueue;
    }

    if (options.retryUnfulfilledCommands) {
      redisOptions.retry_unfulfilled_commands = options.retryUnfulfilledCommands;
    }

    if (options.retryStrategy) {
      redisOptions.retry_strategy = options.retryStrategy;
    }

    redisClient.init(redis.createClient(redisOptions));
    return redisClient;
  } else {
    return memoryClient;
  }
};

exports.init = init;
var _default = init;
exports["default"] = _default;