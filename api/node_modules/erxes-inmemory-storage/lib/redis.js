"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.removeKey = exports.removeFromArray = exports.addToArray = exports.inArray = exports.getArray = exports.set = exports.get = exports.init = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var client;

var init = function init(redisClient) {
  client = redisClient;
};
/*
 * Get item
 */


exports.init = init;

var get = function get(key, defaultValue) {
  return new Promise(function (resolve, reject) {
    client.get(key, function (error, reply) {
      if (error) {
        return reject(error);
      }

      return resolve(reply && reply !== 'nil' ? reply : defaultValue);
    });
  });
};
/*
 * Set item
 */


exports.get = get;

var set = function set(key, value) {
  client.set(key, value);
};
/*
 * Get array of values by given key
 */


exports.set = set;

var getArray = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(key) {
    var defaultValue,
        response,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            defaultValue = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];
            _context.prev = 1;
            _context.next = 4;
            return new Promise(function (resolve, reject) {
              client.smembers(key, function (error, reply) {
                if (error) {
                  return reject(error);
                }

                return resolve(reply && reply !== 'nil' ? reply : defaultValue);
              });
            });

          case 4:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](1);
            return _context.abrupt("return", false);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 8]]);
  }));

  return function getArray(_x) {
    return _ref.apply(this, arguments);
  };
}();
/*
 * Check if value exists in set
 */


exports.getArray = getArray;

var inArray = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(setKey, setMember) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return new Promise(function (resolve, reject) {
              client.sismember(setKey, setMember, function (error, reply) {
                if (error) {
                  return reject(error);
                }

                return resolve(reply);
              });
            });

          case 3:
            response = _context2.sent;
            return _context2.abrupt("return", response);

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);

            if (_context2.t0.message.includes('WRONGTYPE')) {
              client.del(setKey);
            }

            return _context2.abrupt("return", false);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7]]);
  }));

  return function inArray(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
/*
 * Add a value to a set or do nothing if it already exists
 */


exports.inArray = inArray;

var addToArray = function addToArray(setKey, setMember) {
  return new Promise(function (resolve, reject) {
    client.sadd(setKey, setMember, function (error, reply) {
      if (error) {
        return reject(error);
      }

      return resolve(reply);
    });
  });
};
/*
 * Remove a value from a set or do nothing if it is not present
 */


exports.addToArray = addToArray;

var removeFromArray = function removeFromArray(setKey, setMember) {
  return new Promise(function (resolve, reject) {
    client.srem(setKey, setMember, function (error, reply) {
      if (error) {
        return reject(error);
      }

      return resolve(reply);
    });
  });
};

exports.removeFromArray = removeFromArray;

var removeKey = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(key) {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", new Promise(function (resolve, reject) {
              client.del(key, function (error, response) {
                if (error) {
                  return reject(error);
                }

                if (response === 1) {
                  return resolve('success');
                }
              });
            }));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function removeKey(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

exports.removeKey = removeKey;